[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I killed the hung process, started it again, let it get to within 4 blocks of the point it crashes, shut it down cleanly, then restarted it again. It crashed again, but got a few blocks further this time, getting to `height=485586` as opposed to 485584 last time. Also this time the error dialog showed the error message, and I was able to click it to exit bitcoin-qt cleanly.\r\n\r\n![screenshot_2017-09-16_13-08-09](https://user-images.githubusercontent.com/573356/30515629-bdf7397a-9ae0-11e7-9998-c2f7161f9b3c.png)\r\n",
      "created_at" : "2017-09-16T20:13:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/11355#issuecomment-329992182",
      "id" : 329992182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11355",
      "updated_at" : "2017-09-16T20:13:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/329992182",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I set a breakpoint:\r\n\r\n    (gdb) br leveldb::Status::Corruption\r\n    Breakpoint 3 at 0x555555acd1a2: leveldb::Status::Corruption. (9 locations)\r\n\r\nIt was hit:\r\n\r\n    Thread 20 \"bitcoin-msghand\" hit Breakpoint 4, leveldb::ReadBlock (file=<optimized out>, options=..., handle=..., result=0x7fffa6702378)\r\n        at leveldb/table/format.cc:95\r\n    95\t      s = Status::Corruption(\"block checksum mismatch\");\r\n    (gdb) where\r\n    #0  leveldb::ReadBlock (file=<optimized out>, options=..., handle=..., result=0x7fffa6702378) at leveldb/table/format.cc:95\r\n    #1  0x0000555555acd9f9 in leveldb::Table::BlockReader (arg=0x7fff8c176830, options=..., index_value=...) at leveldb/table/table.cc:189\r\n    #2  0x0000555555acde21 in leveldb::Table::InternalGet (this=0x7fff8c176830, options=..., k=..., arg=<optimized out>, saver=<optimized out>)\r\n        at leveldb/table/table.cc:241\r\n    #3  0x0000555555abf37c in leveldb::TableCache::Get (this=0x7fffb7560680, options=..., file_number=<optimized out>, file_size=<optimized out>, k=..., arg=0x140, \r\n        saver=0x7) at leveldb/db/table_cache.cc:115\r\n    #4  0x0000555555ac237a in leveldb::Version::Get (this=<optimized out>, options=..., k=..., value=<optimized out>, stats=<optimized out>)\r\n        at leveldb/db/version_set.cc:408\r\n    #5  0x0000555555ab6bf3 in leveldb::DBImpl::Get (this=0x7fffb7560940, options=..., key=..., value=0x7fffa67029e0) at leveldb/db/db_impl.cc:1141\r\n    #6  0x000055555588f609 in CDBWrapper::Read<(anonymous namespace)::CoinEntry, Coin> (this=<optimized out>, key=..., value=...) at ./dbwrapper.h:233\r\n    #7  CCoinsViewDB::GetCoin (this=0x7fffb755f2e0, outpoint=..., coin=...) at txdb.cpp:62\r\n    #8  0x0000555555a50107 in CCoinsViewBacked::GetCoin (this=<optimized out>, outpoint=..., coin=...) at coins.cpp:26\r\n    #9  0x000055555575c077 in CCoinsViewErrorCatcher::GetCoin (this=0x7fff8c000000, outpoint=..., coin=...) at init.cpp:141\r\n    #10 0x0000555555a50462 in CCoinsViewCache::FetchCoin (this=0x7fffb75641b0, outpoint=...) at coins.cpp:48\r\n    #11 0x0000555555a50549 in CCoinsViewCache::GetCoin (this=0x7fff8c000000, outpoint=..., coin=...) at coins.cpp:61\r\n    #12 0x0000555555a50462 in CCoinsViewCache::FetchCoin (this=0x7fffa6704440, outpoint=...) at coins.cpp:48\r\n    #13 0x0000555555a50b03 in CCoinsViewCache::HaveCoin (this=0x7fff8c000000, outpoint=...) at coins.cpp:129\r\n    #14 0x0000555555a51254 in CCoinsViewCache::HaveInputs (this=<optimized out>, tx=...) at coins.cpp:240\r\n    #15 0x00005555558d3210 in ConnectBlock (block=..., state=..., pindex=<optimized out>, view=..., chainparams=..., fJustCheck=<optimized out>) at validation.cpp:1763\r\n    #16 0x00005555558c676e in ConnectTip (state=..., chainparams=..., pindexNew=<optimized out>, connectTrace=..., disconnectpool=..., pblock=...)\r\n        at validation.cpp:2209\r\n    #17 ActivateBestChainStep (state=..., chainparams=..., pindexMostWork=<optimized out>, pblock=..., fInvalidFound=<optimized out>, connectTrace=...)\r\n        at validation.cpp:2354\r\n    #18 0x00005555558c5ad4 in ActivateBestChain (state=..., chainparams=..., pblock=...) at validation.cpp:2454\r\n    #19 0x00005555558cff58 in ProcessNewBlock (chainparams=..., pblock=warning: RTTI symbol not found for class 'std::_Sp_counted_ptr_inplace<CBlock, std::allocator<CBlock>, (__gnu_cxx::_Lock_policy)2>'\r\n    warning: RTTI symbol not found for class 'std::_Sp_counted_ptr_inplace<CBlock, std::allocator<CBlock>, (__gnu_cxx::_Lock_policy)2>'\r\n    std::shared_ptr (count 6, weak 0) 0x7fff8cd638e0, fForceProcessing=<optimized out>, \r\n        fNewBlock=0x7fffa6704aaf) at validation.cpp:3199\r\n    #20 0x00005555557beabf in ProcessMessage (pfrom=<optimized out>, strCommand=..., vRecv=..., nTimeReceived=<optimized out>, chainparams=..., \r\n        connman=<optimized out>, interruptMsgProc=...) at net_processing.cpp:2391\r\n    #21 0x00005555557adf12 in PeerLogicValidation::ProcessMessages (this=0x7fffc8410440, pfrom=0x7fff980008c0, interruptMsgProc=...) at net_processing.cpp:2718\r\n    #22 0x00005555557da037 in non-virtual thunk to PeerLogicValidation::ProcessMessages(CNode*, std::atomic<bool>&) () at net_processing.cpp:2643\r\n    #23 0x000055555578967b in CConnman::ThreadMessageHandler (this=<optimized out>) at net.cpp:1995\r\n    #24 0x00005555557a44ba in std::__invoke_impl<void, void (CConnman::* const&)(), CConnman*&> (__f=<optimized out>, __t=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:227\r\n    #25 std::__invoke<void (CConnman::* const&)(), CConnman*&> (__fn=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:250\r\n    #26 std::_Mem_fn_base<void (CConnman::*)(), true>::operator()<CConnman*&> (this=<optimized out>, __args=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:604\r\n    #27 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::__call<void, , 0ul>(std::tuple<>&&, std::_Index_tuple<0ul>) (this=<optimized out>, \r\n        __args=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:933\r\n    #28 std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)>::operator()<, void>() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:991\r\n    #29 std::_Function_handler<void (), std::_Bind<std::_Mem_fn<void (CConnman::*)()> (CConnman*)> >::_M_invoke(std::_Any_data const&) (__functor=...)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1731\r\n    #30 0x0000555555758e3d in std::function<void ()>::operator()() const (this=0x7fffa670bd00)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:2127\r\n    #31 TraceThread<std::function<void ()> >(char const*, std::function<void ()>) (name=<optimized out>, func=...) at ./util.h:309\r\n    #32 0x00005555557a467d in std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::_M_invoke<0ul, 1ul>(std::_Index_tuple<0ul, 1ul>) (this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1390\r\n    #33 std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)>::operator()() (this=<optimized out>)\r\n        at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/functional:1380\r\n    #34 std::thread::_State_impl<std::_Bind_simple<void (*(char const*, std::function<void ()>))(char const*, std::function<void ()>)> >::_M_run() (\r\n        this=<optimized out>) at /usr/bin/../lib/gcc/x86_64-linux-gnu/6.3.0/../../../../include/c++/6.3.0/thread:197\r\n    #35 0x00007ffff452ce6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n    #36 0x00007ffff56f9494 in start_thread (arg=0x7fffa670c700) at pthread_create.c:333\r\n    #37 0x00007ffff3ca1aff in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n    (gdb) \r\n\r\nSo it does look like my chainstate db is corrupted again doesn't it? I wonder if there's something wrong with the code that's causing this corruption. Should the db be able to get corrupted from random crashes?",
      "created_at" : "2017-09-16T20:22:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/11355#issuecomment-329992636",
      "id" : 329992636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11355",
      "updated_at" : "2017-09-16T20:22:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/329992636",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have two separate Bitcoin data directories. One is a full node (and that's the one which is failing) and the other is pruned (`prune=600`).\r\n\r\nIs it safe to copy the `chainstate` folder from the pruned datadir into the full node's datadir to fix this corruption issue? Or do I need to run the >24h chainstate reindex thing again?\r\n\r\nEdit: it appears to have worked. I did this:\r\n\r\n* made a bootstrap.dat file that I used to sync the pruned node to the point where it returns the same for 'getblockcount' as the corrupted full node gives\r\n* stopped both nodes\r\n* deleted the corrupted chainstate folder\r\n* copied the pruned node's chainstate folder into the full node\r\n\r\nThen when I started the full node, it was able to continue syncing past the point it was previously failing.\r\n\r\nSo that seems like a good cheap way of recovering from chainstate db corruption, if you don't mind wasting the extra ~4GB of space for an extra pruned node. It can sync from the full node, so needn't add to your bandwidth requirements.",
      "created_at" : "2017-09-16T20:31:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/11355#issuecomment-329993047",
      "id" : 329993047,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11355",
      "updated_at" : "2017-09-16T22:19:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/329993047",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/573356?v=4",
         "events_url" : "https://api.github.com/users/dooglus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dooglus/followers",
         "following_url" : "https://api.github.com/users/dooglus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dooglus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dooglus",
         "id" : 573356,
         "login" : "dooglus",
         "organizations_url" : "https://api.github.com/users/dooglus/orgs",
         "received_events_url" : "https://api.github.com/users/dooglus/received_events",
         "repos_url" : "https://api.github.com/users/dooglus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dooglus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dooglus"
      }
   }
]
