[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17507#discussion_r347449119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17507"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347449119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Very good :+1: ",
      "commit_id" : "55b2cb199c276781b6daa5438af2da57dea3ac52",
      "created_at" : "2019-11-18T15:35:42Z",
      "diff_hunk" : "@@ -450,17 +450,7 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n \n /* A note on the use of noexcept in the seeding functions below:\n  *\n- * None of the RNG code should ever throw any exception, with the sole exception\n- * of MilliSleep in SeedSleep, which can (and does) support interruptions which\n- * cause a boost::thread_interrupted to be thrown.\n- *\n- * This means that SeedSleep, and all functions that invoke it are throwing.\n- * However, we know that GetRandBytes() and GetStrongRandBytes() never trigger\n- * this sleeping logic, so they are noexcept. The same is true for all the\n- * GetRand*() functions that use GetRandBytes() indirectly.\n- *\n- * TODO: After moving away from interruptible boost-based thread management,\n- * everything can become noexcept here.\n+ * None of the RNG code should ever throw any exception.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17507#discussion_r347449119",
      "id" : 347449119,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0NzQ0OTExOQ==",
      "original_commit_id" : "55b2cb199c276781b6daa5438af2da57dea3ac52",
      "original_position" : 24,
      "path" : "src/random.cpp",
      "position" : 24,
      "pull_request_review_id" : 318421377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17507",
      "updated_at" : "2019-11-18T15:35:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/347449119",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 55b2cb199c276781b6daa5438af2da57dea3ac52\r\n\r\nVery nice!\r\n\r\nSomewhat related: it would be nice to have the same explicit guarantee for `LogPrint`/`LogPrintf`. That would allow compilers and static analyzers to treat a larger parts of our code base as \"non-throwing\" instead of \"potentially throwing\" :)",
      "created_at" : "2019-11-18T15:49:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17507#issuecomment-555075885",
      "id" : 555075885,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17507",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NTA3NTg4NQ==",
      "updated_at" : "2019-11-18T15:49:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555075885",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
