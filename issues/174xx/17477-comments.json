[
   {
      "author_association" : "MEMBER",
      "body" : "Request review from @TheBlueMatt and @morcos\r\n\r\n@TheBlueMatt - you introduced the vtxConflicted vector in BlockConnected in 461e49fee2935b1eb4d4ea7bae3023e655c0a6d8 with comment 'This change adds a parameter to BlockConnectedDisconnected which lists the transactions which were removed from mempool due to confliction as a result of this operation. While its somewhat of a shame to make block-validation-logic generate a list of mempool changes to be included in its generated callbacks, fixing this isnt too hard.'\r\n\r\n@morcos - you attempted something similar in #9240",
      "created_at" : "2019-11-14T16:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-553963425",
      "id" : 553963425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1Mzk2MzQyNQ==",
      "updated_at" : "2019-11-14T16:23:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/553963425",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17261](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17261.html) (Make ScriptPubKeyMan an actual interface and the wallet to have multiple by achow101)\n* [#16688](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16688.html) (log: Add validation interface logging by jkczyz)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-11-14T19:16:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554037194",
      "id" : 554037194,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDAzNzE5NA==",
      "updated_at" : "2019-11-14T19:16:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554037194",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Note that this can change the order of notifications for the wallet. If the node connects block A with conflicted txs a1 a2 and block B with conflicted txs b1 and b2 in one ActivateBestChainStep, the old ordering would be:\r\n\r\n- BlockConnected(A(conflicted=[a1,a2]))\r\n- BlockConnected(B(conflivted=[b1,b2]))\r\n\r\nand the new ordering is:\r\n\r\n- TransactionRemovedFromMempool(a1)\r\n- TransactionRemovedFromMempool(a2)\r\n- TransactionRemovedFromMempool(b1)\r\n- TransactionRemovedFromMempool(b2)\r\n- BlockConnected(A)\r\n- BlockConnected(B)\r\n\r\nI'm pretty sure that's not a problem. Take a look at how the wallet currently handles conflicted transactions in the `BlockConnected()` callback:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/cd6cb9745e13a62e130b11f78a13bcc1d424b05e/src/wallet/wallet.cpp#L1084\r\n\r\nAll the `TransactionRemovedFromMempool` does is toggle the `fInMempool` flag to false. ",
      "created_at" : "2019-11-14T19:27:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554041672",
      "id" : 554041672,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDA0MTY3Mg==",
      "updated_at" : "2019-11-14T19:27:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554041672",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I'm pretty sure that's not a problem\r\n\r\nAre you sure about that? Note that change that is unconfirmed and not in the mempool is not counted toward our balance, so this would open up race conditions where a `send*` might fail when there is no reason for it to fail.",
      "created_at" : "2019-11-14T19:39:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554046319",
      "id" : 554046319,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDA0NjMxOQ==",
      "updated_at" : "2019-11-14T19:39:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554046319",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> this would open up race conditions where a send* might fail when there is no reason for it to fail.\r\n\r\nI don't think that's true:\r\n\r\n- Before this change: conflicted transactions are marked as not in the mempool when the wallet hears about them in a `BlockConnected`'s `vtxConflicted` vector.\r\n- After this change: conflicted transactions are marked as not in the mempool slightly earlier when the wallet hears about them in a `TransactionRemovedFromMempool` callback.\r\n\r\nIn both of those cases, the change output is unspendable because it conflicts with a transaction included in the block, but in the current code the wallet doesn't know about it until slightly later. So arguably there's a window condition in the existing code where the wallet might try to spend change that it thinks is in the mempool, but is actually conflicted with the latest block (although in practice this doesn't matter - it's always the case that there might be a better block that conflicts our transactions that we just don't know about yet).\r\n\r\n(If this PR was changing the way we notify the wallet about transactions removed from the mempool because they're included in a block, then I'd agree with you. We don't want to introduce a window where the wallet knows the transaction is no longer in the mempool but doesn't yet know that it's in a block.)",
      "created_at" : "2019-11-15T02:38:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554184168",
      "id" : 554184168,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDE4NDE2OA==",
      "updated_at" : "2019-11-15T02:38:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554184168",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> So arguably there's a window condition in the existing code where the wallet might try to spend change that it thinks is in the mempool, but is actually conflicted with the latest block (although in practice this doesn't matter - it's always the case that there might be a better block that conflicts our transactions that we just don't know about yet).\r\n\r\nWhat if the user set min_conf to 1000 and rbf to false for that tx that spends the change that is only available for a short time erroneously? With those settings, the user should expect to create a transaction that could never possibly fail, no?",
      "created_at" : "2019-11-15T13:29:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554358670",
      "id" : 554358670,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDM1ODY3MA==",
      "updated_at" : "2019-11-15T13:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554358670",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> What if the user set min_conf to 1000 and rbf to false for that tx that spends the change that is only available for a short time erroneously? With those settings, the user should expect to create a transaction that could never possibly fail, no?\r\n\r\nMaybe I don't fully understand the scenario you're describing, but if the tx is spending change that has been conflicted out of the mempool but the wallet has not yet been notified then that transaction will definitely fail, since it's spending an output that doesn't exist in the main chain.\r\n\r\nEssentially, the difference for the wallet in this PR is that it'll get notified slightly earlier about transactions (and therefore possibly unconfirmed change outputs that it owns) that have been conflicted out of the mempool slightly before it is notified about the block that conflicts them. I can't think of any way that would cause windows of undesirable behaviour.",
      "created_at" : "2019-11-15T13:51:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17477#issuecomment-554365732",
      "id" : 554365732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17477",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU1NDM2NTczMg==",
      "updated_at" : "2019-11-15T13:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/554365732",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
