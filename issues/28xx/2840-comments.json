[
   {
      "body" : "Added a few more lock improvements.",
      "created_at" : "2013-07-25T00:40:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-21526573",
      "id" : 21526573,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-07-25T00:40:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21526573",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Rebased.",
      "created_at" : "2013-08-15T22:24:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-22735325",
      "id" : 22735325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-08-15T22:24:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Does this make the code more stable or is it a performance-improving patch? That locking stuff isn't my main expertise ^^.",
      "created_at" : "2013-08-17T12:03:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-22810513",
      "id" : 22810513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-08-17T12:03:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "@Diapolo It improves performance/throughput, by allowing more code to run without needing the cs_main lock, and conversely, holding that lock for a shorter time, so more other code can run in parallel.\r\n\r\nAt this point the improvements may not be noticable, but if we ever want a decently parallellizable core, we can't avoid doing this everywhere it's possible.",
      "created_at" : "2013-08-18T00:22:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-22822345",
      "id" : 22822345,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-08-18T00:23:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822345",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Rebased.\r\n\r\nPS: the first commit may look large, but it really just changes some indentation. If needed, I can make a version that keeps the indentation identical for now.",
      "created_at" : "2013-10-14T23:19:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-26296967",
      "id" : 26296967,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-10-14T23:19:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26296967",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/2840#discussion_r6961842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/2840"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/6961842"
         }
      },
      "body" : "Should be LogPrint(\"net\", ...)\r\n",
      "commit_id" : "7d38af3c493f9ea24c722ec2e6d3c51f4e851364",
      "created_at" : "2013-10-15T03:09:28Z",
      "diff_hunk" : "@@ -4135,190 +4147,190 @@ bool ProcessMessages(CNode* pfrom)\n \n bool SendMessages(CNode* pto, bool fSendTrickle)\n {\n-    TRY_LOCK(cs_main, lockMain);\n-    if (lockMain) {\n-        // Don't send anything until we get their version message\n-        if (pto->nVersion == 0)\n-            return true;\n-\n-        //\n-        // Message: ping\n-        //\n-        bool pingSend = false;\n-        if (pto->fPingQueued) {\n-            // RPC ping request by user\n-            pingSend = true;\n-        }\n-        if (pto->nLastSend && GetTime() - pto->nLastSend > 30 * 60 && pto->vSendMsg.empty()) {\n-            // Ping automatically sent as a keepalive\n-            pingSend = true;\n-        }\n-        if (pingSend) {\n-            uint64 nonce = 0;\n-            while (nonce == 0) {\n-                RAND_bytes((unsigned char*)&nonce, sizeof(nonce));\n-            }\n-            pto->nPingNonceSent = nonce;\n-            pto->fPingQueued = false;\n-            if (pto->nVersion > BIP0031_VERSION) {\n-                // Take timestamp as close as possible before transmitting ping\n-                pto->nPingUsecStart = GetTimeMicros();\n-                pto->PushMessage(\"ping\", nonce);\n-            } else {\n-                // Peer is too old to support ping command with nonce, pong will never arrive, disable timing\n-                pto->nPingUsecStart = 0;\n-                pto->PushMessage(\"ping\");\n-            }\n-        }\n+    // Don't send anything until we get their version message\n+    if (pto->nVersion == 0)\n+        return true;\n \n-        // Start block sync\n-        if (pto->fStartSync && !fImporting && !fReindex) {\n-            pto->fStartSync = false;\n-            PushGetBlocks(pto, pindexBest, uint256(0));\n+    //\n+    // Message: ping\n+    //\n+    bool pingSend = false;\n+    if (pto->fPingQueued) {\n+        // RPC ping request by user\n+        pingSend = true;\n+    }\n+    if (pto->nLastSend && GetTime() - pto->nLastSend > 30 * 60 && pto->vSendMsg.empty()) {\n+        // Ping automatically sent as a keepalive\n+        pingSend = true;\n+    }\n+    if (pingSend) {\n+        uint64 nonce = 0;\n+        while (nonce == 0) {\n+            RAND_bytes((unsigned char*)&nonce, sizeof(nonce));\n         }\n-\n-        // Resend wallet transactions that haven't gotten in a block yet\n-        // Except during reindex, importing and IBD, when old wallet\n-        // transactions become unconfirmed and spams other nodes.\n-        if (!fReindex && !fImporting && !IsInitialBlockDownload())\n-        {\n-            ResendWalletTransactions();\n+        pto->nPingNonceSent = nonce;\n+        pto->fPingQueued = false;\n+        if (pto->nVersion > BIP0031_VERSION) {\n+            // Take timestamp as close as possible before transmitting ping\n+            pto->nPingUsecStart = GetTimeMicros();\n+            pto->PushMessage(\"ping\", nonce);\n+        } else {\n+            // Peer is too old to support ping command with nonce, pong will never arrive, disable timing\n+            pto->nPingUsecStart = 0;\n+            pto->PushMessage(\"ping\");\n         }\n+    }\n \n-        // Address refresh broadcast\n-        static int64 nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n+    // Address refresh broadcast\n+    static int64 nLastRebroadcast;\n+    if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n+    {\n         {\n+            LOCK(cs_vNodes);\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                {\n-                    // Periodically clear setAddrKnown to allow refresh broadcasts\n-                    if (nLastRebroadcast)\n-                        pnode->setAddrKnown.clear();\n+                // Periodically clear setAddrKnown to allow refresh broadcasts\n+                if (nLastRebroadcast)\n+                    pnode->setAddrKnown.clear();\n \n-                    // Rebroadcast our address\n-                    if (!fNoListen)\n-                    {\n-                        CAddress addr = GetLocalAddress(&pnode->addr);\n-                        if (addr.IsRoutable())\n-                            pnode->PushAddress(addr);\n-                    }\n+                // Rebroadcast our address\n+                if (!fNoListen)\n+                {\n+                    CAddress addr = GetLocalAddress(&pnode->addr);\n+                    if (addr.IsRoutable())\n+                        pnode->PushAddress(addr);\n                 }\n             }\n-            nLastRebroadcast = GetTime();\n         }\n+        nLastRebroadcast = GetTime();\n+    }\n \n-        //\n-        // Message: addr\n-        //\n-        if (fSendTrickle)\n+    //\n+    // Message: addr\n+    //\n+    if (fSendTrickle)\n+    {\n+        vector<CAddress> vAddr;\n+        vAddr.reserve(pto->vAddrToSend.size());\n+        BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n         {\n-            vector<CAddress> vAddr;\n-            vAddr.reserve(pto->vAddrToSend.size());\n-            BOOST_FOREACH(const CAddress& addr, pto->vAddrToSend)\n+            // returns true if wasn't already contained in the set\n+            if (pto->setAddrKnown.insert(addr).second)\n             {\n-                // returns true if wasn't already contained in the set\n-                if (pto->setAddrKnown.insert(addr).second)\n+                vAddr.push_back(addr);\n+                // receiver rejects addr messages larger than 1000\n+                if (vAddr.size() >= 1000)\n                 {\n-                    vAddr.push_back(addr);\n-                    // receiver rejects addr messages larger than 1000\n-                    if (vAddr.size() >= 1000)\n-                    {\n-                        pto->PushMessage(\"addr\", vAddr);\n-                        vAddr.clear();\n-                    }\n+                    pto->PushMessage(\"addr\", vAddr);\n+                    vAddr.clear();\n                 }\n             }\n-            pto->vAddrToSend.clear();\n-            if (!vAddr.empty())\n-                pto->PushMessage(\"addr\", vAddr);\n         }\n+        pto->vAddrToSend.clear();\n+        if (!vAddr.empty())\n+            pto->PushMessage(\"addr\", vAddr);\n+    }\n \n+    TRY_LOCK(cs_main, lockMain);\n \n-        //\n-        // Message: inventory\n-        //\n-        vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n-        {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(pto->vInventoryToSend.size());\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (pto->setInventoryKnown.count(inv))\n-                    continue;\n+    if (!lockMain)\n+        return true;\n \n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt == 0)\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = inv.hash ^ hashSalt;\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((hashRand & 3) != 0);\n+    // Start block sync\n+    if (pto->fStartSync && !fImporting && !fReindex) {\n+        pto->fStartSync = false;\n+        PushGetBlocks(pto, pindexBest, uint256(0));\n+    }\n \n-                    // always trickle our own transactions\n-                    if (!fTrickleWait)\n-                    {\n-                        CWalletTx wtx;\n-                        if (GetTransaction(inv.hash, wtx))\n-                            if (wtx.fFromMe)\n-                                fTrickleWait = true;\n-                    }\n+    // Resend wallet transactions that haven't gotten in a block yet\n+    // Except during reindex, importing and IBD, when old wallet\n+    // transactions become unconfirmed and spams other nodes.\n+    if (!fReindex && !fImporting && !IsInitialBlockDownload())\n+    {\n+        ResendWalletTransactions();\n+    }\n \n-                    if (fTrickleWait)\n-                    {\n-                        vInvWait.push_back(inv);\n-                        continue;\n-                    }\n+    //\n+    // Message: inventory\n+    //\n+    vector<CInv> vInv;\n+    vector<CInv> vInvWait;\n+    {\n+        LOCK(pto->cs_inventory);\n+        vInv.reserve(pto->vInventoryToSend.size());\n+        vInvWait.reserve(pto->vInventoryToSend.size());\n+        BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n+        {\n+            if (pto->setInventoryKnown.count(inv))\n+                continue;\n+\n+            // trickle out tx inv to protect privacy\n+            if (inv.type == MSG_TX && !fSendTrickle)\n+            {\n+                // 1/4 of tx invs blast to all immediately\n+                static uint256 hashSalt;\n+                if (hashSalt == 0)\n+                    hashSalt = GetRandHash();\n+                uint256 hashRand = inv.hash ^ hashSalt;\n+                hashRand = Hash(BEGIN(hashRand), END(hashRand));\n+                bool fTrickleWait = ((hashRand & 3) != 0);\n+\n+                // always trickle our own transactions\n+                if (!fTrickleWait)\n+                {\n+                    CWalletTx wtx;\n+                    if (GetTransaction(inv.hash, wtx))\n+                        if (wtx.fFromMe)\n+                            fTrickleWait = true;\n                 }\n \n-                // returns true if wasn't already contained in the set\n-                if (pto->setInventoryKnown.insert(inv).second)\n+                if (fTrickleWait)\n                 {\n-                    vInv.push_back(inv);\n-                    if (vInv.size() >= 1000)\n-                    {\n-                        pto->PushMessage(\"inv\", vInv);\n-                        vInv.clear();\n-                    }\n+                    vInvWait.push_back(inv);\n+                    continue;\n                 }\n             }\n-            pto->vInventoryToSend = vInvWait;\n-        }\n-        if (!vInv.empty())\n-            pto->PushMessage(\"inv\", vInv);\n-\n \n-        //\n-        // Message: getdata\n-        //\n-        vector<CInv> vGetData;\n-        int64 nNow = GetTime() * 1000000;\n-        while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n-        {\n-            const CInv& inv = (*pto->mapAskFor.begin()).second;\n-            if (!AlreadyHave(inv))\n+            // returns true if wasn't already contained in the set\n+            if (pto->setInventoryKnown.insert(inv).second)\n             {\n-                if (fDebugNet)\n-                    LogPrint(\"net\", \"sending getdata: %s\\n\", inv.ToString().c_str());\n-                vGetData.push_back(inv);\n-                if (vGetData.size() >= 1000)\n+                vInv.push_back(inv);\n+                if (vInv.size() >= 1000)\n                 {\n-                    pto->PushMessage(\"getdata\", vGetData);\n-                    vGetData.clear();\n+                    pto->PushMessage(\"inv\", vInv);\n+                    vInv.clear();\n                 }\n             }\n-            pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n-        if (!vGetData.empty())\n-            pto->PushMessage(\"getdata\", vGetData);\n+        pto->vInventoryToSend = vInvWait;\n+    }\n+    if (!vInv.empty())\n+        pto->PushMessage(\"inv\", vInv);\n \n+    //\n+    // Message: getdata\n+    //\n+    vector<CInv> vGetData;\n+    int64 nNow = GetTime() * 1000000;\n+    while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+    {\n+        const CInv& inv = (*pto->mapAskFor.begin()).second;\n+        if (!AlreadyHave(inv))\n+        {\n+            if (fDebugNet)\n+                printf(\"sending getdata: %s\\n\", inv.ToString().c_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#discussion_r6961842",
      "id" : 6961842,
      "original_commit_id" : "3d3de38daca854a249b59feec93a7657a7da44fb",
      "original_position" : 400,
      "path" : "src/main.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/2840",
      "updated_at" : "2013-10-15T20:36:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/6961842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Looks good to me except for an errant printf (reviewed using a graphical diff tool-- opendiff on the mac--  using its \"compress whitespace\" preference).",
      "created_at" : "2013-10-15T03:10:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-26306508",
      "id" : 26306508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-10-15T03:10:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26306508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/331997?v=3",
         "events_url" : "https://api.github.com/users/gavinandresen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gavinandresen/followers",
         "following_url" : "https://api.github.com/users/gavinandresen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gavinandresen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gavinandresen",
         "id" : 331997,
         "login" : "gavinandresen",
         "organizations_url" : "https://api.github.com/users/gavinandresen/orgs",
         "received_events_url" : "https://api.github.com/users/gavinandresen/received_events",
         "repos_url" : "https://api.github.com/users/gavinandresen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gavinandresen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gavinandresen"
      }
   },
   {
      "body" : "Modified to not do indentation changes for now.",
      "created_at" : "2013-10-15T08:54:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-26318652",
      "id" : 26318652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-10-15T08:54:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26318652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/7d38af3c493f9ea24c722ec2e6d3c51f4e851364 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.",
      "created_at" : "2013-10-15T21:17:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/2840#issuecomment-26373128",
      "id" : 26373128,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/2840",
      "updated_at" : "2013-10-15T21:17:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26373128",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2110907?v=3",
         "events_url" : "https://api.github.com/users/BitcoinPullTester/events{/privacy}",
         "followers_url" : "https://api.github.com/users/BitcoinPullTester/followers",
         "following_url" : "https://api.github.com/users/BitcoinPullTester/following{/other_user}",
         "gists_url" : "https://api.github.com/users/BitcoinPullTester/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/BitcoinPullTester",
         "id" : 2110907,
         "login" : "BitcoinPullTester",
         "organizations_url" : "https://api.github.com/users/BitcoinPullTester/orgs",
         "received_events_url" : "https://api.github.com/users/BitcoinPullTester/received_events",
         "repos_url" : "https://api.github.com/users/BitcoinPullTester/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/BitcoinPullTester/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/BitcoinPullTester/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/BitcoinPullTester"
      }
   }
]
