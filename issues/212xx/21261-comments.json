[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21160 (net/net processing: Move tx inventory into net_processing by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-02-22T03:17:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-783026889",
      "id" : 783026889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4MzAyNjg4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-03T05:25:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/783026889",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-02-25T08:18:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-785710010",
      "id" : 785710010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4NTcxMDAxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-25T08:18:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/785710010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Will update now that #20197 (on which this is based) and #20685 adding I2P support are both merged.",
      "created_at" : "2021-03-30T16:14:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-810393262",
      "id" : 810393262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgxMDM5MzI2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-30T16:14:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/810393262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, will review more closely soon.",
      "created_at" : "2021-04-29T23:26:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-829668926",
      "id" : 829668926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyOTY2ODkyNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-29T23:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/829668926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625210280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625210280"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Before this PR we would have protected 25% onions. With this PR up to commit 517976187 (inclusive) we would protect 12.5% onions and with the full PR - just 8.3%. What about:\r\n\r\n```suggestion\r\n        const size_t protect_size_per_network{total_protect_size / networks};\r\n```",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-03T16:33:42Z",
      "diff_hunk" : "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_i2p) {\n+            ++network_counts[1];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[2];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625210280",
      "id" : 625210280,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTIxMDI4MA==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 931,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 650516145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-08T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625210280",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625212333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625212333"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These are used as booleans. I would suggest something like:\r\n\r\n```cpp\r\nstruct {\r\n    bool local{false};\r\n    bool i2p{false};\r\n    bool onion{false};\r\n} networks;\r\n...\r\nif (node.m_is_local) {\r\n    networks.local = true;\r\n}\r\n\r\n// if (networks) becomes:\r\nif (networks.local || networks.i2p || networks.onion)\r\n```",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-03T16:37:09Z",
      "diff_hunk" : "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625212333",
      "id" : 625212333,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTIxMjMzMw==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 914,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 650516145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-08T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625212333",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625223765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625223765"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Passing multiple booleans like `is_onion`, `is_i2p`, etc is a bit un-flexible and leaves the possibility for contradictions like having both flags set to true. Fuzzing could do that and I expect that there may be (or may be added) some legit assert somewhere in the code to ensure that nonsensical values like `is_onion==true` and `is_i2p==true` are not passed (resulting in an assertion failure during fuzzing).\r\n\r\nWhat about passing `enum Network` instead?",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-03T16:55:49Z",
      "diff_hunk" : "@@ -1022,7 +1055,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->m_inbound_onion, node->addr.IsI2P()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r625223765",
      "id" : 625223765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNTIyMzc2NQ==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 1058,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 650516145,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-08T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/625223765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626485716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626485716"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Those are initial (not necessarily final) percentages iff onion, i2p and localhost peers are all present in the eviction candidates. For instance, if no i2p or localhost peers are among the candidats, then the full 25% is made available to onions. And if localhost or i2p peers are present, any initially reserved slots that they don't use are made available for onions. (See the commit messages for a more detailed description). I'm not against adjusting the ratios though.",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-05T11:32:02Z",
      "diff_hunk" : "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_i2p) {\n+            ++network_counts[1];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[2];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626485716",
      "id" : 626485716,
      "in_reply_to_id" : 625210280,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjQ4NTcxNg==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 931,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 652197438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-08T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626485716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626495780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626495780"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's used to determine the number of networks from which we have disadvantaged candidates (indeed that could be done with bools also, replacing count_if with a sum of each boolean) but I anticipate possibly also using the actual counts to determine the distribution size or order of the protected slots.",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-05T11:49:35Z",
      "diff_hunk" : "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626495780",
      "id" : 626495780,
      "in_reply_to_id" : 625212333,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjQ5NTc4MA==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 914,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 652210679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-08T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626495780",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626585912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626585912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> What about passing `enum Network` instead?\r\n\r\nGood idea, looks like we can do that easily and it will include future network additions:\r\n\r\n```diff\r\n-                                               node->m_inbound_onion, node->addr.IsI2P()};\r\n+                                               node->ConnectedThroughNetwork()};\r\n```\r\n",
      "commit_id" : "6d7d87f21dc7f1af61f4b54b659bc0fda4659cb7",
      "created_at" : "2021-05-05T13:52:44Z",
      "diff_hunk" : "@@ -1022,7 +1055,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->m_inbound_onion, node->addr.IsI2P()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626585912",
      "id" : 626585912,
      "in_reply_to_id" : 625223765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjU4NTkxMg==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 1058,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 652333421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-06T20:57:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626585912",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626601146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626601146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Requires a lot of changes but probably still worth it. Will look at replacing `m_is_local` as well, maybe giving it a `Network` value of `NET_UNROUTABLE` for the eviction logic. ",
      "commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "created_at" : "2021-05-05T14:09:58Z",
      "diff_hunk" : "@@ -1022,7 +1055,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->m_inbound_onion, node->addr.IsI2P()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r626601146",
      "id" : 626601146,
      "in_reply_to_id" : 625223765,
      "line" : 1058,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNjYwMTE0Ng==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 1058,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 116,
      "pull_request_review_id" : 652354309,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-05T14:09:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/626601146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r627764474"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627764474"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Passing `enum Network`, instead of multiple booleans, indeed allowed rewriting this to be better abstracted and generalizable. WIP, for now the initial rewrite is in an additional commit.",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-06T21:05:47Z",
      "diff_hunk" : "@@ -1022,7 +1055,7 @@ bool CConnman::AttemptToEvictConnection()\n                                                HasAllDesirableServiceFlags(node->nServices),\n                                                peer_relay_txes, peer_filter_not_null, node->nKeyedNetGroup,\n                                                node->m_prefer_evict, node->addr.IsLocal(),\n-                                               node->m_inbound_onion};\n+                                               node->m_inbound_onion, node->addr.IsI2P()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r627764474",
      "id" : 627764474,
      "in_reply_to_id" : 625223765,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2NDQ3NA==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 1058,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 653895708,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-08T15:13:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627764474",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-05-10T15:04:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-836811768",
      "id" : 836811768,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNjgxMTc2OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-10T15:04:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/836811768",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Current status is almost-out-of-WIP after a rewrite and several iterations, just need to finish the latest iteration and reorganize it a bit.",
      "created_at" : "2021-05-10T15:13:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-836821732",
      "id" : 836821732,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzNjgyMTczMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-10T15:13:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/836821732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Approach ACK [4890e2f](https://github.com/bitcoin/bitcoin/commit/4890e2f2fdefaa18b0e96bcaf3691fb3f0213572)\r\n> \r\n> Some squashing is warranted.\r\n\r\nThanks! Indeed. Re-arranging.",
      "created_at" : "2021-05-17T12:22:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-842280881",
      "id" : 842280881,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0MjI4MDg4MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-17T12:22:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842280881",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r633484515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633484515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I played around with a more generous version that would protect more than 1/4 in the case of eviction candidates from multiple disadvantaged networks.  Didn't keep it for now, but memoizing the commit: e5c27dd.",
      "commit_id" : "4890e2f2fdefaa18b0e96bcaf3691fb3f0213572",
      "created_at" : "2021-05-17T12:26:00Z",
      "diff_hunk" : "@@ -896,36 +902,64 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n+    const size_t total_protect_size{initial_size / 2};\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost, I2P, and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 3> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_i2p) {\n+            ++network_counts[1];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[2];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r633484515",
      "id" : 633484515,
      "in_reply_to_id" : 625210280,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzQ4NDUxNQ==",
      "original_commit_id" : "831b3294d92b23f85617e77ea3f90082de73ce3a",
      "original_line" : 931,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 660903857,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-17T12:26:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/633484515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-05-24T13:49:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-847055419",
      "id" : 847055419,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg0NzA1NTQxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-24T13:49:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847055419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640068051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640068051"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why you don't pass `k=protect_size_per_network` to `EraseLastKElements` ?\r\n\r\nLet's say initial_size=200, total_protect_size=100.\r\nIf you count two networks, protected_size_per_network=25.\r\n\r\nIf the first network does exist, vEvictionCandidates is reduced to 175, total_to_protect increased to 50\r\nAnd the second network does exist, 50 - 200 - 175, k is equal to 25\r\n\r\nIf the first network doesn't exist, vEvictionCandidates isn't reduced, total_to_protect is equal to 25\r\nAnd the second network does exist, 25 - 200 - 200, k is equal to 25\r\n\r\nLet me know if I get the math wrong, or the logic is altered in following commits (after 5179761)\r\n\r\nAlso, `total_to_protect`, `protect_size_per_network` are confusing. Maybe rename `total_to_protect` to `already_selected_for_protect_size` ?",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-05-26T19:39:20Z",
      "diff_hunk" : "@@ -902,26 +902,44 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 2> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[1];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};\n \n+        if (protect_size_per_network) {\n+            size_t total_to_protect{protect_size_per_network};\n+\n+            if (network_counts[0]) {\n+                // Protect localhost peers, sorted by longest uptime.\n+                EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, total_to_protect,\n+                                   [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+                total_to_protect += protect_size_per_network;\n+            }\n+\n+            if (network_counts[1]) {\n+                // Protect onion peers (connected via our onion service), sorted by longest uptime.\n+                const size_t onion_peers_to_protect{total_to_protect - (initial_size - vEvictionCandidates.size())};\n+                EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_peers_to_protect,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640068051",
      "id" : 640068051,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA2ODA1MQ==",
      "original_commit_id" : "161aed5142048bb5c681628eb3d25d574cfbba47",
      "original_line" : 938,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 669469370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T20:28:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640068051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640096971"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640096971"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What would be the purpose of the follow-up you're envisioning ?\r\n\r\nAFAIU this current patchset, any unused protected slots across a high-latency network is reallocated to the next one by summing up `protect_size_per_network` and passing through `total_to_protect` ?",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-05-26T20:26:18Z",
      "diff_hunk" : "@@ -851,6 +851,12 @@ static bool CompareOnionTimeConnected(const NodeEvictionCandidate& a, const Node\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+static bool CompareI2PTimeConnected(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b)\n+{\n+    if (a.m_is_i2p != b.m_is_i2p) return b.m_is_i2p;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r640096971",
      "id" : 640096971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0MDA5Njk3MQ==",
      "original_commit_id" : "2aaeeff3e8f6c24c9ac0eebf6fbcf9e409a3a141",
      "original_line" : 859,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 669469370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-26T20:28:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/640096971",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644332628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644332628"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You're right. The commit message was out of date. Updated.",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-02T21:28:23Z",
      "diff_hunk" : "@@ -851,6 +851,12 @@ static bool CompareOnionTimeConnected(const NodeEvictionCandidate& a, const Node\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+static bool CompareI2PTimeConnected(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b)\n+{\n+    if (a.m_is_i2p != b.m_is_i2p) return b.m_is_i2p;\n+    return a.nTimeConnected > b.nTimeConnected;\n+}\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644332628",
      "id" : 644332628,
      "in_reply_to_id" : 640096971,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDMzMjYyOA==",
      "original_commit_id" : "2aaeeff3e8f6c24c9ac0eebf6fbcf9e409a3a141",
      "original_line" : 859,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 674697946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-02T21:28:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644332628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644337039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644337039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since the inital number of protected slots per network goes down quickly as the number of networks increases, it seems good to not waste any unused slots in this basic greedy knapsack. So we calculate `peers_to_protect` for each iteration having potential peers to protect, in order to recover any unused slots from the previous iteration.",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-02T21:36:35Z",
      "diff_hunk" : "@@ -902,26 +902,44 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 2> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[1];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};\n \n+        if (protect_size_per_network) {\n+            size_t total_to_protect{protect_size_per_network};\n+\n+            if (network_counts[0]) {\n+                // Protect localhost peers, sorted by longest uptime.\n+                EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, total_to_protect,\n+                                   [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+                total_to_protect += protect_size_per_network;\n+            }\n+\n+            if (network_counts[1]) {\n+                // Protect onion peers (connected via our onion service), sorted by longest uptime.\n+                const size_t onion_peers_to_protect{total_to_protect - (initial_size - vEvictionCandidates.size())};\n+                EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_peers_to_protect,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644337039",
      "id" : 644337039,
      "in_reply_to_id" : 640068051,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDMzNzAzOQ==",
      "original_commit_id" : "161aed5142048bb5c681628eb3d25d574cfbba47",
      "original_line" : 938,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 674703478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-02T21:36:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644337039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644338502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644338502"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Hm, `s/total_to_protect/available_to_protect/`? Edit: done.",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-02T21:39:32Z",
      "diff_hunk" : "@@ -902,26 +902,44 @@ void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvict\n     // disadvantaged under our eviction criteria.\n     const size_t initial_size = vEvictionCandidates.size();\n     size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n \n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n+    // Count number of nodes connected via localhost and onion.\n+    // Higher positions in the array recover unused slots left by lower ones.\n+    std::array<size_t, 2> network_counts{{}};\n+    for (const NodeEvictionCandidate& node : vEvictionCandidates) {\n+        if (node.m_is_local) {\n+            ++network_counts[0];\n+        } else if (node.m_is_onion) {\n+            ++network_counts[1];\n+        }\n     }\n \n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n-    }\n+    // Find the number of networks from which we have disadvantaged candidates.\n+    const auto networks = std::count_if(network_counts.begin(), network_counts.end(), [](auto n) { return n; });\n+\n+    if (networks) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks)};\n \n+        if (protect_size_per_network) {\n+            size_t total_to_protect{protect_size_per_network};\n+\n+            if (network_counts[0]) {\n+                // Protect localhost peers, sorted by longest uptime.\n+                EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, total_to_protect,\n+                                   [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+                total_to_protect += protect_size_per_network;\n+            }\n+\n+            if (network_counts[1]) {\n+                // Protect onion peers (connected via our onion service), sorted by longest uptime.\n+                const size_t onion_peers_to_protect{total_to_protect - (initial_size - vEvictionCandidates.size())};\n+                EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_peers_to_protect,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r644338502",
      "id" : 644338502,
      "in_reply_to_id" : 640068051,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NDMzODUwMg==",
      "original_commit_id" : "161aed5142048bb5c681628eb3d25d574cfbba47",
      "original_line" : 938,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : null,
      "pull_request_review_id" : 674705350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-02T21:43:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/644338502",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Will take a closer look later today :)",
      "created_at" : "2021-06-03T06:40:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-853612805",
      "id" : 853612805,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1MzYxMjgwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-03T06:40:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853612805",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3072149?v=4",
         "events_url" : "https://api.github.com/users/duncandean/events{/privacy}",
         "followers_url" : "https://api.github.com/users/duncandean/followers",
         "following_url" : "https://api.github.com/users/duncandean/following{/other_user}",
         "gists_url" : "https://api.github.com/users/duncandean/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/duncandean",
         "id" : 3072149,
         "login" : "duncandean",
         "node_id" : "MDQ6VXNlcjMwNzIxNDk=",
         "organizations_url" : "https://api.github.com/users/duncandean/orgs",
         "received_events_url" : "https://api.github.com/users/duncandean/received_events",
         "repos_url" : "https://api.github.com/users/duncandean/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/duncandean/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/duncandean/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/duncandean"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the concept ACKs @mzumsande, @duncandean and @laanwj and the approach ACKs @vasild and @ariard. Now ready for final review. \r\n\r\nThis screenshot illustrates the higher latency of I2P peers, which disadvantages them under our inbound eviction criteria even relative to onion peers.\r\n\r\n![Screenshot from 2021-06-07 08-56-56](https://user-images.githubusercontent.com/2415484/120973346-544b3400-c75e-11eb-901e-667f36ebcd54.png)\r\n",
      "created_at" : "2021-06-07T07:05:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#issuecomment-855652920",
      "id" : 855652920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21261",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg1NTY1MjkyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-06-07T07:05:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855652920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647319655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647319655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "_(I needed a pen and paper for this)_\r\n\r\nLets assume `initial_size = 100`.\r\n\r\nCase 1: `candidates` contains 1 localhost peer, 20 I2P peers and 20 Tor peers. From those, the protected will be: 1 localhost, 15 I2P, 8 Tor.\r\n\r\nCase 2: `candidates` contains 0 localhost peers, 20 I2P peers and 20 Tor peers. From those, the protected will be: 12 I2P peers and 12 Tor peers.\r\n\r\nCase 2 looks strange compared to Case 1 because _less_ I2P peers will be protected when there are no localhost ones. I would expect less peers from some earlier networks to result in more protections from subsequent networks.",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-08T10:37:37Z",
      "diff_hunk" : "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647319655",
      "id" : 647319655,
      "line" : 947,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzMxOTY1NQ==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 947,
      "original_position" : 117,
      "original_start_line" : 927,
      "path" : "src/net.cpp",
      "position" : 117,
      "pull_request_review_id" : 677464350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : 927,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-08T13:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647319655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647322855"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647322855"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why \"minimum\"? I think that either `protect_size_per_network` or less peers will be protected, so that is a \"maximum\", no?",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-08T10:44:11Z",
      "diff_hunk" : "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647322855",
      "id" : 647322855,
      "line" : 927,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzMyMjg1NQ==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 927,
      "original_position" : 97,
      "original_start_line" : 925,
      "path" : "src/net.cpp",
      "position" : 97,
      "pull_request_review_id" : 677464350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : 925,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-08T13:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647322855",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647413273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647413273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find this hard to grasp. Some comments would be nice. For example:\r\n```cpp\r\n/**\r\n * Define an order between NodeEvictionCandidate objects based on network and connection time.\r\n * Nodes near the beginning are more likely to be disconnected, nodes near the end will be\r\n * protected (less likely to be disconnected).\r\n * - First all nodes that do not belong to `network`, among them:\r\n *   - first nodes that have been connected shorter\r\n *   - later nodes that have been connected longer\r\n * - Later all nodes that belong to `network`, among them, sorted by connection time as above.\r\n */\r\nstruct CompareNodeNetworkTime {\r\n```",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-08T12:57:07Z",
      "diff_hunk" : "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647413273",
      "id" : 647413273,
      "line" : 874,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzQxMzI3Mw==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 874,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 23,
      "pull_request_review_id" : 677464350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-06-08T13:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647413273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647417447"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647417447"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If `network == localhost` and `a.m_is_local == b.m_is_local` then the control flow will continue to the second `if`. I think this is wrong or at least confusing because if this is the localhost comparator (`network == localhost`) then it should not sort based on `m_network`. Here is an example that does not involve passing the constant `localhost` if that makes it easier to understand, feel free to ignore:\r\n\r\n```cpp\r\nstruct CompareNodeNetworkTime { \r\n    const Network m_network;\r\n    const bool m_is_local;\r\n    CompareNodeNetworkTime(Network network, bool is_local)\r\n        : m_network(network), m_is_local(is_local)\r\n    { \r\n    } \r\n    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\r\n    { \r\n        if (m_is_local) {\r\n            if (a.m_is_local != b.m_is_local) {\r\n                return b.m_is_local;\r\n            }\r\n        } else if ((a.m_network == m_network) != (b.m_network == m_network)) {\r\n            return b.m_network == m_network;\r\n        }   \r\n        return a.nTimeConnected > b.nTimeConnected;\r\n    };  \r\n};\r\n\r\n...\r\n\r\nCompareNodeNetworkTime(n.id, n.id == localhost)\r\n```\r\n",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-08T13:02:07Z",
      "diff_hunk" : "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {\n+    const Network network, localhost;\n+    CompareNodeNetworkTime(Network n, Network l) : network(n), localhost(l) {}\n+    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\n+    {\n+        if (network == localhost && a.m_is_local != b.m_is_local) return b.m_is_local;\n+        if ((a.m_network == network) != (b.m_network == network)) return b.m_network == network;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647417447",
      "id" : 647417447,
      "line" : 880,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzQxNzQ0Nw==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 880,
      "original_position" : 29,
      "original_start_line" : 879,
      "path" : "src/net.cpp",
      "position" : 29,
      "pull_request_review_id" : 677464350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : 879,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-08T13:12:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647417447",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647471801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647471801"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unused slots can be recovered, so the number protected can be higher, and yes, if there are fewer peers of that network, the number protected can be lower. Perhaps s/minimum/initial/. ",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-08T14:00:59Z",
      "diff_hunk" : "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r647471801",
      "id" : 647471801,
      "in_reply_to_id" : 647322855,
      "line" : 927,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0NzQ3MTgwMQ==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 927,
      "original_position" : 97,
      "original_start_line" : 925,
      "path" : "src/net.cpp",
      "position" : 97,
      "pull_request_review_id" : 678559917,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : 925,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-08T14:00:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/647471801",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648020574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648020574"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The suggestion is equivalent/does the same thing, assuming the following change is also made to the caller. \r\n```diff\r\n-                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\r\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, n.id == localhost), peers_to_protect,\r\n```\r\n",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-09T06:59:45Z",
      "diff_hunk" : "@@ -883,6 +871,17 @@ static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n+struct CompareNodeNetworkTime {\n+    const Network network, localhost;\n+    CompareNodeNetworkTime(Network n, Network l) : network(n), localhost(l) {}\n+    bool operator()(const NodeEvictionCandidate& a, const NodeEvictionCandidate& b) const\n+    {\n+        if (network == localhost && a.m_is_local != b.m_is_local) return b.m_is_local;\n+        if ((a.m_network == network) != (b.m_network == network)) return b.m_network == network;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648020574",
      "id" : 648020574,
      "in_reply_to_id" : 647417447,
      "line" : 880,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAyMDU3NA==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 880,
      "original_position" : 29,
      "original_start_line" : 879,
      "path" : "src/net.cpp",
      "position" : 29,
      "pull_request_review_id" : 679276720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : 879,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-09T06:59:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648020574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648033899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648033899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the outcome of Case 2 is ideal.  Case 1 protects many I2P peers because that network gets the unused slots from the localhost allocation.  What change would you suggest?  Keep in mind that this is a subcomponent seen in isolation; another 1/4 of the remaining peers will be protected based on their uptime.",
      "commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "created_at" : "2021-06-09T07:20:28Z",
      "diff_hunk" : "@@ -894,40 +893,64 @@ static void EraseLastKElements(\n     elements.erase(std::remove_if(elements.end() - eraseSize, elements.end(), predicate), elements.end());\n }\n \n-void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& vEvictionCandidates)\n+void ProtectEvictionCandidatesByRatio(std::vector<NodeEvictionCandidate>& candidates)\n {\n     // Protect the half of the remaining nodes which have been connected the longest.\n     // This replicates the non-eviction implicit behavior, and precludes attacks that start later.\n-    // To favorise the diversity of our peer connections, reserve up to (half + 2) of\n-    // these protected spots for onion and localhost peers, if any, even if they're not\n-    // longest uptime overall. This helps protect tor peers, which tend to be otherwise\n-    // disadvantaged under our eviction criteria.\n-    const size_t initial_size = vEvictionCandidates.size();\n-    size_t total_protect_size = initial_size / 2;\n-    const size_t onion_protect_size = total_protect_size / 2;\n-\n-    if (onion_protect_size) {\n-        // Pick out up to 1/4 peers connected via our onion service, sorted by longest uptime.\n-        EraseLastKElements(vEvictionCandidates, CompareOnionTimeConnected, onion_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_onion; });\n-    }\n-\n-    const size_t localhost_min_protect_size{2};\n-    if (onion_protect_size >= localhost_min_protect_size) {\n-        // Allocate any remaining slots of the 1/4, or minimum 2 additional slots,\n-        // to localhost peers, sorted by longest uptime, as manually configured\n-        // hidden services not using `-bind=addr[:port]=onion` will not be detected\n-        // as inbound onion connections.\n-        const size_t remaining_tor_slots{onion_protect_size - (initial_size - vEvictionCandidates.size())};\n-        const size_t localhost_protect_size{std::max(remaining_tor_slots, localhost_min_protect_size)};\n-        EraseLastKElements(vEvictionCandidates, CompareLocalHostTimeConnected, localhost_protect_size,\n-                           [](const NodeEvictionCandidate& n) { return n.m_is_local; });\n+    // To favorise the diversity of our peer connections, reserve up to half of\n+    // these protected spots for onion, localhost and I2P peers, even if they're\n+    // not longest uptime overall. This helps protect these higher-latency peers\n+    // that tend to be otherwise disadvantaged under our eviction criteria.\n+    const size_t initial_size = candidates.size();\n+    const size_t total_protect_size = initial_size / 2;\n+    struct Net {\n+        Network id;\n+        size_t count;\n+        bool operator<(const Net& rhs) const { return count < rhs.count; }\n+    };\n+    static constexpr Network localhost{NET_MAX}; // alias localhost to an unused Network enumerator\n+    std::vector<Net> networks{{localhost, 0}, {NET_I2P, 0}, {NET_ONION, 0}};\n+\n+    // Tally the number of eviction candidates per disadvantaged network.\n+    for (Net& n : networks) {\n+        n.count = std::count_if(candidates.cbegin(), candidates.cend(), [&n](const NodeEvictionCandidate& c) {\n+            return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+        });\n+    }\n+\n+    // Find the number of disadvantaged networks from which we have eviction candidates.\n+    const auto networks_size = std::count_if(networks.begin(), networks.end(), [](const Net& n) { return n.count; });\n+\n+    if (networks_size) {\n+        // Obtain the minimum number of peers per network to potentially protect.\n+        // The base ratio is 1/2 (for the case of peers from only 1 network).\n+        const size_t protect_size_per_network{total_protect_size / (2 * networks_size)};\n+\n+        if (protect_size_per_network) {\n+            size_t available_to_protect{protect_size_per_network};\n+\n+            // Stable-sort networks by ascending candidate count, to allow networks that\n+            // have more peers to recover slots not used by networks with fewer peers.\n+            std::stable_sort(networks.begin(), networks.end());\n+\n+            for (const Net& n : networks) {\n+                if (n.count == 0) continue;\n+\n+                // Protect peers of this network, sorted by longest uptime.\n+                const size_t peers_to_protect{available_to_protect - (initial_size - candidates.size())};\n+                EraseLastKElements(candidates, CompareNodeNetworkTime(n.id, localhost), peers_to_protect,\n+                                   [&n](const NodeEvictionCandidate& c) {\n+                                       return n.id == localhost ? c.m_is_local : c.m_network == n.id;\n+                                   });\n+                available_to_protect += protect_size_per_network;\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21261#discussion_r648033899",
      "id" : 648033899,
      "in_reply_to_id" : 647319655,
      "line" : 947,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODAzMzg5OQ==",
      "original_commit_id" : "dd6f8c429128a3916de8be6c523e1a3d494da7a0",
      "original_line" : 947,
      "original_position" : 117,
      "original_start_line" : 927,
      "path" : "src/net.cpp",
      "position" : 117,
      "pull_request_review_id" : 679294541,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21261",
      "side" : "RIGHT",
      "start_line" : 927,
      "start_side" : "RIGHT",
      "updated_at" : "2021-06-09T07:20:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/648033899",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
