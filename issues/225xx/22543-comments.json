[
   {
      "author_association" : "MEMBER",
      "body" : "approach ACK :) ",
      "created_at" : "2021-07-25T19:07:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-886244568",
      "id" : 886244568,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII58400wTY",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-25T19:07:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886244568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1500952?v=4",
         "events_url" : "https://api.github.com/users/amitiuttarwar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/amitiuttarwar/followers",
         "following_url" : "https://api.github.com/users/amitiuttarwar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/amitiuttarwar",
         "id" : 1500952,
         "login" : "amitiuttarwar",
         "node_id" : "MDQ6VXNlcjE1MDA5NTI=",
         "organizations_url" : "https://api.github.com/users/amitiuttarwar/orgs",
         "received_events_url" : "https://api.github.com/users/amitiuttarwar/received_events",
         "repos_url" : "https://api.github.com/users/amitiuttarwar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/amitiuttarwar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/amitiuttarwar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-07-25T20:05:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-886251008",
      "id" : 886251008,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII58400x4A",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-25T20:05:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886251008",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22567](https://github.com/bitcoin/bitcoin/pull/22567) (test: Implicitly sync after generate* to preempt races and intermittent test failures by MarcoFalke)\n* [#21800](https://github.com/bitcoin/bitcoin/pull/21800) (mempool/validation: mempool ancestor/descendant limits for packages by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-07-28T10:28:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-888200225",
      "id" : 888200225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII58408Nwh",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-06T11:37:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/888200225",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r678248900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please don't commit large style changes in the same commit as refactors/features. This makes review harder because it is not clear what is a refactor/style-change/feature\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#committing-patches",
      "commit_id" : "8ac10d8e1596bd2766fc9470467aba7c0e691353",
      "created_at" : "2021-07-28T12:22:39Z",
      "diff_hunk" : "@@ -20,55 +23,65 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r678248900",
      "id" : 678248900,
      "line" : 34,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3ODI0ODkwMA==",
      "original_commit_id" : "8ac10d8e1596bd2766fc9470467aba7c0e691353",
      "original_line" : 34,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 73,
      "pull_request_review_id" : 716930706,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-28T12:35:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/678248900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-07-31T20:18:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-890399777",
      "id" : 890399777,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII5841Emwh",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-31T20:18:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/890399777",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r681830378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681830378"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks for the feedback, I've appended the commit with the code changes only (removed any \"only style changes\") as of now, hope this makes reviewing the PR easier now.\r\n\r\nLooking forward to your review",
      "commit_id" : "4dea1875b1c5ff4436eb3ecdf5bbd5372179b899",
      "created_at" : "2021-08-03T14:45:41Z",
      "diff_hunk" : "@@ -20,55 +23,65 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelaytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r681830378",
      "id" : 681830378,
      "in_reply_to_id" : 678248900,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4MTgzMDM3OA==",
      "original_commit_id" : "8ac10d8e1596bd2766fc9470467aba7c0e691353",
      "original_line" : 40,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 91,
      "pull_request_review_id" : 721293358,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-03T14:45:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/681830378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55556994?v=4",
         "events_url" : "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ShubhamPalriwala/followers",
         "following_url" : "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ShubhamPalriwala",
         "id" : 55556994,
         "login" : "ShubhamPalriwala",
         "node_id" : "MDQ6VXNlcjU1NTU2OTk0",
         "organizations_url" : "https://api.github.com/users/ShubhamPalriwala/orgs",
         "received_events_url" : "https://api.github.com/users/ShubhamPalriwala/received_events",
         "repos_url" : "https://api.github.com/users/ShubhamPalriwala/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ShubhamPalriwala/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ShubhamPalriwala"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-08-03T15:22:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-891938056",
      "id" : 891938056,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII5841KeUI",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-03T15:22:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/891938056",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23586626?v=4",
         "events_url" : "https://api.github.com/users/Zero-1729/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Zero-1729/followers",
         "following_url" : "https://api.github.com/users/Zero-1729/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Zero-1729/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Zero-1729",
         "id" : 23586626,
         "login" : "Zero-1729",
         "node_id" : "MDQ6VXNlcjIzNTg2NjI2",
         "organizations_url" : "https://api.github.com/users/Zero-1729/orgs",
         "received_events_url" : "https://api.github.com/users/Zero-1729/received_events",
         "repos_url" : "https://api.github.com/users/Zero-1729/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Zero-1729/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Zero-1729/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Zero-1729"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Concept ACK",
      "created_at" : "2021-08-05T18:45:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-893695959",
      "id" : 893695959,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII5841RLfX",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-05T18:45:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/893695959",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58947326?v=4",
         "events_url" : "https://api.github.com/users/Shubhankar-Gambhir/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Shubhankar-Gambhir/followers",
         "following_url" : "https://api.github.com/users/Shubhankar-Gambhir/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Shubhankar-Gambhir/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Shubhankar-Gambhir",
         "id" : 58947326,
         "login" : "Shubhankar-Gambhir",
         "node_id" : "MDQ6VXNlcjU4OTQ3MzI2",
         "organizations_url" : "https://api.github.com/users/Shubhankar-Gambhir/orgs",
         "received_events_url" : "https://api.github.com/users/Shubhankar-Gambhir/received_events",
         "repos_url" : "https://api.github.com/users/Shubhankar-Gambhir/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Shubhankar-Gambhir/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Shubhankar-Gambhir/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Shubhankar-Gambhir"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-08-09T06:06:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#issuecomment-894971923",
      "id" : 894971923,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22543",
      "node_id" : "IC_kwDOABII5841WDAT",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T06:06:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894971923",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686312386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686312386"
         }
      },
      "author_association" : "NONE",
      "body" : "Hey, any specific reason that we are not checking whether the confirmations of the original `tx` are still 0 or not. I couldn't understand looking at the PR updates, so if you could explain :)",
      "commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "created_at" : "2021-08-10T20:50:05Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686312386",
      "id" : 686312386,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxMjM4Ng==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 57,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 69,
      "pull_request_review_id" : 726833540,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T20:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686312386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42388668?v=4",
         "events_url" : "https://api.github.com/users/NikhilBartwal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NikhilBartwal/followers",
         "following_url" : "https://api.github.com/users/NikhilBartwal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NikhilBartwal",
         "id" : 42388668,
         "login" : "NikhilBartwal",
         "node_id" : "MDQ6VXNlcjQyMzg4NjY4",
         "organizations_url" : "https://api.github.com/users/NikhilBartwal/orgs",
         "received_events_url" : "https://api.github.com/users/NikhilBartwal/received_events",
         "repos_url" : "https://api.github.com/users/NikhilBartwal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NikhilBartwal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NikhilBartwal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686313503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686313503"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: Type-o in `basee_fee` -> `base_fee` :)",
      "commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "created_at" : "2021-08-10T20:51:50Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686313503",
      "id" : 686313503,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxMzUwMw==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 64,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 115,
      "pull_request_review_id" : 726834907,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T20:59:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686313503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42388668?v=4",
         "events_url" : "https://api.github.com/users/NikhilBartwal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NikhilBartwal/followers",
         "following_url" : "https://api.github.com/users/NikhilBartwal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NikhilBartwal",
         "id" : 42388668,
         "login" : "NikhilBartwal",
         "node_id" : "MDQ6VXNlcjQyMzg4NjY4",
         "organizations_url" : "https://api.github.com/users/NikhilBartwal/orgs",
         "received_events_url" : "https://api.github.com/users/NikhilBartwal/received_events",
         "repos_url" : "https://api.github.com/users/NikhilBartwal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NikhilBartwal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NikhilBartwal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686315551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686315551"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: Since, we are bumping up the `fee_rate` as a factor of `base_fee` with the `batch_of_txid`, IMO it would be more intuitive to use `for batch_of_txid in range(1,4):` so that we can simply use:\r\n```\r\nminiwallet.create_large_transactions(\r\n                node, txouts, 30, batch_of_txid * base_fee\r\n)\r\n```",
      "commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "created_at" : "2021-08-10T20:55:08Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686315551",
      "id" : 686315551,
      "line" : 66,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxNTU1MQ==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 66,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 117,
      "pull_request_review_id" : 726837605,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T20:55:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686315551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42388668?v=4",
         "events_url" : "https://api.github.com/users/NikhilBartwal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NikhilBartwal/followers",
         "following_url" : "https://api.github.com/users/NikhilBartwal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NikhilBartwal",
         "id" : 42388668,
         "login" : "NikhilBartwal",
         "node_id" : "MDQ6VXNlcjQyMzg4NjY4",
         "organizations_url" : "https://api.github.com/users/NikhilBartwal/orgs",
         "received_events_url" : "https://api.github.com/users/NikhilBartwal/received_events",
         "repos_url" : "https://api.github.com/users/NikhilBartwal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NikhilBartwal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NikhilBartwal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686317188"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686317188"
         }
      },
      "author_association" : "NONE",
      "body" : "In extension to the corresponding comment above, maybe we should add the confirmation test, something on the lines of:\r\n```\r\ntxdata = node.gettransaction(tx_to_be_evicted)\r\nassert txdata['confirmations'] == 0\r\n```",
      "commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "created_at" : "2021-08-10T20:57:46Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686317188",
      "id" : 686317188,
      "line" : 74,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMxNzE4OA==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 74,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 125,
      "pull_request_review_id" : 726839637,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T20:57:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686317188",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42388668?v=4",
         "events_url" : "https://api.github.com/users/NikhilBartwal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NikhilBartwal/followers",
         "following_url" : "https://api.github.com/users/NikhilBartwal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NikhilBartwal",
         "id" : 42388668,
         "login" : "NikhilBartwal",
         "node_id" : "MDQ6VXNlcjQyMzg4NjY4",
         "organizations_url" : "https://api.github.com/users/NikhilBartwal/orgs",
         "received_events_url" : "https://api.github.com/users/NikhilBartwal/received_events",
         "repos_url" : "https://api.github.com/users/NikhilBartwal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NikhilBartwal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NikhilBartwal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686322985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686322985"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: Type-o in `minrelytxfee` -> `minrelaytxfee` :)",
      "commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "created_at" : "2021-08-10T21:07:21Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.info(\"Check that mempoolminfee is larger than minrelytxfee\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686322985",
      "id" : 686322985,
      "line" : 75,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjMyMjk4NQ==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 75,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 126,
      "pull_request_review_id" : 726847190,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-10T21:07:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686322985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/42388668?v=4",
         "events_url" : "https://api.github.com/users/NikhilBartwal/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NikhilBartwal/followers",
         "following_url" : "https://api.github.com/users/NikhilBartwal/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NikhilBartwal/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NikhilBartwal",
         "id" : 42388668,
         "login" : "NikhilBartwal",
         "node_id" : "MDQ6VXNlcjQyMzg4NjY4",
         "organizations_url" : "https://api.github.com/users/NikhilBartwal/orgs",
         "received_events_url" : "https://api.github.com/users/NikhilBartwal/received_events",
         "repos_url" : "https://api.github.com/users/NikhilBartwal/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NikhilBartwal/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NikhilBartwal/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NikhilBartwal"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491618"
         }
      },
      "author_association" : "NONE",
      "body" : "With respect to this and the above comment, `gettransaction(tx_to_be_evicted)` is a method that requires a wallet to be loaded, contradictory to the purpose of this PR. Hence, we're just verifying if it's evicted from the mempool!",
      "commit_id" : "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
      "created_at" : "2021-08-11T04:58:21Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491618",
      "id" : 686491618,
      "in_reply_to_id" : 686317188,
      "line" : 74,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5MTYxOA==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 67,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 125,
      "pull_request_review_id" : 727042456,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-11T04:58:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491618",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55556994?v=4",
         "events_url" : "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ShubhamPalriwala/followers",
         "following_url" : "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ShubhamPalriwala",
         "id" : 55556994,
         "login" : "ShubhamPalriwala",
         "node_id" : "MDQ6VXNlcjU1NTU2OTk0",
         "organizations_url" : "https://api.github.com/users/ShubhamPalriwala/orgs",
         "received_events_url" : "https://api.github.com/users/ShubhamPalriwala/received_events",
         "repos_url" : "https://api.github.com/users/ShubhamPalriwala/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ShubhamPalriwala/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ShubhamPalriwala"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491848"
         }
      },
      "author_association" : "NONE",
      "body" : "Thread has been continued [here](https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491618)\r\n",
      "commit_id" : "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
      "created_at" : "2021-08-11T04:59:07Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686491848",
      "id" : 686491848,
      "in_reply_to_id" : 686312386,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5MTg0OA==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 57,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 69,
      "pull_request_review_id" : 727042733,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-11T04:59:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686491848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55556994?v=4",
         "events_url" : "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ShubhamPalriwala/followers",
         "following_url" : "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ShubhamPalriwala",
         "id" : 55556994,
         "login" : "ShubhamPalriwala",
         "node_id" : "MDQ6VXNlcjU1NTU2OTk0",
         "organizations_url" : "https://api.github.com/users/ShubhamPalriwala/orgs",
         "received_events_url" : "https://api.github.com/users/ShubhamPalriwala/received_events",
         "repos_url" : "https://api.github.com/users/ShubhamPalriwala/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ShubhamPalriwala/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ShubhamPalriwala"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686495941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686495941"
         }
      },
      "author_association" : "NONE",
      "body" : "Done",
      "commit_id" : "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
      "created_at" : "2021-08-11T05:11:29Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee\n+            )\n+\n+        self.log.info(\"The tx should be evicted by now\")\n+        # The number of transactions created should be greater than the ones present in the mempool\n+        assert_greater_than(no_of_large_tx_created, len(node.getrawmempool()))\n+        # Initial tx created should not be present in the mempool anymore as it had a lower fee rate\n+        assert tx_to_be_evicted_id not in node.getrawmempool()\n+\n+        self.log.info(\"Check that mempoolminfee is larger than minrelytxfee\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686495941",
      "id" : 686495941,
      "in_reply_to_id" : 686322985,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5NTk0MQ==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 75,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : null,
      "pull_request_review_id" : 727047795,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-11T05:11:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686495941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55556994?v=4",
         "events_url" : "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ShubhamPalriwala/followers",
         "following_url" : "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ShubhamPalriwala",
         "id" : 55556994,
         "login" : "ShubhamPalriwala",
         "node_id" : "MDQ6VXNlcjU1NTU2OTk0",
         "organizations_url" : "https://api.github.com/users/ShubhamPalriwala/orgs",
         "received_events_url" : "https://api.github.com/users/ShubhamPalriwala/received_events",
         "repos_url" : "https://api.github.com/users/ShubhamPalriwala/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ShubhamPalriwala/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ShubhamPalriwala"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496041"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496041"
         }
      },
      "author_association" : "NONE",
      "body" : "Done! Thanks",
      "commit_id" : "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
      "created_at" : "2021-08-11T05:11:44Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions\n+            no_of_large_tx_created += miniwallet.create_large_transactions(\n+                node, txouts, 30, (batch_of_txid + 1) * base_fee",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496041",
      "id" : 686496041,
      "in_reply_to_id" : 686315551,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5NjA0MQ==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 66,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : null,
      "pull_request_review_id" : 727047897,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-11T05:11:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55556994?v=4",
         "events_url" : "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ShubhamPalriwala/followers",
         "following_url" : "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ShubhamPalriwala",
         "id" : 55556994,
         "login" : "ShubhamPalriwala",
         "node_id" : "MDQ6VXNlcjU1NTU2OTk0",
         "organizations_url" : "https://api.github.com/users/ShubhamPalriwala/orgs",
         "received_events_url" : "https://api.github.com/users/ShubhamPalriwala/received_events",
         "repos_url" : "https://api.github.com/users/ShubhamPalriwala/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ShubhamPalriwala/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ShubhamPalriwala"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496119"
         }
      },
      "author_association" : "NONE",
      "body" : "Done!",
      "commit_id" : "bec7849f5dc4a9fa75b440ddcad9b90e3ebae138",
      "created_at" : "2021-08-11T05:11:58Z",
      "diff_hunk" : "@@ -5,70 +5,90 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from decimal import Decimal\n+from test_framework.blocktools import COINBASE_MATURITY\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, create_confirmed_utxos, create_lots_of_big_transactions, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n+from test_framework.wallet import MiniWallet\n+\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\n-            \"-acceptnonstdtxn=1\",\n-            \"-maxmempool=5\",\n-            \"-spendzeroconfchange=0\",\n-        ]]\n+        self.extra_args = [\n+            [\n+                \"-acceptnonstdtxn=1\",\n+                \"-maxmempool=5\",\n+                \"-spendzeroconfchange=0\",\n+            ]\n+        ]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n-        self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n-\n-        self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n-        for i in range (3):\n-            txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n-\n-        self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n-\n-        self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n-\n-        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n-\n-if __name__ == '__main__':\n+\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()[\"relayfee\"]\n+\n+        self.log.info(\"Check that mempoolminfee is minrelytxfee\")\n+        assert_equal(node.getmempoolinfo()[\"minrelaytxfee\"], Decimal(\"0.00001000\"))\n+        assert_equal(node.getmempoolinfo()[\"mempoolminfee\"], Decimal(\"0.00001000\"))\n+\n+        # Generate 92 UTXOs to flood the mempool\n+        # 1 to create a tx initially that will be evicted from the mempool later\n+        # 90 with a fee rate much higher than the previous UTXO (3 batches of 30 with increasing fee rate)\n+        # And 1 more to verify that this tx does not get added to the mempool with a fee rate less than the mempoolminfee\n+        miniwallet.generate(1 + (3 * 30) + 1)\n+\n+        # Mine 99 blocks so that the UTXOs are allowed to be spent\n+        node.generate(COINBASE_MATURITY - 1)\n+\n+        self.log.info(\"Create a mempool tx that will be evicted\")\n+        tx_to_be_evicted_id = miniwallet.send_self_transfer(\n+            from_node=node, fee_rate=relayfee\n+        )[\"txid\"]\n+\n+        # Increase the tx fee rate massively now to give the next transactions a higher priority in the mempool\n+        base_fee = relayfee * 1000\n+\n+        self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n+        no_of_large_tx_created = 0\n+        for batch_of_txid in range(3):\n+            # Increment the tx fee rate gradually by a factor of (basee_fee) for each batch of 30 transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22543#discussion_r686496119",
      "id" : 686496119,
      "in_reply_to_id" : 686313503,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NjQ5NjExOQ==",
      "original_commit_id" : "dcd75d87eef701b1214699fcad79328f06801176",
      "original_line" : 64,
      "original_position" : 115,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : null,
      "pull_request_review_id" : 727047980,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22543",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-11T05:11:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/686496119",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/55556994?v=4",
         "events_url" : "https://api.github.com/users/ShubhamPalriwala/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ShubhamPalriwala/followers",
         "following_url" : "https://api.github.com/users/ShubhamPalriwala/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ShubhamPalriwala/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ShubhamPalriwala",
         "id" : 55556994,
         "login" : "ShubhamPalriwala",
         "node_id" : "MDQ6VXNlcjU1NTU2OTk0",
         "organizations_url" : "https://api.github.com/users/ShubhamPalriwala/orgs",
         "received_events_url" : "https://api.github.com/users/ShubhamPalriwala/received_events",
         "repos_url" : "https://api.github.com/users/ShubhamPalriwala/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ShubhamPalriwala/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ShubhamPalriwala/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ShubhamPalriwala"
      }
   }
]
