[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#25168](https://github.com/bitcoin/bitcoin/pull/25168) (refactor: Avoid passing params where not needed by MarcoFalke)\n* [#24970](https://github.com/bitcoin/bitcoin/pull/24970) (net processing: Move cleanSubVer, fPreferredDownload and nLocalHostNonce to Peer by jnewbery)\n* [#21603](https://github.com/bitcoin/bitcoin/pull/21603) (log: Mitigate disk filling attacks by rate limiting LogPrintf by dergoegge)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 23443](https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/23443/total.coverage/index.html), 4dc7bac65e41a1f2bbbae084b8bbaeee70cec700) | Reference ([master](https://drahtbot.space/host_reports/DrahtBot/reports/coverage/bitcoin/bitcoin/ed4eeafbb6e2e73f/total.coverage/index.html), ed4eeafbb6e2e73f)   |\n|-----------|-------------------------|--------------------|\n| Lines     | +0.0276 %            | 83.7655 %        |\n| Functions | +0.0294 %            | 80.7326 %        |\n| Branches  | +0.0133 %            | 51.3151 %        |\n\n<sup>Updated at: 2022-05-10T14:16:22.523123.</sup>\n",
      "created_at" : "2021-11-05T20:10:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-962189199",
      "id" : 962189199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5845WdeP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962189199/reactions"
      },
      "updated_at" : "2022-05-20T00:54:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962189199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754756591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754756591"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note, I think BIP330 should make the dependency on BIP339 explicit.\r\n\r\nOur implementation makes a requirement to speak a protocol version superior to `WTXID_RELAY_VERSION`. Further, it also relies on `MSG_WTX` for the fallback inv announcement. Those 2 elements are defined in BIP339. I think a client implementing straightly the BIP won't be able to tx-announce with Erlay-supported Core nodes.\r\n\r\nIIRC, this is mostly a historical artifact because BIP330 was submitted before BIP339. \r\n\r\nIf you agree, please stage this comment until there are multiple updates worthy to do to the BIP.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T01:53:29Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754756591",
      "id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584s_Kvv",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2580,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754756591/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754756591",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754757014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754757014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \"The boolean indicates\"",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T01:55:05Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * Indicates that a node is willing to participate in transaction reconciliation,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754757014",
      "id" : 754757014,
      "line" : 267,
      "node_id" : "PRRC_kwDOABII584s_K2W",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 267,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 6,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754757014/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754757014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754764995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754764995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If the reconciliation roles are updated, do you need to bump the `RECON_VERSION` ?\r\n\r\nI would say so as a old-reconciliation outbound peer could assume a new-reconciliation inbound peer is the initiator when the new-reconciliation inbound peer would estimate the reverse, thus halting reconciliation ?",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:24:14Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754764995",
      "id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584s_MzD",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754764995/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754764995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754767290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754767290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/Accoring/According/g",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:32:09Z",
      "diff_hunk" : "@@ -10,6 +10,23 @@ namespace {\n \n /** Current protocol version */\n constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // Accoring to BIP-330, salts should be combined in ascending order.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754767290",
      "id" : 754767290,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584s_NW6",
      "original_commit_id" : "0e9d0dc8524e5796aa136581f9fe4f92b44dcbd1",
      "original_line" : 23,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 23,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754767290/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754767290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754768868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754768868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/annoyncement/announcement/g",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:38:05Z",
      "diff_hunk" : "@@ -2822,6 +2822,48 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching annoyncement protocols",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754768868",
      "id" : 754768868,
      "line" : 2830,
      "node_id" : "PRRC_kwDOABII584s_Nvk",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 2827,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 49,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754768868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754768868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754770460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754770460"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/chose/choose/g",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:43:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,48 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching annoyncement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we chose a peer to not send us transactions, disconnect if they want to reconcile.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754770460",
      "id" : 754770460,
      "line" : 2842,
      "node_id" : "PRRC_kwDOABII584s_OIc",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 2839,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 61,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754770460/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754770460",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754775773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754775773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This check means that duplicated `SENDRECON` are processed as protocol violation, correct ?\r\n\r\nI wonder if we have Bitcoin nodes widely deployed over non-TCP stack, where the packet dedup is not guaranteed. I guess that should be so rare a case, though if we learn some and the duplication rate is high enough to trigger this reconciliation failure we can still relax this check. ",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T03:04:11Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754775773",
      "id" : 754775773,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII584s_Pbd",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 109,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 109,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754775773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754775773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754776078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754776078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note, the BIP330 says version != 1 should be ignored, making the 0 case a protocol violation should be reflected in the BIP, I think.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T03:05:20Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754776078",
      "id" : 754776078,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584s_PgO",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 117,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 117,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754776078/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754776078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754778838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754778838"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't be a `&&`, otherwise we might have staling state for the peer ?",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T03:16:12Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754778838",
      "id" : 754778838,
      "line" : 152,
      "node_id" : "PRRC_kwDOABII584s_QLW",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 152,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 152,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754778838/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754778838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754992721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754992721"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah I think you are probably right.\r\nWhat should i do with your comment though?",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:37:58Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754992721",
      "id" : 754992721,
      "in_reply_to_id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584tAEZR",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 813484719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754992721/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:37:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754992721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755000332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755000332"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah good point, keeping it open for now so that maybe others comment if they want to relax the check.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:45:40Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755000332",
      "id" : 755000332,
      "in_reply_to_id" : 754775773,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII584tAGQM",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 109,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 109,
      "pull_request_review_id" : 813492715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755000332/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:45:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755000332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755005764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755005764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done in 38e66d31f7eb47cd2566003e8d0d8808b129eabb",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:51:26Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755005764",
      "id" : 755005764,
      "in_reply_to_id" : 754776078,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584tAHlE",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 117,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 117,
      "pull_request_review_id" : 813498529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755005764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755005764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755006158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755006158"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/naumenkogs/bips/commit/38e66d31f7eb47cd2566003e8d0d8808b129eabb",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:51:49Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755006158",
      "id" : 755006158,
      "in_reply_to_id" : 754776078,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584tAHrO",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 117,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 117,
      "pull_request_review_id" : 813498918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755006158/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:51:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755006158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755007682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755007682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This line only defines whether we print logs or not, so I don't understand how does it affect the actual behavior.\r\nThe ideas is that it logs deleting the state for both pre-registered and registered peers. \r\n\r\nThe previous 2 lines taking care of deletion are indeed `&&`.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:53:42Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755007682",
      "id" : 755007682,
      "in_reply_to_id" : 754778838,
      "line" : 152,
      "node_id" : "PRRC_kwDOABII584tAIDC",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 152,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 152,
      "pull_request_review_id" : 813500837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755007682/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755007682",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755008629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755008629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In BIP already: `Since sketches are based on the WTXIDs, the negotiation and support of Erlay should be enabled only if both peers signal BIP-339 support. `",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:54:49Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755008629",
      "id" : 755008629,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tAIR1",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2580,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 813502063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755008629/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:54:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755008629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755594349"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755594349"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't remember if the boost framework has an equivalent of the rust's `should_panic`, if so maybe test duplicated registration ? Should hit the assert.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-23T23:52:53Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755594349",
      "id" : 755594349,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tCXRt",
      "original_commit_id" : "4c0122e06b611c9d8f871a2dfb240b2aff269125",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 24,
      "pull_request_review_id" : 814296227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755594349/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:06:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755594349",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755600979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755600979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've grepped the phrase in https://github.com/bitcoin/bips/blob/master/bip-0330.mediawiki and I can't find it ? Are we sure we're looking on the same version of the BIP?",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T00:09:55Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755600979",
      "id" : 755600979,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tCY5T",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2584,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 814307898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755600979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:09:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755600979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755602732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755602732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would say add a \"If the reconciliation roles are updated, `RECON_VERSION` should be bumped\" comment ?\r\n\r\nI think it's nice to ease future reconciliation development or extension by laying out clearly what should be updated or taken care of by the ones doing the work. A good chunk of today p2p mechanisms aren't that much documented in that regard. ",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T00:14:53Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755602732",
      "id" : 755602732,
      "in_reply_to_id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584tCZUs",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 84,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 814310029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755602732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755602732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755603737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755603737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The ideas is that it logs deleting the state for both pre-registered and registered peers.\r\n\r\nI understand. Maybe maybe the log comment could have a ternary and print \"salt_erased\" or \"state_erased\" to be more meaningful. Though that's really low-level information likely only relevant for debug/hacking.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T00:18:02Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755603737",
      "id" : 755603737,
      "in_reply_to_id" : 754778838,
      "line" : 152,
      "node_id" : "PRRC_kwDOABII584tCZkZ",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 152,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 152,
      "pull_request_review_id" : 814311332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755603737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:18:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755603737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755791452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755791452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "An up-to-date BIP version is linked in the first post of this PR. This link: https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki\r\n\r\nAt some point we want to merge it to the bip repo, but probably later.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T08:15:55Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755791452",
      "id" : 755791452,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tDHZc",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2584,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 814550023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755791452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T08:15:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755791452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755794046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755794046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ack",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T08:19:46Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755794046",
      "id" : 755794046,
      "in_reply_to_id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584tDIB-",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 84,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 814553479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755794046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T08:19:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755794046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755797839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755797839"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah that was my problem as well, not sure how to test assertions failed.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T08:24:56Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755797839",
      "id" : 755797839,
      "in_reply_to_id" : 755594349,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tDI9P",
      "original_commit_id" : "4c0122e06b611c9d8f871a2dfb240b2aff269125",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 24,
      "pull_request_review_id" : 814558584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755797839/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T08:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755797839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "it doesn't seem to compile:-\r\n\r\n```\r\n./src/./minisketch/include/minisketch.h:225: undefined reference to `minisketch_compute_capacity'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake: *** [Makefile:6395: qt/bitcoin-qt] Error 1\r\n```",
      "created_at" : "2021-11-25T14:17:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-979251635",
      "id" : 979251635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5846XjGz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979251635/reactions"
      },
      "updated_at" : "2021-11-25T14:17:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979251635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r756954122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756954122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Bitcoin P2P connections are stateful, so you can't generally run them over say a UDP stack anyway.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-25T14:49:13Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r756954122",
      "id" : 756954122,
      "in_reply_to_id" : 754775773,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII584tHjQK",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 109,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 109,
      "pull_request_review_id" : 816075624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756954122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T14:49:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756954122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\ntxreconciliation.cpp:43:20: warning: private field 'm_k0' is not used [-Wunused-private-field]\r\n    const uint64_t m_k0, m_k1;\r\n                   ^\r\ntxreconciliation.cpp:43:26: warning: private field 'm_k1' is not used [-Wunused-private-field]\r\n    const uint64_t m_k0, m_k1;\r\n```",
      "created_at" : "2021-11-25T20:12:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-979450976",
      "id" : 979450976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5846YTxg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979450976/reactions"
      },
      "updated_at" : "2021-11-25T20:12:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979450976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r757207389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757207389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the pointer. Well the update warning could be in bold :p",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-26T03:24:41Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r757207389",
      "id" : 757207389,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tIhFd",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2584,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 816390205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757207389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-26T03:24:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757207389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110257"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110257"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would be nice to put this into the `node` directory. There is really no way to do anything tx-relay related without a full node.\r\n\r\nAlso, as you are putting this into libserver, for clarity the file should also be in the right directory.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-11-29T07:58:42Z",
      "diff_hunk" : "@@ -367,6 +368,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   txorphanage.cpp \\\n+  txreconciliation.cpp \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110257",
      "id" : 758110257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tL9gx",
      "original_commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "original_line" : 371,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : 817451127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110257/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-29T15:23:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \r\n```suggestion\r\nextern const char* SENDRECON;\r\n```",
      "commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "created_at" : "2021-11-29T07:59:43Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * The boolean indicates that a node is willing to participate in transaction\n+ * reconciliation, either as a sender or a receiver.\n+ * The salt is used to compute short txids needed for efficient reconciliation.\n+ */\n+extern const char *SENDRECON;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110848",
      "id" : 758110848,
      "line" : 271,
      "node_id" : "PRRC_kwDOABII584tL9qA",
      "original_commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "original_line" : 271,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 10,
      "pull_request_review_id" : 817451127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-29T08:05:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758112133"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758112133"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Assertions can't be tested in unit tests. If this was an exception, it could be tested.",
      "commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "created_at" : "2021-11-29T08:02:09Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758112133",
      "id" : 758112133,
      "in_reply_to_id" : 755594349,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tL9-F",
      "original_commit_id" : "4c0122e06b611c9d8f871a2dfb240b2aff269125",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 24,
      "pull_request_review_id" : 817451127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758112133/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-29T08:05:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758112133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "`Run process_message with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/process_message']fuzz: test/fuzz/process_message.cpp:57: auto initialize_process_message()::(anonymous class)::operator()() const: Assertion `\"GetNumMsgTypes() == getAllNetMessageTypes().size()\" && check' failed.",
      "created_at" : "2021-11-29T15:24:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-981740021",
      "id" : 981740021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5846hCn1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/981740021/reactions"
      },
      "updated_at" : "2021-11-29T15:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/981740021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758847726"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't this a problem in the case of a block-relay-only connection?\r\nIf I initiate an outbound block-relay-only connection, I set `m_tx_relay=nullptr` for this peer, don't send  SENDRECON and set `fRelay=0` in my version msg.\r\nMy peer gets an inbound connection, will set `pfrom.m_tx_relay->fRelayTxes` to false, but will still send out SENDRECON because `m_tx_relay!=nullptr`.\r\nSo wouldn't  I then receive a SENDRECON msg and immediately disconnect the peer?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-11-30T00:52:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726",
      "id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tOxju",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 818453973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758847726/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-30T01:12:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758847726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r760991194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760991194"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you are right. This case shouldn't get us disconnected from the peer.\r\n\r\nWhat would be the best way to detect peers which clearly do something meaningless?\r\nI mean, this check could be just dropped I guess, but ideally, it should handle misbehavior.\r\n\r\n",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-02T11:11:25Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r760991194",
      "id" : 760991194,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tW83a",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 821359342,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760991194/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-02T11:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760991194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495508"
         }
      },
      "author_association" : "NONE",
      "body" : "typo: \r\n```suggestion\r\n *    and combines the two sketches to find the difference in *sets*.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T00:51:08Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495508",
      "id" : 762495508,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584tcsIU",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 23,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495669"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: \"When the time comes\" doesn't really say much. I would either remove or replace with something more meaningful, like \"At repeated intervals\"",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T00:54:04Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495669",
      "id" : 762495669,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII584tcsK1",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 20,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495987"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: since we refer to short IDs later, I would change introduce this here:\r\n```suggestion\r\n *    is a compressed representation of short form IDs of the transactions in their set\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T00:59:05Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495987",
      "id" : 762495987,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII584tcsPz",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 21,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495987/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496439"
         }
      },
      "author_association" : "NONE",
      "body" : "I think reconciliation always fails if capacity is too low? And some suggested general rewording\r\n```suggestion\r\n * 5. If the difference is larger than estimated, reconciliation fails. Via an extension\r\n *    round (allowed only once), the initiator can request a larger sketch.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:06:46Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496439",
      "id" : 762496439,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tcsW3",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.h",
      "position" : 28,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496439/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496814"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: I think extension is optional, so maybe reconciliation is true in a more general sense?\r\n```suggestion\r\n * 7. If reconciliation fails, the initiator notifies the peer and announces all transactions from its\r\n *    own set. Once the peer received the failure notification, the peer announces all\r\n *    transactions from their set.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:12:49Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496814",
      "id" : 762496814,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII584tcscu",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : 30,
      "path" : "src/node/txreconciliation.h",
      "position" : 32,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496814/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 30,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762497694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762497694"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: don't think that's a member var?\r\n```suggestion\r\n        uint64_t local_recon_salt(GetRand(UINT64_MAX));\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:27:23Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762497694",
      "id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tcsqe",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762497694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762497694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762499136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762499136"
         }
      },
      "author_association" : "NONE",
      "body" : "Since ComputeSalt doesn't care about which is local and which is remote and you're passing by value, I think you could just skip the entire reassignment step\r\n```suggestion\r\nstatic uint256 ComputeSalt(uint64_t salt1, uint64_t salt2)\r\n{\r\n    // According to BIP-330, salts should be combined in ascending order.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:51:00Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762499136",
      "id" : 762499136,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tctBA",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : 21,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 24,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762499136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 21,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762499136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762600636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762600636"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't really think of this as misbehaviour: I think of the meaning of SENDRECON as \"I understand reconciliation and would like to participate in it on this connection\" - if just on of the two sides signal that - ok, no reconciliation on this connection, but no harm done. So I think it might make sense to drop the check.\r\n\r\nThat being said, I think it might still make sense to not send SENDRECON when our peer has signified `fRelay=false` in their version message. Obviously, this would also mean no reconciliation with BIP37 peers, but that seems also like a good thing?! \r\nThis has the additional benefit that no reconciliations would happen when one side is in blocksonly mode (i.e. has `m_tx_relay!=nullptr` but still doesn't wish to receive transactions). I think that currently, both sides would send SENDRECON in this case. One could also prevent this on the other side, by not sending out SENDRECON ourselves when in `-blocksonly` mode (`m_ignore_incoming_txs` set)",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T18:49:50Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762600636",
      "id" : 762600636,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tdFy8",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 823421640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762600636/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-05T18:49:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762600636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762639508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762639508"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`SuggestReconciling` sounds like a function name, but there is no such function.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T00:23:26Z",
      "diff_hunk" : "@@ -70,10 +103,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762639508",
      "id" : 762639508,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII584tdPSU",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 128,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 128,
      "pull_request_review_id" : 823455718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762639508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T22:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762639508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762647221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762647221"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:sketches",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T01:09:00Z",
      "diff_hunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762647221",
      "id" : 762647221,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584tdRK1",
      "original_commit_id" : "b55cbf63e15766bdabcac1c08b4cbfea0badeb04",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 23,
      "pull_request_review_id" : 823455718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762647221/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T22:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762647221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762818388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762818388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree with most of what you say except the BIP37 part. Are you implying BIP37 peers won't want reconciliations?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T09:10:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762818388",
      "id" : 762818388,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584td69U",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 823694654,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762818388/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T09:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762818388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763130556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763130556"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: I think this can be slightly more precise without increasing complexity, like in:\r\n```suggestion\r\n * The 2 booleans indicate that a node is willing to participate in transaction\r\n * reconciliation, respectively as an initiator or as a receiver.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T15:47:50Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * The boolean indicates that a node is willing to participate in transaction\n+ * reconciliation, either as a sender or a receiver.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763130556",
      "id" : 763130556,
      "line" : 268,
      "node_id" : "PRRC_kwDOABII584tfHK8",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 268,
      "original_position" : 7,
      "original_start_line" : 267,
      "path" : "src/protocol.h",
      "position" : 7,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763130556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 267,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763130556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763480456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763480456"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure. I don't know too much about BIP37 and its usage, but I thought it unlikely that SPVs using it would go through the efforts of implementing it and get significant gains from it when they are interested in a limited number of transactions anyway. Do you think participating in recons would make sense for them?\r\n\r\nThe issue is that BIP37 peers initially set `fRelay=false` in their version and later activate tx relay by sending a filter. So, if BIP37 peers should use reconciliation, disabling SENDRECON based on receiving `fRelay=false` is no longer possible, and all the logic needs to be on the side of the peer that sends `fRelay=false` (although this work just fine).",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T23:12:49Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763480456",
      "id" : 763480456,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tgcmI",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 824590329,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763480456/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T23:12:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763480456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763833321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763833321"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit in b55cbf63e15766bdabcac1c08b4cbfea0badeb04:\r\n\r\nThis ordering was really confusing for me, \"Step 4: now we know the full symmetrical difference... Step 5: sometimes we don't.... Step 6: go back to Step 4.\" It seems more intuitive if Step 4 is at the end, and other steps can \"Skip to Step n if successful.\"",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:05:20Z",
      "diff_hunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763833321",
      "id" : 763833321,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII584thyvp",
      "original_commit_id" : "b55cbf63e15766bdabcac1c08b4cbfea0badeb04",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : 24,
      "path" : "src/node/txreconciliation.h",
      "position" : 32,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763833321/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763833321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763839283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763839283"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c:\r\n\r\nBIP330 `sendrecon` [specification](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki#sendrecon) says: \r\n\r\n> The sendrecon message [...] Should be sent only after sending \"wtxidrelay\", and should be ignored if received before receiving \"wtxidrelay\" from the peer.\r\n\r\nSo it seems incorrect to disconnect. We should just ignore, i.e. `return`, no?\r\n\r\n",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:12:17Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763839283",
      "id" : 763839283,
      "line" : 2855,
      "node_id" : "PRRC_kwDOABII584th0Mz",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 2852,
      "original_position" : 31,
      "original_start_line" : 2847,
      "path" : "src/net_processing.cpp",
      "position" : 74,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763839283/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2850,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763839283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763842760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763842760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c:\r\n\r\nThis doesn't seem like it would be a peer protocol violation, but a bug in our node/implementation. If we didn't `PreRegisterPeer()` for some reason, we would disconnect the peer even though it's _our_ fault. Is this safe? Would it be better to `assert()` or `Assume()` instead?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:16:21Z",
      "diff_hunk" : "@@ -70,10 +103,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763842760",
      "id" : 763842760,
      "line" : 126,
      "node_id" : "PRRC_kwDOABII584th1DI",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 126,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 126,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763842760/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763842760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763844744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763844744"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 1e83fda9fe1be2ad17d57b287cb672595e3173a4:\r\n```suggestion\r\n     * Tear down all reconciliation-related state for this peer, if any exists.\r\n```\r\n\r\nI don't think this captures the purpose of this function quite accurately; we're not banning the peer from reconciliation, we're just tearing down state for a disconnected peer. Perhaps it would be more clear to just call this function `DisconnectedPeer()` (similar to txrequest)",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:18:40Z",
      "diff_hunk" : "@@ -57,6 +57,14 @@ class TxReconciliationTracker {\n      * This function must be called only once per peer.\n      */\n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    // Helpers\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763844744",
      "id" : 763844744,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII584th1iI",
      "original_commit_id" : "1e83fda9fe1be2ad17d57b287cb672595e3173a4",
      "original_line" : 65,
      "original_position" : 9,
      "original_start_line" : 64,
      "path" : "src/node/txreconciliation.h",
      "position" : 73,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763844744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 72,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763844744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763854039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763854039"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c\r\n\r\nSmall food for thought - the many assertions between bools to ensure one peer is initiator and the other peer is responder suggests to me that `ReconciliationState` is an appropriate use case for a `std::variant`.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:29:55Z",
      "diff_hunk" : "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763854039",
      "id" : 763854039,
      "line" : 53,
      "node_id" : "PRRC_kwDOABII584th3zX",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 53,
      "original_position" : 26,
      "original_start_line" : 49,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 53,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763854039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 49,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763854039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763857430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763857430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 76c6e557e8fe843d08b388cd2e541a1f9abed141:\r\n\r\njw, is there a reason you're using `assert`s instead of `BOOST_CHECK`?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:34:06Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763857430",
      "id" : 763857430,
      "line" : 18,
      "node_id" : "PRRC_kwDOABII584th4oW",
      "original_commit_id" : "76c6e557e8fe843d08b388cd2e541a1f9abed141",
      "original_line" : 18,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 18,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763857430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763857430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763860833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763860833"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 76c6e557e8fe843d08b388cd2e541a1f9abed141:\r\n\r\nI'm wondering if there's a way of checking that the `m_local_salts` are also properly torn down for peers when we `Forget` them. If `IsPeerRegistered()` is used primarily for testing, perhaps it would be more useful to have a \"do we know about this peer\" function.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:38:24Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);\n+}\n+\n+BOOST_AUTO_TEST_CASE(RegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+    const uint64_t salt = 0;\n+\n+    // Prepare a peer for reconciliation.\n+    tracker.PreRegisterPeer(0, true);\n+\n+    // Both roles are false, don't register.\n+    assert(!tracker.RegisterPeer(0, true, false, false, 1, salt));\n+\n+    // Invalid roles for the given connection direction.\n+    assert(!tracker.RegisterPeer(0, true, false, true, 1, salt));\n+    assert(!tracker.RegisterPeer(0, false, true, false, 1, salt));\n+\n+    // Invalid version.\n+    assert(!tracker.RegisterPeer(0, true, true, false, 0, salt));\n+\n+    // Valid registration.\n+    assert(!tracker.IsPeerRegistered(0));\n+    assert(tracker.RegisterPeer(0, true, true, false, 1, salt));\n+    assert(tracker.IsPeerRegistered(0));\n+\n+    // Reconciliation version is higher than ours, should be able to register.\n+    assert(!tracker.IsPeerRegistered(1));\n+    tracker.PreRegisterPeer(1, true);\n+    assert(tracker.RegisterPeer(1, true, true, false, 2, salt));\n+    assert(tracker.IsPeerRegistered(1));\n+\n+    // Do not register if there were no pre-registration for the peer.\n+    assert(!tracker.RegisterPeer(100, true, true, false, 1, salt));\n+    assert(!tracker.IsPeerRegistered(100));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ForgetPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+    NodeId peer_id0 = 0;\n+\n+    // Removing peer after pre-registring works and does not let to register the peer.\n+    tracker.PreRegisterPeer(peer_id0, true);\n+    tracker.ForgetPeer(peer_id0);\n+    assert(!tracker.RegisterPeer(peer_id0, true, true, false, 1, 1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763860833",
      "id" : 763860833,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII584th5dh",
      "original_commit_id" : "76c6e557e8fe843d08b388cd2e541a1f9abed141",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : 67,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 69,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763860833/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 67,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763860833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">Did you think about a -disablerecon command or something similar, to not activate Erlay until all the parts have been merged?\r\n\r\nYeah I was also thinking about how it's weird to send SENDRECON messages while they don't mean anything, but couldn't come up with any good solution.\r\nFor starters, I could comment out sending the message at least I guess.\r\n\r\nI guess a flag is better if someone wants to test this stuff via functional tests (without modifying the source code), so yeah, that's probably an ultimate solution. I'll add a commit for that.",
      "created_at" : "2021-12-07T10:39:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-987792742",
      "id" : 987792742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII58464IVm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987792742/reactions"
      },
      "updated_at" : "2021-12-07T10:39:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987792742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763865574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763865574"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In ea3b87af90e1649428cabac83012d6faa8df61f5:\r\n\r\nI think it would be helpful to add functional test coverage for `sendrecon` logic between 2 peers and assert ignore/disconnection/response. Specifically, test cases:\r\n- peer {1, 2} is {WTXID relay, TXID relay}\r\n- peer 1 creates a {outbound-full-relay, outbound-block-relay-only, manual} and peer 2 receives inbound connection\r\n- peer 2 puts fRelay=false\r\n- peer {1,2} sends `sendrecon`\r\n- peer 1 sends `sendrecon` {before, after} `wtxidrelay`\r\n- the `sendrecon` has version={0,1,2}",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:43:59Z",
      "diff_hunk" : "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763865574",
      "id" : 763865574,
      "line" : 1818,
      "node_id" : "PRRC_kwDOABII584th6nm",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1818,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/messages.py",
      "position" : 5,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763865574/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763865574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763874524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763874524"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c:\r\n\r\nBIP330 `sendrecon` [specification](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki#sendrecon) says:\r\n\r\n> Sender must set this to 1 currently, otherwise receiver should ignore the message. v1 is the lowest protocol version, everything below that is a protocol violation. \r\n\r\nShouldn't we be checking `recon_version` and return early (ignore) if the version is higher than `RECON_VERSION`? I suppose it's not possible to do from net_processing because that constant is inside of txreconciliation module.\r\n\r\nThis suggests to me that `RegisterPeer()` can't just return a bool, but an enum between {success, protocol violation, skipped for benign reason}, see my other comment about the fact that `RegisterPeer()` returns `false` for non-protocol-violation reasons as well https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763842760",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:55:06Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;\n+        uint32_t recon_version;\n+        uint64_t remote_salt;\n+        vRecv >> they_initiator >> they_responder >> recon_version >> remote_salt;\n+\n+        if (!m_reconciliation.RegisterPeer(pfrom.GetId(), pfrom.IsInboundConn(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763874524",
      "id" : 763874524,
      "line" : 2862,
      "node_id" : "PRRC_kwDOABII584th8zc",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 2859,
      "original_position" : 38,
      "original_start_line" : 2857,
      "path" : "src/net_processing.cpp",
      "position" : 81,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763874524/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2860,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763874524",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Yeah I was also thinking about how it's weird to send SENDRECON messages while they don't mean anything, but couldn't come up with any good solution.\r\nFor starters, I could comment out sending the message at least I guess.\r\n\r\nYou could also just gate everything under a `bool BIP330_RECONCILIATION_ENABLED{false}`: in net_processing.cpp, for every reconciliation-related message, `if (!BIP330_RECONCILIATION_ENABLED) return;` immediately at the top. Last commit/followup once everything is merged can be to remove them, which should be fairly simple.",
      "created_at" : "2021-12-07T11:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-987822405",
      "id" : 987822405,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII58464PlF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987822405/reactions"
      },
      "updated_at" : "2021-12-07T11:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987822405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763890863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763890863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "First of all, I'd note BIP37 user != SPV. You can think of another kind of implementation of BIP37, which filters, for example, 25% of all the addr space (not sure it's practical currently w.r.t filter size), doing that over N=20 connections with different filters to receive all transactions overall.\r\nGiven how unrealistic that is today, we can probably implement Erlay support for that once we know about this scenario?\r\n\r\nSecondly, let's consider a regular small-filter (say, 1000 of addrs for redundancy) SPV node. If it's connected to X serving nodes, it'd still get X times more tx announcements than needed. But considering how little is that bandwidth, reducing this redundancy might be useless, so yeah.\r\n\r\nAt the same time, I don't think this justification is particularly strong, but yeah, in the end we could just suggest SPV nodes to not send SENDRECON if they don't want. In that case, the outcome is that regular nodes would send `SENDRECON` even though 'fRelay=false', and in some cases that would be useless, but that's not a big deal. \r\n\r\nDo you agree with this thinking?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T11:16:45Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763890863",
      "id" : 763890863,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tiAyv",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 825132149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763890863/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:16:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763890863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "utACK [ea3b87a](https://github.com/bitcoin/bitcoin/pull/23443/commits/ea3b87af90e1649428cabac83012d6faa8df61f5)\r\n\r\nCode review, everything looks good to me outside nits raised by others.\r\n\r\nWill run the fuzzer for some cycles, and report back results.",
      "created_at" : "2021-12-07T20:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-988247922",
      "id" : 988247922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII584653dy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988247922/reactions"
      },
      "updated_at" : "2021-12-07T20:38:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988247922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/80422284?v=4",
         "events_url" : "https://api.github.com/users/GeneFerneau/events{/privacy}",
         "followers_url" : "https://api.github.com/users/GeneFerneau/followers",
         "following_url" : "https://api.github.com/users/GeneFerneau/following{/other_user}",
         "gists_url" : "https://api.github.com/users/GeneFerneau/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/GeneFerneau",
         "id" : 80422284,
         "login" : "GeneFerneau",
         "node_id" : "MDQ6VXNlcjgwNDIyMjg0",
         "organizations_url" : "https://api.github.com/users/GeneFerneau/orgs",
         "received_events_url" : "https://api.github.com/users/GeneFerneau/received_events",
         "repos_url" : "https://api.github.com/users/GeneFerneau/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/GeneFerneau/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/GeneFerneau/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/GeneFerneau"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764474638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764474638"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I agree it makes sense. To sum up, the suggestion would be \r\n1) to remove the `pfrom.m_tx_relay` check when receiving SENDRECON in order to not disconnect all block-relay-only peers, and to not disconnect if we receive a SENDRECON message but haven't sent one.\r\n2) to add a check for `m_ignore_incoming_txs`  [here](https://github.com/naumenkogs/bitcoin/blob/ea3b87af90e1649428cabac83012d6faa8df61f5/src/net_processing.cpp#L2586) in order to opt out of recons when in `-blocksonly` mode",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T01:04:37Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764474638",
      "id" : 764474638,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tkPUO",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 825915107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764474638/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T20:37:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764474638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764937051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764937051"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: Also, there may be a slight resource wastage by calculating the local salt in PreRegisterPeer already, since the peer may not make it to the next step. Have you considered doing this in the RegisterPeer step? More extremely, it could also be delayed until an actual reconciliation request is sent/received, but that extra code complexity of checking if the local salt exists for every request probably isn't worth it.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T14:52:03Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764937051",
      "id" : 764937051,
      "in_reply_to_id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tmANb",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764937051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764937051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764943726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764943726"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: suggested improvement for readability\r\n```suggestion\r\n     * If the peer violates the protocol, no state is changed and false is returned.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T14:58:50Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764943726",
      "id" : 764943726,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584tmB1u",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 64,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764943726/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764943726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764964616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764964616"
         }
      },
      "author_association" : "NONE",
      "body" : "I think you can avoid the copy constructor by making RECON_SALT_HASHER not const?\r\n```suggestion\r\n    static auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\r\n    return (RECON_SALT_HASHER << salt1 << salt2).GetSHA256();\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T15:21:11Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764964616",
      "id" : 764964616,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tmG8I",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 28,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764964616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764964616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764994273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764994273"
         }
      },
      "author_association" : "NONE",
      "body" : "typo:\r\n```suggestion\r\n        // If the peer supports the version which is lower than ours, we downgrade to the version\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T15:53:26Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764994273",
      "id" : 764994273,
      "line" : 114,
      "node_id" : "PRRC_kwDOABII584tmOLh",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 114,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 114,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764994273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764994273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765007876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765007876"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: I'm all in favour for using helpful variable names. In this case, I'm not convinced it makes the code easier to understand. Personally, I find the below easier to understand and keep in memory:\r\n```suggestion\r\n        bool they_initiate = they_may_initiate && peer_inbound;\r\n        bool we_initiate = !peer_inbound && they_may_respond;\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:08:05Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765007876",
      "id" : 765007876,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII584tmRgE",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 132,
      "original_position" : 132,
      "original_start_line" : 129,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 132,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765007876/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 129,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765007876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765009076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765009076"
         }
      },
      "author_association" : "NONE",
      "body" : "Since the peer can trigger both paths, I think it would be prudent to add a log entry in both of these cases?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:09:26Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765009076",
      "id" : 765009076,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII584tmRy0",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : 135,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 138,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765009076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 135,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765009076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765011857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765011857"
         }
      },
      "author_association" : "NONE",
      "body" : "This log should probably come before any state is changed? So I'd move it up to before calling `m_local_salts.emplace`",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:12:34Z",
      "diff_hunk" : "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765011857",
      "id" : 765011857,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII584tmSeR",
      "original_commit_id" : "b55cbf63e15766bdabcac1c08b4cbfea0badeb04",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 102,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765011857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765011857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment is unnecessary. No need to add comments about language features or common idioms like pimpl.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:13:29Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012677",
      "id" : 765012677,
      "line" : 39,
      "node_id" : "PRRC_kwDOABII584tmSrF",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 39,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012677/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\npublic:\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:13:36Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012765",
      "id" : 765012765,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII584tmSsd",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 43,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012765/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765014318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765014318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`explicit` prevents implicit conversions in the ctor arguments. This ctor has no arguments, so the `explicit` doesn't do anything. I'd suggest removing it.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:15:22Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765014318",
      "id" : 765014318,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584tmTEu",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 45,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765014318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765014318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765020695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765020695"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\npublic:\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:22:38Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765020695",
      "id" : 765020695,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII584tmUoX",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 38,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765020695/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765020695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765026580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765026580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There are quite a lot of modules that are used but not included, such as `sync.h` (for `Mutex`) and `cstdint` (for `uint64_t`, etc).",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:29:02Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765026580",
      "id" : 765026580,
      "line" : 5,
      "node_id" : "PRRC_kwDOABII584tmWEU",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 5,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765026580/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765026580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028260"
         }
      },
      "author_association" : "NONE",
      "body" : "Since 103e52dcd316a5b3e939f3880da566430820e567, I think this can be replace with IsPeerRegistered?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:30:59Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028260",
      "id" : 765028260,
      "line" : 112,
      "node_id" : "PRRC_kwDOABII584tmWek",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 112,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 112,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028260/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028315"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems like too high-level commentary on the salt ids.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:31:02Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028315",
      "id" : 765028315,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII584tmWfb",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 41,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 42,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028315/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 41,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765029181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765029181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think about adding a dedicated `BCLog::ERLAY` log category?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:32:03Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765029181",
      "id" : 765029181,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII584tmWs9",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 102,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765029181/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765029181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765034736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765034736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems unnecessary. The caller passes a bool argument `peer_inbound` into the function:\r\n\r\n- if `peer_inbound` is `true`, the function returns `<false, true, ...>`\r\n- if `peer_inbound` is `false`, the function returns `<true, false, ...>`\r\n\r\nand `peer_inbound` is not used for anything else. I suggest just removing the argument and return values.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:38:43Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765034736",
      "id" : 765034736,
      "line" : 94,
      "node_id" : "PRRC_kwDOABII584tmYDw",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : 88,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 94,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765034736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 88,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765034736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765036055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765036055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        uint64_t m_local_recon_salt{GetRand(UINT64_MAX)};\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:40:12Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765036055",
      "id" : 765036055,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tmYYX",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765036055/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765036055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765037134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765037134"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems strange to return a constant in every function call. Perhaps `PeerManager` can construct `TxReconciliationTracker` with the recon_version as a parameter, and always be aware of what version reconciliation tracker it owns?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:41:29Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765037134",
      "id" : 765037134,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584tmYpO",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765037134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765037134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765052120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765052120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it makes sense to store two maps from NodeId, where `m_local_salts` is only really needed between the `PreRegister` and `Register` steps. Why not add a `uint64_t` member to `ReconciliationState` that contains the local salt?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:58:48Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765052120",
      "id" : 765052120,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII584tmcTY",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 73,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765052120/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765052120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765097208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765097208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure I like this restriction. As far as I'm aware, this is the first feature negotiation message that has a strict ordering dependency on a different feature negotiation message.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T17:57:51Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765097208",
      "id" : 765097208,
      "line" : 2832,
      "node_id" : "PRRC_kwDOABII584tmnT4",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2832,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 51,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765097208/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765097208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765099791"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765099791"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What makes this a \"helper\"?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:01:17Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.\n+     */\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool recon_requestor, bool recon_responder, uint32_t recon_version, uint64_t remote_salt);\n+\n+    // Helpers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765099791",
      "id" : 765099791,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII584tmn8P",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 69,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765099791/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765099791",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102150"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's best to avoid multiple declarations on one line.\r\n\r\nAlso, I think these local variables can be avoided with:\r\n\r\n```c++\r\n    // According to BIP-330, salts should be combined in ascending order.\r\n    return (CHashWriter(RECON_SALT_HASHER) << std::min(salt1, salt2) << std::max(salt1, salt2)).GetSHA256();\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:04:41Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102150",
      "id" : 765102150,
      "line" : 25,
      "node_id" : "PRRC_kwDOABII584tmohG",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : 24,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 25,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102587"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Up to you, but `static` can be omitted since this is in the unnamed namespace.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:05:23Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102587",
      "id" : 765102587,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII584tmon7",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 21,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102587/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765104165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765104165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Prefer not to do multiple declarations on one line.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:07:44Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765104165",
      "id" : 765104165,
      "line" : 2857,
      "node_id" : "PRRC_kwDOABII584tmpAl",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2857,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 76,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765104165/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765104165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Do you mind using `AlignAfterOpenBracket` as specified in the clang-format file? (here and elsewhere)",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:11:07Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.\n+     */\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool recon_requestor, bool recon_responder, uint32_t recon_version, uint64_t remote_salt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106568",
      "id" : 765106568,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584tmpmI",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 66,
      "path" : "src/node/txreconciliation.h",
      "position" : 67,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106568/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 66,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106929"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is over-indented",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:11:41Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;\n+        uint32_t recon_version;\n+        uint64_t remote_salt;\n+        vRecv >> they_initiator >> they_responder >> recon_version >> remote_salt;\n+\n+        if (!m_reconciliation.RegisterPeer(pfrom.GetId(), pfrom.IsInboundConn(),\n+            they_initiator, they_responder, recon_version, remote_salt)) {\n+                LogPrint(BCLog::NET, \"reconciliation protocol violation from peer=%d; disconnecting\\n\", pfrom.GetId());\n+                pfrom.fDisconnect = true;\n+                return;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106929",
      "id" : 765106929,
      "line" : 2867,
      "node_id" : "PRRC_kwDOABII584tmprx",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2867,
      "original_position" : 86,
      "original_start_line" : 2864,
      "path" : "src/net_processing.cpp",
      "position" : 86,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106929/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2864,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765110101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765110101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is unnecessarily difficult to read. Please don't put multiple declarations/assignments on the same line.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:16:31Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765110101",
      "id" : 765110101,
      "line" : 129,
      "node_id" : "PRRC_kwDOABII584tmqdV",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 129,
      "original_position" : 129,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 129,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765110101/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765110101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765112979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765112979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment seems unnecessary. We're simply telling the `TxReconciliationTracker` to clear all state for this peer. That seems straightforward enough to not require a comment (similarly for the orphanage and txrequest modules).",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:20:38Z",
      "diff_hunk" : "@@ -1218,6 +1220,10 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n     }\n     WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n+    // Do not check whether peer is registered for reconciliation here, but rather delegate checks\n+    // to the module. Otherwise it's easy to skip deleting an intermediate state (e.g., we store\n+    // salt for peers before we register them for reconciliation).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765112979",
      "id" : 765112979,
      "line" : 1225,
      "node_id" : "PRRC_kwDOABII584tmrKT",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1225,
      "original_position" : 22,
      "original_start_line" : 1223,
      "path" : "src/net_processing.cpp",
      "position" : 22,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765112979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1223,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765112979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765114545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765114545"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree. If you're adding support for these messages to the test framework, then there should be test cases that use those messages.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:22:31Z",
      "diff_hunk" : "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765114545",
      "id" : 765114545,
      "in_reply_to_id" : 763865574,
      "line" : 1818,
      "node_id" : "PRRC_kwDOABII584tmrix",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1818,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/messages.py",
      "position" : 5,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765114545/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765114545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765231773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765231773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agreed, not just for completeness - that would have also caught the issue in https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726 - it is really easy to get the logic wrong in one of the many combinations, leading to erroneous disconnections.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T20:44:16Z",
      "diff_hunk" : "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765231773",
      "id" : 765231773,
      "in_reply_to_id" : 763865574,
      "line" : 1818,
      "node_id" : "PRRC_kwDOABII584tnIKd",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1818,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/messages.py",
      "position" : 5,
      "pull_request_review_id" : 826937792,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765231773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T20:44:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765231773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765733200"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765733200"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The reason for computing it here is that we need to return the salt from `PreRegisterPeer`, because we send the salt to the peer after pre-registering it.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:16:05Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765733200",
      "id" : 765733200,
      "in_reply_to_id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tpClQ",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 827602462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765733200/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-09T12:16:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765733200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765736224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765736224"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think without reassignment, swapping them for ordering would be unclear. You swap local with remote, and they loose the meaning.\r\n\r\nMaybe you can suggest a full code fragment for this function, which doesn't have this problem?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:20:18Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765736224",
      "id" : 765736224,
      "in_reply_to_id" : 762499136,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tpDUg",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : 21,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 24,
      "pull_request_review_id" : 827606550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765736224/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 21,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:20:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765736224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765738859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765738859"
         }
      },
      "author_association" : "NONE",
      "body" : "Right, didn't think of that, thanks for clearing up!",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:24:00Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765738859",
      "id" : 765738859,
      "in_reply_to_id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tpD9r",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 827610247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765738859/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-09T12:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765738859",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765743144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765743144"
         }
      },
      "author_association" : "NONE",
      "body" : "I agree, that would be confusing. That's why in the above suggested change, I also updated the function signature. There is no more reference to salts being local or remote.\r\n\r\nThe Suggested change should be complete (i.e. just applying the diff should be enough, but for completeness the entire function would be:\r\n```C++\r\nstatic uint256 ComputeSalt(uint64_t salt1, uint64_t salt2)\r\n{\r\n    // According to BIP-330, salts should be combined in ascending order.\r\n    if (salt1 > salt2) std::swap(salt1, salt2);\r\n\r\n    static auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\r\n    return (RECON_SALT_HASHER << salt1 << salt2).GetSHA256();\r\n}\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:29:36Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765743144",
      "id" : 765743144,
      "in_reply_to_id" : 762499136,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tpFAo",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : 21,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 24,
      "pull_request_review_id" : 827616138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765743144/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 21,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765743144",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765744130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765744130"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this an improvement though?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:30:58Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765744130",
      "id" : 765744130,
      "in_reply_to_id" : 764964616,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tpFQC",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 28,
      "pull_request_review_id" : 827617506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765744130/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:30:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765744130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765750354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765750354"
         }
      },
      "author_association" : "NONE",
      "body" : "Well I'm just not sure why you would call the `CHashWriter` constructor in the first place when `RECON_SALT_HASHER` already is a `CHashWriter`? I don't see the point, hence my suggestion to leave it out for simplicity. If you're worried about visual feedback re type, I would suggest replacing `auto` with `CHashWriter`.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:39:22Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765750354",
      "id" : 765750354,
      "in_reply_to_id" : 764964616,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tpGxS",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 28,
      "pull_request_review_id" : 827626052,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765750354/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765750354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766634218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766634218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you are right, this is the first time.\r\nI assume that we still want to have a dependency on WTXID, but don't have ordering between WTXID and SENDRECON.\r\n\r\nIf it's WTXID and then SENDRECON  it's clear (same as now), but what if SENDRECON comes first? It's kinda too early to \"Register\", but also we need to remember we received this message once we receive WTXID and can register.\r\nI see the following options:\r\n\r\n1. Optimistically register at the receiving of SENDRECON (even if came first). Then, unregister if at VERACK we haven't received wtxid.\r\n2. Track receiving SENDRECON in a yet-another-variable like, and register only when both are set (could be also at verack, or not).\r\n\r\nI think (1) is better.",
      "commit_id" : "5136f509e8c8a3cd23ad9c0433b3a6436619bdd8",
      "created_at" : "2021-12-10T12:19:15Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766634218",
      "id" : 766634218,
      "in_reply_to_id" : 765097208,
      "line" : 2829,
      "node_id" : "PRRC_kwDOABII584tsejq",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2829,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 48,
      "pull_request_review_id" : 828830058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766634218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T12:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766634218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766648233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766648233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1. A new member would sit there with no use most of the `ReconciliationState` lifetime\r\n2. `ReconciliationState` would be initialized but not ready to use for reconciliations (while there is no full salt)\r\n\r\nI thought the latter might be particularly confusing in terms of understanding the protocol flow",
      "commit_id" : "5136f509e8c8a3cd23ad9c0433b3a6436619bdd8",
      "created_at" : "2021-12-10T12:42:32Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766648233",
      "id" : 766648233,
      "in_reply_to_id" : 765052120,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII584tsh-p",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 73,
      "pull_request_review_id" : 828849905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766648233/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T12:42:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766648233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766703614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766703614"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought it's better to use internal access internally. Loose coupling & high cohesion i guess.",
      "commit_id" : "07b9357c8a4cfbf217cad6380411fab39cf14efe",
      "created_at" : "2021-12-10T14:05:22Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766703614",
      "id" : 766703614,
      "in_reply_to_id" : 765028260,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584tsvf-",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 828929643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766703614/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T14:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766703614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Still going through comments, beware it's not the final shape from my side.",
      "created_at" : "2021-12-10T14:14:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-991008365",
      "id" : 991008365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5847EZZt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/991008365/reactions"
      },
      "updated_at" : "2021-12-10T14:14:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/991008365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766711129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766711129"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is this file even compiled? I can't find it in the makefile",
      "commit_id" : "07b9357c8a4cfbf217cad6380411fab39cf14efe",
      "created_at" : "2021-12-10T14:15:35Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766711129",
      "id" : 766711129,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII584tsxVZ",
      "original_commit_id" : "07b9357c8a4cfbf217cad6380411fab39cf14efe",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 11,
      "pull_request_review_id" : 828940597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766711129/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T14:15:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766711129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768029084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029084"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks for changing this @naumenkogs. There is still a [reference](https://github.com/bitcoin/bitcoin/pull/23443/files#diff-62e6a7c4c23e68b88bd585db25bb0a10e6ccda2d7fff2f05769bc0a1ad81dcdcR123) to `we_may_respond` in the comments that you probably want to take out too?",
      "commit_id" : "c125663467ce83ecb36c2686e3200097924deefe",
      "created_at" : "2021-12-13T18:48:19Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768029084",
      "id" : 768029084,
      "in_reply_to_id" : 765007876,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584txzGc",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 132,
      "original_position" : 132,
      "original_start_line" : 129,
      "path" : "src/node/txreconciliation.cpp",
      "position" : null,
      "pull_request_review_id" : 830624832,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-13T18:48:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768067055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768067055"
         }
      },
      "author_association" : "NONE",
      "body" : "I don't see how this helps with reducing coupling/increasing cohesion, when IsPeerRegistered is a public member of the same class? This just looks like a regular case of DRY imo. Plus, readability improves.",
      "commit_id" : "c125663467ce83ecb36c2686e3200097924deefe",
      "created_at" : "2021-12-13T19:42:48Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768067055",
      "id" : 768067055,
      "in_reply_to_id" : 765028260,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584tx8Xv",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 830678728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768067055/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-13T19:42:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768067055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r771225117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771225117"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably you are right",
      "commit_id" : "c125663467ce83ecb36c2686e3200097924deefe",
      "created_at" : "2021-12-17T09:17:49Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r771225117",
      "id" : 771225117,
      "in_reply_to_id" : 765028260,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584t9_Yd",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 834998478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771225117/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-17T09:17:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771225117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r772992557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772992557"
         }
      },
      "author_association" : "MEMBER",
      "body" : "With the [latest code](https://github.com/bitcoin/bitcoin/blob/03d76fa4385bfac2a58972ed3caaca1de788b2bb/src/net_processing.cpp#L2807), we also call it when a peer forgot to send us wtxid (although being pre-registered by sending us SENDRECON). So `DisconenctedPeer()` would be quite inaccurate.\r\n",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2021-12-21T09:59:04Z",
      "diff_hunk" : "@@ -57,6 +57,14 @@ class TxReconciliationTracker {\n      * This function must be called only once per peer.\n      */\n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    // Helpers\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r772992557",
      "id" : 772992557,
      "in_reply_to_id" : 763844744,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII584uEu4t",
      "original_commit_id" : "1e83fda9fe1be2ad17d57b287cb672595e3173a4",
      "original_line" : 72,
      "original_position" : 9,
      "original_start_line" : 64,
      "path" : "src/node/txreconciliation.h",
      "position" : 72,
      "pull_request_review_id" : 837237282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772992557/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 71,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T09:59:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772992557",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r772993911"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772993911"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah my initial intention was to make it good for future where both could be true or false, and avoid having a 4-way variant of {YESYES NONO YESNO NOYES}.\r\nBut hey, since this future might be very far ahead, you're probably right. Will do.",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2021-12-21T10:00:56Z",
      "diff_hunk" : "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r772993911",
      "id" : 772993911,
      "in_reply_to_id" : 763854039,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584uEvN3",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 45,
      "original_position" : 26,
      "original_start_line" : 49,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 45,
      "pull_request_review_id" : 837239194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772993911/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 41,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T10:00:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/772993911",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r773009289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773009289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Actually, I think, it would be very useful if you take a look at the [final Erlay code fragment](https://github.com/bitcoin/bitcoin/blob/5728fac4d3d29f64ea811f5978e80dabdc083d87/src/txreconciliation.cpp#L230)?\r\n\r\nSo, the structure there is:\r\n1. class `ReconciliationState`, which has 2 fields: `ReconciliationInitByUs` and `ReconciliationInitByUs`.\r\n2. Those two fields are structs, corresponding to Initiator and Responder roles. They encapsulate specific stuff.\r\n3. The rest of `ReconciliationState` is stuff which is not specific to a role (salt, for example).\r\n\r\nI guess I just used another pattern for that.\r\n\r\nIf I understand you correctly, you suggesting using std::variant<Initiator, Responder> instead of ReconciliationState. \r\n\r\nIs std::variant still a good candidate in that case? What would be the right way for them to have many fields in common?\r\nI guess `Initiator` and `Responder` could be inherited from one shared parent with all that stuff.",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2021-12-21T10:20:23Z",
      "diff_hunk" : "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r773009289",
      "id" : 773009289,
      "in_reply_to_id" : 763854039,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584uEy-J",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 45,
      "original_position" : 26,
      "original_start_line" : 49,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 45,
      "pull_request_review_id" : 837260055,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773009289/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 41,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T10:20:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773009289",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r773022918"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773022918"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For this particular comment, I think we should just update the bip. HIgher protocol version shouldn't be ignored, we just take the minimum between the two and use that. So, will update the bip.\r\n\r\nIn general, I hear you about returning from `RegisterPeer`. Will address that in the context where it needs to be addressed (not in this one).",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2021-12-21T10:38:21Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;\n+        uint32_t recon_version;\n+        uint64_t remote_salt;\n+        vRecv >> they_initiator >> they_responder >> recon_version >> remote_salt;\n+\n+        if (!m_reconciliation.RegisterPeer(pfrom.GetId(), pfrom.IsInboundConn(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r773022918",
      "id" : 773022918,
      "in_reply_to_id" : 763874524,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584uE2TG",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 2859,
      "original_position" : 38,
      "original_start_line" : 2857,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 837280515,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773022918/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-21T10:38:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773022918",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r773168910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773168910"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I started integrating `m_local_salt` into `ReconciliationState`, and realized that I'm not sure what's the best way to check the state of the peer (pre-registered or registered)?\r\n1. A new `m_registrered` flag in `ReconciliationState`\r\n2. Make `m_local_salt` in ReconciliationState optional, and if it's nullptr -- means it's registered already (more implicit approach)\r\n3. Something even crazier is having `std::variant <std::pair<NodeId, uint64_t>, ReconciliationState> m_states`, so that the value could be either a node<->salt mapping (pre-registered) and `ReconciliationState` (registered)\r\n\r\n@glozow do you have an opinion?",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2021-12-21T14:12:25Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r773168910",
      "id" : 773168910,
      "in_reply_to_id" : 765052120,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584uFZ8O",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 67,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 67,
      "pull_request_review_id" : 837481467,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773168910/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-21T14:12:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/773168910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r777968555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777968555"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree with having the salt inside of `ReconciliationState`, and it seems like (2) would be most idiomatic - `std::optional<ReconciliationState>` where nullopt means not registered yet.",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2022-01-04T10:18:45Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r777968555",
      "id" : 777968555,
      "in_reply_to_id" : 765052120,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584uXtur",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 67,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 67,
      "pull_request_review_id" : 843401632,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777968555/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-04T10:18:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/777968555",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r782901287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/782901287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Sorry, I have realized I was missing some context. Right now, one peer is Initiator and the other is Responder, but do you envision it being more dynamic in future versions of the protocol? If so, perhaps it doesn't make sense to use a variant. But perhaps, since you only have 2 possibilities right now, you only need 1 bool instead of 2?",
      "commit_id" : "03d76fa4385bfac2a58972ed3caaca1de788b2bb",
      "created_at" : "2022-01-12T09:54:24Z",
      "diff_hunk" : "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r782901287",
      "id" : 782901287,
      "in_reply_to_id" : 763854039,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584uqiAn",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 45,
      "original_position" : 26,
      "original_start_line" : 49,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 45,
      "pull_request_review_id" : 850239566,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/782901287/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 41,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-12T09:54:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/782901287",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Jahad59ghasem@gmail.com ",
      "created_at" : "2022-01-21T23:16:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1018935224",
      "id" : 1018935224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5848u7e4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018935224/reactions"
      },
      "updated_at" : "2022-01-21T23:16:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018935224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/77815530?v=4",
         "events_url" : "https://api.github.com/users/jaho8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaho8/followers",
         "following_url" : "https://api.github.com/users/jaho8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaho8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaho8",
         "id" : 77815530,
         "login" : "jaho8",
         "node_id" : "MDQ6VXNlcjc3ODE1NTMw",
         "organizations_url" : "https://api.github.com/users/jaho8/orgs",
         "received_events_url" : "https://api.github.com/users/jaho8/received_events",
         "repos_url" : "https://api.github.com/users/jaho8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaho8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaho8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaho8"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r792576010"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792576010"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Based on more discussions with Gloria, I think we keep this field, but in latter commits we switch to\r\n`std::variant<ReconciliationInitByUs, ReconciliationInitByThem> m_current_recon;`\r\nwhich would dictate us the role of the peer.\r\n",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-01-26T12:12:29Z",
      "diff_hunk" : "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r792576010",
      "id" : 792576010,
      "in_reply_to_id" : 763854039,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vPcAK",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 45,
      "original_position" : 26,
      "original_start_line" : 49,
      "path" : "src/node/txreconciliation.cpp",
      "position" : null,
      "pull_request_review_id" : 863457829,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792576010/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-26T12:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/792576010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and addressed most of the comments.\r\n\r\nThe only remaining thing is to make functional tests for this. I'm working on that.",
      "created_at" : "2022-01-26T16:22:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1022363807",
      "id" : 1022363807,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII58488Aif",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022363807/reactions"
      },
      "updated_at" : "2022-01-26T16:22:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022363807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809020452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809020452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you want to `sync_with_ping()` here, and then assert not received. otherwise the message could be unreceived due to race condition",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-17T12:57:42Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809020452",
      "id" : 809020452,
      "line" : 71,
      "node_id" : "PRRC_kwDOABII584wOKwk",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 71,
      "original_position" : 71,
      "original_start_line" : 70,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 71,
      "pull_request_review_id" : 885919214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809020452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 70,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-17T12:59:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809020452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809021300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809021300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "you can use `wait_for_disconnect()`. sleeping is insufficient; it could take longer to disconnect especially if other functional tests are being run in parallel\r\n\r\n(same with the rest of the disconnection tests)",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-17T12:58:39Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        # Checks for the node *receiving* SENDRECON\n+        self.log.info('valid SENDRECON')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert peer.is_connected\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809021300",
      "id" : 809021300,
      "line" : 94,
      "node_id" : "PRRC_kwDOABII584wOK90",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : 93,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 94,
      "pull_request_review_id" : 885919214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809021300/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 93,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-17T12:59:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809021300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809021603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809021603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "use `BOOST_CHECK()`",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-17T12:59:03Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(RegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    const uint64_t salt = 0;\n+\n+    // Prepare a peer for reconciliation.\n+    tracker.PreRegisterPeer(0);\n+\n+    // Both roles are false, don't register.\n+    assert(!tracker.RegisterPeer(0, true, false, false, 1, salt).value());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809021603",
      "id" : 809021603,
      "line" : 22,
      "node_id" : "PRRC_kwDOABII584wOLCj",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 22,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 885919214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809021603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-17T12:59:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809021603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809933620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809933620"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 812ea2a7ddc71ed0ea7602b278a5b2d1a53b4101\r\n\r\nnit: misaligned",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T11:56:00Z",
      "diff_hunk" : "@@ -62,6 +62,7 @@ namespace BCLog {\n         LOCK        = (1 << 24),\n         UTIL        = (1 << 25),\n         BLOCKSTORE  = (1 << 26),\n+        TXRECON  = (1 << 27),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809933620",
      "id" : 809933620,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII584wRps0",
      "original_commit_id" : "812ea2a7ddc71ed0ea7602b278a5b2d1a53b4101",
      "original_line" : 65,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/logging.h",
      "position" : 4,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809933620/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809933620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809936096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809936096"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d53b4bc0360760737b250b81e82c4d8e6e6b1144:\r\n```suggestion\r\n    argsman.AddArg(\"-txrecon\", strprintf(\"Enable transaction reconciliations per BIP-330 (default: %d)\", DEFAULT_TXRECON_ENABLE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\r\n```\r\n\r\nI like this approach of using `-txrecon` config to turn it on. Imo we should make it debug-only as well, otherwise users might be confused and think their node can use Erlay even though the rest of the functionality isn't there yet?",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T11:59:44Z",
      "diff_hunk" : "@@ -469,6 +469,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-txrecon\", strprintf(\"Enable transaction reconciliations per BIP-330 (default: %d)\", DEFAULT_TXRECON_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809936096",
      "id" : 809936096,
      "line" : 472,
      "node_id" : "PRRC_kwDOABII584wRqTg",
      "original_commit_id" : "d53b4bc0360760737b250b81e82c4d8e6e6b1144",
      "original_line" : 472,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 4,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809936096/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809936096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809944439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809944439"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 77d1aaab3e62aae2319860049781f4e9f0087521:\r\n\r\nI like that there is no longer an ordering requirement between wtxidrelay and sendrecon :+1: \r\n\r\nQuestion: shouldn't there be a gate for whether or not we're doing reconciliations at all?",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:12:48Z",
      "diff_hunk" : "@@ -2837,6 +2837,18 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             nCMPCTBLOCKVersion = 1;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+\n+        LOCK(cs_main);\n+        const auto peer_id = pfrom.GetId();\n+        if (!State(peer_id)->m_wtxid_relay) {\n+            // We could have optimistically pre-registered the peer on sending SENDRECON, or\n+            // registered upon receiving SENDRECON afterwards.\n+            // Now we are sure they won't announce WTXIDRELAY (can't happen after VERACK).\n+            // We should clear the reconciliation state of the peer (because we support\n+            // reconciliations only based on wtxids).\n+            m_reconciliation.ForgetPeer(peer_id);\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809944439",
      "id" : 809944439,
      "line" : 2850,
      "node_id" : "PRRC_kwDOABII584wRsV3",
      "original_commit_id" : "77d1aaab3e62aae2319860049781f4e9f0087521",
      "original_line" : 2850,
      "original_position" : 14,
      "original_start_line" : 2841,
      "path" : "src/net_processing.cpp",
      "position" : 14,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809944439/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2841,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809944439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809945870"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809945870"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 38cd00572de8540138eb0140553e9ab669b457b2:\r\n\r\nnit: Maybe add some argument labels to make a future dev's life a bit easier? Even just commenting the first one would be helpful.\r\n```suggestion\r\n    assert(!tracker.RegisterPeer(/*peer_id=*/ 0, /*peer_inbound=*/ true, /*they_may_initiate=*/ false, /*they_may_respond=*/ false, /*peer_recon_version=*/ 1, salt).value());\r\n```",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:15:01Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(RegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker(1);\n+    const uint64_t salt = 0;\n+\n+    // Prepare a peer for reconciliation.\n+    tracker.PreRegisterPeer(0);\n+\n+    // Both roles are false, don't register.\n+    assert(!tracker.RegisterPeer(0, true, false, false, 1, salt).value());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809945870",
      "id" : 809945870,
      "line" : 22,
      "node_id" : "PRRC_kwDOABII584wRssO",
      "original_commit_id" : "38cd00572de8540138eb0140553e9ab669b457b2",
      "original_line" : 22,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 22,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809945870/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809945870",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809947516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809947516"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d3cc218415f3a5f9a7170cda48a5e3938900832c:\r\n\r\nRemove this print? Or at least use `self.log`",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:17:27Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809947516",
      "id" : 809947516,
      "line" : 36,
      "node_id" : "PRRC_kwDOABII584wRtF8",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 36,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809947516/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809947516",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809952603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809952603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d3cc218415f3a5f9a7170cda48a5e3938900832c:\r\n\r\nNice, I like the new tests. Are you missing a test case for when the peer sends more than 1 `sendrecon` ?",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:24:59Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        # Checks for the node *receiving* SENDRECON\n+        self.log.info('valid SENDRECON')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert peer.is_connected\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer.send_message(sendrecon_no_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=1 and responder=0 from inbound triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = False\n+        sendrecon_wrong_role.responder = True\n+        peer.send_message(sendrecon_wrong_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=0 and responder=1 from outbound triggers a disconnect')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = True\n+        sendrecon_wrong_role.responder = False\n+        peer.send_message(sendrecon_wrong_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with version=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_low_version = create_sendrecon_msg()\n+        sendrecon_low_version.version = 0\n+        peer.send_message(sendrecon_low_version)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON after VERACK triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_for_verack()\n+        peer.send_message(msg_verack())\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809952603",
      "id" : 809952603,
      "line" : 142,
      "node_id" : "PRRC_kwDOABII584wRuVb",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 142,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 142,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809952603/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809952603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809957802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809957802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d53b4bc0360760737b250b81e82c4d8e6e6b1144:\r\n\r\nPerhaps it would make more sense to have `PeerManagerImpl` keep a `std::unique_ptr<TxReconciliationTracker>` and *only* initialize the recon tracker if `-txrecon` is on?\r\nAnd further, check whether `m_reconciliation` points to something to figure out whether we have txrecon enabled, instead of querying the ArgsManager every time.",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:32:35Z",
      "diff_hunk" : "@@ -425,6 +428,7 @@ class PeerManagerImpl final : public PeerManager\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n+    TxReconciliationTracker m_reconciliation;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809957802",
      "id" : 809957802,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wRvmq",
      "original_commit_id" : "d53b4bc0360760737b250b81e82c4d8e6e6b1144",
      "original_line" : 431,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 21,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809957802/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809957802",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809958088"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809958088"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in d53b4bc0360760737b250b81e82c4d8e6e6b1144:\r\n\r\nnit\r\n```suggestion\r\nstatic constexpr uint32_t RECON_VERSION{1};\r\n```",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:33:01Z",
      "diff_hunk" : "@@ -172,6 +173,8 @@ static constexpr double MAX_ADDR_RATE_PER_SECOND{0.1};\n  *  based increments won't go above this, but the MAX_ADDR_TO_SEND increment following GETADDR\n  *  is exempt from this limit). */\n static constexpr size_t MAX_ADDR_PROCESSING_TOKEN_BUCKET{MAX_ADDR_TO_SEND};\n+/** Supported transaction reconciliation protocol version */\n+static constexpr uint32_t RECON_VERSION = 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809958088",
      "id" : 809958088,
      "line" : 177,
      "node_id" : "PRRC_kwDOABII584wRvrI",
      "original_commit_id" : "d53b4bc0360760737b250b81e82c4d8e6e6b1144",
      "original_line" : 177,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 13,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809958088/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809958088",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809959951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809959951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should mention BIP330 here",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:35:50Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * The 2 booleans indicate that a node is willing to participate in transaction\n+ * reconciliation, respectively as an initiator or as a receiver.\n+ * The salt is used to compute short txids needed for efficient reconciliation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809959951",
      "id" : 809959951,
      "line" : 269,
      "node_id" : "PRRC_kwDOABII584wRwIP",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 269,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 8,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809959951/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809959951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809964211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809964211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 182d984136066fd4f09b3e1a1bbd9b50c6cb87be\r\n\r\nNice doxygen comments. Can you specify here whether it's safe/not to call `ForgetPeer` multiple times for the same peer?",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:42:05Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0.  Reconciliation protocol handshake.\n+ * 1.  Once we receive a new transaction, add it to the set instead of announcing immediately.\n+ * 2.  At regular intervals, a reconciliation initiator requests a sketch from the peer, where a\n+ *     sketch is a compressed representation of short form IDs of the transactions in their set.\n+ * 3.  Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *     and combines the two sketches to attempt finding the difference in *sets*.\n+ * 4a. If the difference was not larger than estimated, see SUCCESS below.\n+ * 4b. If the difference was larger than estimated, initial reconciliation fails. The initiator\n+ *     requests a larger sketch via an extension round (allowed only once).\n+ *     - If extension succeeds (a larger sketch is sufficient), see SUCCESS below.\n+ *     - If extension fails (a larger sketch is insufficient), see FAILURE below.\n+ *\n+ * SUCCESS. The initiator knows full symmetrical difference and can request what the initiator is\n+ *          missing and announce to the peer what the peer is missing.\n+ *\n+ * FAILURE. The initiator notifies the peer about the failure and announces all transactions from\n+ *          the corresponding set. Once the peer received the failure notification, the peer\n+ *          announces all transactions from their set.\n+\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker\n+{\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+public:\n+    explicit TxReconciliationTracker(uint32_t recon_version);\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state (salt) required to reconcile with the peer.\n+     * The salt used for short ID computation required for reconciliation.\n+     * The function returns the salt.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    uint64_t PreRegisterPeer(NodeId peer_id);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Returns:\n+     * - true if the peer was registered\n+     * - false if the peer violates the protocol\n+     * - nullopt if nothing was done (e.g., we haven't pre-registered this peer)\n+     */\n+    std::optional<bool> RegisterPeer(NodeId peer_id, bool peer_inbound, bool recon_requestor,\n+                                     bool recon_responder, uint32_t peer_recon_version, uint64_t remote_salt);\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809964211",
      "id" : 809964211,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII584wRxKz",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 72,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809964211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809964211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809967331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809967331"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Makes sense - can you update the commit message of 182d984136066fd4f09b3e1a1bbd9b50c6cb87be to say \"Forget peer's reconciliation state on disconnect and when wtxidrelay is not sent\" so that it's documented there as well?",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-18T12:46:37Z",
      "diff_hunk" : "@@ -57,6 +57,14 @@ class TxReconciliationTracker {\n      * This function must be called only once per peer.\n      */\n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    // Helpers\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r809967331",
      "id" : 809967331,
      "in_reply_to_id" : 763844744,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII584wRx7j",
      "original_commit_id" : "1e83fda9fe1be2ad17d57b287cb672595e3173a4",
      "original_line" : 72,
      "original_position" : 9,
      "original_start_line" : 64,
      "path" : "src/node/txreconciliation.h",
      "position" : 72,
      "pull_request_review_id" : 887183165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809967331/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 71,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-18T12:48:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809967331",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812763122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812763122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This doesn't work prior to verack? Where it's possible, i add it. Here, i can increase a timer... or what would you suggest?",
      "commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "created_at" : "2022-02-23T10:44:37Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812763122",
      "id" : 812763122,
      "in_reply_to_id" : 809020452,
      "line" : 71,
      "node_id" : "PRRC_kwDOABII584wccfy",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 71,
      "original_position" : 71,
      "original_start_line" : 70,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 71,
      "pull_request_review_id" : 890898982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812763122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 70,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-23T10:44:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812763122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812779857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812779857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What makes this function different from others, for which we don't mention this?",
      "commit_id" : "88e5b0f8ade15eb48c9da5b94a0628b69a2a6e17",
      "created_at" : "2022-02-23T11:05:29Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0.  Reconciliation protocol handshake.\n+ * 1.  Once we receive a new transaction, add it to the set instead of announcing immediately.\n+ * 2.  At regular intervals, a reconciliation initiator requests a sketch from the peer, where a\n+ *     sketch is a compressed representation of short form IDs of the transactions in their set.\n+ * 3.  Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *     and combines the two sketches to attempt finding the difference in *sets*.\n+ * 4a. If the difference was not larger than estimated, see SUCCESS below.\n+ * 4b. If the difference was larger than estimated, initial reconciliation fails. The initiator\n+ *     requests a larger sketch via an extension round (allowed only once).\n+ *     - If extension succeeds (a larger sketch is sufficient), see SUCCESS below.\n+ *     - If extension fails (a larger sketch is insufficient), see FAILURE below.\n+ *\n+ * SUCCESS. The initiator knows full symmetrical difference and can request what the initiator is\n+ *          missing and announce to the peer what the peer is missing.\n+ *\n+ * FAILURE. The initiator notifies the peer about the failure and announces all transactions from\n+ *          the corresponding set. Once the peer received the failure notification, the peer\n+ *          announces all transactions from their set.\n+\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker\n+{\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+public:\n+    explicit TxReconciliationTracker(uint32_t recon_version);\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state (salt) required to reconcile with the peer.\n+     * The salt used for short ID computation required for reconciliation.\n+     * The function returns the salt.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    uint64_t PreRegisterPeer(NodeId peer_id);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Returns:\n+     * - true if the peer was registered\n+     * - false if the peer violates the protocol\n+     * - nullopt if nothing was done (e.g., we haven't pre-registered this peer)\n+     */\n+    std::optional<bool> RegisterPeer(NodeId peer_id, bool peer_inbound, bool recon_requestor,\n+                                     bool recon_responder, uint32_t peer_recon_version, uint64_t remote_salt);\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812779857",
      "id" : 812779857,
      "in_reply_to_id" : 809964211,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII584wcglR",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 72,
      "pull_request_review_id" : 890922203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812779857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-23T11:05:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812779857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812835677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812835677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`        self.log.info('second SENDRECON triggers a disconnect')`, it's there",
      "commit_id" : "88e5b0f8ade15eb48c9da5b94a0628b69a2a6e17",
      "created_at" : "2022-02-23T12:21:33Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        # Checks for the node *receiving* SENDRECON\n+        self.log.info('valid SENDRECON')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert peer.is_connected\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer.send_message(sendrecon_no_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=1 and responder=0 from inbound triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = False\n+        sendrecon_wrong_role.responder = True\n+        peer.send_message(sendrecon_wrong_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=0 and responder=1 from outbound triggers a disconnect')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = True\n+        sendrecon_wrong_role.responder = False\n+        peer.send_message(sendrecon_wrong_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with version=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_low_version = create_sendrecon_msg()\n+        sendrecon_low_version.version = 0\n+        peer.send_message(sendrecon_low_version)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON after VERACK triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_for_verack()\n+        peer.send_message(msg_verack())\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812835677",
      "id" : 812835677,
      "in_reply_to_id" : 809952603,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII584wcuNd",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 135,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 135,
      "pull_request_review_id" : 891000773,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812835677/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-23T12:21:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812835677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812926023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812926023"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems like CI is failing on this:\r\n```suggestion\r\n    if (m_txreconciliation) m_txreconciliation->ForgetPeer(nodeid);\r\n```",
      "commit_id" : "88e5b0f8ade15eb48c9da5b94a0628b69a2a6e17",
      "created_at" : "2022-02-23T14:06:54Z",
      "diff_hunk" : "@@ -1251,6 +1253,7 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n     }\n     WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n+    m_txreconciliation->ForgetPeer(nodeid);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812926023",
      "id" : 812926023,
      "line" : 1256,
      "node_id" : "PRRC_kwDOABII584wdERH",
      "original_commit_id" : "88e5b0f8ade15eb48c9da5b94a0628b69a2a6e17",
      "original_line" : 1256,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 24,
      "pull_request_review_id" : 891130109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812926023/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-23T15:08:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812926023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812939078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812939078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oops, thanks!",
      "commit_id" : "88e5b0f8ade15eb48c9da5b94a0628b69a2a6e17",
      "created_at" : "2022-02-23T14:19:42Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received\n+\n+        # Checks for the node *receiving* SENDRECON\n+        self.log.info('valid SENDRECON')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert peer.is_connected\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer.send_message(sendrecon_no_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=1 and responder=0 from inbound triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = False\n+        sendrecon_wrong_role.responder = True\n+        peer.send_message(sendrecon_wrong_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with initiator=0 and responder=1 from outbound triggers a disconnect')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = True\n+        sendrecon_wrong_role.responder = False\n+        peer.send_message(sendrecon_wrong_role)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON with version=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_low_version = create_sendrecon_msg()\n+        sendrecon_low_version.version = 0\n+        peer.send_message(sendrecon_low_version)\n+        time.sleep(1)\n+        assert not peer.is_connected\n+\n+        self.log.info('SENDRECON after VERACK triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_for_verack()\n+        peer.send_message(msg_verack())\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert not peer.is_connected\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812939078",
      "id" : 812939078,
      "in_reply_to_id" : 809952603,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII584wdHdG",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 135,
      "original_position" : 142,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 135,
      "pull_request_review_id" : 891130109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812939078/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-23T15:08:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812939078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812995622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812995622"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ah my bad! well, could you wait until verack handshake is done, and then assert that sendrecon was never recieved?\r\n\r\n```\r\npeer.wait_for_verack()\r\nassert not peer.sendrecon_msg_received\r\n```",
      "commit_id" : "88e5b0f8ade15eb48c9da5b94a0628b69a2a6e17",
      "created_at" : "2022-02-23T15:10:56Z",
      "diff_hunk" : "@@ -0,0 +1,168 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        print(message)\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        time.sleep(1)\n+        assert not peer.sendrecon_msg_received",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r812995622",
      "id" : 812995622,
      "in_reply_to_id" : 809020452,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wdVQm",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 70,
      "original_position" : 71,
      "original_start_line" : 70,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : null,
      "pull_request_review_id" : 891227921,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812995622/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-23T15:11:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812995622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r825004710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825004710"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 8da53ba5824fc7e367dce07dc14da6b8c0916f0a\r\n\r\nnit: This looks like an accidental change",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-11T19:18:22Z",
      "diff_hunk" : "@@ -44,7 +44,7 @@ const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n const char *WTXIDRELAY=\"wtxidrelay\";\n-const char *SENDRECON = \"sendrecon\";\n+const char* SENDRECON = \"sendrecon\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r825004710",
      "id" : 825004710,
      "line" : 47,
      "node_id" : "PRRC_kwDOABII584xLJKm",
      "original_commit_id" : "8da53ba5824fc7e367dce07dc14da6b8c0916f0a",
      "original_line" : 47,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/protocol.cpp",
      "position" : 5,
      "pull_request_review_id" : 907631150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825004710/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-11T20:01:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825004710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r825008986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825008986"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In bc9f223c359f3fddd3d66b4b0cecd2fbda31778b\r\n\r\nI don't see the need to store the version on the `TxReconciliationTracker` since the only value this will ever have is the same as `RECON_VERSION`.\r\n\r\nnit: If you want to keep this i would suggest doing this in the commit (0b7fb42952f2e41812648d305139279b3ccae629) that initially adds the `TxReconciliationTracker`, since `m_recon_version` is not set based on what a peer sent to us.\r\n```suggestion\r\n    const uint32_t m_recon_version;\r\n```",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-11T19:25:26Z",
      "diff_hunk" : "@@ -37,6 +52,9 @@ class TxReconciliationTracker::Impl\n {\n     mutable Mutex m_mutex;\n \n+    // Local protocol version\n+    uint32_t m_recon_version;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r825008986",
      "id" : 825008986,
      "line" : 56,
      "node_id" : "PRRC_kwDOABII584xLKNa",
      "original_commit_id" : "bc9f223c359f3fddd3d66b4b0cecd2fbda31778b",
      "original_line" : 56,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 27,
      "pull_request_review_id" : 907631150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825008986/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-11T20:01:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/825008986",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832685747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832685747"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Alternatively clearer imo \"If the connection is marked as block-relay-only or we're running as block-only, reconciliation is not supported\".",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-22T22:39:47Z",
      "diff_hunk" : "@@ -2645,6 +2651,23 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            if (m_txreconciliation) {\n+                // Reconciliation is supported only when wtxid relay is supported for only\n+                // those connections which (at least might) support transaction relay.\n+                if (pfrom.m_tx_relay && !m_ignore_incoming_txs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832685747",
      "id" : 832685747,
      "line" : 2658,
      "node_id" : "PRRC_kwDOABII584xocaz",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 2658,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 66,
      "pull_request_review_id" : 917969735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832685747/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T23:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832685747",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832697837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832697837"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note the BIP still says \"Should be ignored if received before receiving \"wtxidrelay\" from the peer\". I think spec should be aligned on code to reflect the reception order dependency has been removed.\r\n\r\n\r\n",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-22T23:04:55Z",
      "diff_hunk" : "@@ -2819,6 +2842,20 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             nCMPCTBLOCKVersion = 1;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+\n+        if (m_txreconciliation) {\n+            LOCK(cs_main);\n+            const auto peer_id = pfrom.GetId();\n+            if (!State(peer_id)->m_wtxid_relay) {\n+                // We could have optimistically pre-registered the peer on sending SENDRECON, or\n+                // registered upon receiving SENDRECON afterwards.\n+                // Now we are sure they won't announce WTXIDRELAY (can't happen after VERACK).\n+                // We should clear the reconciliation state of the peer (because we support\n+                // reconciliations only based on wtxids).\n+                m_txreconciliation->ForgetPeer(peer_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832697837",
      "id" : 832697837,
      "line" : 2855,
      "node_id" : "PRRC_kwDOABII584xofXt",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 2855,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 96,
      "pull_request_review_id" : 917969735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832697837/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T23:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832697837",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832701491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832701491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could be reflected in the BIP that SENDRECON must be sent before VERACK.",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-22T23:11:54Z",
      "diff_hunk" : "@@ -2889,6 +2926,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832701491",
      "id" : 832701491,
      "line" : 2930,
      "node_id" : "PRRC_kwDOABII584xogQz",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 2930,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 108,
      "pull_request_review_id" : 917969735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832701491/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T23:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832701491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832706465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832706465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've been told we're in 2022 in legacy time.",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-22T23:21:56Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2021 The Bitcoin Core developers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832706465",
      "id" : 832706465,
      "line" : 1,
      "node_id" : "PRRC_kwDOABII584xoheh",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 1,
      "pull_request_review_id" : 917969735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832706465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T23:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832706465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832710764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832710764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the locally generated salt is forgotten though the full salt is made part of the reconciliation state.",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-22T23:26:40Z",
      "diff_hunk" : "@@ -0,0 +1,167 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+#include <variant>\n+\n+namespace {\n+\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+uint256 ComputeSalt(uint64_t salt1, uint64_t salt2)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    static auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (RECON_SALT_HASHER << std::min(salt1, salt2) << std::max(salt1, salt2)).GetSHA256();\n+}\n+\n+/**\n+ * Keeps track of reconciliation-related per-peer state.\n+ */\n+class ReconciliationState\n+{\n+public:\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    bool m_we_initiate;\n+\n+    /**\n+     * These values are used to salt short IDs, which is necessary for transaction reconciliations.\n+     * TODO: they are public to ignore -Wunused-private-field. They should be made private once they\n+     * are used.\n+     */\n+    uint64_t m_k0, m_k1;\n+\n+    ReconciliationState(bool we_initiate, uint64_t k0, uint64_t k1) : m_we_initiate(we_initiate), m_k0(k0), m_k1(k1) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl\n+{\n+    mutable Mutex m_mutex;\n+\n+    // Local protocol version\n+    uint32_t m_recon_version;\n+\n+    /**\n+     * Keeps track of reconciliation states of eligible peers.\n+     * For pre-registered peers, the locally generated salt is stored.\n+     * For registered peers, the salt is forgotten and the state is stored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832710764",
      "id" : 832710764,
      "line" : 61,
      "node_id" : "PRRC_kwDOABII584xoihs",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 61,
      "pull_request_review_id" : 917969735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832710764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T23:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832710764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832717448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832717448"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you have coverage for the case the peer does not send a WTXIDRELAY before VERACK, thus forgetting the reconciliation registration (L2855, in `src/net_processing.cpp`) ?",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-22T23:39:57Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+import time\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, manual_verack=False):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.manual_verack = manual_verack\n+\n+    def on_version(self, message):\n+        if not self.manual_verack:\n+            super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        # Checks for the node *receiving* SENDRECON\n+        self.log.info('valid SENDRECON')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        peer.send_message(create_sendrecon_msg())\n+        time.sleep(1)\n+        assert peer.is_connected\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer.send_message(sendrecon_no_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=1 and responder=0 from inbound triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = False\n+        sendrecon_wrong_role.responder = True\n+        peer.send_message(sendrecon_wrong_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=0 and responder=1 from outbound triggers a disconnect')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=3, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_wrong_role = create_sendrecon_msg()\n+        sendrecon_wrong_role.initiator = True\n+        sendrecon_wrong_role.responder = False\n+        peer.send_message(sendrecon_wrong_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with version=0 triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        sendrecon_low_version = create_sendrecon_msg()\n+        sendrecon_low_version.version = 0\n+        peer.send_message(sendrecon_low_version)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON after VERACK triggers a disconnect')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(manual_verack=True), send_version=True, wait_for_verack=False)\n+        peer.wait_for_verack()\n+        peer.send_message(msg_verack())\n+        peer.send_message(create_sendrecon_msg())\n+        peer.wait_for_disconnect()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r832717448",
      "id" : 832717448,
      "line" : 134,
      "node_id" : "PRRC_kwDOABII584xokKI",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 134,
      "original_position" : 134,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 134,
      "pull_request_review_id" : 917969735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832717448/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-22T23:40:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/832717448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r836342131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836342131"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree the comment is too complicated. I will simplify it, but in a different way.",
      "commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "created_at" : "2022-03-28T11:49:45Z",
      "diff_hunk" : "@@ -2645,6 +2651,23 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            if (m_txreconciliation) {\n+                // Reconciliation is supported only when wtxid relay is supported for only\n+                // those connections which (at least might) support transaction relay.\n+                if (pfrom.m_tx_relay && !m_ignore_incoming_txs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r836342131",
      "id" : 836342131,
      "in_reply_to_id" : 832685747,
      "line" : 2658,
      "node_id" : "PRRC_kwDOABII584x2ZFz",
      "original_commit_id" : "ab27d1d51bcdadd378b816b2102cc9ae94008c15",
      "original_line" : 2658,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 66,
      "pull_request_review_id" : 923021890,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836342131/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-03-28T11:49:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/836342131",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r837564211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837564211"
         }
      },
      "author_association" : "MEMBER",
      "body" : "CI fails here, my guess is it's getting disconnected for the sendrecon violation before the test framework checks `peer.is_connected`?",
      "commit_id" : "0ed41c3761421517871da1f2198fc2d3c2172ac2",
      "created_at" : "2022-03-29T14:43:19Z",
      "diff_hunk" : "@@ -0,0 +1,166 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_version,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class SendReconSender(P2PInterface):\n+    def __init__(self, wtxidrelay=True, sendrecon_msg_to_send=None):\n+        super().__init__()\n+        self.version_received = False\n+        self.sendrecon_msg_received = None\n+        self.wtxidrelay = wtxidrelay\n+        self.sendrecon_msg_to_send = sendrecon_msg_to_send\n+\n+    def on_version(self, message):\n+        if self.sendrecon_msg_to_send:\n+            self.send_message(self.sendrecon_msg_to_send)\n+        super().on_version(message)\n+        self.version_received = True\n+\n+    def on_sendrecon(self, message):\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg():\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = True\n+    sendrecon_msg.responder = False\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        # Checks for the node *sending* SENDRECON\n+        self.log.info('SENDRECON sent')\n+        # Inbound\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+        # Outbound\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=1, connection_type=\"outbound-full-relay\")\n+        peer.wait_until(lambda: peer.sendrecon_msg_received)\n+        assert peer.sendrecon_msg_received.initiator\n+        assert not peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON should not be sent if block-relay-only')\n+        peer = self.nodes[0].add_outbound_p2p_connection(SendReconSender(), p2p_idx=2, connection_type=\"block-relay-only\")\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconSender(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        # Checks for the node *receiving* SENDRECON\n+        self.log.info('valid SENDRECON')\n+        peer = self.nodes[0].add_p2p_connection(\n+            SendReconSender(sendrecon_msg_to_send=create_sendrecon_msg()),\n+            send_version=True, wait_for_verack=False)\n+        peer.wait_until(lambda: peer.version_received)\n+        # time.sleep(1)\n+        assert peer.is_connected\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer = self.nodes[0].add_p2p_connection(\n+            SendReconSender(sendrecon_msg_to_send=sendrecon_no_role),\n+            send_version=True, wait_for_verack=False)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r837564211",
      "id" : 837564211,
      "line" : 100,
      "node_id" : "PRRC_kwDOABII584x7Dcz",
      "original_commit_id" : "0ed41c3761421517871da1f2198fc2d3c2172ac2",
      "original_line" : 100,
      "original_position" : 100,
      "original_start_line" : 98,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 100,
      "pull_request_review_id" : 924748700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837564211/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 98,
      "start_side" : "RIGHT",
      "updated_at" : "2022-03-29T14:43:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/837564211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-08T14:34:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1092928453",
      "id" : 1092928453,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585BJMPF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092928453/reactions"
      },
      "updated_at" : "2022-04-08T14:34:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1092928453",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r846838181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846838181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "To ease debugging, a `LogPrint` can be added to inform the operator than lack of reconciliation is due to the node config.",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-10T20:32:27Z",
      "diff_hunk" : "@@ -2933,6 +2972,50 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems\n+    // from switching announcement protocols after the connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        // For now, transaction reconciliation is an experimental feature that could be\n+        // enabled via CLI.\n+        if (!m_txreconciliation) {\n+            return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r846838181",
      "id" : 846838181,
      "line" : 2982,
      "node_id" : "PRRC_kwDOABII584yebml",
      "original_commit_id" : "b4457577fc5829f2123e4621e08cb741717e61df",
      "original_line" : 2982,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 116,
      "pull_request_review_id" : 937326380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846838181/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-10T22:52:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846838181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r846838795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846838795"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What's the purpose of the lock tacking here ?\r\n\r\nFrom what I understand, `TxReconciliationTracker`'s `m_states` is protected by `m_mutex` and `m_wtxid_relay` other callsites doesn't seem grieved by a lock tacking (note it might be under-sights there). ",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-10T20:38:02Z",
      "diff_hunk" : "@@ -2864,6 +2890,19 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             nCMPCTBLOCKVersion = 1;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+\n+        if (m_txreconciliation) {\n+            LOCK(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r846838795",
      "id" : 846838795,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584yebwL",
      "original_commit_id" : "b4457577fc5829f2123e4621e08cb741717e61df",
      "original_line" : 2895,
      "original_position" : 91,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 937326380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846838795/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-10T22:52:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/846838795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There is a tidy error, which can be fixed by either removing the `=` or by adjusting the names.\r\n\r\n```\r\ntest/txreconciliation_tests.cpp:23:39: error: argument name 'they_may_initiate' in comment does not match parameter name 'recon_requestor' [bugprone-argument-comment,-warnings-as-errors]\r\n                                      /*they_may_initiate=*/false, /*they_may_respond=*/false,\r\n                                      ^\r\n./node/txreconciliation.h:67:78: note: 'recon_requestor' declared here\r\n    std::optional<bool> RegisterPeer(NodeId peer_id, bool peer_inbound, bool recon_requestor,\r\n                                                                             ^\r\ntest/txreconciliation_tests.cpp:23:68: error: argument name 'they_may_respond' in comment does not match parameter name 'recon_responder' [bugprone-argument-comment,-warnings-as-errors]\r\n                                      /*they_may_initiate=*/false, /*they_may_respond=*/false,\r\n                                                                   ^\r\n./node/txreconciliation.h:68:43: note: 'recon_responder' declared here\r\n                                     bool recon_responder, uint32_t peer_recon_version, uint64_t remote_salt);\r\n                                          ^",
      "created_at" : "2022-04-13T07:46:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1097667917",
      "id" : 1097667917,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585BbRVN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1097667917/reactions"
      },
      "updated_at" : "2022-04-13T07:46:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1097667917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r851341602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851341602"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The following diff doesn't break the functional test locally, shouldn't this hit `-blocksonly` ?\r\n\r\n```\r\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\r\nindex 1e83c4ee2..3fbc9f617 100644\r\n--- a/src/net_processing.cpp\r\n+++ b/src/net_processing.cpp\r\n@@ -2700,7 +2700,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\r\n                 // block-relay-only connections, etc.).\r\n                 // Also, we announce reconciliation support only for protocol versions above\r\n                 // WTXID_RELAY per BIP-330.\r\n-                if (peer->m_tx_relay && !m_ignore_incoming_txs) {\r\n+                if (peer->m_tx_relay) {\r\n                     const uint64_t recon_salt = m_txreconciliation->PreRegisterPeer(pfrom.GetId());\r\n                     // Per the protocol, only the inbound peer initiate reconciliations and the\r\n                     // outbound peer is supposed to only respond. Here we suggest our roles in\r\n```",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-15T15:45:17Z",
      "diff_hunk" : "@@ -2687,6 +2693,26 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            if (m_txreconciliation) {\n+                // We announce reconciliation support only if this connection supports relaying\n+                // transactions when they arrive (which is not the case for blocks-only nodes,\n+                // block-relay-only connections, etc.).\n+                // Also, we announce reconciliation support only for protocol versions above\n+                // WTXID_RELAY per BIP-330.\n+                if (peer->m_tx_relay && !m_ignore_incoming_txs) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r851341602",
      "id" : 851341602,
      "line" : 2703,
      "node_id" : "PRRC_kwDOABII584yvnEi",
      "original_commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "original_line" : 2703,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 69,
      "pull_request_review_id" : 943512058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851341602/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-15T16:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851341602",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r851343715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851343715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The following diff doesn't break the functional test locally, shouldn't CLI setting be covered ?\r\n\r\n```\r\ndiff --git a/src/init.cpp b/src/init.cpp\r\nindex 7c7e29760..b0af005ce 100644\r\n--- a/src/init.cpp\r\n+++ b/src/init.cpp\r\n@@ -1282,7 +1282,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\r\n     std::unique_ptr<TxReconciliationTracker> txreconciliation;\r\n     // For now, transaction reconciliation is an experimental feature that could be\r\n     // enabled via CLI.\r\n-    if (gArgs.GetBoolArg(\"-txrecon\", DEFAULT_TXRECON_ENABLE)) {\r\n+    if (gArgs.GetBoolArg(\"-txrecon\", true)) {\r\n         txreconciliation = std::make_unique<TxReconciliationTracker>(RECON_VERSION);\r\n     }\r\n \r\n```",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-15T15:49:30Z",
      "diff_hunk" : "@@ -1277,9 +1279,16 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.chainman = std::make_unique<ChainstateManager>();\n     ChainstateManager& chainman = *node.chainman;\n \n+    std::unique_ptr<TxReconciliationTracker> txreconciliation;\n+    // For now, transaction reconciliation is an experimental feature that could be\n+    // enabled via CLI.\n+    if (gArgs.GetBoolArg(\"-txrecon\", DEFAULT_TXRECON_ENABLE)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r851343715",
      "id" : 851343715,
      "line" : 1285,
      "node_id" : "PRRC_kwDOABII584yvnlj",
      "original_commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "original_line" : 1285,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 23,
      "pull_request_review_id" : 943512058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851343715/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-15T16:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/851343715",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852294376"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852294376"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, a simple test verifying that the default is false would be nice",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-18T17:54:07Z",
      "diff_hunk" : "@@ -1277,9 +1279,16 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.chainman = std::make_unique<ChainstateManager>();\n     ChainstateManager& chainman = *node.chainman;\n \n+    std::unique_ptr<TxReconciliationTracker> txreconciliation;\n+    // For now, transaction reconciliation is an experimental feature that could be\n+    // enabled via CLI.\n+    if (gArgs.GetBoolArg(\"-txrecon\", DEFAULT_TXRECON_ENABLE)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852294376",
      "id" : 852294376,
      "in_reply_to_id" : 851343715,
      "line" : 1285,
      "node_id" : "PRRC_kwDOABII584yzPro",
      "original_commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "original_line" : 1285,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 23,
      "pull_request_review_id" : 944656610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852294376/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-18T19:40:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852294376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852301430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852301430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit in f3023ce8534b7ef988a4ab3e6680f02ece83718d\r\n\r\n(here and in setup_common)\r\n\r\nFor people looking at the tests, it would be helpful to know what the nullptr is - either creating a `std::unique_ptr<TxReconciliationTracker> m_txreconciliation = nullptr;` or labeling with a comment would be good.",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-18T18:04:26Z",
      "diff_hunk" : "@@ -53,7 +53,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Disable inactivity checks for this test to avoid interference\n     static_cast<ConnmanTestMsg*>(connman.get())->SetPeerConnectTimeout(99999s);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852301430",
      "id" : 852301430,
      "line" : 55,
      "node_id" : "PRRC_kwDOABII584yzRZ2",
      "original_commit_id" : "f3023ce8534b7ef988a4ab3e6680f02ece83718d",
      "original_line" : 55,
      "original_position" : 3,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 3,
      "pull_request_review_id" : 944656610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852301430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-18T19:40:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852301430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852327541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852327541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's not different, I think all functions should be well-documented. Just thought this would be good information to include, but it's fine if it isn't.",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-18T18:45:19Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0.  Reconciliation protocol handshake.\n+ * 1.  Once we receive a new transaction, add it to the set instead of announcing immediately.\n+ * 2.  At regular intervals, a reconciliation initiator requests a sketch from the peer, where a\n+ *     sketch is a compressed representation of short form IDs of the transactions in their set.\n+ * 3.  Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *     and combines the two sketches to attempt finding the difference in *sets*.\n+ * 4a. If the difference was not larger than estimated, see SUCCESS below.\n+ * 4b. If the difference was larger than estimated, initial reconciliation fails. The initiator\n+ *     requests a larger sketch via an extension round (allowed only once).\n+ *     - If extension succeeds (a larger sketch is sufficient), see SUCCESS below.\n+ *     - If extension fails (a larger sketch is insufficient), see FAILURE below.\n+ *\n+ * SUCCESS. The initiator knows full symmetrical difference and can request what the initiator is\n+ *          missing and announce to the peer what the peer is missing.\n+ *\n+ * FAILURE. The initiator notifies the peer about the failure and announces all transactions from\n+ *          the corresponding set. Once the peer received the failure notification, the peer\n+ *          announces all transactions from their set.\n+\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker\n+{\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+public:\n+    explicit TxReconciliationTracker(uint32_t recon_version);\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state (salt) required to reconcile with the peer.\n+     * The salt used for short ID computation required for reconciliation.\n+     * The function returns the salt.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    uint64_t PreRegisterPeer(NodeId peer_id);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Returns:\n+     * - true if the peer was registered\n+     * - false if the peer violates the protocol\n+     * - nullopt if nothing was done (e.g., we haven't pre-registered this peer)\n+     */\n+    std::optional<bool> RegisterPeer(NodeId peer_id, bool peer_inbound, bool recon_requestor,\n+                                     bool recon_responder, uint32_t peer_recon_version, uint64_t remote_salt);\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852327541",
      "id" : 852327541,
      "in_reply_to_id" : 809964211,
      "line" : 72,
      "node_id" : "PRRC_kwDOABII584yzXx1",
      "original_commit_id" : "d3cc218415f3a5f9a7170cda48a5e3938900832c",
      "original_line" : 72,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 72,
      "pull_request_review_id" : 944656610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852327541/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-18T19:40:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852327541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852328233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852328233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 1de9d30a4aae95d532f249866be45e56bb6766a3\r\n\r\nWhy is this type `BCLog::NET` instead of `BCLog::TXRECON`?",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-18T18:46:23Z",
      "diff_hunk" : "@@ -2959,6 +2959,51 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems\n+    // from switching announcement protocols after the connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        // For now, transaction reconciliation is an experimental feature that could be\n+        // enabled via CLI.\n+        if (!m_txreconciliation) {\n+            LogPrint(BCLog::NET, \"sendrecon from peer=%d ignored according to our config\\n\", pfrom.GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852328233",
      "id" : 852328233,
      "line" : 2981,
      "node_id" : "PRRC_kwDOABII584yzX8p",
      "original_commit_id" : "1de9d30a4aae95d532f249866be45e56bb6766a3",
      "original_line" : 2969,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 11,
      "pull_request_review_id" : 944656610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852328233/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-18T19:40:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852328233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852690018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852690018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is not an accident, I was thinking about this as well. I think stuff in `net_processing.cpp` makes sense to log with BCLog::NET, as it's not really recon-specific.\r\n\r\nI won't die on this hill though, if you insist i can change",
      "commit_id" : "137bdf86f5542248385e3a605467b4d1e1981c00",
      "created_at" : "2022-04-19T07:32:53Z",
      "diff_hunk" : "@@ -2959,6 +2959,51 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems\n+    // from switching announcement protocols after the connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        // For now, transaction reconciliation is an experimental feature that could be\n+        // enabled via CLI.\n+        if (!m_txreconciliation) {\n+            LogPrint(BCLog::NET, \"sendrecon from peer=%d ignored according to our config\\n\", pfrom.GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r852690018",
      "id" : 852690018,
      "in_reply_to_id" : 852328233,
      "line" : 2981,
      "node_id" : "PRRC_kwDOABII584y0wRi",
      "original_commit_id" : "1de9d30a4aae95d532f249866be45e56bb6766a3",
      "original_line" : 2969,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 11,
      "pull_request_review_id" : 945199317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852690018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T07:32:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/852690018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow [in the discussion above](https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764474638) we were not sure what to do with nodes signaling fRelay=0, because they might later enable tx relay via bloom filters (SPV etc.).\r\n\r\nDisconnecting for `sendrecon` after `fRelay=0` would enforce the following rule: \"even if tx relay is enabled via a bloom filter later, for these nodes reconciliation is prohibited\".\r\n\r\nI don't know what's the right answer.\r\n\r\nI'd suggest getting back to this after #22778 and have a broader discussion possibly?\r\nIt would be easier to reason about the code at least. I think the discussion i reference is already difficult to grasp.",
      "created_at" : "2022-04-19T15:15:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1102777581",
      "id" : 1102777581,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585Buwzt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102777581/reactions"
      },
      "updated_at" : "2022-04-19T15:15:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102777581",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r853381871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853381871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Catching up to this discussion (sorry for missing it earlier). I'm not convinced that we care enough about doing tx reconciliation with bloom filtered peers to justify creating reconciliation-related state for them. If a peer is filtering transactions, obviously you don't care reconciling mempools: they clearly don't want all of your mempool's transactions, and most likely you won't learn much from them. Bloom filters are also disabled by default.",
      "commit_id" : "11a00d6fa7ac61347bc8c012073a75fd1c574d41",
      "created_at" : "2022-04-19T18:43:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r853381871",
      "id" : 853381871,
      "in_reply_to_id" : 758847726,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584y3ZLv",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2842,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 946147148,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853381871/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T18:43:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853381871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@naumenkogs Ah thanks for linking me! Sorry for missing that. Fwiw, I believe that \"even if tx relay is enabled via a bloom filter later, for these nodes reconciliation is prohibited\" is the correct behavior. As said above, if a peer is filtering transactions, obviously you don't care reconciling mempools: they clearly don't want all of your mempool's transactions, and most likely you won't learn much from them. Bloom filters are also disabled by default, so it's unlikely that the tx reconciliation state that we initialize will be of any use. If anything, maybe you could have a special case for peers with bloom filter permissions, but I still don't see much utility in reconciliation there.\r\n\r\n> I'd suggest getting back to this after https://github.com/bitcoin/bitcoin/pull/22778 and have a broader discussion possibly?\r\n\r\nI think it's better to specify this now rather than later. Sorry for any confusion caused by basing it on #22778, [here](https://github.com/glozow/bitcoin/commit/1fb3ae72866f3c8503ef539af893e4925e23bfcc) is the branch without that part (just based on master + this PR). If I make a block-relay-only connection to a node, I expect to not receive any transaction-related messages from them. I would argue that a receiving a `sendrecon` (especially since I didn't send one, which means we'll never do reconciliations anyway) would fall under the transaction relay-related category.",
      "created_at" : "2022-04-19T18:53:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1102979010",
      "id" : 1102979010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585Bvh_C",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102979010/reactions"
      },
      "updated_at" : "2022-04-19T18:58:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1102979010",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r853393891"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853393891"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ok yeah makes sense! Understood",
      "commit_id" : "11a00d6fa7ac61347bc8c012073a75fd1c574d41",
      "created_at" : "2022-04-19T18:59:17Z",
      "diff_hunk" : "@@ -2959,6 +2959,51 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems\n+    // from switching announcement protocols after the connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        // For now, transaction reconciliation is an experimental feature that could be\n+        // enabled via CLI.\n+        if (!m_txreconciliation) {\n+            LogPrint(BCLog::NET, \"sendrecon from peer=%d ignored according to our config\\n\", pfrom.GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r853393891",
      "id" : 853393891,
      "in_reply_to_id" : 852328233,
      "line" : 2981,
      "node_id" : "PRRC_kwDOABII584y3cHj",
      "original_commit_id" : "1de9d30a4aae95d532f249866be45e56bb6766a3",
      "original_line" : 2981,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 115,
      "pull_request_review_id" : 946163678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853393891/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-19T18:59:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/853393891",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow took your suggestion, updated the bip",
      "created_at" : "2022-04-20T11:44:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1103837304",
      "id" : 1103837304,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585Byzh4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103837304/reactions"
      },
      "updated_at" : "2022-04-20T11:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1103837304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r855574300"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855574300"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Mutating this value doesn't trigger a functional test failure.\r\nIf you can add one more test to check that disconnection is enforced in case we receive a SENDRECON even if we signaled we don't support transaction relay.",
      "commit_id" : "b3bd5325fe7710f7f842a61a9d783cec0e203903",
      "created_at" : "2022-04-21T20:37:27Z",
      "diff_hunk" : "@@ -2933,6 +2970,59 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems\n+    // from switching announcement protocols after the connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        // For now, transaction reconciliation is an experimental feature that could be\n+        // enabled via CLI.\n+        if (!m_txreconciliation) {\n+            LogPrint(BCLog::NET, \"sendrecon from peer=%d ignored according to our config\\n\", pfrom.GetId());\n+            return;\n+        }\n+\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!peer->m_tx_relay) {\n+            // Disconnect peers that send a SENDRECON message even though we indicated we don't\n+            // support transaction relay.\n+            LogPrint(BCLog::NET, \"sendrecon received from peer=%d to which we indicated no tx relay; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r855574300",
      "id" : 855574300,
      "line" : 2995,
      "node_id" : "PRRC_kwDOABII584y_wcc",
      "original_commit_id" : "b3bd5325fe7710f7f842a61a9d783cec0e203903",
      "original_line" : 2995,
      "original_position" : 129,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 129,
      "pull_request_review_id" : 949189201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855574300/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-21T20:43:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855574300",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r855677597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855677597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in b568d28f6a7e26d02c973245d987843d8588a025\r\nIt may be more helpful to replace this with \"TODO: remove this option when Erlay is fully supported\" or something",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-22T00:12:43Z",
      "diff_hunk" : "@@ -1277,9 +1279,16 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.chainman = std::make_unique<ChainstateManager>();\n     ChainstateManager& chainman = *node.chainman;\n \n+    std::unique_ptr<TxReconciliationTracker> txreconciliation;\n+    // For now, transaction reconciliation is an experimental feature that could be\n+    // enabled via CLI.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r855677597",
      "id" : 855677597,
      "line" : 1284,
      "node_id" : "PRRC_kwDOABII584zAJqd",
      "original_commit_id" : "b568d28f6a7e26d02c973245d987843d8588a025",
      "original_line" : 1284,
      "original_position" : 22,
      "original_start_line" : 1283,
      "path" : "src/init.cpp",
      "position" : 22,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855677597/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1283,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/855677597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r856688179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856688179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "include-what-you-use might help? see #24831",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-23T00:43:05Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r856688179",
      "id" : 856688179,
      "in_reply_to_id" : 765026580,
      "line" : 5,
      "node_id" : "PRRC_kwDOABII584zEAYz",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 5,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856688179/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856688179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r856689095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856689095"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in b568d28f6a7e26d02c973245d987843d8588a025\r\n\r\nThanks for taking the suggestion! you only need the name btw\r\n\r\n```suggestion\r\n                                       /*txreconciliation=*/nullptr,\r\n```",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-23T00:44:26Z",
      "diff_hunk" : "@@ -228,8 +228,10 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n-                                       m_node.banman.get(), *m_node.chainman,\n-                                       *m_node.mempool, false);\n+                                       m_node.banman.get(), *m_node.chainman, *m_node.mempool,\n+                                       /*std::unique_ptr<TxReconciliationTracker> txreconciliation=*/nullptr,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r856689095",
      "id" : 856689095,
      "line" : 232,
      "node_id" : "PRRC_kwDOABII584zEAnH",
      "original_commit_id" : "b568d28f6a7e26d02c973245d987843d8588a025",
      "original_line" : 232,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/test/util/setup_common.cpp",
      "position" : 7,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856689095/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/856689095",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860293335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860293335"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in 6ec8628181bb9342c338d180acc96f5a48185527:\r\nI think it would be good to sync with ping to rule out the possibility that something else triggered the disconnect.\r\nsync with ping doesn't work before verack because they're not really connected yet, but it's doable here.\r\n\r\n```suggestion\r\n        peer.send_and_ping(msg_verack())\r\n```",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-27T22:33:57Z",
      "diff_hunk" : "@@ -0,0 +1,139 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+    P2P_VERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class PeerNoVerack(P2PInterface):\n+    def __init__(self, wtxidrelay=True):\n+        super().__init__(wtxidrelay=wtxidrelay)\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see\n+        # comment in add_p2p_connection).\n+        if message.nVersion >= 70016 and self.wtxidrelay:\n+            self.send_message(msg_wtxidrelay())\n+\n+class SendReconReceiver(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.sendrecon_msg_received = None\n+\n+    def on_sendrecon(self, message):\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg(initiator=True):\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = initiator\n+    sendrecon_msg.responder = not initiator\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        self.log.info('SENDRECON sent to an inbound')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=True, wait_for_verack=True)\n+        assert peer.sendrecon_msg_received\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON for fRelay=false should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=False, wait_for_verack=False)\n+        no_txrelay_version_msg = msg_version()\n+        no_txrelay_version_msg.nVersion = P2P_VERSION\n+        no_txrelay_version_msg.strSubVer = P2P_SUBVERSION\n+        no_txrelay_version_msg.nServices = P2P_SERVICES\n+        no_txrelay_version_msg.relay = 0\n+        peer.send_message(no_txrelay_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('valid SENDRECON received')\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(create_sendrecon_msg())\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(sendrecon_no_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=0 and responder=1 from inbound triggers a disconnect')\n+        sendrecon_wrong_role = create_sendrecon_msg(initiator=False)\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(sendrecon_wrong_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with version=0 triggers a disconnect')\n+        sendrecon_low_version = create_sendrecon_msg()\n+        sendrecon_low_version.version = 0\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(sendrecon_low_version)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('sending SENDRECON after sending VERACK triggers a disconnect')\n+        # We use PeerNoVerack even though verack is sent right after, to make sure it was actually\n+        # sent before sendrecon is sent.\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(msg_verack())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860293335",
      "id" : 860293335,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584zRwjX",
      "original_commit_id" : "6ec8628181bb9342c338d180acc96f5a48185527",
      "original_line" : 117,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 117,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860293335/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860293335",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860297746"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860297746"
         }
      },
      "author_association" : "MEMBER",
      "body" : "6ec8628181bb9342c338d180acc96f5a48185527:\r\n\r\nI think it's good practice to disconnect these peers after you're done with them, to minimize the risk of subtests affecting each other. (And for the others below)\r\n\r\n```suggestion\r\n        assert_equal(peer.sendrecon_msg_received.version, 1)\r\n        peer.disconnect_peer()\r\n```",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-27T22:43:07Z",
      "diff_hunk" : "@@ -0,0 +1,139 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+    P2P_VERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class PeerNoVerack(P2PInterface):\n+    def __init__(self, wtxidrelay=True):\n+        super().__init__(wtxidrelay=wtxidrelay)\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see\n+        # comment in add_p2p_connection).\n+        if message.nVersion >= 70016 and self.wtxidrelay:\n+            self.send_message(msg_wtxidrelay())\n+\n+class SendReconReceiver(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.sendrecon_msg_received = None\n+\n+    def on_sendrecon(self, message):\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg(initiator=True):\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = initiator\n+    sendrecon_msg.responder = not initiator\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        self.log.info('SENDRECON sent to an inbound')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=True, wait_for_verack=True)\n+        assert peer.sendrecon_msg_received\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860297746",
      "id" : 860297746,
      "line" : 61,
      "node_id" : "PRRC_kwDOABII584zRxoS",
      "original_commit_id" : "6ec8628181bb9342c338d180acc96f5a48185527",
      "original_line" : 61,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 61,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860297746/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860297746",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860299084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860299084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "6ec8628181bb9342c338d180acc96f5a48185527\r\nIt may be helpful to sync here to make sure the disconnect isn't caused by the first sendrecon\r\n\r\n`self.wait_until(lambda : self.nodes[0].getpeerinfo()[-1][\"bytesrecv_per_msg\"][\"sendrecon\"])`",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-27T22:45:52Z",
      "diff_hunk" : "@@ -0,0 +1,139 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+    P2P_VERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class PeerNoVerack(P2PInterface):\n+    def __init__(self, wtxidrelay=True):\n+        super().__init__(wtxidrelay=wtxidrelay)\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see\n+        # comment in add_p2p_connection).\n+        if message.nVersion >= 70016 and self.wtxidrelay:\n+            self.send_message(msg_wtxidrelay())\n+\n+class SendReconReceiver(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.sendrecon_msg_received = None\n+\n+    def on_sendrecon(self, message):\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg(initiator=True):\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = initiator\n+    sendrecon_msg.responder = not initiator\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        self.log.info('SENDRECON sent to an inbound')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=True, wait_for_verack=True)\n+        assert peer.sendrecon_msg_received\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON for fRelay=false should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=False, wait_for_verack=False)\n+        no_txrelay_version_msg = msg_version()\n+        no_txrelay_version_msg.nVersion = P2P_VERSION\n+        no_txrelay_version_msg.strSubVer = P2P_SUBVERSION\n+        no_txrelay_version_msg.nServices = P2P_SERVICES\n+        no_txrelay_version_msg.relay = 0\n+        peer.send_message(no_txrelay_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('valid SENDRECON received')\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(create_sendrecon_msg())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860299084",
      "id" : 860299084,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII584zRx9M",
      "original_commit_id" : "6ec8628181bb9342c338d180acc96f5a48185527",
      "original_line" : 87,
      "original_position" : 87,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 87,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860299084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860299084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860301498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860301498"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'd suggest leaving out the peer id, since that isn't necessarily a correctness issue and could change if we add more tests\r\n```suggestion\r\n        with self.nodes[0].assert_debug_log(['Forget reconciliation state of peer']):\r\n```",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-27T22:51:03Z",
      "diff_hunk" : "@@ -0,0 +1,165 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test SENDRECON message\n+\"\"\"\n+\n+from test_framework.messages import (\n+    msg_sendrecon,\n+    msg_verack,\n+    msg_version,\n+    msg_wtxidrelay,\n+)\n+from test_framework.p2p import (\n+    P2PInterface,\n+    P2P_SERVICES,\n+    P2P_SUBVERSION,\n+    P2P_VERSION,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class PeerNoVerack(P2PInterface):\n+    def __init__(self, wtxidrelay=True):\n+        super().__init__(wtxidrelay=wtxidrelay)\n+\n+    def on_version(self, message):\n+        # Avoid sending verack in response to version.\n+        # When calling add_p2p_connection, wait_for_verack=False must be set (see\n+        # comment in add_p2p_connection).\n+        if message.nVersion >= 70016 and self.wtxidrelay:\n+            self.send_message(msg_wtxidrelay())\n+\n+class SendReconReceiver(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        self.sendrecon_msg_received = None\n+\n+    def on_sendrecon(self, message):\n+        self.sendrecon_msg_received = message\n+\n+def create_sendrecon_msg(initiator=True):\n+    sendrecon_msg = msg_sendrecon()\n+    sendrecon_msg.initiator = initiator\n+    sendrecon_msg.responder = not initiator\n+    sendrecon_msg.version = 1\n+    sendrecon_msg.salt = 2\n+    return sendrecon_msg\n+\n+class SendReconTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-txrecon']]\n+\n+    def run_test(self):\n+        self.log.info('SENDRECON sent to an inbound')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=True, wait_for_verack=True)\n+        assert peer.sendrecon_msg_received\n+        assert not peer.sendrecon_msg_received.initiator\n+        assert peer.sendrecon_msg_received.responder\n+        assert_equal(peer.sendrecon_msg_received.version, 1)\n+\n+        self.log.info('SENDRECON on pre-WTXID version should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=False, wait_for_verack=False)\n+        pre_wtxid_version_msg = msg_version()\n+        pre_wtxid_version_msg.nVersion = 70015\n+        pre_wtxid_version_msg.strSubVer = P2P_SUBVERSION\n+        pre_wtxid_version_msg.nServices = P2P_SERVICES\n+        pre_wtxid_version_msg.relay = 1\n+        peer.send_message(pre_wtxid_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('SENDRECON for fRelay=false should not be sent')\n+        peer = self.nodes[0].add_p2p_connection(SendReconReceiver(), send_version=False, wait_for_verack=False)\n+        no_txrelay_version_msg = msg_version()\n+        no_txrelay_version_msg.nVersion = P2P_VERSION\n+        no_txrelay_version_msg.strSubVer = P2P_SUBVERSION\n+        no_txrelay_version_msg.nServices = P2P_SERVICES\n+        no_txrelay_version_msg.relay = 0\n+        peer.send_message(no_txrelay_version_msg)\n+        peer.wait_for_verack()\n+        assert not peer.sendrecon_msg_received\n+\n+        self.log.info('valid SENDRECON received')\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(create_sendrecon_msg())\n+        self.log.info('second SENDRECON triggers a disconnect')\n+        peer.send_message(create_sendrecon_msg())\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=responder=0 triggers a disconnect')\n+        sendrecon_no_role = create_sendrecon_msg()\n+        sendrecon_no_role.initiator = False\n+        sendrecon_no_role.responder = False\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(sendrecon_no_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with initiator=0 and responder=1 from inbound triggers a disconnect')\n+        sendrecon_wrong_role = create_sendrecon_msg(initiator=False)\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(sendrecon_wrong_role)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON with version=0 triggers a disconnect')\n+        sendrecon_low_version = create_sendrecon_msg()\n+        sendrecon_low_version.version = 0\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(sendrecon_low_version)\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('sending SENDRECON after sending VERACK triggers a disconnect')\n+        # We use PeerNoVerack even though verack is sent right after, to make sure it was actually\n+        # sent before sendrecon is sent.\n+        peer = self.nodes[0].add_p2p_connection(PeerNoVerack(), send_version=True, wait_for_verack=False)\n+        peer.send_message(msg_verack())\n+        peer.send_message(create_sendrecon_msg())\n+        peer.wait_for_disconnect()\n+\n+        self.log.info('SENDRECON without WTXIDRELAY is ignored (recon state is erased after VERACK)')\n+        with self.nodes[0].assert_debug_log(['Forget reconciliation state of peer=8']):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r860301498",
      "id" : 860301498,
      "line" : 122,
      "node_id" : "PRRC_kwDOABII584zRyi6",
      "original_commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "test/functional/p2p_sendrecon.py",
      "position" : 122,
      "pull_request_review_id" : 949324956,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860301498/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-27T22:58:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/860301498",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-04-28T10:53:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1112062471",
      "id" : 1112062471,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585CSLoH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112062471/reactions"
      },
      "updated_at" : "2022-04-28T10:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112062471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861240925"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861240925"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In \"p2p: Announce reconciliation support\"\r\n\r\nPerhaps formulate it as \"While Erlay support is incomplete, it must be enabled explicitly via -txrecon. This argument can go away after Erlay support is complete.\"",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-28T19:23:18Z",
      "diff_hunk" : "@@ -1277,9 +1279,16 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     node.chainman = std::make_unique<ChainstateManager>();\n     ChainstateManager& chainman = *node.chainman;\n \n+    std::unique_ptr<TxReconciliationTracker> txreconciliation;\n+    // For now, transaction reconciliation is an experimental feature that could be\n+    // enabled via CLI.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861240925",
      "id" : 861240925,
      "in_reply_to_id" : 855677597,
      "line" : 1284,
      "node_id" : "PRRC_kwDOABII584zVX5d",
      "original_commit_id" : "b568d28f6a7e26d02c973245d987843d8588a025",
      "original_line" : 1284,
      "original_position" : 22,
      "original_start_line" : 1283,
      "path" : "src/init.cpp",
      "position" : 22,
      "pull_request_review_id" : 956940299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861240925/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1283,
      "start_side" : "RIGHT",
      "updated_at" : "2022-04-28T19:46:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861240925",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861243645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861243645"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In \"p2p: Announce reconciliation support\"\r\n\r\nThis seems inconsistent to me. The BIP330 document defines the reconciliation protocol version 1, but I don't think it says anything about which side is supposed to initiate (and the presence of the initiator/responder bools seems to be designed to explicitly support both).\r\n\r\nIs there a reason for requiring a recon protocol version update when the role assignment changes?\r\n* If not, just drop the comment.\r\n* If there is, it seems cleaner to have BIP330 just hardcode v1 = outbound-initiated, and possibly even forego the two booleans. Later versions (in potential future BIPs) can change that.",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-28T19:27:06Z",
      "diff_hunk" : "@@ -2720,6 +2725,25 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 peer->m_tx_relay->m_relay_txs = fRelay; // set to true after we get the first filter* message\n             }\n             if (fRelay) pfrom.m_relays_txs = true;\n+\n+            if (greatest_common_version >= WTXID_RELAY_VERSION && m_txreconciliation) {\n+                // Per BIP-330, we announce reconciliation support if:\n+                // - protocol version per the VERSION message supports for WTXID_RELAY\n+                // - the peer indicated support for transaction relay in the VERSION message\n+                // - we are not in -blocksonly mode\n+                if (pfrom.m_relays_txs && !m_ignore_incoming_txs) {\n+                    const uint64_t recon_salt = m_txreconciliation->PreRegisterPeer(pfrom.GetId());\n+                    // Only the inbound peer initiate reconciliations and the outbound peer is\n+                    // supposed to only respond. Here we suggest our roles in reconciliations\n+                    // (initiator/responder) based on the connection direction.\n+                    // If the way we assign the roles is updated, reconciliation protocol",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861243645",
      "id" : 861243645,
      "line" : 2740,
      "node_id" : "PRRC_kwDOABII584zVYj9",
      "original_commit_id" : "b568d28f6a7e26d02c973245d987843d8588a025",
      "original_line" : 2739,
      "original_position" : 65,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 65,
      "pull_request_review_id" : 956940299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861243645/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-28T19:53:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861243645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861248645"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861248645"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In \"p2p: Announce reconciliation support\"\r\n\r\nNit: listing the type as well seems a bit excessive to me, and not something we do elsewhere either (here and further in the commit).",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-28T19:34:26Z",
      "diff_hunk" : "@@ -53,7 +53,9 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // Disable inactivity checks for this test to avoid interference\n     static_cast<ConnmanTestMsg*>(connman.get())->SetPeerConnectTimeout(99999s);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n-                                       *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.chainman, *m_node.mempool,\n+                                       /*std::unique_ptr<TxReconciliationTracker> txreconciliation=*/nullptr,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861248645",
      "id" : 861248645,
      "line" : 57,
      "node_id" : "PRRC_kwDOABII584zVZyF",
      "original_commit_id" : "b568d28f6a7e26d02c973245d987843d8588a025",
      "original_line" : 57,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/test/denialofservice_tests.cpp",
      "position" : 6,
      "pull_request_review_id" : 956940299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861248645/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-28T19:46:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861248645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861252375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861252375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit \"Add helper to compute reconciliation salt\"\r\n\r\nI don't understand how this can work. I believe it'll keep updating the shared global RECON_SALT_HASHER object (across multiple peers, and possibly even in a non-thread-safe way).\r\n\r\nYou need `CHashWriter(RECON_SALT_HASHER) << ...` instead, so each salt computation uses its own copy. The `RECON_SALT_HASHER` object can then also become `const`.\r\n\r\nIf you do that, it may also be desirable to move the \"RECON_SALT_HASHER\" out of the function (that's slightly more efficient, as otherwise an atomic check is issued in every function execution to see if the `static` is already initialized).",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-28T19:40:02Z",
      "diff_hunk" : "@@ -9,6 +9,20 @@\n \n namespace {\n \n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+uint256 ComputeSalt(uint64_t salt1, uint64_t salt2)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    static auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (RECON_SALT_HASHER << std::min(salt1, salt2) << std::max(salt1, salt2)).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861252375",
      "id" : 861252375,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584zVasX",
      "original_commit_id" : "8ed5ef61a9841c0547546c7a32289ca21a43a644",
      "original_line" : 23,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 15,
      "pull_request_review_id" : 956940299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861252375/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-28T19:48:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861252375",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861254670"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861254670"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In \"p2p: Finish negotiating reconciliation support\"\r\n\r\nNit: no need to repeat this multiple times (it's already mentioned in AppInit).",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-28T19:43:16Z",
      "diff_hunk" : "@@ -2958,6 +2958,59 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen: between VERSION and VERACK to avoid relay problems\n+    // from switching announcement protocols after the connection is up.\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        // For now, transaction reconciliation is an experimental feature that could be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r861254670",
      "id" : 861254670,
      "line" : 2977,
      "node_id" : "PRRC_kwDOABII584zVbQO",
      "original_commit_id" : "ac0865abf5eeccbf2068e0c1c6dc856d37b7c76c",
      "original_line" : 2965,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 8,
      "pull_request_review_id" : 956940299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861254670/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-28T19:46:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/861254670",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r862028538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862028538"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Commit \"p2p: clear reconciliation state for no-wtxid peers\"\r\nCould this be more general so that we also check for `!IsPeerRegistered()` here, forgetting about any pre-registered peers that chose not to send us a SENDRECON before verack - this will be a very frequent case for peers that haven't implemented Erlay or aren't interested in it.",
      "commit_id" : "21bbd5e5dda4f40debcf2b05fa03817a5be506e6",
      "created_at" : "2022-04-29T18:01:36Z",
      "diff_hunk" : "@@ -2889,6 +2889,18 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             nCMPCTBLOCKVersion = 1;\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n+\n+        if (m_txreconciliation) {\n+            if (!peer->m_wtxid_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r862028538",
      "id" : 862028538,
      "line" : 2894,
      "node_id" : "PRRC_kwDOABII584zYYL6",
      "original_commit_id" : "07b68d27907a7b66d6a109e92dc1f230ecd47843",
      "original_line" : 2894,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 6,
      "pull_request_review_id" : 958070560,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862028538/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-04-29T18:01:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/862028538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r867446898"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867446898"
         }
      },
      "author_association" : "MEMBER",
      "body" : "- \"recon\" has a different meaning than reconcile: https://www.merriam-webster.com/dictionary/recon ...maybe `-txreconcile`?\r\n\r\n- Is `-txrecon` supposed to be testable/usable starting with the second commit where it is added? Would it be better to introduce the user-facing config option as a last commit (maybe with a release note too), after (that part of) the implementation is complete?\r\n\r\nI'm only starting to review here and haven't yet read through all the previous review feedback, so feel free to ignore if I'm missing something or this was already discussed.",
      "commit_id" : "6fd947b9bf2ed9125854e8c2948feaef5679b50e",
      "created_at" : "2022-05-08T07:17:04Z",
      "diff_hunk" : "@@ -476,6 +477,7 @@ void SetupServerArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-txrecon\", strprintf(\"Enable transaction reconciliations per BIP-330 (default: %d)\", DEFAULT_TXRECON_ENABLE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r867446898",
      "id" : 867446898,
      "line" : 480,
      "node_id" : "PRRC_kwDOABII584ztDBy",
      "original_commit_id" : "6fd947b9bf2ed9125854e8c2948feaef5679b50e",
      "original_line" : 480,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/init.cpp",
      "position" : 12,
      "pull_request_review_id" : 965403526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867446898/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-05-08T07:46:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/867446898",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Drahty generated a coverage report in https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-962189199 . Feel free to ping @DrahtBot when it needs to be updated.",
      "created_at" : "2022-05-10T14:18:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1122460632",
      "id" : 1122460632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585C52PY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1122460632/reactions"
      },
      "updated_at" : "2022-05-10T14:18:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1122460632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-05-20T13:40:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-1132915588",
      "id" : 1132915588,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII585DhuuE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132915588/reactions"
      },
      "updated_at" : "2022-05-20T13:40:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1132915588",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
