[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23233](https://github.com/bitcoin/bitcoin/pull/23233) (BIP324: Add encrypted p2p transport {de}serializer by dhruv)\n* [#21515](https://github.com/bitcoin/bitcoin/pull/21515) (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-11-05T20:10:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-962189199",
      "id" : 962189199,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5845WdeP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962189199/reactions"
      },
      "updated_at" : "2021-11-18T04:52:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962189199",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754756591"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754756591"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note, I think BIP330 should make the dependency on BIP339 explicit.\r\n\r\nOur implementation makes a requirement to speak a protocol version superior to `WTXID_RELAY_VERSION`. Further, it also relies on `MSG_WTX` for the fallback inv announcement. Those 2 elements are defined in BIP339. I think a client implementing straightly the BIP won't be able to tx-announce with Erlay-supported Core nodes.\r\n\r\nIIRC, this is mostly a historical artifact because BIP330 was submitted before BIP339. \r\n\r\nIf you agree, please stage this comment until there are multiple updates worthy to do to the BIP.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T01:53:29Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754756591",
      "id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584s_Kvv",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2580,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754756591/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754756591",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754757014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754757014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \"The boolean indicates\"",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T01:55:05Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * Indicates that a node is willing to participate in transaction reconciliation,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754757014",
      "id" : 754757014,
      "line" : 267,
      "node_id" : "PRRC_kwDOABII584s_K2W",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 267,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 6,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754757014/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754757014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754764995"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754764995"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If the reconciliation roles are updated, do you need to bump the `RECON_VERSION` ?\r\n\r\nI would say so as a old-reconciliation outbound peer could assume a new-reconciliation inbound peer is the initiator when the new-reconciliation inbound peer would estimate the reverse, thus halting reconciliation ?",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:24:14Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754764995",
      "id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584s_MzD",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754764995/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754764995",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754767290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754767290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/Accoring/According/g",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:32:09Z",
      "diff_hunk" : "@@ -10,6 +10,23 @@ namespace {\n \n /** Current protocol version */\n constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // Accoring to BIP-330, salts should be combined in ascending order.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754767290",
      "id" : 754767290,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584s_NW6",
      "original_commit_id" : "0e9d0dc8524e5796aa136581f9fe4f92b44dcbd1",
      "original_line" : 23,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 23,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754767290/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754767290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754768868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754768868"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/annoyncement/announcement/g",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:38:05Z",
      "diff_hunk" : "@@ -2822,6 +2822,48 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching annoyncement protocols",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754768868",
      "id" : 754768868,
      "line" : 2830,
      "node_id" : "PRRC_kwDOABII584s_Nvk",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 2827,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 49,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754768868/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754768868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754770460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754770460"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/chose/choose/g",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T02:43:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,48 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching annoyncement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we chose a peer to not send us transactions, disconnect if they want to reconcile.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754770460",
      "id" : 754770460,
      "line" : 2842,
      "node_id" : "PRRC_kwDOABII584s_OIc",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 2839,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 61,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754770460/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754770460",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754775773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754775773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This check means that duplicated `SENDRECON` are processed as protocol violation, correct ?\r\n\r\nI wonder if we have Bitcoin nodes widely deployed over non-TCP stack, where the packet dedup is not guaranteed. I guess that should be so rare a case, though if we learn some and the duplication rate is high enough to trigger this reconciliation failure we can still relax this check. ",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T03:04:11Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754775773",
      "id" : 754775773,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII584s_Pbd",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 109,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 109,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754775773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754775773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754776078"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754776078"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note, the BIP330 says version != 1 should be ignored, making the 0 case a protocol violation should be reflected in the BIP, I think.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T03:05:20Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754776078",
      "id" : 754776078,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584s_PgO",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 117,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 117,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754776078/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754776078",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754778838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754778838"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't be a `&&`, otherwise we might have staling state for the peer ?",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T03:16:12Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754778838",
      "id" : 754778838,
      "line" : 152,
      "node_id" : "PRRC_kwDOABII584s_QLW",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 152,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 152,
      "pull_request_review_id" : 813170984,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754778838/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T03:17:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754778838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754992721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754992721"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah I think you are probably right.\r\nWhat should i do with your comment though?",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:37:58Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r754992721",
      "id" : 754992721,
      "in_reply_to_id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584tAEZR",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 36,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 813484719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754992721/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:37:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/754992721",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755000332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755000332"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah good point, keeping it open for now so that maybe others comment if they want to relax the check.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:45:40Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755000332",
      "id" : 755000332,
      "in_reply_to_id" : 754775773,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII584tAGQM",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 109,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 109,
      "pull_request_review_id" : 813492715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755000332/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:45:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755000332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755005764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755005764"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done in 38e66d31f7eb47cd2566003e8d0d8808b129eabb",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:51:26Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755005764",
      "id" : 755005764,
      "in_reply_to_id" : 754776078,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584tAHlE",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 117,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 117,
      "pull_request_review_id" : 813498529,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755005764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755005764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755006158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755006158"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/naumenkogs/bips/commit/38e66d31f7eb47cd2566003e8d0d8808b129eabb",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:51:49Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755006158",
      "id" : 755006158,
      "in_reply_to_id" : 754776078,
      "line" : 117,
      "node_id" : "PRRC_kwDOABII584tAHrO",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 117,
      "original_position" : 63,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 117,
      "pull_request_review_id" : 813498918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755006158/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:51:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755006158",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755007682"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755007682"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This line only defines whether we print logs or not, so I don't understand how does it affect the actual behavior.\r\nThe ideas is that it logs deleting the state for both pre-registered and registered peers. \r\n\r\nThe previous 2 lines taking care of deletion are indeed `&&`.",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:53:42Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755007682",
      "id" : 755007682,
      "in_reply_to_id" : 754778838,
      "line" : 152,
      "node_id" : "PRRC_kwDOABII584tAIDC",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 152,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 152,
      "pull_request_review_id" : 813500837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755007682/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:53:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755007682",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755008629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755008629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In BIP already: `Since sketches are based on the WTXIDs, the negotiation and support of Erlay should be enabled only if both peers signal BIP-339 support. `",
      "commit_id" : "c8668314c588e36dc7c6030bf5b562989503187d",
      "created_at" : "2021-11-23T10:54:49Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755008629",
      "id" : 755008629,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tAIR1",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2580,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 813502063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755008629/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-23T10:54:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755008629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755594349"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755594349"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't remember if the boost framework has an equivalent of the rust's `should_panic`, if so maybe test duplicated registration ? Should hit the assert.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-23T23:52:53Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755594349",
      "id" : 755594349,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tCXRt",
      "original_commit_id" : "4c0122e06b611c9d8f871a2dfb240b2aff269125",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 24,
      "pull_request_review_id" : 814296227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755594349/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:06:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755594349",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755600979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755600979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've grepped the phrase in https://github.com/bitcoin/bips/blob/master/bip-0330.mediawiki and I can't find it ? Are we sure we're looking on the same version of the BIP?",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T00:09:55Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755600979",
      "id" : 755600979,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tCY5T",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2584,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 814307898,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755600979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:09:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755600979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755602732"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755602732"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would say add a \"If the reconciliation roles are updated, `RECON_VERSION` should be bumped\" comment ?\r\n\r\nI think it's nice to ease future reconciliation development or extension by laying out clearly what should be updated or taken care of by the ones doing the work. A good chunk of today p2p mechanisms aren't that much documented in that regard. ",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T00:14:53Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755602732",
      "id" : 755602732,
      "in_reply_to_id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584tCZUs",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 84,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 814310029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755602732/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:14:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755602732",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755603737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755603737"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> The ideas is that it logs deleting the state for both pre-registered and registered peers.\r\n\r\nI understand. Maybe maybe the log comment could have a ternary and print \"salt_erased\" or \"state_erased\" to be more meaningful. Though that's really low-level information likely only relevant for debug/hacking.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T00:18:02Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;\n+\n+        LogPrint(BCLog::NET, \"Register peer=%d for reconciling with the following params: \" /* Continued */\n+            \"we_initiate=%i, they_initiate=%i.\\n\", peer_id, we_initiate, they_initiate);\n+\n+        uint256 full_salt = ComputeSalt(local_salt->second, remote_salt);\n+\n+        assert(m_states.emplace(peer_id, ReconciliationState(full_salt.GetUint64(0),\n+            full_salt.GetUint64(1), we_initiate)).second);\n+        return true;\n+    }\n+\n     void ForgetPeer(NodeId peer_id)\n     {\n         LOCK(m_mutex);\n-        if (m_local_salts.erase(peer_id)) {\n+        auto salt_erased = m_local_salts.erase(peer_id);\n+        auto state_erased = m_states.erase(peer_id);\n+        if (salt_erased || state_erased) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755603737",
      "id" : 755603737,
      "in_reply_to_id" : 754778838,
      "line" : 152,
      "node_id" : "PRRC_kwDOABII584tCZkZ",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 152,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 152,
      "pull_request_review_id" : 814311332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755603737/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T00:18:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755603737",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755791452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755791452"
         }
      },
      "author_association" : "MEMBER",
      "body" : "An up-to-date BIP version is linked in the first post of this PR. This link: https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki\r\n\r\nAt some point we want to merge it to the bip repo, but probably later.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T08:15:55Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755791452",
      "id" : 755791452,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tDHZc",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2584,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 814550023,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755791452/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T08:15:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755791452",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755794046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755794046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "ack",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T08:19:46Z",
      "diff_hunk" : "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755794046",
      "id" : 755794046,
      "in_reply_to_id" : 754764995,
      "line" : 84,
      "node_id" : "PRRC_kwDOABII584tDIB-",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 84,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 84,
      "pull_request_review_id" : 814553479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755794046/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T08:19:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755794046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755797839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755797839"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah that was my problem as well, not sure how to test assertions failed.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-24T08:24:56Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r755797839",
      "id" : 755797839,
      "in_reply_to_id" : 755594349,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tDI9P",
      "original_commit_id" : "4c0122e06b611c9d8f871a2dfb240b2aff269125",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 24,
      "pull_request_review_id" : 814558584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755797839/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-24T08:24:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/755797839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "it doesn't seem to compile:-\r\n\r\n```\r\n./src/./minisketch/include/minisketch.h:225: undefined reference to `minisketch_compute_capacity'\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\r\nmake: *** [Makefile:6395: qt/bitcoin-qt] Error 1\r\n```",
      "created_at" : "2021-11-25T14:17:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-979251635",
      "id" : 979251635,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5846XjGz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979251635/reactions"
      },
      "updated_at" : "2021-11-25T14:17:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979251635",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r756954122"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756954122"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Bitcoin P2P connections are stateful, so you can't generally run them over say a UDP stack anyway.",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-25T14:49:13Z",
      "diff_hunk" : "@@ -69,10 +100,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r756954122",
      "id" : 756954122,
      "in_reply_to_id" : 754775773,
      "line" : 109,
      "node_id" : "PRRC_kwDOABII584tHjQK",
      "original_commit_id" : "85992f3f2c0137f0164e2672efad5a77455ad7a3",
      "original_line" : 109,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/txreconciliation.cpp",
      "position" : 109,
      "pull_request_review_id" : 816075624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756954122/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-25T14:49:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/756954122",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "```\r\ntxreconciliation.cpp:43:20: warning: private field 'm_k0' is not used [-Wunused-private-field]\r\n    const uint64_t m_k0, m_k1;\r\n                   ^\r\ntxreconciliation.cpp:43:26: warning: private field 'm_k1' is not used [-Wunused-private-field]\r\n    const uint64_t m_k0, m_k1;\r\n```",
      "created_at" : "2021-11-25T20:12:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-979450976",
      "id" : 979450976,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5846YTxg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979450976/reactions"
      },
      "updated_at" : "2021-11-25T20:12:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/979450976",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=4",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "node_id" : "MDQ6VXNlcjE1MzAyODM=",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r757207389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757207389"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the pointer. Well the update warning could be in bold :p",
      "commit_id" : "5ba375e385195a15a5c077cb5a23e6f59bf0ecfb",
      "created_at" : "2021-11-26T03:24:41Z",
      "diff_hunk" : "@@ -2574,6 +2576,15 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         if (greatest_common_version >= WTXID_RELAY_VERSION) {\n             m_connman.PushMessage(&pfrom, msg_maker.Make(NetMsgType::WTXIDRELAY));\n+\n+            // Reconciliation is supported only when wtxid relay is supported for only",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r757207389",
      "id" : 757207389,
      "in_reply_to_id" : 754756591,
      "line" : 2584,
      "node_id" : "PRRC_kwDOABII584tIhFd",
      "original_commit_id" : "a4400b4ffca70e227d467d47ffffec12f1a1b26b",
      "original_line" : 2584,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 816390205,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757207389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-26T03:24:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/757207389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110257"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110257"
         }
      },
      "author_association" : "MEMBER",
      "body" : "would be nice to put this into the `node` directory. There is really no way to do anything tx-relay related without a full node.\r\n\r\nAlso, as you are putting this into libserver, for clarity the file should also be in the right directory.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-11-29T07:58:42Z",
      "diff_hunk" : "@@ -367,6 +368,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   txorphanage.cpp \\\n+  txreconciliation.cpp \\",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110257",
      "id" : 758110257,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584tL9gx",
      "original_commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "original_line" : 371,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/Makefile.am",
      "position" : null,
      "pull_request_review_id" : 817451127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 1,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110257/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-29T15:23:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110848"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: \r\n```suggestion\r\nextern const char* SENDRECON;\r\n```",
      "commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "created_at" : "2021-11-29T07:59:43Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * The boolean indicates that a node is willing to participate in transaction\n+ * reconciliation, either as a sender or a receiver.\n+ * The salt is used to compute short txids needed for efficient reconciliation.\n+ */\n+extern const char *SENDRECON;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758110848",
      "id" : 758110848,
      "line" : 271,
      "node_id" : "PRRC_kwDOABII584tL9qA",
      "original_commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "original_line" : 271,
      "original_position" : 10,
      "original_start_line" : null,
      "path" : "src/protocol.h",
      "position" : 10,
      "pull_request_review_id" : 817451127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110848/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-29T08:05:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758110848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758112133"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758112133"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Assertions can't be tested in unit tests. If this was an exception, it could be tested.",
      "commit_id" : "6a79aae0958fc38716b6b722ff5d9b06073c9d86",
      "created_at" : "2021-11-29T08:02:09Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758112133",
      "id" : 758112133,
      "in_reply_to_id" : 755594349,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tL9-F",
      "original_commit_id" : "4c0122e06b611c9d8f871a2dfb240b2aff269125",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 24,
      "pull_request_review_id" : 817451127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758112133/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-29T08:05:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758112133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "`Run process_message with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/process_message']fuzz: test/fuzz/process_message.cpp:57: auto initialize_process_message()::(anonymous class)::operator()() const: Assertion `\"GetNumMsgTypes() == getAllNetMessageTypes().size()\" && check' failed.",
      "created_at" : "2021-11-29T15:24:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-981740021",
      "id" : 981740021,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5846hCn1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/981740021/reactions"
      },
      "updated_at" : "2021-11-29T15:24:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/981740021",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758847726"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't this a problem in the case of a block-relay-only connection?\r\nIf I initiate an outbound block-relay-only connection, I set `m_tx_relay=nullptr` for this peer, don't send  SENDRECON and set `fRelay=0` in my version msg.\r\nMy peer gets an inbound connection, will set `pfrom.m_tx_relay->fRelayTxes` to false, but will still send out SENDRECON because `m_tx_relay!=nullptr`.\r\nSo wouldn't  I then receive a SENDRECON msg and immediately disconnect the peer?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-11-30T00:52:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726",
      "id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tOxju",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 818453973,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758847726/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-11-30T01:12:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/758847726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r760991194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760991194"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you are right. This case shouldn't get us disconnected from the peer.\r\n\r\nWhat would be the best way to detect peers which clearly do something meaningless?\r\nI mean, this check could be just dropped I guess, but ideally, it should handle misbehavior.\r\n\r\n",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-02T11:11:25Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r760991194",
      "id" : 760991194,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tW83a",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 821359342,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760991194/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-02T11:11:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/760991194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495508"
         }
      },
      "author_association" : "NONE",
      "body" : "typo: \r\n```suggestion\r\n *    and combines the two sketches to find the difference in *sets*.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T00:51:08Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495508",
      "id" : 762495508,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584tcsIU",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 23,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495669"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495669"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: \"When the time comes\" doesn't really say much. I would either remove or replace with something more meaningful, like \"At repeated intervals\"",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T00:54:04Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495669",
      "id" : 762495669,
      "line" : 20,
      "node_id" : "PRRC_kwDOABII584tcsK1",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 20,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 20,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495669/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495669",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495987"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495987"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: since we refer to short IDs later, I would change introduce this here:\r\n```suggestion\r\n *    is a compressed representation of short form IDs of the transactions in their set\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T00:59:05Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762495987",
      "id" : 762495987,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII584tcsPz",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 21,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495987/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762495987",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496439"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496439"
         }
      },
      "author_association" : "NONE",
      "body" : "I think reconciliation always fails if capacity is too low? And some suggested general rewording\r\n```suggestion\r\n * 5. If the difference is larger than estimated, reconciliation fails. Via an extension\r\n *    round (allowed only once), the initiator can request a larger sketch.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:06:46Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496439",
      "id" : 762496439,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tcsW3",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.h",
      "position" : 28,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496439/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496439",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496814"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496814"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: I think extension is optional, so maybe reconciliation is true in a more general sense?\r\n```suggestion\r\n * 7. If reconciliation fails, the initiator notifies the peer and announces all transactions from its\r\n *    own set. Once the peer received the failure notification, the peer announces all\r\n *    transactions from their set.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:12:49Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762496814",
      "id" : 762496814,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII584tcscu",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : 30,
      "path" : "src/node/txreconciliation.h",
      "position" : 32,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496814/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 30,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762496814",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762497694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762497694"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: don't think that's a member var?\r\n```suggestion\r\n        uint64_t local_recon_salt(GetRand(UINT64_MAX));\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:27:23Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762497694",
      "id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tcsqe",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762497694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762497694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762499136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762499136"
         }
      },
      "author_association" : "NONE",
      "body" : "Since ComputeSalt doesn't care about which is local and which is remote and you're passing by value, I think you could just skip the entire reassignment step\r\n```suggestion\r\nstatic uint256 ComputeSalt(uint64_t salt1, uint64_t salt2)\r\n{\r\n    // According to BIP-330, salts should be combined in ascending order.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T01:51:00Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762499136",
      "id" : 762499136,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tctBA",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : 21,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 24,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762499136/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 21,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762499136",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762600636"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762600636"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't really think of this as misbehaviour: I think of the meaning of SENDRECON as \"I understand reconciliation and would like to participate in it on this connection\" - if just on of the two sides signal that - ok, no reconciliation on this connection, but no harm done. So I think it might make sense to drop the check.\r\n\r\nThat being said, I think it might still make sense to not send SENDRECON when our peer has signified `fRelay=false` in their version message. Obviously, this would also mean no reconciliation with BIP37 peers, but that seems also like a good thing?! \r\nThis has the additional benefit that no reconciliations would happen when one side is in blocksonly mode (i.e. has `m_tx_relay!=nullptr` but still doesn't wish to receive transactions). I think that currently, both sides would send SENDRECON in this case. One could also prevent this on the other side, by not sending out SENDRECON ourselves when in `-blocksonly` mode (`m_ignore_incoming_txs` set)",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-05T18:49:50Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762600636",
      "id" : 762600636,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tdFy8",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 823421640,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762600636/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-05T18:49:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762600636",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762639508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762639508"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`SuggestReconciling` sounds like a function name, but there is no such function.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T00:23:26Z",
      "diff_hunk" : "@@ -70,10 +103,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762639508",
      "id" : 762639508,
      "line" : 128,
      "node_id" : "PRRC_kwDOABII584tdPSU",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 128,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 128,
      "pull_request_review_id" : 823455718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762639508/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T22:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762639508",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762647221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762647221"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:sketches",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T01:09:00Z",
      "diff_hunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762647221",
      "id" : 762647221,
      "line" : 23,
      "node_id" : "PRRC_kwDOABII584tdRK1",
      "original_commit_id" : "b55cbf63e15766bdabcac1c08b4cbfea0badeb04",
      "original_line" : 23,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 23,
      "pull_request_review_id" : 823455718,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762647221/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T22:47:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762647221",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762818388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762818388"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree with most of what you say except the BIP37 part. Are you implying BIP37 peers won't want reconciliations?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T09:10:51Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r762818388",
      "id" : 762818388,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584td69U",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 823694654,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762818388/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T09:10:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/762818388",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763130556"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763130556"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: I think this can be slightly more precise without increasing complexity, like in:\r\n```suggestion\r\n * The 2 booleans indicate that a node is willing to participate in transaction\r\n * reconciliation, respectively as an initiator or as a receiver.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T15:47:50Z",
      "diff_hunk" : "@@ -262,6 +262,13 @@ extern const char* CFCHECKPT;\n  * @since protocol version 70016 as described by BIP 339.\n  */\n extern const char* WTXIDRELAY;\n+/**\n+ * Contains 2 1-byte bools, a 4-byte version number and an 8-byte salt.\n+ * The boolean indicates that a node is willing to participate in transaction\n+ * reconciliation, either as a sender or a receiver.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763130556",
      "id" : 763130556,
      "line" : 268,
      "node_id" : "PRRC_kwDOABII584tfHK8",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 268,
      "original_position" : 7,
      "original_start_line" : 267,
      "path" : "src/protocol.h",
      "position" : 7,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763130556/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 267,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763130556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763480456"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763480456"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure. I don't know too much about BIP37 and its usage, but I thought it unlikely that SPVs using it would go through the efforts of implementing it and get significant gains from it when they are interested in a limited number of transactions anyway. Do you think participating in recons would make sense for them?\r\n\r\nThe issue is that BIP37 peers initially set `fRelay=false` in their version and later activate tx relay by sending a filter. So, if BIP37 peers should use reconciliation, disabling SENDRECON based on receiving `fRelay=false` is no longer possible, and all the logic needs to be on the side of the peer that sends `fRelay=false` (although this work just fine).",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-06T23:12:49Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763480456",
      "id" : 763480456,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tgcmI",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 824590329,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763480456/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-06T23:12:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763480456",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763833321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763833321"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit in b55cbf63e15766bdabcac1c08b4cbfea0badeb04:\r\n\r\nThis ordering was really confusing for me, \"Step 4: now we know the full symmetrical difference... Step 5: sometimes we don't.... Step 6: go back to Step 4.\" It seems more intuitive if Step 4 is at the end, and other steps can \"Skip to Step n if successful.\"",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:05:20Z",
      "diff_hunk" : "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763833321",
      "id" : 763833321,
      "line" : 32,
      "node_id" : "PRRC_kwDOABII584thyvp",
      "original_commit_id" : "b55cbf63e15766bdabcac1c08b4cbfea0badeb04",
      "original_line" : 32,
      "original_position" : 32,
      "original_start_line" : 24,
      "path" : "src/node/txreconciliation.h",
      "position" : 32,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763833321/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763833321",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763839283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763839283"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c:\r\n\r\nBIP330 `sendrecon` [specification](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki#sendrecon) says: \r\n\r\n> The sendrecon message [...] Should be sent only after sending \"wtxidrelay\", and should be ignored if received before receiving \"wtxidrelay\" from the peer.\r\n\r\nSo it seems incorrect to disconnect. We should just ignore, i.e. `return`, no?\r\n\r\n",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:12:17Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763839283",
      "id" : 763839283,
      "line" : 2855,
      "node_id" : "PRRC_kwDOABII584th0Mz",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 2852,
      "original_position" : 31,
      "original_start_line" : 2847,
      "path" : "src/net_processing.cpp",
      "position" : 74,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763839283/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2850,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763839283",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763842760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763842760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c:\r\n\r\nThis doesn't seem like it would be a peer protocol violation, but a bug in our node/implementation. If we didn't `PreRegisterPeer()` for some reason, we would disconnect the peer even though it's _our_ fault. Is this safe? Would it be better to `assert()` or `Assume()` instead?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:16:21Z",
      "diff_hunk" : "@@ -70,10 +103,56 @@ class TxReconciliationTracker::Impl {\n         return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n     }\n \n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763842760",
      "id" : 763842760,
      "line" : 126,
      "node_id" : "PRRC_kwDOABII584th1DI",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 126,
      "original_position" : 71,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 126,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763842760/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763842760",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763844744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763844744"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 1e83fda9fe1be2ad17d57b287cb672595e3173a4:\r\n```suggestion\r\n     * Tear down all reconciliation-related state for this peer, if any exists.\r\n```\r\n\r\nI don't think this captures the purpose of this function quite accurately; we're not banning the peer from reconciliation, we're just tearing down state for a disconnected peer. Perhaps it would be more clear to just call this function `DisconnectedPeer()` (similar to txrequest)",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:18:40Z",
      "diff_hunk" : "@@ -57,6 +57,14 @@ class TxReconciliationTracker {\n      * This function must be called only once per peer.\n      */\n     std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    // Helpers\n+\n+    /**\n+     * Attempts to forget reconciliation-related state of the peer (if we previously stored any).\n+     * After this, we won't be able to reconcile with the peer.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763844744",
      "id" : 763844744,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII584th1iI",
      "original_commit_id" : "1e83fda9fe1be2ad17d57b287cb672595e3173a4",
      "original_line" : 65,
      "original_position" : 9,
      "original_start_line" : 64,
      "path" : "src/node/txreconciliation.h",
      "position" : 73,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763844744/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 72,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763844744",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763854039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763854039"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c\r\n\r\nSmall food for thought - the many assertions between bools to ensure one peer is initiator and the other peer is responder suggests to me that `ReconciliationState` is an appropriate use case for a `std::variant`.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:29:55Z",
      "diff_hunk" : "@@ -28,6 +28,34 @@ static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n     return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n }\n \n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763854039",
      "id" : 763854039,
      "line" : 53,
      "node_id" : "PRRC_kwDOABII584th3zX",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 53,
      "original_position" : 26,
      "original_start_line" : 49,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 53,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763854039/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 49,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763854039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763857430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763857430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 76c6e557e8fe843d08b388cd2e541a1f9abed141:\r\n\r\njw, is there a reason you're using `assert`s instead of `BOOST_CHECK`?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:34:06Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763857430",
      "id" : 763857430,
      "line" : 18,
      "node_id" : "PRRC_kwDOABII584th4oW",
      "original_commit_id" : "76c6e557e8fe843d08b388cd2e541a1f9abed141",
      "original_line" : 18,
      "original_position" : 18,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 18,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763857430/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763857430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763860833"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763860833"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 76c6e557e8fe843d08b388cd2e541a1f9abed141:\r\n\r\nI'm wondering if there's a way of checking that the `m_local_salts` are also properly torn down for peers when we `Forget` them. If `IsPeerRegistered()` is used primarily for testing, perhaps it would be more useful to have a \"do we know about this peer\" function.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:38:24Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(PreRegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+\n+    auto [we_initiate_recon, we_respond_recon, recon_version, recon_salt] = tracker.PreRegisterPeer(0, true);\n+    assert(!we_initiate_recon);\n+    assert(we_respond_recon);\n+    assert(recon_version == 1); // RECON_VERSION in src/txreconciliation.cpp\n+\n+    std::tie(we_initiate_recon, we_respond_recon, recon_version, recon_salt) = tracker.PreRegisterPeer(1, false);\n+    assert(we_initiate_recon);\n+    assert(!we_respond_recon);\n+}\n+\n+BOOST_AUTO_TEST_CASE(RegisterPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+    const uint64_t salt = 0;\n+\n+    // Prepare a peer for reconciliation.\n+    tracker.PreRegisterPeer(0, true);\n+\n+    // Both roles are false, don't register.\n+    assert(!tracker.RegisterPeer(0, true, false, false, 1, salt));\n+\n+    // Invalid roles for the given connection direction.\n+    assert(!tracker.RegisterPeer(0, true, false, true, 1, salt));\n+    assert(!tracker.RegisterPeer(0, false, true, false, 1, salt));\n+\n+    // Invalid version.\n+    assert(!tracker.RegisterPeer(0, true, true, false, 0, salt));\n+\n+    // Valid registration.\n+    assert(!tracker.IsPeerRegistered(0));\n+    assert(tracker.RegisterPeer(0, true, true, false, 1, salt));\n+    assert(tracker.IsPeerRegistered(0));\n+\n+    // Reconciliation version is higher than ours, should be able to register.\n+    assert(!tracker.IsPeerRegistered(1));\n+    tracker.PreRegisterPeer(1, true);\n+    assert(tracker.RegisterPeer(1, true, true, false, 2, salt));\n+    assert(tracker.IsPeerRegistered(1));\n+\n+    // Do not register if there were no pre-registration for the peer.\n+    assert(!tracker.RegisterPeer(100, true, true, false, 1, salt));\n+    assert(!tracker.IsPeerRegistered(100));\n+}\n+\n+BOOST_AUTO_TEST_CASE(ForgetPeerTest)\n+{\n+    TxReconciliationTracker tracker;\n+    NodeId peer_id0 = 0;\n+\n+    // Removing peer after pre-registring works and does not let to register the peer.\n+    tracker.PreRegisterPeer(peer_id0, true);\n+    tracker.ForgetPeer(peer_id0);\n+    assert(!tracker.RegisterPeer(peer_id0, true, true, false, 1, 1));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763860833",
      "id" : 763860833,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII584th5dh",
      "original_commit_id" : "76c6e557e8fe843d08b388cd2e541a1f9abed141",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : 67,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 69,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763860833/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 67,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763860833",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">Did you think about a -disablerecon command or something similar, to not activate Erlay until all the parts have been merged?\r\n\r\nYeah I was also thinking about how it's weird to send SENDRECON messages while they don't mean anything, but couldn't come up with any good solution.\r\nFor starters, I could comment out sending the message at least I guess.\r\n\r\nI guess a flag is better if someone wants to test this stuff via functional tests (without modifying the source code), so yeah, that's probably an ultimate solution. I'll add a commit for that.",
      "created_at" : "2021-12-07T10:39:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-987792742",
      "id" : 987792742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII58464IVm",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987792742/reactions"
      },
      "updated_at" : "2021-12-07T10:39:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987792742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763865574"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763865574"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In ea3b87af90e1649428cabac83012d6faa8df61f5:\r\n\r\nI think it would be helpful to add functional test coverage for `sendrecon` logic between 2 peers and assert ignore/disconnection/response. Specifically, test cases:\r\n- peer {1, 2} is {WTXID relay, TXID relay}\r\n- peer 1 creates a {outbound-full-relay, outbound-block-relay-only, manual} and peer 2 receives inbound connection\r\n- peer 2 puts fRelay=false\r\n- peer {1,2} sends `sendrecon`\r\n- peer 1 sends `sendrecon` {before, after} `wtxidrelay`\r\n- the `sendrecon` has version={0,1,2}",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:43:59Z",
      "diff_hunk" : "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763865574",
      "id" : 763865574,
      "line" : 1818,
      "node_id" : "PRRC_kwDOABII584th6nm",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1818,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/messages.py",
      "position" : 5,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763865574/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:03:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763865574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763874524"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763874524"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In 4ac0de088db9b1d3926daaf4f55dc780a77a7f2c:\r\n\r\nBIP330 `sendrecon` [specification](https://github.com/naumenkogs/bips/blob/bip_0330_updates/bip-0330.mediawiki#sendrecon) says:\r\n\r\n> Sender must set this to 1 currently, otherwise receiver should ignore the message. v1 is the lowest protocol version, everything below that is a protocol violation. \r\n\r\nShouldn't we be checking `recon_version` and return early (ignore) if the version is higher than `RECON_VERSION`? I suppose it's not possible to do from net_processing because that constant is inside of txreconciliation module.\r\n\r\nThis suggests to me that `RegisterPeer()` can't just return a bool, but an enum between {success, protocol violation, skipped for benign reason}, see my other comment about the fact that `RegisterPeer()` returns `false` for non-protocol-violation reasons as well https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763842760",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T10:55:06Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;\n+        uint32_t recon_version;\n+        uint64_t remote_salt;\n+        vRecv >> they_initiator >> they_responder >> recon_version >> remote_salt;\n+\n+        if (!m_reconciliation.RegisterPeer(pfrom.GetId(), pfrom.IsInboundConn(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763874524",
      "id" : 763874524,
      "line" : 2862,
      "node_id" : "PRRC_kwDOABII584th8zc",
      "original_commit_id" : "4ac0de088db9b1d3926daaf4f55dc780a77a7f2c",
      "original_line" : 2859,
      "original_position" : 38,
      "original_start_line" : 2857,
      "path" : "src/net_processing.cpp",
      "position" : 81,
      "pull_request_review_id" : 825054328,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763874524/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2860,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-07T11:04:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763874524",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Yeah I was also thinking about how it's weird to send SENDRECON messages while they don't mean anything, but couldn't come up with any good solution.\r\nFor starters, I could comment out sending the message at least I guess.\r\n\r\nYou could also just gate everything under a `bool BIP330_RECONCILIATION_ENABLED{false}`: in net_processing.cpp, for every reconciliation-related message, `if (!BIP330_RECONCILIATION_ENABLED) return;` immediately at the top. Last commit/followup once everything is merged can be to remove them, which should be fairly simple.",
      "created_at" : "2021-12-07T11:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-987822405",
      "id" : 987822405,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII58464PlF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987822405/reactions"
      },
      "updated_at" : "2021-12-07T11:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/987822405",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763890863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763890863"
         }
      },
      "author_association" : "MEMBER",
      "body" : "First of all, I'd note BIP37 user != SPV. You can think of another kind of implementation of BIP37, which filters, for example, 25% of all the addr space (not sure it's practical currently w.r.t filter size), doing that over N=20 connections with different filters to receive all transactions overall.\r\nGiven how unrealistic that is today, we can probably implement Erlay support for that once we know about this scenario?\r\n\r\nSecondly, let's consider a regular small-filter (say, 1000 of addrs for redundancy) SPV node. If it's connected to X serving nodes, it'd still get X times more tx announcements than needed. But considering how little is that bandwidth, reducing this redundancy might be useless, so yeah.\r\n\r\nAt the same time, I don't think this justification is particularly strong, but yeah, in the end we could just suggest SPV nodes to not send SENDRECON if they don't want. In that case, the outcome is that regular nodes would send `SENDRECON` even though 'fRelay=false', and in some cases that would be useless, but that's not a big deal. \r\n\r\nDo you agree with this thinking?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-07T11:16:45Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r763890863",
      "id" : 763890863,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tiAyv",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 825132149,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763890863/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-07T11:16:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/763890863",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "utACK [ea3b87a](https://github.com/bitcoin/bitcoin/pull/23443/commits/ea3b87af90e1649428cabac83012d6faa8df61f5)\r\n\r\nCode review, everything looks good to me outside nits raised by others.\r\n\r\nWill run the fuzzer for some cycles, and report back results.",
      "created_at" : "2021-12-07T20:38:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-988247922",
      "id" : 988247922,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII584653dy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988247922/reactions"
      },
      "updated_at" : "2021-12-07T20:38:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988247922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/80422284?v=4",
         "events_url" : "https://api.github.com/users/GeneFerneau/events{/privacy}",
         "followers_url" : "https://api.github.com/users/GeneFerneau/followers",
         "following_url" : "https://api.github.com/users/GeneFerneau/following{/other_user}",
         "gists_url" : "https://api.github.com/users/GeneFerneau/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/GeneFerneau",
         "id" : 80422284,
         "login" : "GeneFerneau",
         "node_id" : "MDQ6VXNlcjgwNDIyMjg0",
         "organizations_url" : "https://api.github.com/users/GeneFerneau/orgs",
         "received_events_url" : "https://api.github.com/users/GeneFerneau/received_events",
         "repos_url" : "https://api.github.com/users/GeneFerneau/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/GeneFerneau/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/GeneFerneau/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/GeneFerneau"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764474638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764474638"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I agree it makes sense. To sum up, the suggestion would be \r\n1) to remove the `pfrom.m_tx_relay` check when receiving SENDRECON in order to not disconnect all block-relay-only peers, and to not disconnect if we receive a SENDRECON message but haven't sent one.\r\n2) to add a check for `m_ignore_incoming_txs`  [here](https://github.com/naumenkogs/bitcoin/blob/ea3b87af90e1649428cabac83012d6faa8df61f5/src/net_processing.cpp#L2586) in order to opt out of recons when in `-blocksonly` mode",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T01:04:37Z",
      "diff_hunk" : "@@ -2822,6 +2822,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764474638",
      "id" : 764474638,
      "in_reply_to_id" : 758847726,
      "line" : 2841,
      "node_id" : "PRRC_kwDOABII584tkPUO",
      "original_commit_id" : "04ef6f7ccdbb389faffbc676a17ca957c15eff78",
      "original_line" : 2841,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 60,
      "pull_request_review_id" : 825915107,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764474638/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T20:37:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764474638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764937051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764937051"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: Also, there may be a slight resource wastage by calculating the local salt in PreRegisterPeer already, since the peer may not make it to the next step. Have you considered doing this in the RegisterPeer step? More extremely, it could also be delayed until an actual reconciliation request is sent/received, but that extra code complexity of checking if the local salt exists for every request probably isn't worth it.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T14:52:03Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764937051",
      "id" : 764937051,
      "in_reply_to_id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tmANb",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764937051/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764937051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764943726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764943726"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: suggested improvement for readability\r\n```suggestion\r\n     * If the peer violates the protocol, no state is changed and false is returned.\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T14:58:50Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764943726",
      "id" : 764943726,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584tmB1u",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 64,
      "original_position" : 64,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 64,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764943726/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764943726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764964616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764964616"
         }
      },
      "author_association" : "NONE",
      "body" : "I think you can avoid the copy constructor by making RECON_SALT_HASHER not const?\r\n```suggestion\r\n    static auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\r\n    return (RECON_SALT_HASHER << salt1 << salt2).GetSHA256();\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T15:21:11Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764964616",
      "id" : 764964616,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tmG8I",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 28,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764964616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764964616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764994273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764994273"
         }
      },
      "author_association" : "NONE",
      "body" : "typo:\r\n```suggestion\r\n        // If the peer supports the version which is lower than ours, we downgrade to the version\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T15:53:26Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r764994273",
      "id" : 764994273,
      "line" : 114,
      "node_id" : "PRRC_kwDOABII584tmOLh",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 114,
      "original_position" : 114,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 114,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764994273/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/764994273",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765007876"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765007876"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: I'm all in favour for using helpful variable names. In this case, I'm not convinced it makes the code easier to understand. Personally, I find the below easier to understand and keep in memory:\r\n```suggestion\r\n        bool they_initiate = they_may_initiate && peer_inbound;\r\n        bool we_initiate = !peer_inbound && they_may_respond;\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:08:05Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765007876",
      "id" : 765007876,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII584tmRgE",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 132,
      "original_position" : 132,
      "original_start_line" : 129,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 132,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765007876/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 129,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765007876",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765009076"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765009076"
         }
      },
      "author_association" : "NONE",
      "body" : "Since the peer can trigger both paths, I think it would be prudent to add a log entry in both of these cases?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:09:26Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;\n+        // If we ever announce we_initiate && we_may_respond, this will need tie-breaking. For now,\n+        // this is mutually exclusive because both are based on the inbound flag.\n+        assert(!(they_initiate && we_initiate));\n+\n+        // The peer set both flags to false, we treat it as a protocol violation.\n+        if (!(they_initiate || we_initiate)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765009076",
      "id" : 765009076,
      "line" : 138,
      "node_id" : "PRRC_kwDOABII584tmRy0",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 138,
      "original_position" : 138,
      "original_start_line" : 135,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 138,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765009076/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 135,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765009076",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765011857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765011857"
         }
      },
      "author_association" : "NONE",
      "body" : "This log should probably come before any state is changed? So I'd move it up to before calling `m_local_salts.emplace`",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:12:34Z",
      "diff_hunk" : "@@ -0,0 +1,65 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765011857",
      "id" : 765011857,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII584tmSeR",
      "original_commit_id" : "b55cbf63e15766bdabcac1c08b4cbfea0badeb04",
      "original_line" : 52,
      "original_position" : 52,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 102,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765011857/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765011857",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment is unnecessary. No need to add comments about language features or common idioms like pimpl.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:13:29Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012677",
      "id" : 765012677,
      "line" : 39,
      "node_id" : "PRRC_kwDOABII584tmSrF",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 39,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012677/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\npublic:\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:13:36Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765012765",
      "id" : 765012765,
      "line" : 43,
      "node_id" : "PRRC_kwDOABII584tmSsd",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 43,
      "original_position" : 43,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 43,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012765/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765012765",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765014318"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765014318"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`explicit` prevents implicit conversions in the ctor arguments. This ctor has no arguments, so the `explicit` doesn't do anything. I'd suggest removing it.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:15:22Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765014318",
      "id" : 765014318,
      "line" : 45,
      "node_id" : "PRRC_kwDOABII584tmTEu",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 45,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 45,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765014318/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765014318",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765020695"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765020695"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\npublic:\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:22:38Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765020695",
      "id" : 765020695,
      "line" : 38,
      "node_id" : "PRRC_kwDOABII584tmUoX",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 38,
      "original_position" : 38,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 38,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765020695/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765020695",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765026580"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765026580"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There are quite a lot of modules that are used but not included, such as `sync.h` (for `Mutex`) and `cstdint` (for `uint64_t`, etc).",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:29:02Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765026580",
      "id" : 765026580,
      "line" : 5,
      "node_id" : "PRRC_kwDOABII584tmWEU",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 5,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 5,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765026580/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765026580",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028260"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028260"
         }
      },
      "author_association" : "NONE",
      "body" : "Since 103e52dcd316a5b3e939f3880da566430820e567, I think this can be replace with IsPeerRegistered?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:30:59Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028260",
      "id" : 765028260,
      "line" : 112,
      "node_id" : "PRRC_kwDOABII584tmWek",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 112,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 112,
      "pull_request_review_id" : 823339788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028260/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T16:56:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028260",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028315"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems like too high-level commentary on the salt ids.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:31:02Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765028315",
      "id" : 765028315,
      "line" : 42,
      "node_id" : "PRRC_kwDOABII584tmWfb",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 42,
      "original_position" : 42,
      "original_start_line" : 41,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 42,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028315/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 41,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765028315",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765029181"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765029181"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think about adding a dedicated `BCLog::ERLAY` log category?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:32:03Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765029181",
      "id" : 765029181,
      "line" : 102,
      "node_id" : "PRRC_kwDOABII584tmWs9",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 102,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 102,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765029181/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765029181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765034736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765034736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems unnecessary. The caller passes a bool argument `peer_inbound` into the function:\r\n\r\n- if `peer_inbound` is `true`, the function returns `<false, true, ...>`\r\n- if `peer_inbound` is `false`, the function returns `<true, false, ...>`\r\n\r\nand `peer_inbound` is not used for anything else. I suggest just removing the argument and return values.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:38:43Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765034736",
      "id" : 765034736,
      "line" : 94,
      "node_id" : "PRRC_kwDOABII584tmYDw",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 94,
      "original_position" : 94,
      "original_start_line" : 88,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 94,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765034736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 88,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765034736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765036055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765036055"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        uint64_t m_local_recon_salt{GetRand(UINT64_MAX)};\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:40:12Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765036055",
      "id" : 765036055,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tmYYX",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765036055/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765036055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765037134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765037134"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Seems strange to return a constant in every function call. Perhaps `PeerManager` can construct `TxReconciliationTracker` with the recon_version as a parameter, and always be aware of what version reconciliation tracker it owns?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:41:29Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765037134",
      "id" : 765037134,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584tmYpO",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765037134/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765037134",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765052120"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765052120"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it makes sense to store two maps from NodeId, where `m_local_salts` is only really needed between the `PreRegister` and `Register` steps. Why not add a `uint64_t` member to `ReconciliationState` that contains the local salt?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T16:58:48Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765052120",
      "id" : 765052120,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII584tmcTY",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 73,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765052120/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765052120",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765097208"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765097208"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure I like this restriction. As far as I'm aware, this is the first feature negotiation message that has a strict ordering dependency on a different feature negotiation message.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T17:57:51Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765097208",
      "id" : 765097208,
      "line" : 2832,
      "node_id" : "PRRC_kwDOABII584tmnT4",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2832,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 51,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765097208/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765097208",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765099791"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765099791"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What makes this a \"helper\"?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:01:17Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.\n+     */\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool recon_requestor, bool recon_responder, uint32_t recon_version, uint64_t remote_salt);\n+\n+    // Helpers",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765099791",
      "id" : 765099791,
      "line" : 69,
      "node_id" : "PRRC_kwDOABII584tmn8P",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.h",
      "position" : 69,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765099791/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765099791",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102150"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it's best to avoid multiple declarations on one line.\r\n\r\nAlso, I think these local variables can be avoided with:\r\n\r\n```c++\r\n    // According to BIP-330, salts should be combined in ascending order.\r\n    return (CHashWriter(RECON_SALT_HASHER) << std::min(salt1, salt2) << std::max(salt1, salt2)).GetSHA256();\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:04:41Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102150",
      "id" : 765102150,
      "line" : 25,
      "node_id" : "PRRC_kwDOABII584tmohG",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : 24,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 25,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102150/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 24,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102587"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102587"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Up to you, but `static` can be omitted since this is in the unnamed namespace.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:05:23Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765102587",
      "id" : 765102587,
      "line" : 21,
      "node_id" : "PRRC_kwDOABII584tmon7",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 21,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 21,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102587/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765102587",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765104165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765104165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Prefer not to do multiple declarations on one line.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:07:44Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765104165",
      "id" : 765104165,
      "line" : 2857,
      "node_id" : "PRRC_kwDOABII584tmpAl",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2857,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 76,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765104165/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765104165",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Do you mind using `AlignAfterOpenBracket` as specified in the clang-format file? (here and elsewhere)",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:11:07Z",
      "diff_hunk" : "@@ -0,0 +1,83 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_TXRECONCILIATION_H\n+#define BITCOIN_NODE_TXRECONCILIATION_H\n+\n+#include <net.h>\n+#include <sync.h>\n+\n+#include <memory>\n+#include <tuple>\n+\n+/**\n+ * Transaction reconciliation is a way for nodes to efficiently announce transactions.\n+ * This object keeps track of all reconciliation-related communications with the peers.\n+ * The high-level protocol is:\n+ * 0. Reconciliation protocol handshake.\n+ * 1. Once we receive a new transaction, add it to the set instead of announcing immediately\n+ * 2. When the time comes, a reconciliation initiator requests a sketch from the peer, where a sketch\n+ *    is a compressed representation of their set\n+ * 3. Once the initiator received a sketch from the peer, the initiator computes a local sketch,\n+ *    and combines the two skethes to find the difference in *sets*.\n+ * 4. Now the initiator knows full symmetrical difference and can request what the initiator is\n+ *    missing and announce to the peer what the peer is missing. For the former, an extra round is\n+ *    required because the initiator knows only short IDs of those transactions.\n+ * 5. Sometimes reconciliation fails if the difference is larger than the parties estimated,\n+ *    then there is one sketch extension round, in which the initiator requests for extra data.\n+ * 6. If extension succeeds, go to step 4.\n+ * 7. If extension fails, the initiator notifies the peer and announces all transactions from the\n+ *    corresponding set. Once the peer received the failure notification, the peer announces all\n+ *    transactions from the corresponding set.\n+ *\n+ * This is a modification of the Erlay protocol (https://arxiv.org/abs/1905.10518) with two\n+ * changes (sketch extensions instead of bisections, and an extra INV exchange round), both\n+ * are motivated in BIP-330.\n+ */\n+class TxReconciliationTracker {\n+    // Avoid littering this header file with implementation details.\n+    class Impl;\n+    const std::unique_ptr<Impl> m_impl;\n+\n+    public:\n+\n+    explicit TxReconciliationTracker();\n+    ~TxReconciliationTracker();\n+\n+    /**\n+     * Step 0. Generates initial part of the state required to reconcile with the peer.\n+     * Returns the following values used to invite the peer to reconcile:\n+     * - whether we want to initiate reconciliation requests\n+     * - whether we agree to respond to reconciliation requests\n+     * - reconciliation protocol version\n+     * - salt used for short ID computation required for reconciliation\n+     * Reconciliation roles depend on whether the peer is inbound or outbound in this connection.\n+     * A peer can't participate in future reconciliations without this call.\n+     * This function must be called only once per peer.\n+     */\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound);\n+\n+    /**\n+     * Step 0. Once the peer agreed to reconcile with us, generate the state required to track\n+     * ongoing reconciliations. Should be called only after pre-registering the peer and only once.\n+     * Does nothing and returns false if the peer violates the protocol.\n+     */\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool recon_requestor, bool recon_responder, uint32_t recon_version, uint64_t remote_salt);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106568",
      "id" : 765106568,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584tmpmI",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : 66,
      "path" : "src/node/txreconciliation.h",
      "position" : 67,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106568/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 66,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106929"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106929"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is over-indented",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:11:41Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay\n+    if (msg_type == NetMsgType::SENDRECON) {\n+        if (pfrom.fSuccessfullyConnected) {\n+            // Disconnect peers that send a SENDRECON message after VERACK.\n+            LogPrint(BCLog::NET, \"sendrecon received after verack from peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        if (!pfrom.m_tx_relay) {\n+            // If we choose a peer to not send us transactions, disconnect if they\n+            // want to reconcile.\n+            LogPrint(BCLog::NET, \"sendrecon received from non-tx-relay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        LOCK(cs_main);\n+        if (!State(pfrom.GetId())->m_wtxid_relay) {\n+            // Disconnect peers that send a SENDRECON message before/without WTXIDRELAY.\n+            LogPrint(BCLog::NET, \"sendrecon received before wtxidrelay peer=%d; disconnecting\\n\", pfrom.GetId());\n+            pfrom.fDisconnect = true;\n+            return;\n+        }\n+\n+        bool they_initiator, they_responder;\n+        uint32_t recon_version;\n+        uint64_t remote_salt;\n+        vRecv >> they_initiator >> they_responder >> recon_version >> remote_salt;\n+\n+        if (!m_reconciliation.RegisterPeer(pfrom.GetId(), pfrom.IsInboundConn(),\n+            they_initiator, they_responder, recon_version, remote_salt)) {\n+                LogPrint(BCLog::NET, \"reconciliation protocol violation from peer=%d; disconnecting\\n\", pfrom.GetId());\n+                pfrom.fDisconnect = true;\n+                return;\n+            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765106929",
      "id" : 765106929,
      "line" : 2867,
      "node_id" : "PRRC_kwDOABII584tmprx",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2867,
      "original_position" : 86,
      "original_start_line" : 2864,
      "path" : "src/net_processing.cpp",
      "position" : 86,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106929/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 2864,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765106929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765110101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765110101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is unnecessarily difficult to read. Please don't put multiple declarations/assignments on the same line.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:16:31Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765110101",
      "id" : 765110101,
      "line" : 129,
      "node_id" : "PRRC_kwDOABII584tmqdV",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 129,
      "original_position" : 129,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 129,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765110101/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765110101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765112979"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765112979"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment seems unnecessary. We're simply telling the `TxReconciliationTracker` to clear all state for this peer. That seems straightforward enough to not require a comment (similarly for the orphanage and txrequest modules).",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:20:38Z",
      "diff_hunk" : "@@ -1218,6 +1220,10 @@ void PeerManagerImpl::FinalizeNode(const CNode& node)\n     }\n     WITH_LOCK(g_cs_orphans, m_orphanage.EraseForPeer(nodeid));\n     m_txrequest.DisconnectedPeer(nodeid);\n+    // Do not check whether peer is registered for reconciliation here, but rather delegate checks\n+    // to the module. Otherwise it's easy to skip deleting an intermediate state (e.g., we store\n+    // salt for peers before we register them for reconciliation).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765112979",
      "id" : 765112979,
      "line" : 1225,
      "node_id" : "PRRC_kwDOABII584tmrKT",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1225,
      "original_position" : 22,
      "original_start_line" : 1223,
      "path" : "src/net_processing.cpp",
      "position" : 22,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765112979/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1223,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765112979",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765114545"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765114545"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree. If you're adding support for these messages to the test framework, then there should be test cases that use those messages.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T18:22:31Z",
      "diff_hunk" : "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765114545",
      "id" : 765114545,
      "in_reply_to_id" : 763865574,
      "line" : 1818,
      "node_id" : "PRRC_kwDOABII584tmrix",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1818,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/messages.py",
      "position" : 5,
      "pull_request_review_id" : 826639875,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765114545/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T18:23:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765114545",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765231773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765231773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agreed, not just for completeness - that would have also caught the issue in https://github.com/bitcoin/bitcoin/pull/23443#discussion_r758847726 - it is really easy to get the logic wrong in one of the many combinations, leading to erroneous disconnections.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-08T20:44:16Z",
      "diff_hunk" : "@@ -1814,3 +1814,31 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_cfcheckpt(filter_type={:#x}, stop_hash={:x})\".format(\n             self.filter_type, self.stop_hash)\n+\n+class msg_sendrecon:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765231773",
      "id" : 765231773,
      "in_reply_to_id" : 763865574,
      "line" : 1818,
      "node_id" : "PRRC_kwDOABII584tnIKd",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 1818,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/messages.py",
      "position" : 5,
      "pull_request_review_id" : 826937792,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765231773/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-08T20:44:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765231773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765733200"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765733200"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The reason for computing it here is that we need to return the salt from `PreRegisterPeer`, because we send the salt to the peer after pre-registering it.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:16:05Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765733200",
      "id" : 765733200,
      "in_reply_to_id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tpClQ",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 827602462,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765733200/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-09T12:16:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765733200",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765736224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765736224"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think without reassignment, swapping them for ordering would be unclear. You swap local with remote, and they loose the meaning.\r\n\r\nMaybe you can suggest a full code fragment for this function, which doesn't have this problem?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:20:18Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765736224",
      "id" : 765736224,
      "in_reply_to_id" : 762499136,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tpDUg",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : 21,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 24,
      "pull_request_review_id" : 827606550,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765736224/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 21,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:20:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765736224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765738859"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765738859"
         }
      },
      "author_association" : "NONE",
      "body" : "Right, didn't think of that, thanks for clearing up!",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:24:00Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765738859",
      "id" : 765738859,
      "in_reply_to_id" : 762497694,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584tpD9r",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 96,
      "original_position" : 96,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 96,
      "pull_request_review_id" : 827610247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765738859/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-09T12:24:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765738859",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765743144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765743144"
         }
      },
      "author_association" : "NONE",
      "body" : "I agree, that would be confusing. That's why in the above suggested change, I also updated the function signature. There is no more reference to salts being local or remote.\r\n\r\nThe Suggested change should be complete (i.e. just applying the diff should be enough, but for completeness the entire function would be:\r\n```C++\r\nstatic uint256 ComputeSalt(uint64_t salt1, uint64_t salt2)\r\n{\r\n    // According to BIP-330, salts should be combined in ascending order.\r\n    if (salt1 > salt2) std::swap(salt1, salt2);\r\n\r\n    static auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\r\n    return (RECON_SALT_HASHER << salt1 << salt2).GetSHA256();\r\n}\r\n```",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:29:36Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765743144",
      "id" : 765743144,
      "in_reply_to_id" : 762499136,
      "line" : 24,
      "node_id" : "PRRC_kwDOABII584tpFAo",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 24,
      "original_position" : 24,
      "original_start_line" : 21,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 24,
      "pull_request_review_id" : 827616138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765743144/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 21,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:29:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765743144",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765744130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765744130"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is this an improvement though?",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:30:58Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765744130",
      "id" : 765744130,
      "in_reply_to_id" : 764964616,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tpFQC",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 28,
      "pull_request_review_id" : 827617506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765744130/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:30:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765744130",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765750354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765750354"
         }
      },
      "author_association" : "NONE",
      "body" : "Well I'm just not sure why you would call the `CHashWriter` constructor in the first place when `RECON_SALT_HASHER` already is a `CHashWriter`? I don't see the point, hence my suggestion to leave it out for simplicity. If you're worried about visual feedback re type, I would suggest replacing `auto` with `CHashWriter`.",
      "commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "created_at" : "2021-12-09T12:39:22Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r765750354",
      "id" : 765750354,
      "in_reply_to_id" : 764964616,
      "line" : 28,
      "node_id" : "PRRC_kwDOABII584tpGxS",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 28,
      "original_position" : 28,
      "original_start_line" : 27,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 28,
      "pull_request_review_id" : 827626052,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765750354/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 27,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-09T12:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/765750354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766634218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766634218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you are right, this is the first time.\r\nI assume that we still want to have a dependency on WTXID, but don't have ordering between WTXID and SENDRECON.\r\n\r\nIf it's WTXID and then SENDRECON  it's clear (same as now), but what if SENDRECON comes first? It's kinda too early to \"Register\", but also we need to remember we received this message once we receive WTXID and can register.\r\nI see the following options:\r\n\r\n1. Optimistically register at the receiving of SENDRECON (even if came first). Then, unregister if at VERACK we haven't received wtxid.\r\n2. Track receiving SENDRECON in a yet-another-variable like, and register only when both are set (could be also at verack, or not).\r\n\r\nI think (1) is better.",
      "commit_id" : "5136f509e8c8a3cd23ad9c0433b3a6436619bdd8",
      "created_at" : "2021-12-10T12:19:15Z",
      "diff_hunk" : "@@ -2810,6 +2825,49 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         return;\n     }\n \n+    // Received from a peer demonstrating readiness to announce transactions via reconciliations.\n+    // This feature negotiation should happen:\n+    // - between VERSION and VERACK to avoid relay problems from switching announcement protocols\n+    //   after the connection is up\n+    // - after WTXID because we reconcile only with peers supporting wtxid-relay",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766634218",
      "id" : 766634218,
      "in_reply_to_id" : 765097208,
      "line" : 2829,
      "node_id" : "PRRC_kwDOABII584tsejq",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 2829,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : 48,
      "pull_request_review_id" : 828830058,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766634218/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T12:19:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766634218",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766648233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766648233"
         }
      },
      "author_association" : "MEMBER",
      "body" : "1. A new member would sit there with no use most of the `ReconciliationState` lifetime\r\n2. `ReconciliationState` would be initialized but not ready to use for reconciliations (while there is no full salt)\r\n\r\nI thought the latter might be particularly confusing in terms of understanding the protocol flow",
      "commit_id" : "5136f509e8c8a3cd23ad9c0433b3a6436619bdd8",
      "created_at" : "2021-12-10T12:42:32Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766648233",
      "id" : 766648233,
      "in_reply_to_id" : 765052120,
      "line" : 73,
      "node_id" : "PRRC_kwDOABII584tsh-p",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 73,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 73,
      "pull_request_review_id" : 828849905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766648233/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T12:42:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766648233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766703614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766703614"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought it's better to use internal access internally. Loose coupling & high cohesion i guess.",
      "commit_id" : "07b9357c8a4cfbf217cad6380411fab39cf14efe",
      "created_at" : "2021-12-10T14:05:22Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766703614",
      "id" : 766703614,
      "in_reply_to_id" : 765028260,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584tsvf-",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 828929643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766703614/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T14:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766703614",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Still going through comments, beware it's not the final shape from my side.",
      "created_at" : "2021-12-10T14:14:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#issuecomment-991008365",
      "id" : 991008365,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23443",
      "node_id" : "IC_kwDOABII5847EZZt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/991008365/reactions"
      },
      "updated_at" : "2021-12-10T14:14:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/991008365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766711129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766711129"
         }
      },
      "author_association" : "MEMBER",
      "body" : "is this file even compiled? I can't find it in the makefile",
      "commit_id" : "07b9357c8a4cfbf217cad6380411fab39cf14efe",
      "created_at" : "2021-12-10T14:15:35Z",
      "diff_hunk" : "@@ -0,0 +1,96 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <txreconciliation.h>\n+\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txreconciliation_tests, BasicTestingSetup)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r766711129",
      "id" : 766711129,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII584tsxVZ",
      "original_commit_id" : "07b9357c8a4cfbf217cad6380411fab39cf14efe",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/test/txreconciliation_tests.cpp",
      "position" : 11,
      "pull_request_review_id" : 828940597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766711129/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-10T14:15:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/766711129",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768029084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029084"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks for changing this @naumenkogs. There is still a [reference](https://github.com/bitcoin/bitcoin/pull/23443/files#diff-62e6a7c4c23e68b88bd585db25bb0a10e6ccda2d7fff2f05769bc0a1ad81dcdcR123) to `we_may_respond` in the comments that you probably want to take out too?",
      "commit_id" : "c125663467ce83ecb36c2686e3200097924deefe",
      "created_at" : "2021-12-13T18:48:19Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;\n+\n+        // If the peer supports the version which is lower than our, we downgrade to the version\n+        // they support. For now, this only guarantees that nodes with future reconciliation\n+        // versions have the choice of reconciling with this current version. However, they also\n+        // have the choice to refuse supporting reconciliations if the common version is not\n+        // satisfactory (e.g. too low).\n+        recon_version = std::min(recon_version, RECON_VERSION);\n+        // v1 is the lowest version, so suggesting something below must be a protocol violation.\n+        if (recon_version < 1) return false;\n+\n+        auto local_salt = m_local_salts.find(peer_id);\n+\n+        // This function should be called only after generating the local salt.\n+        if (local_salt == m_local_salts.end()) return false;\n+\n+        // Must match SuggestReconciling logic.\n+        bool we_may_initiate = !peer_inbound, we_may_respond = peer_inbound;\n+\n+        bool they_initiate = they_may_initiate && we_may_respond;\n+        bool we_initiate = we_may_initiate && they_may_respond;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768029084",
      "id" : 768029084,
      "in_reply_to_id" : 765007876,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584txzGc",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 132,
      "original_position" : 132,
      "original_start_line" : 129,
      "path" : "src/node/txreconciliation.cpp",
      "position" : null,
      "pull_request_review_id" : 830624832,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029084/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-12-13T18:48:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768029084",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768067055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768067055"
         }
      },
      "author_association" : "NONE",
      "body" : "I don't see how this helps with reducing coupling/increasing cohesion, when IsPeerRegistered is a public member of the same class? This just looks like a regular case of DRY imo. Plus, readability improves.",
      "commit_id" : "c125663467ce83ecb36c2686e3200097924deefe",
      "created_at" : "2021-12-13T19:42:48Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r768067055",
      "id" : 768067055,
      "in_reply_to_id" : 765028260,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584tx8Xv",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 830678728,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768067055/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-13T19:42:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/768067055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r771225117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771225117"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Probably you are right",
      "commit_id" : "c125663467ce83ecb36c2686e3200097924deefe",
      "created_at" : "2021-12-17T09:17:49Z",
      "diff_hunk" : "@@ -0,0 +1,192 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/txreconciliation.h>\n+\n+#include <unordered_map>\n+\n+namespace {\n+\n+/** Current protocol version */\n+constexpr uint32_t RECON_VERSION = 1;\n+/** Static salt component used to compute short txids for sketch construction, see BIP-330. */\n+const std::string RECON_STATIC_SALT = \"Tx Relay Salting\";\n+\n+/**\n+ * Salt (specified by BIP-330) constructed from contributions from both peers. It is used\n+ * to compute transaction short IDs, which are then used to construct a sketch representing a set\n+ * of transactions we want to announce to the peer.\n+ */\n+static uint256 ComputeSalt(uint64_t local_salt, uint64_t remote_salt)\n+{\n+    // According to BIP-330, salts should be combined in ascending order.\n+    uint64_t salt1 = local_salt, salt2 = remote_salt;\n+    if (salt1 > salt2) std::swap(salt1, salt2);\n+\n+    static const auto RECON_SALT_HASHER = TaggedHash(RECON_STATIC_SALT);\n+    return (CHashWriter(RECON_SALT_HASHER) << salt1 << salt2).GetSHA256();\n+}\n+\n+/**\n+ * Used to keep track of the ongoing reconciliations, the transactions we want to announce to the\n+ * peer when next transaction reconciliation happens, and also all parameters required to perform\n+ * reconciliations.\n+ */\n+class ReconciliationState {\n+\n+    public:\n+\n+    /**\n+     * Reconciliation involves exchanging sketches, which efficiently represent transactions each\n+     * peer wants to announce. Sketches are computed over transaction short IDs.\n+     * These values are used to salt short IDs.\n+     * TODO: These are currently public to overcome compiler warning (-Wunused-private-field).\n+     *       They should be made private once they are used in one of the following commits.\n+     */\n+    const uint64_t m_k0, m_k1;\n+\n+    /**\n+     * Reconciliation protocol assumes using one role consistently: either a reconciliation\n+     * initiator (requesting sketches), or responder (sending sketches). This defines our role.\n+     * */\n+    const bool m_we_initiate;\n+\n+    ReconciliationState(uint64_t k0, uint64_t k1, bool we_initiate) :\n+        m_k0(k0), m_k1(k1), m_we_initiate(we_initiate) {}\n+};\n+\n+} // namespace\n+\n+/** Actual implementation for TxReconciliationTracker's data structure. */\n+class TxReconciliationTracker::Impl {\n+\n+    mutable Mutex m_mutex;\n+\n+    /**\n+     * Per-peer salt is used to compute transaction short IDs, which will be later used to\n+     * construct reconciliation sketches.\n+     * Salt is generated randomly per-peer to prevent:\n+     * - linking of network nodes belonging to the same physical node\n+     * - halting of relay of particular transactions due to short ID collisions (DoS)\n+     */\n+    std::unordered_map<NodeId, uint64_t> m_local_salts GUARDED_BY(m_mutex);\n+\n+    /**\n+     * Keeps track of ongoing reconciliations with a given peer.\n+     */\n+    std::unordered_map<NodeId, ReconciliationState> m_states GUARDED_BY(m_mutex);\n+\n+    public:\n+\n+    std::tuple<bool, bool, uint32_t, uint64_t> PreRegisterPeer(NodeId peer_id, bool peer_inbound)\n+    {\n+        bool we_initiate_recon, we_respond_recon;\n+        // Currently reconciliation roles are defined by the connection direction: only the inbound\n+        // peer initiate reconciliations and the outbound peer is supposed to only respond.\n+        // If the way we assign reconciliation roles is updated, RECON_VERSION should be bumped.\n+        if (peer_inbound) {\n+            we_initiate_recon = false;\n+            we_respond_recon = true;\n+        } else {\n+            we_initiate_recon = true;\n+            we_respond_recon = false;\n+        }\n+\n+        uint64_t m_local_recon_salt(GetRand(UINT64_MAX));\n+        bool added = WITH_LOCK(m_mutex, return m_local_salts.emplace(peer_id, m_local_recon_salt).second);\n+        // We do this exactly once per peer (which are unique by NodeId, see GetNewNodeId) so it's\n+        // safe to assume we don't have this record yet.\n+        assert(added);\n+\n+        LogPrint(BCLog::NET, \"Pre-register peer=%d for reconciling.\\n\", peer_id);\n+        return std::make_tuple(we_initiate_recon, we_respond_recon, RECON_VERSION, m_local_recon_salt);\n+    }\n+\n+    bool RegisterPeer(NodeId peer_id, bool peer_inbound,\n+        bool they_may_initiate, bool they_may_respond, uint32_t recon_version, uint64_t remote_salt)\n+    {\n+        // We do not support reconciliation salt/version updates. We treat an attempt to update\n+        // after a successful registration as a protocol violation.\n+        LOCK(m_mutex);\n+        if (m_states.find(peer_id) != m_states.end()) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23443#discussion_r771225117",
      "id" : 771225117,
      "in_reply_to_id" : 765028260,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584t9_Yd",
      "original_commit_id" : "ea3b87af90e1649428cabac83012d6faa8df61f5",
      "original_line" : 103,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "src/node/txreconciliation.cpp",
      "position" : 103,
      "pull_request_review_id" : 834998478,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23443",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771225117/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-12-17T09:17:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/771225117",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   }
]
