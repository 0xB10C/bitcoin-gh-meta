[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-07-18T23:28:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-513031077",
      "id" : 513031077,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16421",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMzAzMTA3Nw==",
      "updated_at" : "2019-07-29T21:51:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/513031077",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Please rebase so this only contains the single commit for this PR.",
      "created_at" : "2019-07-22T21:34:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-513963835",
      "id" : 513963835,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16421",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMzk2MzgzNQ==",
      "updated_at" : "2019-07-22T21:34:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/513963835",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased. Now just one commit + master.",
      "created_at" : "2019-07-23T20:08:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-514364535",
      "id" : 514364535,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16421",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDM2NDUzNQ==",
      "updated_at" : "2019-07-23T20:08:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514364535",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased after #16471. Also, @sdaftuar noted that I (a) misunderstood the meaning of setConflicts so the description in the comment was wrong in a few ways, and also we were allowing an RBF transaction to get in via the carve-out even when it shouldn't be allowed to (ie when it has more than one mempool ancestor). Sadly, after talking through it it doesn't seem like we'll be able to get away with no extra calls to CalculateMemPoolAncestors, but at least its a bit easier to reason about now (IMO).",
      "created_at" : "2019-07-29T18:36:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-516111698",
      "id" : 516111698,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16421",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNjExMTY5OA==",
      "updated_at" : "2019-07-29T18:36:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516111698",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308384647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308384647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can we just use `GetMemPoolParents(conflict)` and grab the hashes from there, instead of iterating all the inputs?",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-29T18:53:41Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308384647",
      "id" : 308384647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM4NDY0Nw==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 45,
      "path" : "src/validation.cpp",
      "position" : 58,
      "pull_request_review_id" : 267974544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308384647",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308385882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308385882"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Similarly, if you hadn't cleared out setAncestors() a few lines up, I think you could skip having to walk all the inputs again here.  Perhaps save that and then compare setAncestors to the mempool parents of conflictTx?",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-29T18:56:11Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }\n+\n+                for (const CTxIn& new_input: tx.vin) {\n+                    if (mempool.exists(new_input.prevout.hash)) {\n+                        if (conflict_existing_mempool_inputs.count(new_input.prevout.hash) == 0) {\n+                            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", dummy_err_string);\n+                        }\n+                    }\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308385882",
      "id" : 308385882,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM4NTg4Mg==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 66,
      "pull_request_review_id" : 267974544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308385882",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308387438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308387438"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think a comment would be helpful here to explain exactly what we're doing:\r\n * No need to bump ancestor sizes/limits (since those are only tested on the transaction itself and are unaffected by the presence of conflicting transactions)\r\n * Descendant size / count are bumped by conflict tx size and 1, to account for the removal of that transaction from all the ancestors of the new transaction. Since we require that the new transaction not introduce any new mempool-ancestors (compared with the conflict tx), this is sufficient to enforce our existing package limits.",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-29T18:59:40Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }\n+\n+                for (const CTxIn& new_input: tx.vin) {\n+                    if (mempool.exists(new_input.prevout.hash)) {\n+                        if (conflict_existing_mempool_inputs.count(new_input.prevout.hash) == 0) {\n+                            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", dummy_err_string);\n+                        }\n+                    }\n+                }\n+                if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants + 1,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308387438",
      "id" : 308387438,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM4NzQzOA==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 54,
      "path" : "src/validation.cpp",
      "position" : 67,
      "pull_request_review_id" : 267974544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308387438",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388243"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308388243"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Another comment would be helpful here, to explain that if we failed to RBF due to the package limit, we'll give it one more try using the carve-out rules.  So we use the same ancestor limits that the carve-out provision requires, but bump the descendant limits to account for the to-be-removed transaction.",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-29T19:01:39Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }\n+\n+                for (const CTxIn& new_input: tx.vin) {\n+                    if (mempool.exists(new_input.prevout.hash)) {\n+                        if (conflict_existing_mempool_inputs.count(new_input.prevout.hash) == 0) {\n+                            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", dummy_err_string);\n+                        }\n+                    }\n+                }\n+                if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants + 1,\n+                        nLimitDescendantSize + conflict->GetTxSize(), dummy_err_string)) {\n+                    if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388243",
      "id" : 308388243,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM4ODI0Mw==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 56,
      "path" : "src/validation.cpp",
      "position" : 70,
      "pull_request_review_id" : 267974544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308388243",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308388398"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It looks like you're not clearing setAncestors before this call.  I think that's actually fine, but maybe better practice to clear it out to avoid confusion?",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-29T19:02:07Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }\n+\n+                for (const CTxIn& new_input: tx.vin) {\n+                    if (mempool.exists(new_input.prevout.hash)) {\n+                        if (conflict_existing_mempool_inputs.count(new_input.prevout.hash) == 0) {\n+                            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", dummy_err_string);\n+                        }\n+                    }\n+                }\n+                if (!pool.CalculateMemPoolAncestors(entry, setAncestors, nLimitAncestors, nLimitAncestorSize, nLimitDescendants + 1,\n+                        nLimitDescendantSize + conflict->GetTxSize(), dummy_err_string)) {\n+                    if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n+                            !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 2,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388398",
      "id" : 308388398,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM4ODM5OA==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 57,
      "path" : "src/validation.cpp",
      "position" : 71,
      "pull_request_review_id" : 267974544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308388398",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308388970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This whole section could probably use a clearer comment that lays out the problem we have with evaluating package limits in the presence of RBF transactions, to help future readers of this code.",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-29T19:03:30Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388970",
      "id" : 308388970,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODM4ODk3MA==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 25,
      "path" : "src/validation.cpp",
      "position" : 25,
      "pull_request_review_id" : 267974544,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308388970",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308860203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308860203"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, GetMemPoolParents just returns the parents set, which isn't actually filled until the very last step in addUnchecked.",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-30T17:57:57Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308860203",
      "id" : 308860203,
      "in_reply_to_id" : 308384647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODg2MDIwMw==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 45,
      "path" : "src/validation.cpp",
      "position" : 58,
      "pull_request_review_id" : 268566504,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308860203",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308861464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308861464"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, but doesn't CalculateMemPoolAncestors return early if we hit a limit? I didn't want to start introducing some \"if we return early, X is initialized, but Y is not\" kind of invariants in CalculateMemPoolAncestors. If you think its worth it, though...",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-30T18:00:39Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }\n+\n+                for (const CTxIn& new_input: tx.vin) {\n+                    if (mempool.exists(new_input.prevout.hash)) {\n+                        if (conflict_existing_mempool_inputs.count(new_input.prevout.hash) == 0) {\n+                            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", dummy_err_string);\n+                        }\n+                    }\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308861464",
      "id" : 308861464,
      "in_reply_to_id" : 308385882,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODg2MTQ2NA==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 66,
      "pull_request_review_id" : 268568786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308861464",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308864741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308864741"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh right, never mind.",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-30T18:06:18Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }\n+\n+                for (const CTxIn& new_input: tx.vin) {\n+                    if (mempool.exists(new_input.prevout.hash)) {\n+                        if (conflict_existing_mempool_inputs.count(new_input.prevout.hash) == 0) {\n+                            return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", dummy_err_string);\n+                        }\n+                    }\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308864741",
      "id" : 308864741,
      "in_reply_to_id" : 308385882,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODg2NDc0MQ==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 66,
      "pull_request_review_id" : 268571888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308864741",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308866818"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308866818"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The conflict tx is already in the mempool, so shouldnât that work fine?",
      "commit_id" : "ee401b3b00a73cc6261034ef0a6da51bcd0f4aef",
      "created_at" : "2019-07-30T18:11:02Z",
      "diff_hunk" : "@@ -620,19 +621,58 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             setAncestors.clear();\n             // If CalculateMemPoolAncestors fails second time, we want the original error string.\n             std::string dummy_err_string;\n-            // If the new transaction is relatively small (up to 40k weight)\n-            // and has at most one ancestor (ie ancestor limit of 2, including\n-            // the new transaction), allow it if its parent has exactly the\n-            // descendant limit descendants.\n-            //\n-            // This allows protocols which rely on distrusting counterparties\n-            // being able to broadcast descendants of an unconfirmed transaction\n-            // to be secure by simply only having two immediately-spendable\n-            // outputs - one for each counterparty. For more info on the uses for\n-            // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n-            if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                    !pool.CalculateMemPoolAncestors(entry, setAncestors, 2, nLimitAncestorSize, nLimitDescendants + 1, nLimitDescendantSize + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n-                return state.Invalid(ValidationInvalidReason::TX_MEMPOOL_POLICY, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", errString);\n+            if (setConflicts.size() == 1) {\n+                // If we are an RBF transaction which conflicts directly with exactly one other transaction (but may\n+                // evict children of said transaction), conservatively accept transactions which are not adding any\n+                // new mempool dependencies (checked first).\n+                // Such transactions are clearly not merging any existing packages, so we are only concerned with\n+                // ensuring that (a) no package is growing past the package size (not count) limits and (b) we are\n+                // not allowing something to effectively use the (below) carve-out spot when it shouldn't be allowed\n+                // to.\n+                // To check these we re-run CalculateMemPoolAncestors up to twice, once corresponding to the above,\n+                // regular, case, and one corresponding to the below, carve-out, case. Each has the same ancestor\n+                // count limits as the corresponding case, with the descendant limits increased by the size (and one\n+                // count) of the directly-conflicting transaction.\n+                assert(setIterConflicting.size() == 1);\n+                CTxMemPool::txiter conflict = *setIterConflicting.begin();\n+\n+                std::set<uint256> conflict_existing_mempool_inputs;\n+                for (const CTxIn& input : conflict->GetTx().vin) {\n+                    if (mempool.exists(input.prevout.hash)) {\n+                        conflict_existing_mempool_inputs.insert(input.prevout.hash);\n+                    }\n+                }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308866818",
      "id" : 308866818,
      "in_reply_to_id" : 308384647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODg2NjgxOA==",
      "original_commit_id" : "e8bd0c5ee183977a2e1910e9591ba48124f9582a",
      "original_position" : 45,
      "path" : "src/validation.cpp",
      "position" : 58,
      "pull_request_review_id" : 268574451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16421",
      "updated_at" : "2019-07-30T18:47:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308866818",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rewrote the comment at the top of the new block to now be a Mega Comment (tm). Hopefully its sufficient, though I can break it up and move it to corresponding code if you really want @sdaftuar, I just didn't bother cause its easy to rewrite without.",
      "created_at" : "2019-07-30T18:46:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-516545624",
      "id" : 516545624,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16421",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNjU0NTYyNA==",
      "updated_at" : "2019-07-30T18:46:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516545624",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
