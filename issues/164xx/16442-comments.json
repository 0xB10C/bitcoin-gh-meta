[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16362](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16362.html) (Add bilingual_str type by hebasto)\n* [#16224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16224.html) (gui: Bilingual GUI error messages by hebasto)\n* [#15443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15443.html) (qa: Add getdescriptorinfo functional test by promag)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-23T18:29:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514329131",
      "id" : 514329131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDMyOTEzMQ==",
      "updated_at" : "2019-07-24T14:05:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514329131",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice! Thanks for working on this.\r\n\r\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nI think so,... because some users may want to use the blockfilters only \"internal\", more specific, to rescan wallets (especially in prune mode), though functionality hasn't been added to Bitcoin Core yet\r\n\r\n> Is the mechanism to only signal the service flag once the index is in sync OK?\r\n\r\nI'd say yes. But unsure since I think we also signal NODE_NETWORK when in IBD.",
      "created_at" : "2019-07-23T18:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514333563",
      "id" : 514333563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDMzMzU2Mw==",
      "updated_at" : "2019-07-23T18:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514333563",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK - will review within the next few days.",
      "created_at" : "2019-07-24T13:58:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514643609",
      "id" : 514643609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDY0MzYwOQ==",
      "updated_at" : "2019-07-24T13:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514643609",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-07-24T18:15:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514742116",
      "id" : 514742116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDc0MjExNg==",
      "updated_at" : "2019-07-24T18:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514742116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308415562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308415562"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Please dont add more node logic in net.cpp - if you want node logic put it in net_processing. But, honestly, this should be handled either by init checking these conditions or by the filtering code itself.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:10:24Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308415562",
      "id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQxNTU2Mg==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308415562",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308426316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308426316"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this defined behavior?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:37:36Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308426316",
      "id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyNjMxNg==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308426316",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428158"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is redundant with BlockRequestAllowed.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:42:16Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428158",
      "id" : 308428158,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODE1OA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 53,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428158",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428510"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: bad indentation here.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:43:11Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428510",
      "id" : 308428510,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODUxMA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 62,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428510",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: bad indentation here.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:43:42Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428727",
      "id" : 308428727,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODcyNw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 82,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428727",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308429740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308429740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't actually think this is sufficient. The stop block may be BlockRequestAllowed while the previous block(s) may not. I think it is sufficient to check BlockRequestAllowed both on the stop block and the start block, but you should also update the comment there to make that an invariant in the future.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:46:27Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308429740",
      "id" : 308429740,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyOTc0MA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 54,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308429740",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Because you haven't checked filter_type is sane yet, this allows DoS by filling someone's debug.log with garbage by repeatedly requesting undefined filter types.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:48:25Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430487",
      "id" : 308430487,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQzMDQ4Nw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 79,
      "path" : "src/net_processing.cpp",
      "position" : 154,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430487",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is max_height_diff a parameter? Why not just use the constant directly?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:49:04Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430811",
      "id" : 308430811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQzMDgxMQ==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 33,
      "path" : "src/net_processing.cpp",
      "position" : 110,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430811",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308440314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I actually don't think we want to return false here and a few other places. All it does is change logging but no need to print twice when you just printed the error.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T21:13:30Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314",
      "id" : 308440314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQ0MDMxNA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 100,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308440314",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308441053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308441053"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This should use the peer protocol version, not that I think it matters.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T21:15:12Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308441053",
      "id" : 308441053,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQ0MTA1Mw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 111,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308441053",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699585"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point!",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:47:11Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699585",
      "id" : 308699585,
      "in_reply_to_id" : 308429740,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY5OTU4NQ==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 54,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268364395,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699585",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699798"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It'll be obvious in subsequent commits.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:47:37Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699798",
      "id" : 308699798,
      "in_reply_to_id" : 308430811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY5OTc5OA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 33,
      "path" : "src/net_processing.cpp",
      "position" : 110,
      "pull_request_review_id" : 268364641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699798",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308700863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308700863"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Filter type is checked at the top of this function?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:49:53Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308700863",
      "id" : 308700863,
      "in_reply_to_id" : 308430487,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMDg2Mw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 79,
      "path" : "src/net_processing.cpp",
      "position" : 154,
      "pull_request_review_id" : 268365954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308700863",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308702676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The point of this code is that the filter index may be building in the background and we don't want to signal NODE_COMPACT_FILTERS to peers until it is in sync. Then as soon as it does finish syncing, turn it on. \r\n\r\nI'm not sure this is the best way to do this so, I'm open to suggestions (this is the subject of two of the questions in the PR description). Another option would be to have a separate CLI flag for signalling NODE_COMPACT_FILTERS, which also blocks the net threads until the filter indices are in sync. That way the user can sync the filter index in the background, then shut down the node and restart with the BIP 157 net stuff enabled. Thoughts?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:53:39Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676",
      "id" : 308702676,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMjY3Ng==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 268368258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308702676",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308703023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308703023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, BlockFilterType is `enum class BlockFilterType : uint8_t`.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:54:21Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308703023",
      "id" : 308703023,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMzAyMw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268368690,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308703023",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Upon further reflection, this seems to not be an issue. Discussed offline with @TheBlueMatt.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:12:55Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920904",
      "id" : 308920904,
      "in_reply_to_id" : 308429740,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMDkwNA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 54,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268639745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920904",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmmm, actually I don't think so? SO quotes:\r\n\r\n    C++ standard 5.2.9 Static cast [expr.static.cast] paragraph 7\r\n\r\n    A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the resulting enumeration value is unspecified / undefined (since C++17).\r\n",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:13:03Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920968",
      "id" : 308920968,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMDk2OA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268639809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920968",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308923954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308923954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Converting a uint8_t to a uint8_t-based enum should always result in something in range?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:20:14Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308923954",
      "id" : 308923954,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMzk1NA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268643681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:20:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308923954",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308926293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308926293"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"For an enumeration whose underlying type is fixed, the values of the enumeration are the values of the underlying type.\"\r\n\r\nhttps://stackoverflow.com/questions/18195312/what-happens-if-you-static-cast-invalid-value-to-enum-class",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:26:05Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308926293",
      "id" : 308926293,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyNjI5Mw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268646789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:26:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308926293",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308927259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308927259"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Makes sense. Changed to return true.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:28:39Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308927259",
      "id" : 308927259,
      "in_reply_to_id" : 308440314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyNzI1OQ==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 100,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268648088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308927259",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311262606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311262606"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I spent a few minutes writing an indignant comment about how we should be okay with taking this small hack on as technical debt, but it actually looks like it might be pretty easy to address @TheBlueMatt's concerns by adding a method to `CConman` (eg `AddLocalService(ServiceFlags flag)`) that just modifies `nLocalServices`. The indexing code could call it on sync completion. Any reason not to do that?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-06T20:36:03Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311262606",
      "id" : 311262606,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI2MjYwNg==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 271599508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-06T20:36:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311262606",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311263083"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311263083"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(FWIW I hate the idea of blocking net threads while waiting for filter indices to sync, and slightly less hate requiring a restart to serve the filters.)",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-06T20:37:19Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311263083",
      "id" : 311263083,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI2MzA4Mw==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 271600110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-06T20:37:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311263083",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311457705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311457705"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob Yes, that would work too, but I wouldn't want to index to call CConmann directly. It should do it through some sort of callback to avoid coupling them, which just creates more indirection. I think this approach is a bit easier, but I'd be OK with a callback that updates `nLocalServices` as well.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-07T09:33:03Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311457705",
      "id" : 311457705,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ1NzcwNQ==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 271840050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-07T09:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311457705",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311731513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311731513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/16442/commits/9da9daad6053934009448344bae77f4e18f36869\r\n\r\nWhy isn't this `true` as in `ProcessGetCFilters()`? (Same question for `ProcessGetCFHeaders()`.)",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-07T19:46:18Z",
      "diff_hunk" : "@@ -1989,6 +1991,49 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     return true;\n }\n \n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311731513",
      "id" : 311731513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTczMTUxMw==",
      "original_commit_id" : "9da9daad6053934009448344bae77f4e18f36869",
      "original_position" : 28,
      "path" : "src/net_processing.cpp",
      "position" : 288,
      "pull_request_review_id" : 272189096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-07T19:46:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311731513",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311737473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311737473"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\r\n\r\nMight want to make a note here about why we're adding more boost usage instead of using the utilities in `sync` (ie `std::mutex`). I assume this is because we want to allow multiple threads to be able to read the headers cache simultaneously?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-07T20:01:12Z",
      "diff_hunk" : "@@ -403,6 +405,10 @@ limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ)\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;\n+static boost::shared_mutex active_chain_cf_headers_mtx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311737473",
      "id" : 311737473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTczNzQ3Mw==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 16,
      "path" : "src/net_processing.cpp",
      "position" : 42,
      "pull_request_review_id" : 272196705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-07T20:01:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311737473",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
