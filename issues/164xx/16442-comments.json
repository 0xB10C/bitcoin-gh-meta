[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16839](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16839.html) (Replace Connman and BanMan globals with NodeContext local by ryanofsky)\n* [#15443](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15443.html) (qa: Add getdescriptorinfo functional test by promag)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-23T18:29:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514329131",
      "id" : 514329131,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDMyOTEzMQ==",
      "updated_at" : "2019-10-28T21:42:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514329131",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice! Thanks for working on this.\r\n\r\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nI think so,... because some users may want to use the blockfilters only \"internal\", more specific, to rescan wallets (especially in prune mode), though functionality hasn't been added to Bitcoin Core yet\r\n\r\n> Is the mechanism to only signal the service flag once the index is in sync OK?\r\n\r\nI'd say yes. But unsure since I think we also signal NODE_NETWORK when in IBD.",
      "created_at" : "2019-07-23T18:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514333563",
      "id" : 514333563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDMzMzU2Mw==",
      "updated_at" : "2019-07-23T18:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514333563",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK - will review within the next few days.",
      "created_at" : "2019-07-24T13:58:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514643609",
      "id" : 514643609,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDY0MzYwOQ==",
      "updated_at" : "2019-07-24T13:58:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514643609",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-07-24T18:15:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-514742116",
      "id" : 514742116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNDc0MjExNg==",
      "updated_at" : "2019-07-24T18:15:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/514742116",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308415562"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308415562"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Please dont add more node logic in net.cpp - if you want node logic put it in net_processing. But, honestly, this should be handled either by init checking these conditions or by the filtering code itself.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:10:24Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308415562",
      "id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQxNTU2Mg==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308415562",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308426316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308426316"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is this defined behavior?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:37:36Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308426316",
      "id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyNjMxNg==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308426316",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428158"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428158"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is redundant with BlockRequestAllowed.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:42:16Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428158",
      "id" : 308428158,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODE1OA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 53,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428158",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428510"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428510"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: bad indentation here.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:43:11Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428510",
      "id" : 308428510,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODUxMA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 62,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428510",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: bad indentation here.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:43:42Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308428727",
      "id" : 308428727,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyODcyNw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 82,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308428727",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308429740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308429740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't actually think this is sufficient. The stop block may be BlockRequestAllowed while the previous block(s) may not. I think it is sufficient to check BlockRequestAllowed both on the stop block and the start block, but you should also update the comment there to make that an invariant in the future.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:46:27Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308429740",
      "id" : 308429740,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQyOTc0MA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 54,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308429740",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430487"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Because you haven't checked filter_type is sane yet, this allows DoS by filling someone's debug.log with garbage by repeatedly requesting undefined filter types.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:48:25Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430487",
      "id" : 308430487,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQzMDQ4Nw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 79,
      "path" : "src/net_processing.cpp",
      "position" : 154,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430487",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430811"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430811"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is max_height_diff a parameter? Why not just use the constant directly?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T20:49:04Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308430811",
      "id" : 308430811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQzMDgxMQ==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 33,
      "path" : "src/net_processing.cpp",
      "position" : 110,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308430811",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308440314"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I actually don't think we want to return false here and a few other places. All it does is change logging but no need to print twice when you just printed the error.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T21:13:30Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314",
      "id" : 308440314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQ0MDMxNA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 100,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308440314",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308441053"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308441053"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This should use the peer protocol version, not that I think it matters.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-29T21:15:12Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;\n+    }\n+\n+    std::vector<BlockFilter> filters;\n+\n+    if (!filter_index->LookupFilterRange(start_height, stop_index, filters)) {\n+        return error(\"Failed to find block filter in index: filter_type=%s, start_height=%d, stop_hash=%s\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+    }\n+\n+    for (const auto& filter : filters) {\n+        CSerializedNetMsg msg = CNetMsgMaker(INIT_PROTO_VERSION)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308441053",
      "id" : 308441053,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODQ0MTA1Mw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 111,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268012403,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308441053",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699585"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good point!",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:47:11Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699585",
      "id" : 308699585,
      "in_reply_to_id" : 308429740,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY5OTU4NQ==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 54,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268364395,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699585",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699798"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It'll be obvious in subsequent commits.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:47:37Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308699798",
      "id" : 308699798,
      "in_reply_to_id" : 308430811,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODY5OTc5OA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 33,
      "path" : "src/net_processing.cpp",
      "position" : 110,
      "pull_request_review_id" : 268364641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308699798",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308700863"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308700863"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Filter type is checked at the top of this function?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:49:53Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308700863",
      "id" : 308700863,
      "in_reply_to_id" : 308430487,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMDg2Mw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 79,
      "path" : "src/net_processing.cpp",
      "position" : 154,
      "pull_request_review_id" : 268365954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308700863",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308702676"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The point of this code is that the filter index may be building in the background and we don't want to signal NODE_COMPACT_FILTERS to peers until it is in sync. Then as soon as it does finish syncing, turn it on. \r\n\r\nI'm not sure this is the best way to do this so, I'm open to suggestions (this is the subject of two of the questions in the PR description). Another option would be to have a separate CLI flag for signalling NODE_COMPACT_FILTERS, which also blocks the net threads until the filter indices are in sync. That way the user can sync the filter index in the background, then shut down the node and restart with the BIP 157 net stuff enabled. Thoughts?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:53:39Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308702676",
      "id" : 308702676,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMjY3Ng==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 268368258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308702676",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308703023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308703023"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, BlockFilterType is `enum class BlockFilterType : uint8_t`.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T12:54:21Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308703023",
      "id" : 308703023,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODcwMzAyMw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268368690,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308703023",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Upon further reflection, this seems to not be an issue. Discussed offline with @TheBlueMatt.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:12:55Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920904",
      "id" : 308920904,
      "in_reply_to_id" : 308429740,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMDkwNA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 54,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268639745,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920904",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmmm, actually I don't think so? SO quotes:\r\n\r\n    C++ standard 5.2.9 Static cast [expr.static.cast] paragraph 7\r\n\r\n    A value of integral or enumeration type can be explicitly converted to an enumeration type. The value is unchanged if the original value is within the range of the enumeration values (7.2). Otherwise, the resulting enumeration value is unspecified / undefined (since C++17).\r\n",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:13:03Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308920968",
      "id" : 308920968,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMDk2OA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268639809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:14:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308920968",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308923954"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308923954"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Converting a uint8_t to a uint8_t-based enum should always result in something in range?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:20:14Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308923954",
      "id" : 308923954,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyMzk1NA==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268643681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:20:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308923954",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308926293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308926293"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"For an enumeration whose underlying type is fixed, the values of the enumeration are the values of the underlying type.\"\r\n\r\nhttps://stackoverflow.com/questions/18195312/what-happens-if-you-static-cast-invalid-value-to-enum-class",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:26:05Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308926293",
      "id" : 308926293,
      "in_reply_to_id" : 308426316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyNjI5Mw==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 94,
      "path" : "src/net_processing.cpp",
      "position" : 188,
      "pull_request_review_id" : 268646789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:26:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308926293",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308927259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308927259"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Makes sense. Changed to return true.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-07-30T20:28:39Z",
      "diff_hunk" : "@@ -1848,6 +1851,99 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+     {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index ||\n+            !stop_index->IsValid(BLOCK_VALID_SCRIPTS) ||\n+            !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+     uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+     return true;\n+}\n+\n+static bool ProcessGetCFilters(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                               CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFILTERS_SIZE, stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308927259",
      "id" : 308927259,
      "in_reply_to_id" : 308440314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwODkyNzI1OQ==",
      "original_commit_id" : "ac3a72a8288134c5381b8e0d75b8b09fab79a890",
      "original_position" : 100,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 268648088,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-07-30T20:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/308927259",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311262606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311262606"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I spent a few minutes writing an indignant comment about how we should be okay with taking this small hack on as technical debt, but it actually looks like it might be pretty easy to address @TheBlueMatt's concerns by adding a method to `CConman` (eg `AddLocalService(ServiceFlags flag)`) that just modifies `nLocalServices`. The indexing code could call it on sync completion. Any reason not to do that?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-06T20:36:03Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311262606",
      "id" : 311262606,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI2MjYwNg==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 271599508,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-06T20:36:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311262606",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311263083"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311263083"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(FWIW I hate the idea of blocking net threads while waiting for filter indices to sync, and slightly less hate requiring a restart to serve the filters.)",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-06T20:37:19Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311263083",
      "id" : 311263083,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI2MzA4Mw==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 271600110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-06T20:37:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311263083",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311457705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311457705"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob Yes, that would work too, but I wouldn't want to index to call CConmann directly. It should do it through some sort of callback to avoid coupling them, which just creates more indirection. I think this approach is a bit easier, but I'd be OK with a callback that updates `nLocalServices` as well.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-07T09:33:03Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311457705",
      "id" : 311457705,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTQ1NzcwNQ==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 271840050,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-07T09:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311457705",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311731513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311731513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/16442/commits/9da9daad6053934009448344bae77f4e18f36869\r\n\r\nWhy isn't this `true` as in `ProcessGetCFilters()`? (Same question for `ProcessGetCFHeaders()`.)",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-07T19:46:18Z",
      "diff_hunk" : "@@ -1989,6 +1991,49 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     return true;\n }\n \n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311731513",
      "id" : 311731513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTczMTUxMw==",
      "original_commit_id" : "9da9daad6053934009448344bae77f4e18f36869",
      "original_position" : 28,
      "path" : "src/net_processing.cpp",
      "position" : 288,
      "pull_request_review_id" : 272189096,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-07T19:46:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311731513",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311737473"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311737473"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\r\n\r\nMight want to make a note here about why we're adding more boost usage instead of using the utilities in `sync` (ie `std::mutex`). I assume this is because we want to allow multiple threads to be able to read the headers cache simultaneously?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-07T20:01:12Z",
      "diff_hunk" : "@@ -403,6 +405,10 @@ limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ)\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;\n+static boost::shared_mutex active_chain_cf_headers_mtx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311737473",
      "id" : 311737473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTczNzQ3Mw==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 16,
      "path" : "src/net_processing.cpp",
      "position" : 42,
      "pull_request_review_id" : 272196705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-07T20:01:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311737473",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311993840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311993840"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, the rationale is that `std` doesn't get `shared_mutex` until C++17. I'll add a comment.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-08T11:52:56Z",
      "diff_hunk" : "@@ -403,6 +405,10 @@ limitedmap<uint256, int64_t> g_already_asked_for GUARDED_BY(cs_main)(MAX_INV_SZ)\n /** Map maintaining per-node state. */\n static std::map<NodeId, CNodeState> mapNodeState GUARDED_BY(cs_main);\n \n+/** In-memory cache of all BIP157 compact filter checkpoints for the active chain. */\n+static std::vector<std::pair<const CBlockIndex*, uint256>> active_chain_cf_headers;\n+static boost::shared_mutex active_chain_cf_headers_mtx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r311993840",
      "id" : 311993840,
      "in_reply_to_id" : 311737473,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTk5Mzg0MA==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 16,
      "path" : "src/net_processing.cpp",
      "position" : 42,
      "pull_request_review_id" : 272517940,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-08T11:52:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311993840",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312078105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312078105"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These changes *don't* require reindexing because we [manually spell out the serialization format](https://github.com/jamesob/bitcoin/blob/3499e8877b3be1a629647353ddb8bb380c10a513/src/index/blockfilterindex.cpp#L211) when writing to disk (and same with reads) instead of using these serialization ops, right?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-08T14:48:52Z",
      "diff_hunk" : "@@ -143,8 +143,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312078105",
      "id" : 312078105,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjA3ODEwNQ==",
      "original_commit_id" : "bbb909cf12d11cb546fff2d47c02f93001ed5bdf",
      "original_position" : 7,
      "path" : "src/blockfilter.h",
      "position" : 7,
      "pull_request_review_id" : 272626687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-08T18:46:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312078105",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312182612"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312182612"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/16442/commits/3499e8877b3be1a629647353ddb8bb380c10a513\r\n\r\nFWIW could make this `const`.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-08T18:29:50Z",
      "diff_hunk" : "@@ -1201,6 +1207,40 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+static bool UpdateCFHeadersCache(const BlockFilterIndex& filter_index)\n+{\n+    LOCK(cs_main);\n+    boost::unique_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);\n+\n+    CChain& active_chain = ::ChainActive();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312182612",
      "id" : 312182612,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjE4MjYxMg==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 30,
      "path" : "src/net_processing.cpp",
      "position" : 56,
      "pull_request_review_id" : 272626687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-08T18:46:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312182612",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312186387"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312186387"
         }
      },
      "author_association" : "MEMBER",
      "body" : "To be clear: at the moment, the `shared_lock` is more or less moot because this is only ever called into from a single thread (`msghand`). I'm not necessarily opposed to using the shared_lock before necessary, but might be worth falling back to our standard `RecursiveMutex` (which comes with lock diagnostics) until and if we actually hit this from multiple threads.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-08T18:38:21Z",
      "diff_hunk" : "@@ -2043,23 +2087,37 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return false;\n     }\n \n-    bool index_in_sync = false;\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        boost::shared_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312186387",
      "id" : 312186387,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjE4NjM4Nw==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 80,
      "path" : "src/net_processing.cpp",
      "position" : 293,
      "pull_request_review_id" : 272626687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-08T18:46:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312186387",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312467117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312467117"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-09T12:59:25Z",
      "diff_hunk" : "@@ -143,8 +143,8 @@ class BlockFilter\n \n     template <typename Stream>\n     void Serialize(Stream& s) const {\n-        s << m_block_hash\n-          << static_cast<uint8_t>(m_filter_type)\n+        s << static_cast<uint8_t>(m_filter_type)\n+          << m_block_hash",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312467117",
      "id" : 312467117,
      "in_reply_to_id" : 312078105,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQ2NzExNw==",
      "original_commit_id" : "bbb909cf12d11cb546fff2d47c02f93001ed5bdf",
      "original_position" : 7,
      "path" : "src/blockfilter.h",
      "position" : 7,
      "pull_request_review_id" : 273122878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-09T12:59:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312467117",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312470069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312470069"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh, for some reason I thought there were multiple message handler threads. Since there's just one and this doesn't require recursive locking, I think going to a `std::mutex` makes sense. Agree?",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-09T13:06:54Z",
      "diff_hunk" : "@@ -2043,23 +2087,37 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return false;\n     }\n \n-    bool index_in_sync = false;\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        boost::shared_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312470069",
      "id" : 312470069,
      "in_reply_to_id" : 312186387,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQ3MDA2OQ==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 80,
      "path" : "src/net_processing.cpp",
      "position" : 293,
      "pull_request_review_id" : 273126581,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-09T13:06:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312470069",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312485687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312485687"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jimpo yep, that'd be my inclination.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-09T13:45:31Z",
      "diff_hunk" : "@@ -2043,23 +2087,37 @@ static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n         return false;\n     }\n \n-    bool index_in_sync = false;\n     std::vector<uint256> headers(stop_index->nHeight / CFCHECKPT_INTERVAL);\n+    {\n+        boost::shared_lock<boost::shared_mutex> _lock(active_chain_cf_headers_mtx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r312485687",
      "id" : 312485687,
      "in_reply_to_id" : 312186387,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjQ4NTY4Nw==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 80,
      "path" : "src/net_processing.cpp",
      "position" : 293,
      "pull_request_review_id" : 273147517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-09T13:45:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312485687",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK\r\n\r\n> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nYes, suggest defaulting to `true`. It can wait until #15845.\r\n\r\n> Is the mechanism to only signal the service flag once the index is in sync OK?\r\n\r\nI guess it's already built, but I'd be fine with moving that to a followup (and kick the `src/net.cpp` discussion can down the road). For fresh nodes the index is synced along with IBD. For existing nodes which add the index there's a slight lag between when this setting is enabled and when it's available. These flags take time to get gossiped around. The odds of another node wasting time because of that seems orders of magnitude smaller than the odds of the node just being offline.\r\n\r\nOn macOS 10.14.6 when configured with `--enable-debug` the newly added `p2p_cfilters.py` ignites my fan and failed the first time with `Block sync timed out:` (passed the second time). ",
      "created_at" : "2019-08-13T16:01:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-520897695",
      "id" : 520897695,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMDg5NzY5NQ==",
      "updated_at" : "2019-08-13T16:09:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520897695",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Should there be a separate CLI flag other than -blockfilterindex to enable serving of filters from the index?\r\n\r\nBIP 157 is controversial, so I think yes.",
      "created_at" : "2019-08-20T00:38:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-522805991",
      "id" : 522805991,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMjgwNTk5MQ==",
      "updated_at" : "2019-08-20T00:38:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522805991",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317856404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317856404"
         }
      },
      "author_association" : "NONE",
      "body" : "nit: \r\n```suggestion\r\n        # Nodes 0 & 1 share the same first 999 blocks in the chain.\r\n```",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-27T01:06:28Z",
      "diff_hunk" : "@@ -0,0 +1,264 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 nodes in the chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317856404",
      "id" : 317856404,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg1NjQwNA==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 55,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 55,
      "pull_request_review_id" : 279909596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-27T02:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317856404",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317859935"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317859935"
         }
      },
      "author_association" : "NONE",
      "body" : "I was a bit confused reviewing ab0ea72734ee0bcf7fdf8201d611941ea86ed15f here before seeing the synchronization code added later. If you decide to remove synchronization between the net thread and the filter-index thread, you can use the `syncwithvalidationinterface` RPC here and after reorging `node0` to keep the tests working consistently.\r\n\r\nOtherwise (without 77653ec568628291f69ea1b5a31bee35a6492a4a) I believe it is possible that the block filter index might not be synced at this point and the request would fail. ",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-27T01:27:55Z",
      "diff_hunk" : "@@ -0,0 +1,264 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 nodes in the chain.\n+        self.nodes[0].generate(999)\n+        sync_blocks(self.nodes)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        # Fetch cfcheckpt on node 0. Since the implementation caches the checkpoints on the active\n+        # chain in memory, this checks that the cache is updated correctly upon subsequent queries\n+        # after the reorg.\n+        request = msg_getcfcheckpt(",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317859935",
      "id" : 317859935,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg1OTkzNQ==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 72,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 72,
      "pull_request_review_id" : 279909596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-27T02:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317859935",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317861704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317861704"
         }
      },
      "author_association" : "NONE",
      "body" : "Looks like @jimpo may have just forgotten to update the corresponding return statements when updating the PR earlier. See: https://github.com/bitcoin/bitcoin/pull/16442#discussion_r308440314 \"All it does is change logging but no need to print twice when you just printed the error.\"\r\n\r\nIt should be consistent though.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-27T01:38:15Z",
      "diff_hunk" : "@@ -1989,6 +1991,49 @@ static bool ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainPa\n     return true;\n }\n \n+static bool ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> stop_hash;\n+\n+    BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n+                                   stop_index, filter_index)) {\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317861704",
      "id" : 317861704,
      "in_reply_to_id" : 311731513,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg2MTcwNA==",
      "original_commit_id" : "9da9daad6053934009448344bae77f4e18f36869",
      "original_position" : 28,
      "path" : "src/net_processing.cpp",
      "position" : 288,
      "pull_request_review_id" : 279909596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-27T02:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317861704",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317867252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317867252"
         }
      },
      "author_association" : "NONE",
      "body" : "Rather than block the message handler thread until the filter index has synced, is there much downside to ignoring messages when a filter query fails because it is not yet synced? (i.e. not sending anything back to the peer as implemented before 77653ec568628291f69ea1b5a31bee35a6492a4a) \r\n\r\nBy the spec in BIP 157, clients should be downloading from multiple peers so they wouldn't be wasting much bandwidth because of dropped messages caused by this. Blocking the message handler thread just seems to have more downsides IMO.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-08-27T02:11:37Z",
      "diff_hunk" : "@@ -1848,6 +1899,238 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r317867252",
      "id" : 317867252,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNzg2NzI1Mg==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 165,
      "path" : "src/net_processing.cpp",
      "position" : 165,
      "pull_request_review_id" : 279909596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-08-27T02:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/317867252",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I spun up a temporary testnet node in case anyone wants to test the p2p behavior: `uskjxnd7tud7qkeg.onion:18333`",
      "created_at" : "2019-09-01T11:13:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-526909565",
      "id" : 526909565,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjkwOTU2NQ==",
      "updated_at" : "2019-10-25T15:57:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526909565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r321962707"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321962707"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"that\"? :-)",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-09-07T09:32:13Z",
      "diff_hunk" : "@@ -0,0 +1,264 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n+\n+Tests that a node configured with -blockfilterindex signals NODE_COMPACT_FILTERS and responds\n+correctly to GET_CFILTERS, GET_CFHEADERS, GET_CFCHECKPT requests.\n+\"\"\"\n+\n+from test_framework.messages import (\n+    FILTER_TYPE_BASIC,\n+    NODE_NETWORK, NODE_COMPACT_FILTERS, NODE_WITNESS, NODE_NETWORK_LIMITED,\n+    msg_getcfilters, msg_getcfheaders, msg_getcfcheckpt,\n+    ser_uint256, uint256_from_str, hash256,\n+)\n+from test_framework.mininode import (\n+    P2PInterface,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes, disconnect_nodes, sync_blocks,\n+    wait_until,\n+)\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class CFiltersClient(P2PInterface):\n+    def __init__(self):\n+        super().__init__()\n+        # Store the cfilters received.\n+        self.cfilters = []\n+\n+    def pop_cfilters(self):\n+        cfilters = self.cfilters\n+        self.cfilters = []\n+        return cfilters\n+\n+    def on_cfilter(self, message):\n+        \"\"\"Store cfilters received in a list.\"\"\"\n+        self.cfilters.append(message)\n+\n+class CompactFiltersTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Node 0 supports COMPACT_FILTERS, node 1 does not.\n+        node0 = self.nodes[0].add_p2p_connection(CFiltersClient())\n+        node1 = self.nodes[1].add_p2p_connection(CFiltersClient())\n+\n+        # Nodes 0 & 1 share the same first 999 nodes in the chain.\n+        self.nodes[0].generate(999)\n+        sync_blocks(self.nodes)\n+\n+        # Stale blocks by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(1)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 1000)\n+        stale_block_hash = self.nodes[0].getblockhash(1000)\n+\n+        self.nodes[1].generate(1001)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 2000)\n+\n+        # Fetch cfcheckpt on node 0. Since the implementation caches the checkpoints on the active\n+        # chain in memory, this checks that the cache is updated correctly upon subsequent queries\n+        # after the reorg.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping(timeout=5)\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+        assert_equal(len(response.headers), 1)\n+\n+        # Reorg node 0 to a new chain\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        main_block_hash = self.nodes[0].getblockhash(1000)\n+        assert main_block_hash != stale_block_hash, \"node 0 chain did not reorganize\"\n+\n+        default_services = NODE_NETWORK | NODE_WITNESS | NODE_NETWORK_LIMITED\n+\n+        # Check that nodes have signalled expected services.\n+        assert_equal(node0.nServices, default_services | NODE_COMPACT_FILTERS)\n+        assert_equal(node1.nServices, default_services)\n+\n+        # Check that the localservices is as expected.\n+        assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16),\n+                     default_services | NODE_COMPACT_FILTERS)\n+        assert_equal(int(self.nodes[1].getnetworkinfo()['localservices'], 16),\n+                     default_services)\n+\n+        # Check that peers can fetch cfcheckpt on active chain.\n+        tip_hash = self.nodes[0].getbestblockhash()\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(tip_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+        assert_equal(response.filter_type, request.filter_type)\n+        assert_equal(response.stop_hash, request.stop_hash)\n+\n+        main_cfcheckpt = self.nodes[0].getblockfilter(main_block_hash, 'basic')['header']\n+        tip_cfcheckpt = self.nodes[0].getblockfilter(tip_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (main_cfcheckpt, tip_cfcheckpt)]\n+        )\n+\n+        # Check that peers can fetch cfcheckpt on stale chain.\n+        request = msg_getcfcheckpt(\n+            filter_type=FILTER_TYPE_BASIC,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfcheckpt']\n+\n+        stale_cfcheckpt = self.nodes[0].getblockfilter(stale_block_hash, 'basic')['header']\n+        assert_equal(\n+            response.headers,\n+            [int(header, 16) for header in (stale_cfcheckpt,)]\n+        )\n+\n+        # Check that peers can fetch cfheaders on active chain.\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        main_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        # Check that peers can fetch cfheaders on stale chain.\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.last_message['cfheaders']\n+        stale_cfhashes = response.hashes\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n+        # Check that peers can fetch cfilters.\n+        stop_hash = self.nodes[0].getblockhash(10)\n+        request = msg_getcfilters(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stop_hash, 16)\n+        )\n+        node0.send_message(request)\n+        node0.sync_with_ping()\n+        response = node0.pop_cfilters()\n+        assert_equal(len(response), 10)\n+\n+        # Check that cfilter responses are correct.\n+        for cfilter, cfhash, height in zip(response, main_cfhashes, range(1, 11)):\n+            block_hash = self.nodes[0].getblockhash(height)\n+            assert_equal(cfilter.filter_type, FILTER_TYPE_BASIC)\n+            assert_equal(cfilter.block_hash, int(block_hash, 16))\n+            computed_cfhash = uint256_from_str(hash256(cfilter.filter_data))\n+            assert_equal(computed_cfhash, cfhash)\n+\n+        # Check thet peers can fetch cfilters for stale blocks.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r321962707",
      "id" : 321962707,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTk2MjcwNw==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 186,
      "path" : "test/functional/p2p_cfilters.py",
      "position" : 186,
      "pull_request_review_id" : 285164857,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-09-07T09:33:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321962707",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r322897395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322897395"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just had an offline conversation with @sdaftuar here (with regard to #16847) which I think is relevant. Dynamically flipping `nLocalServices` bits doesn't make a ton of sense because we'd need to disconnect and reconnect to all of our peers in order for the flip to have any effect.\r\n\r\nWhen thinking about this, it's instructive to look at how IBD works: we don't flip `NODE_NETWORK` off and on once we've started and finished IBD; instead net_processing just behaves differently during IBD and peers are able to gracefully handle nodes that signal NODE_NETWORK but haven't completed the sync yet and therefore drop getheaders messages.\r\n\r\nI think the way forward in this case is to do something analogous: signal `NODE_COMPACT_FILTERS` from startup when appropriate and ensure that nodes seeking block filters account for the fact that a peer they request filters from may be in the process of building them.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-09-10T18:29:34Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r322897395",
      "id" : 322897395,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjg5NzM5NQ==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 286350774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-09-10T18:29:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322897395",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jimpo any plans to address feedback here? It'd be great to see this PR move towards merge.",
      "created_at" : "2019-09-27T15:33:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-535989758",
      "id" : 535989758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNTk4OTc1OA==",
      "updated_at" : "2019-09-27T15:33:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/535989758",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-09T15:42:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-540059882",
      "id" : 540059882,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MDA1OTg4Mg==",
      "updated_at" : "2019-10-09T15:42:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540059882",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731085"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731085"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Dynamically flipping nLocalServices bits doesn't make a ton of sense because we'd need to disconnect and reconnect to all of our peers in order for the flip to have any effect.\r\n\r\nI disagree with this. New inbound connections will see that the service bit has been flipped. And clients who need the filters wouldn't connect until it is on, so it's not like any inbound connections need to periodically disconnect/reconnect. And if I understand correctly, we re-advertise our local address with service bits to each peer every day on average, so the network should see the change eventually without the node operator having to do anything.\r\n\r\n>  instead net_processing just behaves differently during IBD and peers are able to gracefully handle nodes that signal NODE_NETWORK but haven't completed the sync yet and therefore drop getheaders messages.\r\n\r\nThis feels a bit different because the `version` message includes a start height indicating how far behind the node is. I suppose clients could also just request checkpoints and determine how far behind a node's filter index is at least to within 1,000 blocks though.\r\n",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-10-19T10:11:21Z",
      "diff_hunk" : "@@ -2597,7 +2599,18 @@ uint64_t CConnman::GetTotalBytesSent()\n \n ServiceFlags CConnman::GetLocalServices() const\n {\n-    return nLocalServices;\n+    uint64_t local_services = nLocalServices;\n+    if (local_services & NODE_COMPACT_FILTERS) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731085",
      "id" : 336731085,
      "in_reply_to_id" : 308415562,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjczMTA4NQ==",
      "original_commit_id" : "c6f73db3abe2835fc14b5b4d434008f6613ee450",
      "original_position" : 20,
      "path" : "src/net.cpp",
      "position" : 20,
      "pull_request_review_id" : 304206235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-10-19T10:11:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731085",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731315"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It just makes the client logic more complicated as they need to have timeouts and if the index is in sync, it should catch up to the tip pretty fast.",
      "commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "created_at" : "2019-10-19T10:18:32Z",
      "diff_hunk" : "@@ -1848,6 +1899,238 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n+/**\n+ * Common validation logic for GETCFILTER, GETCFHEADER, GETCFCHECKPT request handling. If the\n+ * request is valid and can be serviced, this returns the stop block index and the filter index\n+ * as out parameters. May disconnect from the peer in the case of a bad request.\n+ */\n+static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      uint256& stop_hash, uint32_t max_height_diff,\n+                                      const CBlockIndex*& stop_index,\n+                                      BlockFilterIndex*& filter_index)\n+{\n+    bool supported_filter_type =\n+        (filter_type == BlockFilterType::BASIC &&\n+         (pfrom->GetLocalServices() & NODE_COMPACT_FILTERS));\n+    if (!supported_filter_type) {\n+        LogPrint(BCLog::NET, \"peer %d requested unknown block filter type: %d\\n\",\n+                 pfrom->GetId(), static_cast<uint8_t>(filter_type));\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        stop_index = LookupBlockIndex(stop_hash);\n+\n+        // Check that the stop block exists and was at some point connected to the active chain.\n+        if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n+            LogPrint(BCLog::NET, \"peer %d requested invalid block hash: %s\\n\",\n+                     pfrom->GetId(), stop_hash.ToString());\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+    }\n+\n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n+    filter_index = GetBlockFilterIndex(filter_type);\n+    if (!filter_index) {\n+        return error(\"Filter index for supported type %s not found\", BlockFilterTypeName(filter_type));\n+    }\n+\n+    return true;\n+}\n+\n+/**\n+ * Do a lookup on the block filter index. The lookup may fail erroneously if the filter index, which\n+ * is updated asynchronously, has not been synchronized with the net processing thread. In that\n+ * case, block for a short time until the filter index is updated, then retry the lookup.\n+ */\n+static bool QueryFilterIndexWithRetry(BaseIndex* index, bool& in_sync, std::function<bool()> fn)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#discussion_r336731315",
      "id" : 336731315,
      "in_reply_to_id" : 317867252,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNjczMTMxNQ==",
      "original_commit_id" : "3499e8877b3be1a629647353ddb8bb380c10a513",
      "original_position" : 165,
      "path" : "src/net_processing.cpp",
      "position" : 165,
      "pull_request_review_id" : 304206475,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16442",
      "updated_at" : "2019-10-19T10:18:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/336731315",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jamesob Sorry for the delay, just pushed up changes.",
      "created_at" : "2019-10-19T10:32:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-544125600",
      "id" : 544125600,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NDEyNTYwMA==",
      "updated_at" : "2019-10-19T10:32:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/544125600",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I lightly tested 8d08df4 on macOS 10.15 using `-bind=127.0.0.1 -debug=net -blockfilterindex=1 -peercfilters=1 -blocksonly` against a locally running Lnd node (master @ 8ed75834480e7be3f42d77f5d96e2880c94156fb) with `bitcoin.node=neutrino` and `neutrino.connect=127.0.0.1`. It initially catches up to the tip nicely.\r\n\r\nI then connect to the using Zap desktop, at which point Lnd starts complaining (maybe an Lnd / Zap bug):\r\n```\r\n2019-10-23 11:18:35.411 [INF] BTCN: New valid peer 127.0.0.1:8333 (outbound) (/Satoshi:0.19.99/)\r\n2019-10-23 11:18:35.412 [INF] BTCN: Syncing to block height 600677 from peer 127.0.0.1:8333\r\n2019-10-23 11:18:35.412 [INF] BTCN: Fetching set of headers from tip (height=600677) from peer 127.0.0.1:8333\r\n2019-10-23 11:19:00.399 [ERR] BTCN: Query failed with 0 out of 435 filters received\r\n2019-10-23 11:19:00.399 [ERR] LNWL: Neutrino rescan ended with error: unable to fetch cfilter\r\n```\r\n\r\nIt seems that bitcoind is disconnecting the Lnd node for requesting too many filters:\r\n\r\n```\r\n2019-10-23T09:18:30Z received: getcfilters (37 bytes) peer=13\r\n2019-10-23T09:18:30Z peer 13 requested too many cfilters/cfheaders: 435 / 100\r\n2019-10-23T09:18:30Z disconnecting peer=13\r\n....\r\n2019-10-23T09:18:35Z Added connection peer=14\r\n2019-10-23T09:18:35Z connection from 127.0.0.1:54906 accepted\r\n2019-10-23T09:18:35Z received: version (121 bytes) peer=14\r\n2019-10-23T09:18:35Z sending version (103 bytes) peer=14\r\n2019-10-23T09:18:35Z send version message: version 70015, blocks=600677, us=[::]:0, peer=14\r\n2019-10-23T09:18:35Z sending verack (0 bytes) peer=14\r\n2019-10-23T09:18:35Z receive version message: /btcwire:0.5.0/neutrino:0.0.4-beta/: version 70013, blocks=600677, us=127.0.0.1:8333, peer=14\r\n2019-10-23T09:18:35Z received: verack (0 bytes) peer=14\r\n2019-10-23T09:18:35Z sending sendheaders (0 bytes) peer=14\r\n2019-10-23T09:18:35Z sending ping (8 bytes) peer=14\r\n2019-10-23T09:18:35Z sending addr (31 bytes) peer=14\r\n2019-10-23T09:18:35Z sending feefilter (8 bytes) peer=14\r\n2019-10-23T09:18:35Z received: getaddr (0 bytes) peer=14\r\n2019-10-23T09:18:35Z received: getheaders (997 bytes) peer=14\r\n2019-10-23T09:18:35Z getheaders -1 to end from peer=14\r\n2019-10-23T09:18:35Z sending headers (1 bytes) peer=14\r\n2019-10-23T09:18:35Z received: pong (8 bytes) peer=14\r\n2019-10-23T09:18:46Z sending addr (30003 bytes) peer=14\r\n```\r\n\r\nAs a result it's not detecting the confirmed coins I sent to the Lnd / Zap wallet. It seems unable to perform the required rescan:\r\n\r\n```\r\nlncli newaddress p2wkh\r\n[lncli] rpc error: code = Unknown desc = Rescan is already done and cannot be updated. It returned error: unable to fetch cfilter`\r\n```\r\n\r\nThere's different maxima for `getcfilters` from `getcfheaders`: https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#getcfilters\r\n\r\n`getcfilters`:\r\n\r\n> 3. The height of the block with hash StopHash MUST be greater than or equal to StartHeight, and the difference MUST be strictly less than 100.\r\n\r\n`getcfheaders`:\r\n\r\n> 3. The height of the block with hash StopHash MUST be greater than or equal to StartHeight, and the difference MUST be strictly less than 2,000.\r\n\r\nBtcd uses the wrong value for `getcfilters`: https://github.com/btcsuite/btcd/blob/master/wire/msggetcfilters.go#L15\r\n\r\nPR: https://github.com/btcsuite/btcd/pull/1482 (makes the error go away, and now it finds the UTXO)",
      "created_at" : "2019-10-23T09:52:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-545364727",
      "id" : 545364727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTM2NDcyNw==",
      "updated_at" : "2019-10-23T10:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545364727",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Should there be a limit to how much filter data we give a peer? My Lnd is going berserk (https://github.com/lightningnetwork/lnd/issues/3630), and bitcoind happily sent it 15 GB of filters and counting:\r\n\r\n```\r\n{\r\n    \"id\": 1,\r\n    \"addr\": \"127.0.0.1:56456\",\r\n    ...\r\n    \"servicesnames\": [\r\n      \"WITNESS\"\r\n    ],\r\n    \"relaytxes\": false,\r\n    \"lastsend\": 1571830501,\r\n    \"lastrecv\": 1571830501,\r\n    \"bytessent\": 15615598004,\r\n    \"bytesrecv\": 514550,\r\n    \"conntime\": 1571829847,\r\n    \"version\": 70013,\r\n    \"subver\": \"/btcwire:0.5.0/neutrino:0.0.4-beta/\",\r\n    \"inbound\": true,\r\n    \"startingheight\": 600689,\r\n    \"banscore\": 0,\r\n    \"synced_headers\": -1,\r\n    \"synced_blocks\": -1,\r\n    \"inflight\": [],\r\n    \"whitelisted\": false,\r\n    \"permissions\": [\r\n      \"noban\",\r\n      \"relay\",\r\n      \"mempool\"\r\n    ],\r\n    \"minfeefilter\": 0,\r\n    \"bytessent_per_msg\": {\r\n      \"addr\": 30192,\r\n      \"block\": 140862657,\r\n      \"cfheaders\": 854,\r\n      \"cfilter\": 15474702573,\r\n      \"feefilter\": 32,\r\n      \"getdata\": 61,\r\n      \"headers\": 742,\r\n      \"inv\": 366,\r\n      \"ping\": 192,\r\n      \"pong\": 160,\r\n      \"sendheaders\": 24,\r\n      \"verack\": 24,\r\n      \"version\": 127\r\n    },\r\n    \"bytesrecv_per_msg\": {\r\n      \"*other*\": 496906,\r\n      \"getaddr\": 24,\r\n      \"getdata\": 8723,\r\n      \"getheaders\": 7339,\r\n      \"inv\": 1037,\r\n      \"ping\": 160,\r\n      \"pong\": 192,\r\n      \"verack\": 24,\r\n      \"version\": 145\r\n    }\r\n  }\r\n```",
      "created_at" : "2019-10-23T11:38:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-545402053",
      "id" : 545402053,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTQwMjA1Mw==",
      "updated_at" : "2019-10-23T11:49:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545402053",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-30T12:11:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-547871444",
      "id" : 547871444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0Nzg3MTQ0NA==",
      "updated_at" : "2019-10-30T12:11:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547871444",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors Why would you limit filter data? We don't limit the amount of block data served to a peer...",
      "created_at" : "2019-10-31T13:46:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-548382656",
      "id" : 548382656,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0ODM4MjY1Ng==",
      "updated_at" : "2019-10-31T13:46:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/548382656",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jimpo indeed, we discussed this during the IRC meeting. No need to rate limit this specific message.",
      "created_at" : "2019-11-02T17:30:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-549064548",
      "id" : 549064548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTA2NDU0OA==",
      "updated_at" : "2019-11-02T17:30:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549064548",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ping @jimpo for a rebase. Looking to review shortly.",
      "created_at" : "2019-11-04T21:03:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16442#issuecomment-549545829",
      "id" : 549545829,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16442",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0OTU0NTgyOQ==",
      "updated_at" : "2019-11-04T21:03:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549545829",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
