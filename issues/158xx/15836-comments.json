[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276238077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276238077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Instead of this parameter, it could have `fee_histogram_bins` (that defaults to `[]` which means no histogram is included in the response). This would replace the above `feelimits` and also avoids breaking clients implementation.",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T13:24:14Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {\n+                    sizes[i] += size;\n+                    count[i]++;\n+                    fees[i] += fee;\n+                    break;\n+                }\n+            }\n+        }\n+        CAmount total_fees = 0; //track total amount of available fees in mempool\n+        UniValue info(UniValue::VOBJ);\n+        for (size_t i = 0; i < feelimits.size(); i++) {\n+            UniValue info_sub(UniValue::VOBJ);\n+            info_sub.pushKV(\"sizes\", sizes[i]);\n+            info_sub.pushKV(\"count\", count[i]);\n+            info_sub.pushKV(\"fees\", fees[i]);\n+            info_sub.pushKV(\"from_feerate\", feelimits[i]);\n+            info_sub.pushKV(\"to_feerate\", i == feelimits.size() - 1 ? std::numeric_limits<int64_t>::max() : feelimits[i + 1]);\n+            total_fees += fees[i];\n+            info.pushKV(std::to_string(feelimits[i]), info_sub);\n+        }\n+        info.pushKV(\"total_fees\", total_fees);\n+        ret.pushKV(\"fee_histogram\", info);\n+    }\n+\n     return ret;\n }\n \n static UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"getmempoolinfo\",\n                 \"\\nReturns details on the active state of the TX memory pool.\\n\",\n-                {},\n+                {\n+                    {\"with_fee_histogram\", RPCArg::Type::BOOL, /* default */ \"false\", \"True for including the fee histogram in the response\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276238077",
      "id" : 276238077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjIzODA3Nw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 83,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 83,
      "pull_request_review_id" : 227749976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T13:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276238077",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239167"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239167"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe we should move this up (done in #15474).",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T13:26:29Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239167",
      "id" : 276239167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjIzOTE2Nw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 30,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 30,
      "pull_request_review_id" : 227749976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T13:34:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239167",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239801"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239801"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can't we just start to use query parameters?",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T13:27:48Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276239801",
      "id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjIzOTgwMQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 227749976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T13:34:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276239801",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246250"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246250"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Correct me if I'm wrong but if `feelimits` is sorted then `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` is not necessary.",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T13:40:36Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246250",
      "id" : 276246250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI0NjI1MA==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 47,
      "pull_request_review_id" : 227759760,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T13:40:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246250",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246713"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Beside, it could avoid linear search by using `std::find`.",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T13:41:36Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276246713",
      "id" : 276246713,
      "in_reply_to_id" : 276246250,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI0NjcxMw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 47,
      "pull_request_review_id" : 227760339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T13:41:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276246713",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276262032"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276262032"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be efficient to memoize `feelimits.size() - 1` ? (if the compiler doesn't optimize it automatically, my C++ is rusty)",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T14:13:04Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276262032",
      "id" : 276262032,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI2MjAzMg==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 47,
      "pull_request_review_id" : 227780197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T14:18:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276262032",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276263273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276263273"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If `&& (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])` can be removed, the dependency on `feelimits` being sorted would need a regression test.",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T14:15:32Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);\n+        for (const CTxMemPoolEntry& e : pool.mapTx) {\n+            int size = (int)e.GetTxSize();\n+            CAmount fee = e.GetFee();\n+            uint64_t asize = e.GetSizeWithAncestors();\n+            CAmount afees = e.GetModFeesWithAncestors();\n+            uint64_t dsize = e.GetSizeWithDescendants();\n+            CAmount dfees = e.GetModFeesWithDescendants();\n+\n+            CAmount fpb = fee / size; //fee per byte\n+            CAmount afpb = afees / asize; //fee per byte including ancestors\n+            CAmount dfpb = dfees / dsize; //fee per byte including descendants\n+            CAmount tfpb = (afees + dfees - fee) / (asize + dsize - size);\n+            CAmount feeperbyte = std::max(std::min(dfpb, tfpb), std::min(fpb, afpb));\n+\n+            // distribute feerates into feelimits\n+            for (size_t i = 0; i < feelimits.size(); i++) {\n+                if (feeperbyte >= feelimits[i] && (i == feelimits.size() - 1 || feeperbyte < feelimits[i + 1])) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276263273",
      "id" : 276263273,
      "in_reply_to_id" : 276262032,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI2MzI3Mw==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 47,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 47,
      "pull_request_review_id" : 227780197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T14:18:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276263273",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276296561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276296561"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That pull was merged, please rebase and remove this lock.",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T15:18:52Z",
      "diff_hunk" : "@@ -1496,16 +1496,76 @@ UniValue MempoolInfoToJSON(const CTxMemPool& pool)\n     ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(pool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n     ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n+    if (with_fee_histogram) {\n+        /* TODO: define log scale formular for dynamically creating the\n+         * feelimits but with the property of not constantly changing\n+         * (and thus screw up client implementations) */\n+        static const std::vector<CAmount> feelimits{1, 2, 3, 4, 5, 6, 7, 8, 10,\n+            12, 14, 17, 20, 25, 30, 40, 50, 60, 70, 80, 100,\n+            120, 140, 170, 200, 250, 300, 400, 500, 600, 700, 800, 1000,\n+            1200, 1400, 1700, 2000, 2500, 3000, 4000, 5000, 6000, 7000, 8000, 10000};\n+\n+        /* keep histogram per...\n+         * ... cumulated tx sizes\n+         * ... txns (count)\n+         * ... cumulated fees */\n+        std::vector<uint64_t> sizes(feelimits.size(), 0);\n+        std::vector<uint64_t> count(feelimits.size(), 0);\n+        std::vector<uint64_t> fees(feelimits.size(), 0);\n+\n+        LOCK(pool.cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276296561",
      "id" : 276296561,
      "in_reply_to_id" : 276239167,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI5NjU2MQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 30,
      "path" : "src/rpc/blockchain.cpp",
      "position" : 30,
      "pull_request_review_id" : 227824069,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T15:18:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276296561",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276298339"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276298339"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would eventually be better but not scope of this PR (following the current scheme).",
      "commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "created_at" : "2019-04-17T15:22:32Z",
      "diff_hunk" : "@@ -629,7 +639,8 @@ static const struct {\n       {\"/rest/block/notxdetails/\", rest_block_notxdetails},\n       {\"/rest/block/\", rest_block_extended},\n       {\"/rest/chaininfo\", rest_chaininfo},\n-      {\"/rest/mempool/info\", rest_mempool_info},\n+      {\"/rest/mempool/info\", rest_mempool_info_basic},\n+      {\"/rest/mempool/info/with_fee_histogram\", rest_mempool_info_with_fee_histogram},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#discussion_r276298339",
      "id" : 276298339,
      "in_reply_to_id" : 276239801,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI3NjI5ODMzOQ==",
      "original_commit_id" : "80fbf80099e8ab36da9e2df31c12a9e411abadae",
      "original_position" : 41,
      "path" : "src/rest.cpp",
      "position" : 41,
      "pull_request_review_id" : 227826416,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15836",
      "updated_at" : "2019-04-17T15:22:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/276298339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2019-04-18T15:14:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15836#issuecomment-484552109",
      "id" : 484552109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15836",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4NDU1MjEwOQ==",
      "updated_at" : "2019-04-18T17:05:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/484552109",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
