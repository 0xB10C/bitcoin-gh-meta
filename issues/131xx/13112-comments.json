[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184874419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184874419"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Check if already exists with static assert?",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-29T07:56:57Z",
      "diff_hunk" : "@@ -536,6 +565,56 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_override_args[strArg] = {strValue};\n }\n \n+void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n+{\n+    m_available_args.emplace(std::pair<OptionsCategory, std::string>(cat, name), std::pair<std::string, bool>(help, debug_only));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184874419",
      "id" : 184874419,
      "original_commit_id" : "67699a9fd9a4c279c31f1d61ef44a16032739375",
      "original_position" : 49,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 116158161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-29T16:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184874419",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Ping @MeshCollider who has been working on something similar.",
      "created_at" : "2018-04-29T11:06:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385243248",
      "id" : 385243248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-04-29T11:06:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385243248",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184879569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184879569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Please make this `enum class`",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-29T11:18:11Z",
      "diff_hunk" : "@@ -118,6 +118,31 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n+enum OptionsCategory",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184879569",
      "id" : 184879569,
      "original_commit_id" : "67699a9fd9a4c279c31f1d61ef44a16032739375",
      "original_position" : 4,
      "path" : "src/util.h",
      "position" : null,
      "pull_request_review_id" : 116163063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-29T16:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184879569",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Compile error due to missing override in https://github.com/achow101/bitcoin/blob/67699a9fd9a4c279c31f1d61ef44a16032739375/src/init.cpp#L79, I presume.",
      "created_at" : "2018-04-29T11:23:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385244064",
      "id" : 385244064,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-04-29T11:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385244064",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184886190"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184886190"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-29T15:12:11Z",
      "diff_hunk" : "@@ -536,6 +565,56 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_override_args[strArg] = {strValue};\n }\n \n+void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n+{\n+    m_available_args.emplace(std::pair<OptionsCategory, std::string>(cat, name), std::pair<std::string, bool>(help, debug_only));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184886190",
      "id" : 184886190,
      "in_reply_to_id" : 184874419,
      "original_commit_id" : "67699a9fd9a4c279c31f1d61ef44a16032739375",
      "original_position" : 49,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 116169682,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-29T16:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184886190",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184886192"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184886192"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-29T15:12:15Z",
      "diff_hunk" : "@@ -118,6 +118,31 @@ inline bool IsSwitchChar(char c)\n #endif\n }\n \n+enum OptionsCategory",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184886192",
      "id" : 184886192,
      "in_reply_to_id" : 184879569,
      "original_commit_id" : "67699a9fd9a4c279c31f1d61ef44a16032739375",
      "original_position" : 4,
      "path" : "src/util.h",
      "position" : null,
      "pull_request_review_id" : 116169685,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-29T16:44:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184886192",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> What about known but not used arguments? For instance, `-disablewallet -changetype=bech32` should fail or nor?\r\n\r\nThis will not fail since `-changetype` is a valid argument independent of `-disablewallet`. The checker currently does not consider parameter interactions. Essentially it just checks for whether an argument is part of the help text.\r\n\r\n> Compile error due to missing override in https://github.com/achow101/bitcoin/blob/67699a9fd9a4c279c31f1d61ef44a16032739375/src/init.cpp#L79, I presume.\r\n\r\nFixed I think.",
      "created_at" : "2018-04-29T15:13:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385258339",
      "id" : 385258339,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-04-29T15:13:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385258339",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : ">The checker currently does not consider parameter interactions.\r\n\r\nGot it.",
      "created_at" : "2018-04-30T08:22:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385337526",
      "id" : 385337526,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-04-30T08:22:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385337526",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184976723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184976723"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This must stay even if #13120 is merged? Ping @MarcoFalke.",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-30T12:47:10Z",
      "diff_hunk" : "@@ -332,197 +332,183 @@ void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-std::string HelpMessage(HelpMessageMode mode)\n+void SetupArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n+    // Set all of the args and their help\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n-    strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n-    strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n-    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n-    strUsage += HelpMessageOpt(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"));\n-    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n-    if (mode == HelpMessageMode::BITCOIND)\n-    {\n+    gArgs.AddArg(\"-?\", _(\"Print this help message and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", _(\"Print version and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n #if HAVE_DECL_DAEMON\n-        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n+    gArgs.AddArg(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"), false, OptionsCategory::OPTIONS);\n #endif\n-    }\n-    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n-    }\n-    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n-    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n-    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n-    }\n-    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n-    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n+    gArgs.AddArg(\"-datadir=<dir>\", _(\"Specify data directory\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME));\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    gArgs.AddArg(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n-    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n+    gArgs.AddArg(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n-\n-    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n-    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n-    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n-    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));\n-    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n-    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT));\n-    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n-    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n-    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n-    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n-    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n-    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n-    strUsage += HelpMessageOpt(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"));\n+    gArgs.AddArg(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", _(\"Connect only to the specified node(s, false, OptionsCategory::OPTIONS)); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", _(\"Specify your own public address\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"), false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"));\n+    gArgs.AddArg(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"), false, OptionsCategory::CONNECTION);\n #else\n-    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n+    gArgs.AddArg(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0), false, OptionsCategory::CONNECTION);\n #endif\n #endif\n-    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n-        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    gArgs.AddArg(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"), false, OptionsCategory::CONNECTION);\n \n-    strUsage += g_wallet_init_interface.GetHelpString(showDebug);\n+    g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"), false, OptionsCategory::ZMQ);\n #endif\n \n-    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n-        strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n-        strUsage += HelpMessageOpt(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\");\n-        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n-        strUsage += HelpMessageOpt(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT));\n-\n-        strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n-        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n-    }\n-    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n-        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n-    strUsage += HelpMessageOpt(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")));\n-    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n-        strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n-    }\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n-    }\n-    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n-    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n-\n-    AppendParamsHelpMessages(strUsage, showDebug);\n-\n-    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()));\n-        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n-        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n-    }\n-    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n-    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n-    strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n-    strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n-    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n-\n-    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n-\n-    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n-    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n-    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"));\n-    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n-    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n-    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-\n-    return strUsage;\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"), false, OptionsCategory::DEBUG_TEST);\n+\n+    SetParamsArgs();\n+\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", _(\"Accept command line and JSON-RPC commands\"), false, OptionsCategory::RPC);\n+\n+    // Hidden options\n+    gArgs.AddArg(\"-rpcssl\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-benchmark\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-socks\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-tor\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-debugnet\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-whitelistalwaysrelay\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-prematurewitness\", \"\", false, OptionsCategory::HIDDEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184976723",
      "id" : 184976723,
      "original_commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "original_position" : 349,
      "path" : "src/init.cpp",
      "position" : 349,
      "pull_request_review_id" : 116274465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-30T12:49:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184976723",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184977499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184977499"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nah, this should be rebased and removed after (and if) #13120 is merged",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-30T12:50:59Z",
      "diff_hunk" : "@@ -332,197 +332,183 @@ void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-std::string HelpMessage(HelpMessageMode mode)\n+void SetupArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n+    // Set all of the args and their help\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n-    strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n-    strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n-    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n-    strUsage += HelpMessageOpt(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"));\n-    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n-    if (mode == HelpMessageMode::BITCOIND)\n-    {\n+    gArgs.AddArg(\"-?\", _(\"Print this help message and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", _(\"Print version and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n #if HAVE_DECL_DAEMON\n-        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n+    gArgs.AddArg(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"), false, OptionsCategory::OPTIONS);\n #endif\n-    }\n-    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n-    }\n-    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n-    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n-    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n-    }\n-    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n-    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n+    gArgs.AddArg(\"-datadir=<dir>\", _(\"Specify data directory\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME));\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    gArgs.AddArg(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n-    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n+    gArgs.AddArg(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n-\n-    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n-    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n-    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n-    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));\n-    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n-    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT));\n-    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n-    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n-    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n-    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n-    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n-    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n-    strUsage += HelpMessageOpt(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"));\n+    gArgs.AddArg(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", _(\"Connect only to the specified node(s, false, OptionsCategory::OPTIONS)); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", _(\"Specify your own public address\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"), false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"));\n+    gArgs.AddArg(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"), false, OptionsCategory::CONNECTION);\n #else\n-    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n+    gArgs.AddArg(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0), false, OptionsCategory::CONNECTION);\n #endif\n #endif\n-    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n-        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    gArgs.AddArg(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"), false, OptionsCategory::CONNECTION);\n \n-    strUsage += g_wallet_init_interface.GetHelpString(showDebug);\n+    g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"), false, OptionsCategory::ZMQ);\n #endif\n \n-    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n-        strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n-        strUsage += HelpMessageOpt(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\");\n-        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n-        strUsage += HelpMessageOpt(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT));\n-\n-        strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n-        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n-    }\n-    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n-        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n-    strUsage += HelpMessageOpt(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")));\n-    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n-        strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n-    }\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n-    }\n-    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n-    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n-\n-    AppendParamsHelpMessages(strUsage, showDebug);\n-\n-    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()));\n-        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n-        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n-    }\n-    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n-    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n-    strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n-    strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n-    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n-\n-    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n-\n-    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n-    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n-    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"));\n-    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n-    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n-    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-\n-    return strUsage;\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"), false, OptionsCategory::DEBUG_TEST);\n+\n+    SetParamsArgs();\n+\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", _(\"Accept command line and JSON-RPC commands\"), false, OptionsCategory::RPC);\n+\n+    // Hidden options\n+    gArgs.AddArg(\"-rpcssl\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-benchmark\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-socks\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-tor\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-debugnet\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-whitelistalwaysrelay\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-prematurewitness\", \"\", false, OptionsCategory::HIDDEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184977499",
      "id" : 184977499,
      "in_reply_to_id" : 184976723,
      "original_commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "original_position" : 349,
      "path" : "src/init.cpp",
      "position" : 349,
      "pull_request_review_id" : 116275444,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-30T12:51:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184977499",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-04-30T13:00:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385391115",
      "id" : 385391115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-04-30T13:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385391115",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184985070"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184985070"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree in this case, not sure about arguments removed in the future.",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-30T13:23:57Z",
      "diff_hunk" : "@@ -332,197 +332,183 @@ void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-std::string HelpMessage(HelpMessageMode mode)\n+void SetupArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n+    // Set all of the args and their help\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n-    strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n-    strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n-    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n-    strUsage += HelpMessageOpt(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"));\n-    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n-    if (mode == HelpMessageMode::BITCOIND)\n-    {\n+    gArgs.AddArg(\"-?\", _(\"Print this help message and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", _(\"Print version and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n #if HAVE_DECL_DAEMON\n-        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n+    gArgs.AddArg(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"), false, OptionsCategory::OPTIONS);\n #endif\n-    }\n-    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n-    }\n-    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n-    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n-    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n-    }\n-    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n-    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n+    gArgs.AddArg(\"-datadir=<dir>\", _(\"Specify data directory\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME));\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    gArgs.AddArg(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n-    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n+    gArgs.AddArg(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n-\n-    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n-    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n-    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n-    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));\n-    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n-    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT));\n-    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n-    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n-    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n-    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n-    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n-    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n-    strUsage += HelpMessageOpt(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"));\n+    gArgs.AddArg(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", _(\"Connect only to the specified node(s, false, OptionsCategory::OPTIONS)); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", _(\"Specify your own public address\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"), false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"));\n+    gArgs.AddArg(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"), false, OptionsCategory::CONNECTION);\n #else\n-    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n+    gArgs.AddArg(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0), false, OptionsCategory::CONNECTION);\n #endif\n #endif\n-    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n-        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    gArgs.AddArg(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"), false, OptionsCategory::CONNECTION);\n \n-    strUsage += g_wallet_init_interface.GetHelpString(showDebug);\n+    g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"), false, OptionsCategory::ZMQ);\n #endif\n \n-    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n-        strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n-        strUsage += HelpMessageOpt(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\");\n-        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n-        strUsage += HelpMessageOpt(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT));\n-\n-        strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n-        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n-    }\n-    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n-        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n-    strUsage += HelpMessageOpt(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")));\n-    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n-        strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n-    }\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n-    }\n-    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n-    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n-\n-    AppendParamsHelpMessages(strUsage, showDebug);\n-\n-    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()));\n-        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n-        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n-    }\n-    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n-    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n-    strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n-    strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n-    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n-\n-    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n-\n-    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n-    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n-    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"));\n-    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n-    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n-    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-\n-    return strUsage;\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"), false, OptionsCategory::DEBUG_TEST);\n+\n+    SetParamsArgs();\n+\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", _(\"Accept command line and JSON-RPC commands\"), false, OptionsCategory::RPC);\n+\n+    // Hidden options\n+    gArgs.AddArg(\"-rpcssl\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-benchmark\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-socks\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-tor\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-debugnet\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-whitelistalwaysrelay\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-prematurewitness\", \"\", false, OptionsCategory::HIDDEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184985070",
      "id" : 184985070,
      "in_reply_to_id" : 184976723,
      "original_commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "original_position" : 349,
      "path" : "src/init.cpp",
      "position" : 349,
      "pull_request_review_id" : 116284643,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-30T13:23:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184985070",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184987169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184987169"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I mean there is no urgent need to remove them. If they stick around for one release (marked as \"deprecated, but silently ignored\") that is fine.",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-04-30T13:32:45Z",
      "diff_hunk" : "@@ -332,197 +332,183 @@ void OnRPCStopped()\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n }\n \n-std::string HelpMessage(HelpMessageMode mode)\n+void SetupArgs()\n {\n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n-    const bool showDebug = gArgs.GetBoolArg(\"-help-debug\", false);\n \n+    // Set all of the args and their help\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n     // Do not translate _(...) -help-debug options, Many technical terms, and only a very small audience, so is unnecessary stress to translators.\n-    std::string strUsage = HelpMessageGroup(_(\"Options:\"));\n-    strUsage += HelpMessageOpt(\"-?\", _(\"Print this help message and exit\"));\n-    strUsage += HelpMessageOpt(\"-version\", _(\"Print version and exit\"));\n-    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n-    strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n-    strUsage += HelpMessageOpt(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"));\n-    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n-    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME));\n-    if (mode == HelpMessageMode::BITCOIND)\n-    {\n+    gArgs.AddArg(\"-?\", _(\"Print this help message and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-version\", _(\"Print version and exit\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksdir=<dir>\", _(\"Specify blocks directory (default: <datadir>/blocks)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-conf=<file>\", strprintf(_(\"Specify configuration file. Relative paths will be prefixed by datadir location. (default: %s)\"), BITCOIN_CONF_FILENAME), false, OptionsCategory::OPTIONS);\n #if HAVE_DECL_DAEMON\n-        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n+    gArgs.AddArg(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"), false, OptionsCategory::OPTIONS);\n #endif\n-    }\n-    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize));\n-    }\n-    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n-    strUsage += HelpMessageOpt(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n-    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n-    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n-    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n-    }\n-    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n-        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n-    strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n+    gArgs.AddArg(\"-datadir=<dir>\", _(\"Specify data directory\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-debuglogfile=<file>\", strprintf(_(\"Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), DEFAULT_DEBUGLOGFILE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), true, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME));\n+    gArgs.AddArg(\"-pid=<file>\", strprintf(_(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\"), BITCOIN_PID_FILENAME), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    gArgs.AddArg(\"-prune=<n>\", strprintf(_(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n-            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024));\n-    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"));\n-    strUsage += HelpMessageOpt(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"));\n+            \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >%u = automatically prune block files to stay under the specified target size in MiB)\"), MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex\", _(\"Rebuild chain state and block index from the blk*.dat files on disk\"), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-reindex-chainstate\", _(\"Rebuild chain state from the currently indexed blocks\"), false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n-    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n+    gArgs.AddArg(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"), false, OptionsCategory::OPTIONS);\n #endif\n-    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX));\n-\n-    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n-    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"));\n-    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n-    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n-    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"));\n-    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n-    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n-    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"));\n-    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n-    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n-    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n-    strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n-    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n-    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER));\n-    strUsage += HelpMessageOpt(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT));\n-    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n-    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n-    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n-    strUsage += HelpMessageOpt(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS));\n-    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG));\n-    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()));\n-    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n-    strUsage += HelpMessageOpt(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE));\n-    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n-    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL));\n-    strUsage += HelpMessageOpt(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"));\n+    gArgs.AddArg(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+\n+    gArgs.AddArg(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-connect=<ip>\", _(\"Connect only to the specified node(s, false, OptionsCategory::OPTIONS)); -connect=0 disables automatic connections (the rules for this peer are the same as for -addnode)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-externalip=<ip>\", _(\"Specify your own public address\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXSENDBUFFER), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxtimeadjustment\", strprintf(_(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\"), DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-peerbloomfilters\", strprintf(_(\"Support filtering of blocks and transaction with bloom filters (default: %u)\"), DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort()), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-proxyrandomize\", strprintf(_(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\"), DEFAULT_PROXYRANDOMIZE), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(_(\"Tor control port to use if onion listening enabled (default: %s)\"), DEFAULT_TOR_CONTROL), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-torpassword=<pass>\", _(\"Tor control port password (default: empty)\"), false, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"));\n+    gArgs.AddArg(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"), false, OptionsCategory::CONNECTION);\n #else\n-    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n+    gArgs.AddArg(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0), false, OptionsCategory::CONNECTION);\n #endif\n #endif\n-    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n-        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    gArgs.AddArg(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-whitelist=<IP address or network>\", _(\"Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"), false, OptionsCategory::CONNECTION);\n \n-    strUsage += g_wallet_init_interface.GetHelpString(showDebug);\n+    g_wallet_init_interface.AddWalletOptions();\n \n #if ENABLE_ZMQ\n-    strUsage += HelpMessageGroup(_(\"ZeroMQ notification options:\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"));\n-    strUsage += HelpMessageOpt(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"));\n+    gArgs.AddArg(\"-zmqpubhashblock=<address>\", _(\"Enable publish hash block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubhashtx=<address>\", _(\"Enable publish hash transaction in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawblock=<address>\", _(\"Enable publish raw block in <address>\"), false, OptionsCategory::ZMQ);\n+    gArgs.AddArg(\"-zmqpubrawtx=<address>\", _(\"Enable publish raw transaction in <address>\"), false, OptionsCategory::ZMQ);\n #endif\n \n-    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n-        strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n-        strUsage += HelpMessageOpt(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()));\n-        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED));\n-        strUsage += HelpMessageOpt(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\");\n-        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n-        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT));\n-        strUsage += HelpMessageOpt(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT));\n-\n-        strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n-        strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n-        strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n-        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n-    }\n-    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n-        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");\n-    strUsage += HelpMessageOpt(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")));\n-    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n-    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS));\n-    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n-        strUsage += HelpMessageOpt(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\");\n-        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n-        strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n-    }\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n-    }\n-    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n-    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"));\n-\n-    AppendParamsHelpMessages(strUsage, showDebug);\n-\n-    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n-    if (showDebug) {\n-        strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()));\n-        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n-        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n-    }\n-    strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n-    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n-    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n-    strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n-    strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n-    strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n-\n-    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n-\n-    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n-    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE));\n-    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"));\n-    strUsage += HelpMessageOpt(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"));\n-    strUsage += HelpMessageOpt(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"));\n-    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n-    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n-    strUsage += HelpMessageOpt(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT));\n-    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));\n-    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n-    if (showDebug)\n-        strUsage += HelpMessageOpt(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE));\n-    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n-\n-    return strUsage;\n+    gArgs.AddArg(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkblockindex\", strprintf(\"Do a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive and mapBlocksUnlinked occasionally. (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkmempool=<n>\", strprintf(\"Run checks every <n> transactions (default: %u)\", defaultChainParams->DefaultConsistencyChecks()), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", DEFAULT_CHECKPOINTS_ENABLED), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-deprecatedrpc=<method>\", \"Allows deprecated RPC method(s) to be used\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", DEFAULT_STOPAFTERBLOCKIMPORT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-stopatheight\", strprintf(\"Stop running after reaching the given height in the main chain (default: %u)\", DEFAULT_STOPATHEIGHT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-addrmantest\", \"Allows to test address relay on localhost\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\", false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-debugexclude=<category>\", strprintf(_(\"Exclude debugging information for a category. Can be used in conjunction with -debug=1 to output debug logs for all categories except one or more specified categories.\")), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"), false, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-uacomment=<cmt>\", _(\"Append comment to the user agent string\"), false, OptionsCategory::DEBUG_TEST);\n+\n+    SetParamsArgs();\n+\n+    gArgs.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), true, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY), false, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY), false, OptionsCategory::NODE_RELAY);\n+\n+\n+    gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), false, OptionsCategory::BLOCK_CREATION);\n+    gArgs.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", true, OptionsCategory::BLOCK_CREATION);\n+\n+    gArgs.AddArg(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), DEFAULT_REST_ENABLE), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. The client then connects normally using the rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This option can be specified multiple times\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcbind=<addr>[:port]\", _(\"Bind to given address to listen for JSON-RPC connections. This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost, or if -rpcallowip has been specified, 0.0.0.0 and :: i.e., all addresses)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpccookiefile=<loc>\", _(\"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcserialversion\", strprintf(_(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\"), DEFAULT_RPC_SERIALIZE_VERSION), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"), false, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-rpcworkqueue=<n>\", strprintf(\"Set the depth of the work queue to service RPC calls (default: %d)\", DEFAULT_HTTP_WORKQUEUE), true, OptionsCategory::RPC);\n+    gArgs.AddArg(\"-server\", _(\"Accept command line and JSON-RPC commands\"), false, OptionsCategory::RPC);\n+\n+    // Hidden options\n+    gArgs.AddArg(\"-rpcssl\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-benchmark\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-h\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-help\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-socks\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-tor\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-debugnet\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-whitelistalwaysrelay\", \"\", false, OptionsCategory::HIDDEN);\n+    gArgs.AddArg(\"-prematurewitness\", \"\", false, OptionsCategory::HIDDEN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r184987169",
      "id" : 184987169,
      "in_reply_to_id" : 184976723,
      "original_commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "original_position" : 349,
      "path" : "src/init.cpp",
      "position" : 349,
      "pull_request_review_id" : 116287297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-04-30T13:32:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/184987169",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Should old arguments be in a legacy category? Otherwise launching with an outdated configuration might unnecessarily throw an error.\r\n\r\nThere could be a deprecated category where a warning is given if any arguments are in that category. Then we can remove the arguments entirely later.",
      "created_at" : "2018-04-30T15:11:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385428727",
      "id" : 385428727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-04-30T15:11:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385428727",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Apologies for the delay in replying, I'm very swamped with work at the moment.\r\nIt's clear that something needs to be done to fix the arguments being silently ignored, I'm fine with this approach over the one I've been working on since it is an immediate fix. If my rework would still be useful for other reasons it could still be done after this is merged anyway. Either way this seems like a nice cleanup of the helptext output at the same time.\r\nSo Concept ACK from me.",
      "created_at" : "2018-05-02T08:58:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#issuecomment-385910494",
      "id" : 385910494,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13112",
      "updated_at" : "2018-05-02T08:59:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385910494",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185597899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185597899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: I guess the key can just be the name, as two names with a different category don't make sense?",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-05-02T18:38:22Z",
      "diff_hunk" : "@@ -536,6 +565,58 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_override_args[strArg] = {strValue};\n }\n \n+void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n+{\n+    std::pair<OptionsCategory, std::string> key(cat, name);\n+    assert(m_available_args.count(key) == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185597899",
      "id" : 185597899,
      "original_commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "original_position" : 50,
      "path" : "src/util.cpp",
      "position" : 50,
      "pull_request_review_id" : 117019267,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-05-02T18:38:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185597899",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185598699"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185598699"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's a hack to make std::map sort the keys by category and then alphabetically when iterating over the map so that the help text comes out correctly.",
      "commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "created_at" : "2018-05-02T18:41:00Z",
      "diff_hunk" : "@@ -536,6 +565,58 @@ void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strV\n     m_override_args[strArg] = {strValue};\n }\n \n+void ArgsManager::AddArg(const std::string& name, const std::string& help, const bool debug_only, const OptionsCategory& cat)\n+{\n+    std::pair<OptionsCategory, std::string> key(cat, name);\n+    assert(m_available_args.count(key) == 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13112#discussion_r185598699",
      "id" : 185598699,
      "in_reply_to_id" : 185597899,
      "original_commit_id" : "e7c8ed6f21e1e8903862a8f6051ef1b631b208ec",
      "original_position" : 50,
      "path" : "src/util.cpp",
      "position" : 50,
      "pull_request_review_id" : 117020233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13112",
      "updated_at" : "2018-05-02T18:41:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/185598699",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   }
]
