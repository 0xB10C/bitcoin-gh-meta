[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186222792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186222792"
         }
      },
      "author_association" : "OWNER",
      "body" : "Do we want to use thread local even on mingw (where you had problems earlier?)",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:11:33Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186222792",
      "id" : 186222792,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 39,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117769212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186222792",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186223904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186223904"
         }
      },
      "author_association" : "OWNER",
      "body" : "(in this function and the next) `g_key` is uninitialized if called before `set_internal_name` is invoked. Perhaps you need to add the `pthread_once` call here as well?\r\n\r\nIf not, document that it's illegal to invoke these functions without knowing if `set_internal_name` has been called.",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:16:55Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186223904",
      "id" : 186223904,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 74,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117769212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186223904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186224307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186224307"
         }
      },
      "author_association" : "OWNER",
      "body" : "The `internal_id` has different semantics here than in the thread_local case (here it's only incremented the first time a thread is given a name; in the above case it's incremented every time the name changes). Is that an issue?",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:19:10Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_name;\n+    }\n+    return \"unnamed\";\n+}\n+long thread_data::get_internal_id()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_id;\n+    }\n+    return -1;\n+}\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    static pthread_once_t key_once = PTHREAD_ONCE_INIT;\n+    if (pthread_once(&key_once, make_key)) {\n+        return false;\n+    }\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        static_cast<thread_data_type*>(data)->m_name = std::move(name);\n+        return true;\n+    }\n+    data = new thread_data_type{internal_id++, std::move(name)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186224307",
      "id" : 186224307,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 100,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117769212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186224307",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186226655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186226655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/13168/files#diff-defae1c29982e5afaf477729b6c7d9b4R11 :)",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:31:41Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186226655",
      "id" : 186226655,
      "in_reply_to_id" : 186222792,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 39,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117773985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:31:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186226655",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I figure \"threadutil\" might be a better name going forward because I anticipate as we continue to split stuff out of `util`, this unit might be a good home for things like `TraceThread`. If you or @theuni thinks we should stick with \"threadval\" I'm happy to revert, otherwise I'll split out the rename into a separate commit.",
      "created_at" : "2018-05-04T21:37:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386741763",
      "id" : 386741763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-04T21:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386741763",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@jamesob I have no opinion about the name. I'm only complaining about a rename in the middle of a PR in a commit that also introduces other changes.",
      "created_at" : "2018-05-04T21:38:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386742031",
      "id" : 386742031,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-04T21:38:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386742031",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186228314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186228314"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, good catch.",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:40:46Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186228314",
      "id" : 186228314,
      "in_reply_to_id" : 186223904,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 74,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117775981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:40:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186228314",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186229119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186229119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep. The thread_local impl is incorrect. We only want to increment if unset, so thread id's don't bounce around across renames.",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:45:35Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_name;\n+    }\n+    return \"unnamed\";\n+}\n+long thread_data::get_internal_id()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_id;\n+    }\n+    return -1;\n+}\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    static pthread_once_t key_once = PTHREAD_ONCE_INIT;\n+    if (pthread_once(&key_once, make_key)) {\n+        return false;\n+    }\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        static_cast<thread_data_type*>(data)->m_name = std::move(name);\n+        return true;\n+    }\n+    data = new thread_data_type{internal_id++, std::move(name)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186229119",
      "id" : 186229119,
      "in_reply_to_id" : 186224307,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 100,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117776960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:45:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186229119",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186230413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186230413"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why the fallback?",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-04T21:53:44Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadutil.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+const std::string UNNAMED_THREAD = \"<unnamed>\";\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::set_process_name(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::get_process_name()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+static std::string try_set_internal_name_from_process()\n+{\n+    std::string procname = thread_util::get_process_name();\n+    if (procname.size()) thread_util::set_internal_name(procname);\n+    return procname;\n+}\n+\n+\n+bool thread_util::rename(std::string name)\n+{\n+    set_process_name(name.c_str());\n+    set_internal_name(name);\n+}\n+\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::get_internal_name()\n+{\n+    auto name = g_thread_data.m_name;\n+\n+    if (g_thread_data.m_name.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186230413",
      "id" : 186230413,
      "original_commit_id" : "ffa1b4f8735080bc3481e7c47f87348fde5708d3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : 110,
      "pull_request_review_id" : 117778533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-04T21:53:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186230413",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jamesob You can just take the threadval files, don't worry about the commit attribution.\r\n\r\nAgree with @sipa about the name change, it complicates the review a pretty good bit. Also no preference on naming. I originally named it \"threadval\" with the intention of making it a generic low-level interface for thread_local, but that's not worth the trouble.",
      "created_at" : "2018-05-04T22:04:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386746957",
      "id" : 386746957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-04T22:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386746957",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There were lots of `\"<unnamed>\"` occurrences in the logs and so I figured it made sense to fall back to the process name if we hadn't explicitly named the thread (e.g. `bitcoind`, `bitcoin-qt`). Do you think it makes more sense to just explicitly call `rename` on those main threads?",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-05T16:40:22Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadutil.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+const std::string UNNAMED_THREAD = \"<unnamed>\";\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::set_process_name(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::get_process_name()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+static std::string try_set_internal_name_from_process()\n+{\n+    std::string procname = thread_util::get_process_name();\n+    if (procname.size()) thread_util::set_internal_name(procname);\n+    return procname;\n+}\n+\n+\n+bool thread_util::rename(std::string name)\n+{\n+    set_process_name(name.c_str());\n+    set_internal_name(name);\n+}\n+\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::get_internal_name()\n+{\n+    auto name = g_thread_data.m_name;\n+\n+    if (g_thread_data.m_name.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266594",
      "id" : 186266594,
      "in_reply_to_id" : 186230413,
      "original_commit_id" : "ffa1b4f8735080bc3481e7c47f87348fde5708d3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : 110,
      "pull_request_review_id" : 117819138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-05T16:40:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266594",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266784"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can see concerns with `get_internal_name` being a misnomer. Maybe we should introduce a `GetName` that first tries the internal name and then falls back to the process name?",
      "commit_id" : "7f3781f5b5c37aec705c55a69290c2df57540b66",
      "created_at" : "2018-05-05T16:49:25Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadutil.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+const std::string UNNAMED_THREAD = \"<unnamed>\";\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::set_process_name(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::get_process_name()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+static std::string try_set_internal_name_from_process()\n+{\n+    std::string procname = thread_util::get_process_name();\n+    if (procname.size()) thread_util::set_internal_name(procname);\n+    return procname;\n+}\n+\n+\n+bool thread_util::rename(std::string name)\n+{\n+    set_process_name(name.c_str());\n+    set_internal_name(name);\n+}\n+\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::get_internal_name()\n+{\n+    auto name = g_thread_data.m_name;\n+\n+    if (g_thread_data.m_name.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266784",
      "id" : 186266784,
      "in_reply_to_id" : 186230413,
      "original_commit_id" : "ffa1b4f8735080bc3481e7c47f87348fde5708d3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : 110,
      "pull_request_review_id" : 117819370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-05T16:49:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266784",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
