[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186222792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186222792"
         }
      },
      "author_association" : "OWNER",
      "body" : "Do we want to use thread local even on mingw (where you had problems earlier?)",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:11:33Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186222792",
      "id" : 186222792,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 39,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117769212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186222792",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186223904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186223904"
         }
      },
      "author_association" : "OWNER",
      "body" : "(in this function and the next) `g_key` is uninitialized if called before `set_internal_name` is invoked. Perhaps you need to add the `pthread_once` call here as well?\r\n\r\nIf not, document that it's illegal to invoke these functions without knowing if `set_internal_name` has been called.",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:16:55Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186223904",
      "id" : 186223904,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 74,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117769212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186223904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186224307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186224307"
         }
      },
      "author_association" : "OWNER",
      "body" : "The `internal_id` has different semantics here than in the thread_local case (here it's only incremented the first time a thread is given a name; in the above case it's incremented every time the name changes). Is that an issue?",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:19:10Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_name;\n+    }\n+    return \"unnamed\";\n+}\n+long thread_data::get_internal_id()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_id;\n+    }\n+    return -1;\n+}\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    static pthread_once_t key_once = PTHREAD_ONCE_INIT;\n+    if (pthread_once(&key_once, make_key)) {\n+        return false;\n+    }\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        static_cast<thread_data_type*>(data)->m_name = std::move(name);\n+        return true;\n+    }\n+    data = new thread_data_type{internal_id++, std::move(name)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186224307",
      "id" : 186224307,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 100,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117769212,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186224307",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186226655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186226655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/13168/files#diff-defae1c29982e5afaf477729b6c7d9b4R11 :)",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:31:41Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186226655",
      "id" : 186226655,
      "in_reply_to_id" : 186222792,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 39,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117773985,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186226655",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I figure \"threadutil\" might be a better name going forward because I anticipate as we continue to split stuff out of `util`, this unit might be a good home for things like `TraceThread`. If you or @theuni thinks we should stick with \"threadval\" I'm happy to revert, otherwise I'll split out the rename into a separate commit.",
      "created_at" : "2018-05-04T21:37:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386741763",
      "id" : 386741763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-04T21:37:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386741763",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@jamesob I have no opinion about the name. I'm only complaining about a rename in the middle of a PR in a commit that also introduces other changes.",
      "created_at" : "2018-05-04T21:38:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386742031",
      "id" : 386742031,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-04T21:38:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386742031",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186228314"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186228314"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, good catch.",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:40:46Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186228314",
      "id" : 186228314,
      "in_reply_to_id" : 186223904,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 74,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117775981,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186228314",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186229119"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186229119"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep. The thread_local impl is incorrect. We only want to increment if unset, so thread id's don't bounce around across renames.",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:45:35Z",
      "diff_hunk" : "@@ -0,0 +1,146 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadval.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"unnamed\"};\n+};\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_data::get_internal_name()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+long thread_data::get_internal_id()\n+{\n+    return g_thread_data.m_id;\n+}\n+\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    g_thread_data = {internal_id++, std::move(name)};\n+    return true;\n+}\n+\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+std::string thread_data::get_internal_name()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_name;\n+    }\n+    return \"unnamed\";\n+}\n+long thread_data::get_internal_id()\n+{\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        return static_cast<thread_data_type*>(data)->m_id;\n+    }\n+    return -1;\n+}\n+bool thread_data::set_internal_name(std::string name)\n+{\n+    static std::atomic<long> internal_id{0};\n+    static pthread_once_t key_once = PTHREAD_ONCE_INIT;\n+    if (pthread_once(&key_once, make_key)) {\n+        return false;\n+    }\n+    void* data = pthread_getspecific(g_key);\n+    if (data) {\n+        static_cast<thread_data_type*>(data)->m_name = std::move(name);\n+        return true;\n+    }\n+    data = new thread_data_type{internal_id++, std::move(name)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186229119",
      "id" : 186229119,
      "in_reply_to_id" : 186224307,
      "original_commit_id" : "01e0925b875ec15aadaf1476a80e2167f59bd05d",
      "original_position" : 100,
      "path" : "src/threadval.cpp",
      "position" : null,
      "pull_request_review_id" : 117776960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186229119",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186230413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186230413"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why the fallback?",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-04T21:53:44Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadutil.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+const std::string UNNAMED_THREAD = \"<unnamed>\";\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::set_process_name(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::get_process_name()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+static std::string try_set_internal_name_from_process()\n+{\n+    std::string procname = thread_util::get_process_name();\n+    if (procname.size()) thread_util::set_internal_name(procname);\n+    return procname;\n+}\n+\n+\n+bool thread_util::rename(std::string name)\n+{\n+    set_process_name(name.c_str());\n+    set_internal_name(name);\n+}\n+\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::get_internal_name()\n+{\n+    auto name = g_thread_data.m_name;\n+\n+    if (g_thread_data.m_name.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186230413",
      "id" : 186230413,
      "original_commit_id" : "ffa1b4f8735080bc3481e7c47f87348fde5708d3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : null,
      "pull_request_review_id" : 117778533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186230413",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jamesob You can just take the threadval files, don't worry about the commit attribution.\r\n\r\nAgree with @sipa about the name change, it complicates the review a pretty good bit. Also no preference on naming. I originally named it \"threadval\" with the intention of making it a generic low-level interface for thread_local, but that's not worth the trouble.",
      "created_at" : "2018-05-04T22:04:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386746957",
      "id" : 386746957,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-04T22:04:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386746957",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266594"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266594"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There were lots of `\"<unnamed>\"` occurrences in the logs and so I figured it made sense to fall back to the process name if we hadn't explicitly named the thread (e.g. `bitcoind`, `bitcoin-qt`). Do you think it makes more sense to just explicitly call `rename` on those main threads?",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-05T16:40:22Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadutil.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+const std::string UNNAMED_THREAD = \"<unnamed>\";\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::set_process_name(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::get_process_name()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+static std::string try_set_internal_name_from_process()\n+{\n+    std::string procname = thread_util::get_process_name();\n+    if (procname.size()) thread_util::set_internal_name(procname);\n+    return procname;\n+}\n+\n+\n+bool thread_util::rename(std::string name)\n+{\n+    set_process_name(name.c_str());\n+    set_internal_name(name);\n+}\n+\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::get_internal_name()\n+{\n+    auto name = g_thread_data.m_name;\n+\n+    if (g_thread_data.m_name.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266594",
      "id" : 186266594,
      "in_reply_to_id" : 186230413,
      "original_commit_id" : "ffa1b4f8735080bc3481e7c47f87348fde5708d3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : null,
      "pull_request_review_id" : 117819138,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266594",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266784"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266784"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I can see concerns with `get_internal_name` being a misnomer. Maybe we should introduce a `GetName` that first tries the internal name and then falls back to the process name?",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-05T16:49:25Z",
      "diff_hunk" : "@@ -0,0 +1,237 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <threadutil.h>\n+\n+/*  TODO: using thread_local changes the abi in ways that may not play nice\n+    when the c++ stdlib is linked dynamically. Disable it until thorough\n+    testing has been done. */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+#include <atomic>\n+#include <thread>\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <atomic>\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <thread>\n+#include <unordered_map>\n+#endif\n+\n+const std::string UNNAMED_THREAD = \"<unnamed>\";\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::set_process_name(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::get_process_name()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+static std::string try_set_internal_name_from_process()\n+{\n+    std::string procname = thread_util::get_process_name();\n+    if (procname.size()) thread_util::set_internal_name(procname);\n+    return procname;\n+}\n+\n+\n+bool thread_util::rename(std::string name)\n+{\n+    set_process_name(name.c_str());\n+    set_internal_name(name);\n+}\n+\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::get_internal_name()\n+{\n+    auto name = g_thread_data.m_name;\n+\n+    if (g_thread_data.m_name.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186266784",
      "id" : 186266784,
      "in_reply_to_id" : 186230413,
      "original_commit_id" : "ffa1b4f8735080bc3481e7c47f87348fde5708d3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : null,
      "pull_request_review_id" : 117819370,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T19:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186266784",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa @theuni Thanks for the quick look and comments. I've pushed a reworked version of this branch which\r\n- rewrites the commit history to be more easily reviewable (I hope),\r\n- fixes naming conventions,\r\n- fixes the uninitialized use of `g_key`,\r\n- ensures each implementation of the thread_local behavior only bumps the internal ID accumulator on the first `SetInternalName` per thread,\r\n- removes the unused `GetInternalID` function,\r\n- removes fallback inference from process name when thread name is unset, and explicitly names main threads (`bitcoind`, `bitcoin-qt`), and\r\n- fixes `/* Continued */` logline behavior by introducing *Continued macros which don't prefix log message with thread name. ",
      "created_at" : "2018-05-05T20:17:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386832009",
      "id" : 386832009,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-05T20:17:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386832009",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Pushed a small fix for a mysterious segfault which was happening on 2 x86_64 linux Travis jobs. Core dump and brief writeup in gist below. Build is now passing.\r\n\r\n[threadnames2.2 -> threadnames2.3](https://gist.github.com/jamesob/a7b05acc4330317f4cf06f505e575eaa)",
      "created_at" : "2018-05-06T20:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386910323",
      "id" : 386910323,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-06T20:21:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386910323",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "What platforms still don't have thread_local? Can we just ifdef everything and upgrade our release build OSX SDK and get it in every release platform?\n\nOn May 4, 2018 9:01:28 PM UTC, jamesob <notifications@github.com> wrote:\n>Replaces #13099.\n>\n>The goal here is the same as the previous PR, but this approach uses\n>@theuni's gracefully degrading thread-local caching strategy to avoid\n>(when possible) map lookup and mutex overhead during thread name\n>lookup.\n>\n>Instead of using a mutex-protected map to generate numeric suffixes\n>(e.g. `httpworker.2`) we explicitly pass in suffixes during thread\n>creation.\n>\n>The logging format is also slightly different:\n>```\n>[bitcoind     ] 2018-05-04T20:58:13Z nBestHeight = 1296342\n>[torcontrol   ] 2018-05-04T20:58:13Z torcontrol thread start\n>[bitcoind     ] 2018-05-04T20:58:13Z Bound to [::]:18333\n>[bitcoind     ] 2018-05-04T20:58:13Z Bound to 0.0.0.0:18333\n>[bitcoind     ] 2018-05-04T20:58:13Z init message: Loading P2P\n>addresses...\n>[loadblk      ] 2018-05-04T20:58:13Z Leaving InitialBlockDownload\n>(latching to false)\n>[loadblk      ] 2018-05-04T20:58:13Z Imported mempool transactions from\n>disk: 3 succeeded, 0 failed, 0 expired, 0 already there\n>[bitcoind     ] 2018-05-04T20:58:13Z Loaded 19762 addresses from\n>peers.dat  102ms\n>[bitcoind     ] 2018-05-04T20:58:13Z init message: Loading banlist...\n>[bitcoind     ] 2018-05-04T20:58:13Z init message: Starting network\n>threads...\n>[net          ] 2018-05-04T20:58:13Z net thread start\n>[addcon       ] 2018-05-04T20:58:13Z addcon thread start\n>[dnsseed      ] 2018-05-04T20:58:13Z dnsseed thread start\n>[msghand      ] 2018-05-04T20:58:13Z msghand thread start\n>[bitcoind     ] 2018-05-04T20:58:13Z init message: Done loading\n>```\n>You can view, comment on, or merge this pull request online at:\n>\n>  https://github.com/bitcoin/bitcoin/pull/13168\n>\n>-- Commit Summary --\n>\n>  * threads: add threadval files\n>  * threads: hook up threadval for logging\n>  * threads: add numeric suffixes to threads with the same name\n>  * tests: add threadutil naming tests\n>  * threads: add thread names to deadlock debugging tools\n>\n>-- File Changes --\n>\n>    M src/Makefile.am (2)\n>    M src/Makefile.test.include (1)\n>    M src/httpserver.cpp (11)\n>    M src/init.cpp (7)\n>    M src/logging.cpp (11)\n>    M src/sync.cpp (14)\n>    M src/test/test_bitcoin.cpp (2)\n>    A src/test/threadutil_tests.cpp (90)\n>    A src/threadutil.cpp (237)\n>    A src/threadutil.h (62)\n>    M src/util.cpp (21)\n>    M src/util.h (6)\n>    M src/validation.cpp (5)\n>    M src/validation.h (8)\n>\n>-- Patch Links --\n>\n>https://github.com/bitcoin/bitcoin/pull/13168.patch\n>https://github.com/bitcoin/bitcoin/pull/13168.diff\n>\n>-- \n>You are receiving this because you are subscribed to this thread.\n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/13168\n",
      "created_at" : "2018-05-06T20:25:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386910543",
      "id" : 386910543,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-06T20:25:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386910543",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "General comment: never @mention someone directly in a commit (just attribute them by name). They'll be spammed by every fork on github when those commits are merged by them.",
      "created_at" : "2018-05-06T21:35:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386917148",
      "id" : 386917148,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-06T21:35:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386917148",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186303737"
         }
      },
      "author_association" : "OWNER",
      "body" : "This can be `SetInternalName(std::move(name))`.",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-06T21:37:53Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <atomic>\n+#include <thread>\n+\n+#include <threadutil.h>\n+\n+/*\n+ * TODO: using thread_local changes the abi in ways that may not play nice\n+ * when the c++ stdlib is linked dynamically. Disable it until thorough\n+ * testing has been done.\n+ *\n+ * mingw32's implementation of thread_local has also been shown to behave\n+ * erroneously under concurrent usage; see:\n+ *\n+ *   https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+ */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::SetProcessName(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::GetProcessName()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+void thread_util::Rename(std::string name)\n+{\n+    SetProcessName(name.c_str());\n+    SetInternalName(name);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303737",
      "id" : 186303737,
      "original_commit_id" : "7db4e45b9d2eecaee72104226ff5c302b0773ce3",
      "original_position" : 88,
      "path" : "src/threadutil.cpp",
      "position" : 88,
      "pull_request_review_id" : 117856242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T21:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186303737",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186303792"
         }
      },
      "author_association" : "OWNER",
      "body" : "This increments id every time the name is set (regardless of whether it had a name already).",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-06T21:40:09Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <atomic>\n+#include <thread>\n+\n+#include <threadutil.h>\n+\n+/*\n+ * TODO: using thread_local changes the abi in ways that may not play nice\n+ * when the c++ stdlib is linked dynamically. Disable it until thorough\n+ * testing has been done.\n+ *\n+ * mingw32's implementation of thread_local has also been shown to behave\n+ * erroneously under concurrent usage; see:\n+ *\n+ *   https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+ */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::SetProcessName(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::GetProcessName()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+void thread_util::Rename(std::string name)\n+{\n+    SetProcessName(name.c_str());\n+    SetInternalName(name);\n+}\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface. Each implementation\n+ * emulates thread_local storage.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::GetInternalName()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+bool thread_util::SetInternalName(std::string name)\n+{\n+    static std::atomic<long> id_accumulator{0};\n+    static thread_local thread_id{id_accumulator++};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303792",
      "id" : 186303792,
      "original_commit_id" : "7db4e45b9d2eecaee72104226ff5c302b0773ce3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : 110,
      "pull_request_review_id" : 117856242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T21:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186303792",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186303836"
         }
      },
      "author_association" : "OWNER",
      "body" : "Can be written as `!pthread_once(&key_once, make_key);`.",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-06T21:42:13Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <atomic>\n+#include <thread>\n+\n+#include <threadutil.h>\n+\n+/*\n+ * TODO: using thread_local changes the abi in ways that may not play nice\n+ * when the c++ stdlib is linked dynamically. Disable it until thorough\n+ * testing has been done.\n+ *\n+ * mingw32's implementation of thread_local has also been shown to behave\n+ * erroneously under concurrent usage; see:\n+ *\n+ *   https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+ */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::SetProcessName(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::GetProcessName()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+void thread_util::Rename(std::string name)\n+{\n+    SetProcessName(name.c_str());\n+    SetInternalName(name);\n+}\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface. Each implementation\n+ * emulates thread_local storage.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::GetInternalName()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+bool thread_util::SetInternalName(std::string name)\n+{\n+    static std::atomic<long> id_accumulator{0};\n+    static thread_local thread_id{id_accumulator++};\n+    g_thread_data = {thread_id, std::move(name)};\n+    return true;\n+}\n+\n+/*\n+ * Otherwise if we don't have use of thread_local, use the pthreads interface\n+ * to stash thread data in thread-specific key using getspecific/setspecific.\n+ */\n+#elif defined(HAVE_PTHREAD)\n+\n+static pthread_key_t g_key;\n+static void destruct_data(void* data)\n+{\n+    delete static_cast<thread_data_type*>(data);\n+}\n+\n+static void make_key()\n+{\n+    pthread_key_create(&g_key, destruct_data);\n+}\n+\n+static bool EnsureKeyCreated()\n+{\n+    static pthread_once_t key_once = PTHREAD_ONCE_INIT;\n+    return pthread_once(&key_once, make_key) ? false : true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186303836",
      "id" : 186303836,
      "original_commit_id" : "7db4e45b9d2eecaee72104226ff5c302b0773ce3",
      "original_position" : 135,
      "path" : "src/threadutil.cpp",
      "position" : 135,
      "pull_request_review_id" : 117856242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T21:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186303836",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186304251"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186304251"
         }
      },
      "author_association" : "OWNER",
      "body" : "This can be written as `thread_name = std::move(thread_name_)` to avoid a copy.",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-06T21:54:01Z",
      "diff_hunk" : "@@ -35,23 +39,27 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n \n struct CLockLocation {\n-    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn)\n+    CLockLocation(const char* pszName, const char* pszFile, int nLine, bool fTryIn, std::string thread_name_)\n     {\n         mutexName = pszName;\n         sourceFile = pszFile;\n         sourceLine = nLine;\n         fTry = fTryIn;\n+        thread_name = thread_name_;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186304251",
      "id" : 186304251,
      "original_commit_id" : "e7a091d8a8aaaca114de0fbfda13dcecb9d409ef",
      "original_position" : 25,
      "path" : "src/sync.cpp",
      "position" : 25,
      "pull_request_review_id" : 117856242,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-06T21:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186304251",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186322006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186322006"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Doesn't the `static thread_local` attribute prevent that?",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-07T03:52:14Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <atomic>\n+#include <thread>\n+\n+#include <threadutil.h>\n+\n+/*\n+ * TODO: using thread_local changes the abi in ways that may not play nice\n+ * when the c++ stdlib is linked dynamically. Disable it until thorough\n+ * testing has been done.\n+ *\n+ * mingw32's implementation of thread_local has also been shown to behave\n+ * erroneously under concurrent usage; see:\n+ *\n+ *   https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+ */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::SetProcessName(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::GetProcessName()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+void thread_util::Rename(std::string name)\n+{\n+    SetProcessName(name.c_str());\n+    SetInternalName(name);\n+}\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface. Each implementation\n+ * emulates thread_local storage.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::GetInternalName()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+bool thread_util::SetInternalName(std::string name)\n+{\n+    static std::atomic<long> id_accumulator{0};\n+    static thread_local thread_id{id_accumulator++};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186322006",
      "id" : 186322006,
      "in_reply_to_id" : 186303792,
      "original_commit_id" : "7db4e45b9d2eecaee72104226ff5c302b0773ce3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : 110,
      "pull_request_review_id" : 117876766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-07T03:52:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186322006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "We need `LogPrint*Continued` to prevent prefixing a line continuation with a thread name. Thanks for the look, will incorporate the feedback tomorrow.",
      "created_at" : "2018-05-07T03:54:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-386950733",
      "id" : 386950733,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-07T03:54:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386950733",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186324579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186324579"
         }
      },
      "author_association" : "OWNER",
      "body" : "Oh, yes indeed. Ignore me\n",
      "commit_id" : "7e61b8a5a79492bf9a6ac55a49e2b72991b6ba57",
      "created_at" : "2018-05-07T04:29:16Z",
      "diff_hunk" : "@@ -0,0 +1,213 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <atomic>\n+#include <thread>\n+\n+#include <threadutil.h>\n+\n+/*\n+ * TODO: using thread_local changes the abi in ways that may not play nice\n+ * when the c++ stdlib is linked dynamically. Disable it until thorough\n+ * testing has been done.\n+ *\n+ * mingw32's implementation of thread_local has also been shown to behave\n+ * erroneously under concurrent usage; see:\n+ *\n+ *   https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+ */\n+#undef HAVE_THREAD_LOCAL\n+\n+#ifdef HAVE_SYS_PRCTL_H\n+#include <sys/prctl.h> // For prctl, PR_SET_NAME, PR_GET_NAME\n+#endif\n+\n+#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+#include <pthread_np.h>\n+#endif\n+\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+#elif defined(HAVE_PTHREAD)\n+#include <pthread.h>\n+\n+#else\n+#include <mutex>\n+#include <unordered_map>\n+#endif\n+\n+struct thread_data_type\n+{\n+    constexpr thread_data_type() = default;\n+    thread_data_type(long id, std::string name) : m_id(id), m_name(std::move(name)){}\n+\n+    long m_id{0};\n+    std::string m_name{\"\"};\n+};\n+\n+void thread_util::SetProcessName(const char* name)\n+{\n+#if defined(PR_SET_NAME)\n+    // Only the first 15 characters are used (16 - NUL terminator)\n+    ::prctl(PR_SET_NAME, name, 0, 0, 0);\n+#elif (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n+    pthread_set_name_np(pthread_self(), name);\n+#elif defined(MAC_OSX)\n+    pthread_setname_np(name);\n+#else\n+    // Prevent warnings for unused parameters...\n+    (void)name;\n+#endif\n+}\n+\n+std::string thread_util::GetProcessName()\n+{\n+#if !defined(CAN_READ_PROCESS_NAME)\n+    return \"\";\n+#endif\n+\n+    char threadname_buff[16];\n+    char* pthreadname_buff = (char*)(&threadname_buff);\n+\n+#if defined(PR_GET_NAME)\n+    ::prctl(PR_GET_NAME, pthreadname_buff);\n+#elif defined(MAC_OSX)\n+    pthread_getname_np(pthread_self(), pthreadname_buff, sizeof(threadname_buff));\n+#endif\n+    return std::string(pthreadname_buff);\n+}\n+\n+void thread_util::Rename(std::string name)\n+{\n+    SetProcessName(name.c_str());\n+    SetInternalName(name);\n+}\n+\n+/*\n+ * What follows are three separate platform-dependent implementations of\n+ * *name and *id parts of the thread_utils interface. Each implementation\n+ * emulates thread_local storage.\n+ *\n+ * If we have thread_local, just keep thread ID and name in a thread_local\n+ * global.\n+ */\n+#if defined(HAVE_THREAD_LOCAL)\n+\n+static thread_local thread_data_type g_thread_data;\n+std::string thread_util::GetInternalName()\n+{\n+    return g_thread_data.m_name;\n+}\n+\n+bool thread_util::SetInternalName(std::string name)\n+{\n+    static std::atomic<long> id_accumulator{0};\n+    static thread_local thread_id{id_accumulator++};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#discussion_r186324579",
      "id" : 186324579,
      "in_reply_to_id" : 186303792,
      "original_commit_id" : "7db4e45b9d2eecaee72104226ff5c302b0773ce3",
      "original_position" : 110,
      "path" : "src/threadutil.cpp",
      "position" : 110,
      "pull_request_review_id" : 117879914,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13168",
      "updated_at" : "2018-05-07T04:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/186324579",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sipa ah, sorry: I missed your point about the LogPrint macros. I see now that we can just move thread name attachment to reuse the existing `m_started_new_line` stuff, thanks. I've removed the last commit and worked in your other feedback.\r\n\r\n[`jamesob/threadnames2.3 -> jamesob/threadnames2.4`](https://gist.github.com/jamesob/2aebc372f6421e6888ff2e5c29ac71b0)",
      "created_at" : "2018-05-07T14:08:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387076303",
      "id" : 387076303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-07T14:08:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387076303",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@TheBlueMatt honestly I'm not sure about the thread_local stuff; all I know is that mingw32 wasn't behaving well with its use (as noted [in the comment](https://github.com/bitcoin/bitcoin/pull/13168/files#diff-defae1c29982e5afaf477729b6c7d9b4R13)) - @theuni is the authority there.",
      "created_at" : "2018-05-07T14:12:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387077686",
      "id" : 387077686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-07T14:12:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387077686",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Changed with more feedback from @sipa. \r\n\r\n[`jamesob/threadnames2.4` -> `.5`](https://gist.github.com/jamesob/5604eb4586f8eb3401659566e17632f8)",
      "created_at" : "2018-05-07T17:05:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13168#issuecomment-387133425",
      "id" : 387133425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13168",
      "updated_at" : "2018-05-07T17:05:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387133425",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   }
]
