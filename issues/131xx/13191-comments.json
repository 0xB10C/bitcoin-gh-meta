[
   {
      "author_association" : "OWNER",
      "body" : "Looks like these whole chains of functions are unused after this, except in the merkle tests:\r\n```\r\nBlockMerkleBranch Ã¢ÂÂ ComputeMerkleBranch Ã¢ÂÂ MerkleComputation\r\nComputeMerkleRootFromBranch\r\n```\r\nMight want to move some functions there.",
      "created_at" : "2018-05-09T13:18:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387735499",
      "id" : 387735499,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-09T13:19:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387735499",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187040748"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187040748"
         }
      },
      "author_association" : "OWNER",
      "body" : "`Read8` and `Write8` appear to read and write values respectively in opposite order, I suppose this is intentional?\r\n\r\nunrelated: I also wonder if this could be done with a parallel instruction instead of calling into `ReadBE32`/`WriteBE32` for each component, as we know the host endianness.",
      "commit_id" : "b36eac01fcb9e5b9a98d925405138cd816a8ae05",
      "created_at" : "2018-05-09T13:33:02Z",
      "diff_hunk" : "@@ -0,0 +1,327 @@\n+#ifdef ENABLE_AVX2\n+\n+#include <stdint.h>\n+#if defined(_MSC_VER)\n+#include <immintrin.h>\n+#elif defined(__GNUC__)\n+#include <x86intrin.h>\n+#endif\n+\n+#include \"crypto/sha256.h\"\n+#include \"crypto/common.h\"\n+\n+namespace sha256d64_avx2 {\n+namespace {\n+\n+__m256i inline K(uint32_t x) { return _mm256_set1_epi32(x); }\n+\n+__m256i inline Add(__m256i x, __m256i y) { return _mm256_add_epi32(x, y); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z) { return Add(Add(x, y), z); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w) { return Add(Add(x, y), Add(z, w)); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w, __m256i v) { return Add(Add(x, y, z), Add(w, v)); }\n+__m256i inline Inc(__m256i& x, __m256i y) { x = Add(x, y); return x; }\n+__m256i inline Inc(__m256i& x, __m256i y, __m256i z) { x = Add(x, y, z); return x; }\n+__m256i inline Inc(__m256i& x, __m256i y, __m256i z, __m256i w) { x = Add(x, y, z, w); return x; }\n+__m256i inline Xor(__m256i x, __m256i y) { return _mm256_xor_si256(x, y); }\n+__m256i inline Xor(__m256i x, __m256i y, __m256i z) { return Xor(Xor(x, y), z); }\n+__m256i inline Or(__m256i x, __m256i y) { return _mm256_or_si256(x, y); }\n+__m256i inline And(__m256i x, __m256i y) { return _mm256_and_si256(x, y); }\n+__m256i inline ShR(__m256i x, int n) { return _mm256_srli_epi32(x, n); }\n+__m256i inline ShL(__m256i x, int n) { return _mm256_slli_epi32(x, n); }\n+\n+__m256i inline Ch(__m256i x, __m256i y, __m256i z) { return Xor(z, And(x, Xor(y, z))); }\n+__m256i inline Maj(__m256i x, __m256i y, __m256i z) { return Or(And(x, y), And(z, Or(x, y))); }\n+__m256i inline Sigma0(__m256i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }\n+__m256i inline Sigma1(__m256i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }\n+__m256i inline sigma0(__m256i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }\n+__m256i inline sigma1(__m256i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }\n+\n+/** One round of SHA-256. */\n+void inline __attribute__((always_inline)) Round(__m256i a, __m256i b, __m256i c, __m256i& d, __m256i e, __m256i f, __m256i g, __m256i& h, __m256i k)\n+{\n+    __m256i t1 = Add(h, Sigma1(e), Ch(e, f, g), k);\n+    __m256i t2 = Add(Sigma0(a), Maj(a, b, c));\n+    d = Add(d, t1);\n+    h = Add(t1, t2);\n+}\n+\n+__m256i inline Read8(const unsigned char* chunk, int offset) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187040748",
      "id" : 187040748,
      "original_commit_id" : "6904dc15cdf6889ab041c101f31bace9d5a7aeac",
      "original_position" : 48,
      "path" : "src/crypto/sha256_avx2.cpp",
      "position" : 48,
      "pull_request_review_id" : 118738776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191",
      "updated_at" : "2018-05-09T15:27:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187040748",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187079985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187079985"
         }
      },
      "author_association" : "OWNER",
      "body" : "Fixed! Indeed, there exist byte-shuffle intrinsics for SSE4 and AVX2; I've used those instead of individual byteswaps.",
      "commit_id" : "b36eac01fcb9e5b9a98d925405138cd816a8ae05",
      "created_at" : "2018-05-09T15:28:10Z",
      "diff_hunk" : "@@ -0,0 +1,327 @@\n+#ifdef ENABLE_AVX2\n+\n+#include <stdint.h>\n+#if defined(_MSC_VER)\n+#include <immintrin.h>\n+#elif defined(__GNUC__)\n+#include <x86intrin.h>\n+#endif\n+\n+#include \"crypto/sha256.h\"\n+#include \"crypto/common.h\"\n+\n+namespace sha256d64_avx2 {\n+namespace {\n+\n+__m256i inline K(uint32_t x) { return _mm256_set1_epi32(x); }\n+\n+__m256i inline Add(__m256i x, __m256i y) { return _mm256_add_epi32(x, y); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z) { return Add(Add(x, y), z); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w) { return Add(Add(x, y), Add(z, w)); }\n+__m256i inline Add(__m256i x, __m256i y, __m256i z, __m256i w, __m256i v) { return Add(Add(x, y, z), Add(w, v)); }\n+__m256i inline Inc(__m256i& x, __m256i y) { x = Add(x, y); return x; }\n+__m256i inline Inc(__m256i& x, __m256i y, __m256i z) { x = Add(x, y, z); return x; }\n+__m256i inline Inc(__m256i& x, __m256i y, __m256i z, __m256i w) { x = Add(x, y, z, w); return x; }\n+__m256i inline Xor(__m256i x, __m256i y) { return _mm256_xor_si256(x, y); }\n+__m256i inline Xor(__m256i x, __m256i y, __m256i z) { return Xor(Xor(x, y), z); }\n+__m256i inline Or(__m256i x, __m256i y) { return _mm256_or_si256(x, y); }\n+__m256i inline And(__m256i x, __m256i y) { return _mm256_and_si256(x, y); }\n+__m256i inline ShR(__m256i x, int n) { return _mm256_srli_epi32(x, n); }\n+__m256i inline ShL(__m256i x, int n) { return _mm256_slli_epi32(x, n); }\n+\n+__m256i inline Ch(__m256i x, __m256i y, __m256i z) { return Xor(z, And(x, Xor(y, z))); }\n+__m256i inline Maj(__m256i x, __m256i y, __m256i z) { return Or(And(x, y), And(z, Or(x, y))); }\n+__m256i inline Sigma0(__m256i x) { return Xor(Or(ShR(x, 2), ShL(x, 30)), Or(ShR(x, 13), ShL(x, 19)), Or(ShR(x, 22), ShL(x, 10))); }\n+__m256i inline Sigma1(__m256i x) { return Xor(Or(ShR(x, 6), ShL(x, 26)), Or(ShR(x, 11), ShL(x, 21)), Or(ShR(x, 25), ShL(x, 7))); }\n+__m256i inline sigma0(__m256i x) { return Xor(Or(ShR(x, 7), ShL(x, 25)), Or(ShR(x, 18), ShL(x, 14)), ShR(x, 3)); }\n+__m256i inline sigma1(__m256i x) { return Xor(Or(ShR(x, 17), ShL(x, 15)), Or(ShR(x, 19), ShL(x, 13)), ShR(x, 10)); }\n+\n+/** One round of SHA-256. */\n+void inline __attribute__((always_inline)) Round(__m256i a, __m256i b, __m256i c, __m256i& d, __m256i e, __m256i f, __m256i g, __m256i& h, __m256i k)\n+{\n+    __m256i t1 = Add(h, Sigma1(e), Ch(e, f, g), k);\n+    __m256i t2 = Add(Sigma0(a), Maj(a, b, c));\n+    d = Add(d, t1);\n+    h = Add(t1, t2);\n+}\n+\n+__m256i inline Read8(const unsigned char* chunk, int offset) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187079985",
      "id" : 187079985,
      "in_reply_to_id" : 187040748,
      "original_commit_id" : "6904dc15cdf6889ab041c101f31bace9d5a7aeac",
      "original_position" : 48,
      "path" : "src/crypto/sha256_avx2.cpp",
      "position" : 48,
      "pull_request_review_id" : 118787402,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191",
      "updated_at" : "2018-05-09T15:28:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187079985",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187109129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187109129"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Shouldn't there be a space between \"1024,\" and \"0\"?",
      "commit_id" : "b36eac01fcb9e5b9a98d925405138cd816a8ae05",
      "created_at" : "2018-05-09T17:06:45Z",
      "diff_hunk" : "@@ -52,6 +52,14 @@ static void SHA256_32b(benchmark::State& state)\n     }\n }\n \n+static void DSHA256_64b(benchmark::State& state)\n+{\n+    std::vector<uint8_t> in(64 * 1024,0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187109129",
      "id" : 187109129,
      "original_commit_id" : "b36eac01fcb9e5b9a98d925405138cd816a8ae05",
      "original_position" : 6,
      "path" : "src/bench/crypto_hash.cpp",
      "position" : 6,
      "pull_request_review_id" : 118823405,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191",
      "updated_at" : "2018-05-09T17:06:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187109129",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK!\r\n\r\n@sipa Please see the build-system comments on #13203, I didn't realize this was a different PR. I'll follow-up here for non-power changes.",
      "created_at" : "2018-05-09T19:54:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387855935",
      "id" : 387855935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-09T19:54:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387855935",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187166734"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187166734"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just because libbitcoinconsensus doesn't take advantage of 4way? Or some buildsystem limitation?",
      "commit_id" : "b36eac01fcb9e5b9a98d925405138cd816a8ae05",
      "created_at" : "2018-05-09T20:30:18Z",
      "diff_hunk" : "@@ -465,22 +470,28 @@ bool SelfTest(TransformType tr) {\n \n TransformType Transform = sha256::Transform;\n TransformD64Type TransformD64 = sha256::TransformD64;\n+TransformD64Type TransformD64_4way = nullptr;\n } // namespace\n \n std::string SHA256AutoDetect()\n {\n+    std::string ret = \"standard\";\n #if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__))\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;\n         TransformD64 = TransformD64Wrapper<sha256_sse4::Transform>;\n-        assert(SelfTest(Transform));\n-        return \"sse4\";\n+#if defined(ENABLE_SSE41) && !defined(BUILD_BITCOIN_INTERNAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187166734",
      "id" : 187166734,
      "original_commit_id" : "d473e1e0d00be665b5e755b797538e7c5262981d",
      "original_position" : 29,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 118893367,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191",
      "updated_at" : "2018-05-09T20:30:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187166734",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187167068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187167068"
         }
      },
      "author_association" : "OWNER",
      "body" : "Both.\r\n\r\nI didn't feel like creating copies of all the architecture-specialized libs for use within libbitcoinconsensus - especially as it doesn't benefit it.",
      "commit_id" : "b36eac01fcb9e5b9a98d925405138cd816a8ae05",
      "created_at" : "2018-05-09T20:31:39Z",
      "diff_hunk" : "@@ -465,22 +470,28 @@ bool SelfTest(TransformType tr) {\n \n TransformType Transform = sha256::Transform;\n TransformD64Type TransformD64 = sha256::TransformD64;\n+TransformD64Type TransformD64_4way = nullptr;\n } // namespace\n \n std::string SHA256AutoDetect()\n {\n+    std::string ret = \"standard\";\n #if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__))\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx >> 19) & 1) {\n         Transform = sha256_sse4::Transform;\n         TransformD64 = TransformD64Wrapper<sha256_sse4::Transform>;\n-        assert(SelfTest(Transform));\n-        return \"sse4\";\n+#if defined(ENABLE_SSE41) && !defined(BUILD_BITCOIN_INTERNAL)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#discussion_r187167068",
      "id" : 187167068,
      "in_reply_to_id" : 187166734,
      "original_commit_id" : "d473e1e0d00be665b5e755b797538e7c5262981d",
      "original_position" : 29,
      "path" : "src/crypto/sha256.cpp",
      "position" : null,
      "pull_request_review_id" : 118893803,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/13191",
      "updated_at" : "2018-05-09T20:31:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/187167068",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Great job! \r\nAny plans to add support for AVX512?\r\n\r\nI know there are not so many people with AVX512 CPU's but why not add it from now? \r\n\r\nAll Intel CPU's will have support for AVX512 in coming months (mainstream + server). \r\n\r\n\r\n",
      "created_at" : "2018-05-10T06:35:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387965819",
      "id" : 387965819,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-10T06:37:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387965819",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/22077313?v=4",
         "events_url" : "https://api.github.com/users/Kick1986/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kick1986/followers",
         "following_url" : "https://api.github.com/users/Kick1986/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kick1986/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kick1986",
         "id" : 22077313,
         "login" : "Kick1986",
         "organizations_url" : "https://api.github.com/users/Kick1986/orgs",
         "received_events_url" : "https://api.github.com/users/Kick1986/received_events",
         "repos_url" : "https://api.github.com/users/Kick1986/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kick1986/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kick1986/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kick1986"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Some benchmarks numbers about AVX512 in the article below! \r\n\r\nhttps://hk.saowen.com/a/218fa211f2b705dc6ebc2691a2b21743ce7cd95585c781d181b3809352bffbe3\r\n\r\nhttps://github.com/intel/intel-ipsec-mb/blob/master/README\r\n",
      "created_at" : "2018-05-10T06:36:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387966010",
      "id" : 387966010,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-10T06:40:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387966010",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/22077313?v=4",
         "events_url" : "https://api.github.com/users/Kick1986/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kick1986/followers",
         "following_url" : "https://api.github.com/users/Kick1986/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kick1986/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kick1986",
         "id" : 22077313,
         "login" : "Kick1986",
         "organizations_url" : "https://api.github.com/users/Kick1986/orgs",
         "received_events_url" : "https://api.github.com/users/Kick1986/received_events",
         "repos_url" : "https://api.github.com/users/Kick1986/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kick1986/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kick1986/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kick1986"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> I know there are not so many people with AVX512 CPU's but why not add it from now?\r\n\r\nThat is not how open source development works. A PR is for reviewing the code. Future improvements can be done in future PRs. For example @TheBlueMatt adds support for POWER8 instructions in #13203. I might add ARM intrinsics support at some point.",
      "created_at" : "2018-05-10T06:58:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-387969899",
      "id" : 387969899,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-10T06:58:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/387969899",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@laanwj The algorithm in `MerkleComputation` is actually potentially more efficient (better memory locality) than the one in `ComputeMerkleRoot` now, apart from the fact that it doesn't take advantage of multi-way hashing. I'd like to keep it around for a bit and see if I can adapt it to use multi-way instead, in which case it could be used for everything. I can also move it and move it back if used. What do you think?\r\n\r\n@Kick1986 AVX512 is cool, but it's low-impact (even machines that support it right now do it with reduced clock rate), and I'm unable to benchmark it. Feel free to add in follow-up work yoursel, though.",
      "created_at" : "2018-05-11T19:46:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-388467321",
      "id" : 388467321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-11T19:46:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388467321",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@sipa\r\nThanks for answering me!\r\nYou are right about AVX512 clock speed, it will go mainstream sometime 2020.\r\nI will do my best to add AVX512 to BTC code before that.\r\nThanks ",
      "created_at" : "2018-05-12T00:47:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-388518082",
      "id" : 388518082,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-12T00:47:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388518082",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/22077313?v=4",
         "events_url" : "https://api.github.com/users/Kick1986/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Kick1986/followers",
         "following_url" : "https://api.github.com/users/Kick1986/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Kick1986/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Kick1986",
         "id" : 22077313,
         "login" : "Kick1986",
         "organizations_url" : "https://api.github.com/users/Kick1986/orgs",
         "received_events_url" : "https://api.github.com/users/Kick1986/received_events",
         "repos_url" : "https://api.github.com/users/Kick1986/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Kick1986/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Kick1986/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Kick1986"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@laanwj I moved the unused Merkle branch functions to the test code. Also:\r\n\r\n> I might add ARM intrinsics support at some point.\r\n\r\n:+1: That sounds far more impactful than POWER8, to be honest ;)\r\n\r\n@theuni I've addressed some of your build system comments from #13203, but left the `ENABLE_AVX2` and `ENABLE_SSE41` macros, because there isn't a clean platform independent way to use compiler defines. `__AVX2__` exists in both GCC and MSVC, but there is no `__SSE4_1__` in MSVC (and worse, there is no way to test for SSE4 at all there; you have to test whether the FP code is x87 based or SSE based).\r\n\r\n@kristapsk Ok, I've added a space.",
      "created_at" : "2018-05-12T19:14:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-388576673",
      "id" : 388576673,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-13T03:00:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/388576673",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. Lightly tested ACK. \r\n\r\nWe should open a issue to track doing a specialized 1-way 64-byte SSE4 function for this later as that is a pretty much guaranteed performance gain (as the non-specialized 1-way SSE4 that does more work is faster than the specialized non-SSE4 1-way code) which can be done by someone who knows assembly but knows little about Bitcoin.\r\n\r\nWe might want to add a note to explain the specialization along the lines of: the 64-byte input (and 32-byte input in the second SHA256 invocation) mean that most of the input to the message expansion is zeros, which lets us drop out a lot of additions.",
      "created_at" : "2018-05-15T19:00:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-389277189",
      "id" : 389277189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-15T19:00:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389277189",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@gmaxwell Yes, perhaps. But the impact of that would be pretty low at best, as every system in which that optimized 1-way code can be used also supports 4-way 64-byte optimized code already; meaning such an implementation would only be used for up to 3 of the last hashes in each level of a Merkle tree.",
      "created_at" : "2018-05-17T00:25:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/13191#issuecomment-389706444",
      "id" : 389706444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/13191",
      "updated_at" : "2018-05-17T00:25:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/389706444",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
