[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143107886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11457"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143107886"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What about adding `GUARDED_BY(Ã¢ÂÂ¦)` (see #10866 and #11226) annotations here?\r\n\r\nLike this:\r\n\r\n```\r\n    CCriticalSection m_cs_banned;\r\n    banmap_t m_banned GUARDED_BY(m_cs_banned);\r\n    bool m_is_dirty GUARDED_BY(m_cs_banned);\r\n```\r\n\r\nNit: The lock was renamed from `cs_setBanned` to `m_cs_banned`. All `CCriticalSection`:s in the code base except `m_cs_callbacks_pending` are named with the `cs_` prefix (as opposed to `m_cs_`). Is `m_cs_` the recommended prefix going forward? More specifically, what prefix is recommended for my work in #10866? :-)\r\n\r\nI think there is a point in having consistent naming for the locks in order to allow for easy grepping of the locks. Personally I use grepping frequently - think `git grep ' cs_[a-zA-Z0-9]\\+;' -- \"*.h\" \"*.cpp\"` - in the scripts that keep tracks of the locks to cover in #10866).",
      "commit_id" : "a006ca20f20b776038e8562000ec8724d35ce607",
      "created_at" : "2017-10-06T04:32:01Z",
      "diff_hunk" : "@@ -0,0 +1,65 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BANMAN_H\n+#define BITCOIN_BANMAN_H\n+\n+#include \"addrdb.h\"\n+#include \"fs.h\"\n+#include \"sync.h\"\n+\n+// NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n+static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n+\n+class CClientUIInterface;\n+class CNetAddr;\n+class CSubNet;\n+\n+class BanMan\n+{\n+public:\n+    // Denial-of-service detection/prevention\n+    // The idea is to detect peers that are behaving\n+    // badly and disconnect/ban them, but do it in a\n+    // one-coding-mistake-won't-shatter-the-entire-network\n+    // way.\n+    // IMPORTANT:  There should be nothing I can give a\n+    // node that it will forward on that will make that\n+    // node's peers drop it. If there is, an attacker\n+    // can isolate a node and/or try to split the network.\n+    // Dropping a node for sending stuff that is invalid\n+    // now but might be valid in a later version is also\n+    // dangerous, because it can cause a network split\n+    // between nodes running old code and nodes running\n+    // new code.\n+    ~BanMan();\n+    BanMan(fs::path ban_file, CClientUIInterface* client_interface, int64_t default_ban_time);\n+    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void ClearBanned(); // needed for unit testing\n+    bool IsBanned(CNetAddr ip);\n+    bool IsBanned(CSubNet subnet);\n+    bool Unban(const CNetAddr &ip);\n+    bool Unban(const CSubNet &ip);\n+    void GetBanned(banmap_t &banmap);\n+    void DumpBanlist();\n+\n+private:\n+    void SetBanned(const banmap_t &banmap);\n+    bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entries (if bantime has expired)\n+    void SweepBanned();\n+\n+    banmap_t m_banned;\n+    CCriticalSection m_cs_banned;\n+    bool m_is_dirty;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11457#discussion_r143107886",
      "id" : 143107886,
      "original_commit_id" : "a006ca20f20b776038e8562000ec8724d35ce607",
      "original_position" : 58,
      "path" : "src/banman.h",
      "position" : 58,
      "pull_request_review_id" : 67570999,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11457",
      "updated_at" : "2017-10-06T04:41:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/143107886",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK modulo `GUARDED_BY(Ã¢ÂÂ¦)` addition :-)",
      "created_at" : "2017-10-06T04:33:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11457#issuecomment-334655782",
      "id" : 334655782,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11457",
      "updated_at" : "2017-10-06T04:33:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/334655782",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
