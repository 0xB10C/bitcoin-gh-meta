[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Admittedly, I haven't been following this issue very closely, but wow, that mailing list post was very persuasive. The analogy between the `-mempoolfullrbf` flag and a hypothetical `-disable_v3_transaction_enforcement` flag to me was the most compelling part, as well as the framing:\r\n\r\n> Relay has only ever been a best-efforts concept, where we carve out a small subset of the entire transaction universe for which we try to optimize propagation.\r\n\r\nAdding options for different nodes to see different subsets of the transaction universe seems something we would really want to avoid unless the options provide very compelling benefits. And given limitations of `-mempoolfullrbf` described in footnote 3, the benefits it provides seem scant compared to the cost and complexity having to design for multiple mempool policies on the same network going forward.",
      "created_at" : "2022-11-01T14:43:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1298611730",
      "id" : 1298611730,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NZz4S",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298611730/reactions"
      },
      "updated_at" : "2022-11-01T14:43:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298611730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "NACK\r\n\r\n> Does fullrbf offer any benefits other than breaking zeroconf business practices? If so, what are they?\r\n\r\nZeroconf businesses and projects are vulnerable by design. This can be fixed without changing anything in Bitcoin Core.\r\n\r\nFull RBF offers 2 benefits:\r\n\r\n- Better security for coinjoin and multi party contracts which is hard to fix without users trying full RBF using this option\r\n- Provide another policy option for users to replace transactions \r\n\r\n> Is it reasonable to enforce BIP 125's rbf rules on all transactions, if those rules themselves are not always incentive compatible?\r\n\r\nIts reasonable to try and collect some insights based on usage. This could be used to improve things in future.\r\n\r\n> If someone were to propose a command line option that breaks v3 transaction relay in the future, is there a logical basis for opposing that which is consistent with moving towards fullrbf now?\r\n\r\nI do not understand this question, v3 tx relay is still being discussed afaik and not sure how it's related to an option to use full RBF as Gloria mentioned in [this](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html) email:\r\n\r\n\"_If you don't want your transactions to be subject to\r\nthese rules, just continue whatever you're doing and don't use nVersion=3._\"\r\n\r\nAnd some projects would continue to use nVersion=1 and nVersion=2.\r\n\r\n---\r\nFull RBF is already available as an option in Knots and custom bitcoind if someone running core with patches. This option could only make it easier for average users to try it and better insights.",
      "created_at" : "2022-11-01T15:32:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1298711392",
      "id" : 1298711392,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NaMNg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298711392/reactions"
      },
      "updated_at" : "2022-11-01T15:49:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298711392",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94559964?v=4",
         "events_url" : "https://api.github.com/users/1440000bytes/events{/privacy}",
         "followers_url" : "https://api.github.com/users/1440000bytes/followers",
         "following_url" : "https://api.github.com/users/1440000bytes/following{/other_user}",
         "gists_url" : "https://api.github.com/users/1440000bytes/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/1440000bytes",
         "id" : 94559964,
         "login" : "1440000bytes",
         "node_id" : "U_kgDOBaLe3A",
         "organizations_url" : "https://api.github.com/users/1440000bytes/orgs",
         "received_events_url" : "https://api.github.com/users/1440000bytes/received_events",
         "repos_url" : "https://api.github.com/users/1440000bytes/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/1440000bytes/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/1440000bytes/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/1440000bytes"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Full RBF offers 2 benefits:\r\n> \r\n> * Better security for coinjoin and multi party contracts which is hard to fix without users trying full RBF using this option\r\n\r\nAs discussed in the mailing list thread, the security problem with a coinjoin protocol/multiparty funded transaction protocol that Antoine described can still occur even if fullrbf were the norm.  So I believe this to be false (in the sense that I don't think @ariard or @instagibbs, who seem most familiar with the protocol being described, think the problem would be solved with fullrbf -- if I'm misunderstanding that viewpoint though I would welcome being corrected).\r\n\r\n> * Provide another policy option for users to replace transactions\r\n\r\n\"Providing another policy option\" is a circular reason.  The question I'm trying to get at is: what harm is there to the network from some users choosing to opt their transactions out of RBF?  The example Antoine gave would be in that category if fullrbf actually solved the problem he described, but since it doesn't seem to solve the problem I'm looking for other examples.  \r\n\r\n> > Is it reasonable to enforce BIP 125's rbf rules on all transactions, if those rules themselves are not always incentive compatible?\r\n> \r\n> Its reasonable to try and collect some insights based on usage. This could be used to improve things in future.\r\n\r\nWe have had 7 years to gain insights based on usage.  Something like 20-30% of all transactions opt-in already, I think?  I don't think we're going to learn anything more that we can't already learn from looking at current usage patterns.  \r\n\r\nPerhaps another way of phrasing this argument is, if you're going to advocate for fullrbf because non-replacement is not incentive compatible, then you should also be able to argue that our fullrbf policy is incentive compatible.  And I'm pointing out that fullrbf as it exists in master (when this `mempoolfullrbf` flag is enabled) is not incentive compatible in some obvious situations.  So it seems to me that an incentive compatibility argument cuts both ways, and those arguing that non-replacement is bad should implement an incentive compatible set of RBF rules first, before we enforce that on all transactions.\r\n\r\n> > If someone were to propose a command line option that breaks v3 transaction relay in the future, is there a logical basis for opposing that which is consistent with moving towards fullrbf now?\r\n> \r\n> I do not understand this question, v3 tx relay is still being discussed afaik and not sure how it's related to an option to use full RBF as Gloria as mentioned in [this](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020937.html) email:\r\n\r\nIf you read my full email and still do not understand my question then I'm not sure I can explain this any better here, but I tried to argue that the restriction on not allowing replacements of non-rbf-signaling transactions is similar in concept to a restriction to not allow arbitrary children of a v3 transaction, in the v3 transaction relay proposal that is being advanced.  I like the v3 proposal, and I think we should pursue it, and I worry that setting a precedent of breaking a policy for no network benefit could be used in the future to interfere with v3 down the road, because many of the same arguments would seem to apply.\r\n\r\nSo I'm looking for people who think that (a) the v3 transaction policy proposal is good and (b) that fullrbf is good to explain how those can be mutually compatible viewpoints, because from how I think about both of these issues, I'm unable to justify supporting fullrbf right now (given my understanding of current usage patterns on the network, where there seems to be little demand for transactions that opt-out of replacement under BIP 125 being doublespent) without also justifying offering knobs to break v3 in the future, which I would be opposed to doing.",
      "created_at" : "2022-11-01T15:54:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1298748489",
      "id" : 1298748489,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NaVRJ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298748489/reactions"
      },
      "updated_at" : "2022-11-01T15:54:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298748489",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "NACK with longer form here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021136.html\r\n\r\n> And I'm pointing out that fullrbf as it exists in master (when this mempoolfullrbf flag is enabled) is not incentive compatible in some obvious situations.\r\n\r\n\"I want to steal from 0-conf merchants\" is the \"use-case\" you're ignoring, and where the argument falls apart imo. It's the whole reason we're having this debate, it's that merchants are scared about it. If people didn't believe it was incentive compatible, we wouldn't be having this conversation at all.\r\n\r\nOstensibly, we are trying to allow people to bid fees for inclusion to blocks. Excluding people from *bidding against themselves* is clearly different than V3 type patterns which are for making bidding a robust process.\r\n\r\nedit: and for anyone reading I'm completely against stealing from merchants, and personally will not be working towards fullrbf-default-on efforts because of lack of ethical use-cases.",
      "created_at" : "2022-11-01T16:06:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1298763826",
      "id" : 1298763826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NaZAy",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298763826/reactions"
      },
      "updated_at" : "2022-11-01T16:07:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298763826",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> NACK with longer form here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-October/021136.html\r\n\r\nOne question I have from that post is about:\r\n\r\n> Removing a quite-likely-incentive-compatible option from the software just encourages miners to adopt an additional patch if they ever deem it necessary to increase their revenue\r\n\r\nTo me this is sounds like an argument *for* removing the option, not an argument *against* removing the option, because if we see miners actually taking the effort to patch their software in this way it gives us a real *empirical* confirmation that our mempool policy is not incentive-compatible, and that it needs to change.\r\n\r\nIn general, if bitcoin core software is designed around following a single mempool policy, and if we can observe whether or not miners are following that policy, it puts us in a solid position to be able to improve the policy over time, and have a network that is reliable and performant without painful edge cases and usability problems. If different mempools have different policies, it seems like it would be a lot harder to evaluate any one policy or for the network to be reliable and improve over time.",
      "created_at" : "2022-11-01T16:36:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1298807067",
      "id" : 1298807067,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585Najkb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298807067/reactions"
      },
      "updated_at" : "2022-11-01T16:36:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298807067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To me this is sounds like an argument for removing the option, not an argument against removing the option, because if we see miners actually taking the effort to patch their software in this way it gives us a real empirical confirmation that our mempool policy is not incentive-compatible, and that it needs to change.\r\n\r\nI don't think we should be encouraging miners to run even more patches to be profitable. That said, I think it's an ok argument for leaving it in as false unless other data comes in.  (this is my current stance fwiw) ",
      "created_at" : "2022-11-01T16:42:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1298814109",
      "id" : 1298814109,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NalSd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298814109/reactions"
      },
      "updated_at" : "2022-11-01T16:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1298814109",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > And I'm pointing out that fullrbf as it exists in master (when this mempoolfullrbf flag is enabled) is not incentive compatible in some obvious situations.\r\n> \r\n> \"I want to steal from 0-conf merchants\" is the \"use-case\" you're ignoring, and where the argument falls apart imo. It's the whole reason we're having this debate, it's that merchants are scared about it. If people didn't believe it was incentive compatible, we wouldn't be having this conversation at all.\r\n\r\nI completely agree that the fullrbf policy currently in master is incentive compatible enough to help people steal from 0-conf merchants.  \r\n\r\nThe issue with incentive compatibility that I was trying to bring up here is that if you look at our rbf policy as a whole, you'd find problems with its design (namely, the lack of comparison between the ancestor feerate of an incoming transaction, and the actual feerates of all the transactions that would be evicted, can mean that we'd evict transactions that would be mined in the next block in favor of a transaction that may not be mined for a long time).  So in that sense, adopting fullrbf is trading one set of incentive compatibility problems for another.  It's not like we have a policy A that is so perfectly designed and  incentive compatible on the one hand, and this irrational non-replacement policy B on the other hand, and we're just trying to move everyone who is suffering in the backwards B world into the enlightened A world.  Instead, A itself has some good things about it, and it has some issues, and B has some good things about it, and some issues of its own.  \r\n\r\nSo if you put aside the question of 0-conf and just tried to look at the policies on their face, it's hard to argue that this is a strict improvement over giving people a choice of which policy regime to opt into.\r\n\r\n> edit: and for anyone reading I'm completely against stealing from merchants, and personally will not be working towards fullrbf-default-on efforts because of lack of ethical use-cases.\r\n\r\nI think this gets at the fundamental issue, which I think we both largely agree on, which is that the main use case of fullrbf is helping users steal from 0-conf merchants.  It's not that an opt-in non-replacement policy is fundamentally bad; it's just that businesses offering 0-conf services seem to be offering a reason to subvert the very policy on which they (predominantly) rely.\r\n\r\n> Ostensibly, we are trying to allow people to bid fees for inclusion to blocks. Excluding people from _bidding against themselves_ is clearly different than V3 type patterns which are for making bidding a robust process.\r\n\r\nI just want to make sure that no subtlety in my argument here was overlooked -- I do think that the v3 transaction proposal, as an opt-in set of restrictions on certain transactions to support a particular use case, makes sense.  I also think that when applied to the use cases we have in mind, the v3 proposal should make it easier for the best transactions to propagate to miners.  \r\n\r\nI would also argue that a non-replacement policy, when used correctly, can also help miners get the best transactions, if the transaction participants are better able to coordinate when to use CPFP and when not to.  The pinning issues with RBF highlight this issue exactly (wouldn't it make sense for wallets to be more willing to spend unconfirmed outputs from non-signaling incoming transactions and just fee bump them appropriately? with rbf transactions, pinning and the greater chance of having your child transaction becoming invalid make this messier).\r\n\r\nMy comparison of v3 to non-replacement transactions is in the use cases that we do not foresee, which might in turn create incentives that could be argued would theoretically make the v3 ruleset not incentive compatible.  This is essentially how I see 0-conf merchants' use of non-replacement transactions; they have turned a neutral policy into something that theoretically may not be incentive compatible, by creating an incentive to break it.\r\n\r\nWhat I'm arguing though is that we should wait to see evidence that there are actually transactions being broadcast and mined that subvert the policy, and not just postulate that there are reasons for the policy to be subverted and therefore we should move to break it prematurely.  This is because there may be countering reasons why the policy isn't being subverted (perhaps because people are mostly honest), and I don't think it's great to break a theoretically useful policy (non-replacement) without a really good reason. \r\n\r\nIn the analogy to v3 transactions, a similar scenario could occur if lots of non-lightning services start using v3 transactions for reasons that (likely) wouldn't make any sense, creating theoretical demand for more child transactions for fee bumping and access to unconfirmed coins.  I would hope that we would try to support the v3 use case by just communicating that this is a bad idea and not the intent of the policy, and wait until we were to actually see evidence of transactions being relayed and mined that violate the policy, rather than offer tools to subvert the policy prematurely just because of a theoretical incentive compatibility problem.",
      "created_at" : "2022-11-01T20:30:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1299101277",
      "id" : 1299101277,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NbrZd",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299101277/reactions"
      },
      "updated_at" : "2022-11-01T20:30:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299101277",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think we're primarily disagreeing on if a knob should exist; I think it's fine and respectful, while picking a \"good\" default.",
      "created_at" : "2022-11-01T20:58:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1299146661",
      "id" : 1299146661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585Nb2el",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299146661/reactions"
      },
      "updated_at" : "2022-11-01T20:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299146661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#26305](https://github.com/bitcoin/bitcoin/pull/26305) (Enable `mempoolfullrbf=1` by default by ariard)\n* [#26287](https://github.com/bitcoin/bitcoin/pull/26287) (Temporarily disable -mempoolfullrbf for the main chain by MarcoFalke)\n* [#21422](https://github.com/bitcoin/bitcoin/pull/21422) (Add feerate histogram to getmempoolinfo by kiminuo)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-11-01T22:50:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1299324521",
      "id" : 1299324521,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585Nch5p",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299324521/reactions"
      },
      "updated_at" : "2022-11-01T22:50:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299324521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reading the reasoning  on the mailing post, I think there are more long-term implications in the suggestion of adopting the transaction-relay policy of non-interfering use cases to what the network supposes. Especially the concern we might create mining income asymmetries due to unequal access to transactions flows bypassing policies, in a future where fees should substantially contribute to block reward. Beyond, policy design miner-incentive misalignement could create \"hidden\" security risks for protocols like Lightning, leading to sudden wreckage (e.g miner-bribing contract to ignore version=3 policy). I think a more complete layout of those implications should be pursued on the mailing list. To be clear, I'm not saying a transaction-relay philosophy \"to each use-case, a set of policy rules\" AFAIU  isn't a reasonable path forward, just we should rather understand better the implications. \r\n\r\nAnswering on the direct questions, as argued multiple times, full-rbf removes one DoS concern for multi-party transactions flows. The solution is satisfying in the sense, if full-rbf is deployed on the majority of the network, a participant to a coinjoin transaction can expect the target transaction, if it offers a better fee in the definition of BIP125 to propagate to the miners. The coinjoin protocol execution doesn't have to halt, and it can keep progressing forward as long as you have fee-bumping reserves available to compete with blockspace demand >\r\n\r\n>   As discussed in the mailing list thread, the security problem with a coinjoin protocol/multiparty funded transaction protocol that Antoine described can still occur even if fullrbf were the norm.\r\n\r\nHowever, reading this statement, I'm not sure if we all think about the same success/failure terms for the security problem raised ? The arguments why the solution is not satisfying are not clear to me.\r\n\r\nAnother more distant concern (yet to be backed up by more research), full-rbf removes a mass mempool-partitioning vector, where an attacker could partition all the network mempools states and from then alter fee-estimation or leverage this as a building block for advanced pinning (cf. the last attack scenario [0]). Of course, partitioning mempools states due to policy difference is always a potential outcome (e.g Taproot transactions between upgraded and non-upgrade nodes), however I wonder what level of difficulty and cost we should burden on an attacker, or consider this as inevitable.\r\n\r\nOn the second question, if we had a stronger model of what we mean by incentive-compatible, rather to evaluate any rule on a binary approach (i.e either compatible or not), we could adopt a quantitative approach. Each policy rule impact could be measured in deviation from an \"ideal\" mining income (as we're doing in cryptanalysis where we deviate from the perfect security of the one-time pad) and to be pondered with other dimensions like privacy or full-node DoS surface increased. If we had a consistent modeling of miner incentive-compatibility that we'll agree on, we could make legible statement if enforcing BIP125 rules on all transactions or not is a improvement. One could argue today that the non-replacement policy regime as expected by zeroconf operators is \"incentive-compatible\" in the sense it favors Bitcoin adoption as a payment system, as such increase fees volume (all depends how you construct your model, and what variables you select or not). \r\n\r\nOn the last question, if someone proposes a command line option that breaks v3 transaction relay in the future, I think I would be in favor of such change. I could understand a full-node operator which is not partaking in Lightning neither interested to have compelling fee-estimation, and willing to reduce the CPU DoS surface of a low-performance node. Any transaction-relay rules or mempool acceptance rules, even wisely designed and reviewed, increases the bug surface of a full-node, a risk a node operator could choose to not burden with.  \r\n\r\n[0]  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-June/018011.html  ",
      "created_at" : "2022-11-02T03:39:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1299522242",
      "id" : 1299522242,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NdSLC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299522242/reactions"
      },
      "updated_at" : "2022-11-02T03:47:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299522242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Strong NACK\r\n\r\nBy doing this we're setting an extremely bad precedent that zeroconf \"breaking\" is our responsibility. Zeroconf is antithetical to the trustless, economic incentive driven, design of Bitcoin. It's a dangerous practice that has repeatedly bitten naive users leading to large losses.\r\n\r\n_Any_ option that changes mempool policy breaks zeroconf if used by miners because any difference in mempool policy can be exploited. `mempoolfullrbf` isn't special and claiming otherwise is dishonest for users.",
      "created_at" : "2022-11-02T09:07:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1299902325",
      "id" : 1299902325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585Neu91",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299902325/reactions"
      },
      "updated_at" : "2022-11-02T09:07:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299902325",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">By doing this we're setting an extremely bad precedent that zeroconf \"breaking\" is our responsibility. Zeroconf is antithetical to the trustless, economic incentive driven, design of Bitcoin. It's a dangerous practice that has repeatedly bitten naive users leading to large losses.\r\n\r\n@petertodd I'm not entirely sure I follow your argument, so I'd appreciate a clarification. I understand that you think two things: (a) zeroconf is antithetical to Bitcoin and should be eliminated, and (b) this PR (or the one that introduced `-mempoolfullrbf`) does not affect the safety of zeroconf in a material way, because it's inherently dangerous.\r\n\r\nI think I can accept both of those statements as your position, but if they are both true, why would you care strongly whether this PR is merged or not?  Why does anyone need the ability to enable fullrbf in the way that `-mempoolfullrbf` does, if not to improve the ability to steal from zeroconf merchants?  I'd like to understand if there's another use case for the fullrbf flag that I'm missing.",
      "created_at" : "2022-11-02T13:04:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1300371532",
      "id" : 1300371532,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NghhM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300371532/reactions"
      },
      "updated_at" : "2022-11-02T13:06:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300371532",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "On Wed, Nov 02, 2022 at 06:04:51AM -0700, Suhas Daftuar wrote:\n> >By doing this we're setting an extremely bad precedent that zeroconf \"breaking\" is our responsibility. Zeroconf is antithetical to the trustless, economic incentive driven, design of Bitcoin. It's a dangerous practice that has repeatedly bitten naive users leading to large losses.\n> \n> @petertodd I'm not entirely sure I follow your argument, so I'd appreciate a clarification. I understand that you think two things: (a) zeroconf is antithetical to Bitcoin and should be eliminated, and (b) this PR (or the one that introduced `-mempoolfullrbf`) does not affect the safety of zeroconf in a material way, because it's inherently dangerous.\n> \n> I think I can accept both of those statements as your position, but if they are both true, why would you care strongly whether this PR is merged or not?  Why does anyone need the ability to enable fullrbf in the way that `-mempoolfullrbf` does, if not to improve the ability to steal from zeroconf merchants?  I'd like to understand if there's another case for the fullrbf flag that I'm missing.\n\nFirst of all, people do on occasion send non-opt-in-signalling transactions\nthat need to be fee-bumped to get mined in a reasonable amount of time.\nSimilarly, it's perfectly valid to try to cancel a transaction sent in error,\nregardless of opt-in status. That alone is more than enough reason to support\nfull-rbf. The need to signal opt-in status is also of course a privacy harm.\nAgain, that's enough reason to support full-rbf.\n\nMore generally, zeroconf is dangerous. Both to users to mistakenly believe it\nto be secure and get defrauded, and all Bitcoin users who are harmed by\nattempts to make it secure. What you are doing here with this pull-req is\npolitics: you're trying to take away an option in an attempt to make it\ninconvenient enough for miners and other users that this dangerous feature\ncontinues to live on. And in the process, you're setting precedents that will\nharm Bitcoin development by constraining what we can do in the future without\nrunning into yet more nonsense politics from the people trying to continue to\nkeep zeroconf on life support.\n\nWe're lucky that we haven't yet invited legal action from businesses trying to\nkeep zeroconf a thing. We're much better off killing it while we can, at a time\nwhen it's hardly used.\n",
      "created_at" : "2022-11-02T14:15:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1300498224",
      "id" : 1300498224,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NhAcw",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300498224/reactions"
      },
      "updated_at" : "2022-11-02T14:15:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300498224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I have a question that is making me reconsider my concept ACK for this PR: Do people who support keeping the `-mempoolfullrbf` option believe keeping it will have a practical effect on network transaction propagation, and that removing it would be a real change? Or would removing the option basically be symbolic, and not likely to have a significant and observable effect on the behavior of network?\r\n\r\nI might have gotten the misconception from not reading deeply enough that having this option or not having it would basically make no practical difference for the network, because few people would be interested enough to set the option, and unless a large fraction of nodes did set the option, it wouldn't practically affect what transactions ultimately get propagated and confirmed. But maybe this is not the case, and only a few nodes and miners need to set the option for it to have a real, noticeable effect. If this is the case, I'd rescind my ACK, because I do think miners should have freedom to decide what transactions they want to confirm (whatever their reasoning), or even if they shouldn't have that freedom, trying to remove it by deleting a few lines of mempool code would just be a dumb/heavy-handed/ineffective tactic.\r\n\r\nFollowing this logic, I'd also support having `-disable_v3_transaction_enforcement` option if we believed enough people might enable that option for it to have a practical effect on the network (good or bad). I don't think bitcoin core should support options that are just symbolic ineffective signaling mechanisms without good use cases. I think if policy options like `-mempoolfullrbf` or `-disable_v3_transaction_enforcement` are added that are mostly intended to affect global network behavior rather than local node behavior, they should only be added on a temporary basis, as ways of providing backwards compatibility, or as ways of experimenting and gathering information so default P2P behavior can be more performant and reliable in the future. I think it would be bad thing to let mempool policy options accumulate over time, because it would make network behavior harder to reason about and create corner cases that make it less reliable.\r\n\r\n(I am only thinking here about what policy options it is good for bitcoin core software to support, and don't have an informed opinion about whether full RBF is good policy or not. Suhas's arguments that full RBF behavior is actually complicated and hard to reason about, and that RBF signalling can make usage simpler and mempool optimizations possible make sense to me. But ariard's concerns that RBF signalling could create attack vectors and be unsustainable also ring true. Peter Todd's concerns about zero conf may also be reasonable.)\r\n\r\nI just think regardless of whether full RBF policy is good or bad, that the `-mempoolfullrbf` option should have a shelf-life. It does not seem like a good thing in the long term for individual nodes to consciously choose different views of the transaction universe.",
      "created_at" : "2022-11-02T16:02:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1300767663",
      "id" : 1300767663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NiCOv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300767663/reactions"
      },
      "updated_at" : "2022-11-02T16:02:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300767663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "`mempoolfullrbf=1` by itself won't do much for transaction propagation unless a non-trivial fraction of nodes enable it. In conjunction with `addnode` however it does make it much easier for people to opt-in to effective full-rbf relay policy for their own nodes, regardless of what % of nodes choose to run it. For example, a friend of mine told me that he was waiting for v24.0 to be released to run full-rbf, because his node was on Umbrel, and installing a custom patch would be annoying; he was going to peer with another full-rbf node to ensure propagation worked.\n\nAs for miners, again, if they _only_ use the `mempoolfullrbf=1` option it's symbolic until a non-trivial percentage of nodes enable it. But again, by using `addnode` to connect to other full-rbf nodes, it will get full-rbf replacements mined even with very little hash power running it.\n\nI and others are currently running a dozen or so nodes that have both full-rbf enabled, and preferential peering via a full-rbf service bit. So finding a node to peer with to get tx propagation to work reliably isn't too hard.\n\ntl;dr: if people choose too, they can use `mempoolfullrbf` to make a genuine difference. If people don't use it, it'll make no difference at all.\n\nOn November 2, 2022 5:02:27 PM GMT+01:00, Ryan Ofsky ***@***.***> wrote:\n>I have a question that is making me reconsider my concept ACK for this PR: Do people who support keeping the `-mempoolfullrbf` option believe keeping it will have a practical effect on network transaction propagation, and that removing it would be a real change? Or would removing the option basically be symbolic, and not likely to have a significant and observable effect on the behavior of network?\n>\n>I might have gotten the misconception from not reading deeply enough that having this option or not having it would basically make no practical difference for the network, because few people would be interested enough to set the option, and unless a large fraction of nodes did set the option, it wouldn't practically affect what transactions ultimately get propagated and confirmed. But maybe this is not the case, and only a few nodes and miners need to set the option for it to have a real, noticeable effect. If this is the case, I'd rescind my ACK, because I do think miners should have freedom to decide what transactions they want to confirm (whatever their reasoning), or even if they shouldn't have that freedom, trying to remove it by deleting a few lines of mempool code would just be a dumb/heavy-handed/ineffective tactic.\n>\n>Following this logic, I'd also support having `-disable_v3_transaction_enforcement` option if we believed enough people might enable that option for it to have a practical effect on the network (good or bad). I don't think bitcoin core should support options that are just symbolic ineffective signaling mechanisms without good use cases. I think if policy options like `-mempoolfullrbf` or `-disable_v3_transaction_enforcement` are added that are mostly intended to affect global network behavior rather than local node behavior, they should only be added on a temporary basis, as ways of providing backwards compatibility, or as ways of experimenting and gathering information so default P2P behavior can be more performant and reliable in the future. I think it would be bad thing to let mempool policy options accumulate over time, because it would make network behavior harder to reason about and create corner cases that make it less reliable.\n>\n>(I am only thinking here about what policy options it is good for bitcoin core software to support, and don't have an informed opinion about whether full RBF is good policy or not. Suhas's arguments that full RBF behavior is actually complicated and hard to reason about, and that RBF signalling can make usage simpler and mempool optimizations possible make sense to me. But ariard's concerns that RBF signalling could create attack vectors and be unsustainable also ring true. Peter Todd's concerns about zero conf may also be reasonable.)\n>\n>I just think regardless of whether full RBF policy is good or bad, that the `-mempoolfullrbf` option should have a shelf-life. It does not seem like a good thing in the long term for individual nodes to consciously choose different views of the transaction universe.\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1300767663\n>You are receiving this because you were mentioned.\n>\n>Message ID: ***@***.***>",
      "created_at" : "2022-11-02T18:01:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1301023563",
      "id" : 1301023563,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NjAtL",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301023563/reactions"
      },
      "updated_at" : "2022-11-02T18:01:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301023563",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "If we merge this, anyone who wants to use the feature can do `git cherry-pick 3e27e317270fdc2dd02794fea9da016387699636` and compile. So the cat crawled slightly further out of the bag.\r\n\r\nI haven't had time to read all the mailinglist discussion. It could make sense to punt this feature, reopen the original PR and merge it later - depending on the outcome of that discussion. Unless there is an _urgent_ reason to have this feature in the current release.\r\n\r\nNit: commit message could point to the previous commit instead of the PR (Github will find the PR for you once you click on the commit).",
      "created_at" : "2022-11-03T08:03:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1301755629",
      "id" : 1301755629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585Nlzbt",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301755629/reactions"
      },
      "updated_at" : "2022-11-03T08:03:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301755629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "As I said above:\n\nâFor example, a friend of mine told me that he was waiting for v24.0 to be released to run full-rbf, because his node was on Umbrel, and installing a custom patch would be annoying; he was going to peer with another full-rbf node to ensure propagation worked.â\n\nThe fact is, we're punting on this in response to a tiny handful of people complaining that they wanted zero conf to continue to work. And the effect of taking away options is to just put up barriers to people who quite rationally, think economically rational mempool policy is preferable over trust.\n\nOn November 3, 2022 9:03:38 AM GMT+01:00, Sjors Provoost ***@***.***> wrote:\n>If we merge this, anyone who wants to use the feature can do `git cherry-pick 3e27e317270fdc2dd02794fea9da016387699636` and compile. So the cat crawled slightly further out of the bag.\n>\n>I haven't had time to read all the mailinglist discussion. It could make sense to punt this feature, reopen the original PR and merge it later - depending on the outcome of that discussion. Unless there is an _urgent_ reason to have this feature in the current release.\n>\n>Nit: commit message could point to the previous commit instead of the PR (Github will find the PR for you once you click on the commit).\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1301755629\n>You are receiving this because you were mentioned.\n>\n>Message ID: ***@***.***>",
      "created_at" : "2022-11-03T09:42:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1301850259",
      "id" : 1301850259,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NmKiT",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301850259/reactions"
      },
      "updated_at" : "2022-11-03T09:42:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1301850259",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=4",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "node_id" : "MDQ6VXNlcjcwNDI=",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "My two cents:\r\n\r\nIMHO, âfull RBFâ will be inevitable - without BIP125, an explicit flag in Core, or anyoneâs blessings.\r\n\r\nOnce the block subsidy is gone, miners will fight for scraps for survival and do everything they can to get better margins (fees). If Core doesn't explicitly allow full RBF transactions in its mempool, there will be other non-Core mempools or some sort of black market forming.\r\n\r\nSo either we formalize full RBF, which is preferable, or it will arise out-of-band.\r\n\r\nIf you want to give zero-confs businesses some grace period, shipping `mempoolfullrbf` defaulting to false seems reasonable. But removing the option doesn't make sense to me.",
      "created_at" : "2022-11-03T13:35:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1302126057",
      "id" : 1302126057,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NnN3p",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302126057/reactions"
      },
      "updated_at" : "2022-11-03T14:23:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302126057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4769925?v=4",
         "events_url" : "https://api.github.com/users/hugohn/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hugohn/followers",
         "following_url" : "https://api.github.com/users/hugohn/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hugohn/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hugohn",
         "id" : 4769925,
         "login" : "hugohn",
         "node_id" : "MDQ6VXNlcjQ3Njk5MjU=",
         "organizations_url" : "https://api.github.com/users/hugohn/orgs",
         "received_events_url" : "https://api.github.com/users/hugohn/received_events",
         "repos_url" : "https://api.github.com/users/hugohn/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hugohn/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hugohn/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hugohn"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@petertodd but is that an _urgent_ need?\r\n\r\nAs you point out in your [mailinglist post](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021143.html), your friend could run the v24.0rc3 release candidate binary, in case we drop it from the final release. That said, this wouldn't be safe if there are additional bug fixes in future release candidates, and running release candidates in production is not a good idea in general.\r\n\r\nThe debate around RBF has been going on for almost a decade. I think it can wait a few more months for a point release. We can determine if your bounty program worked out (i.e. created a fait accompli) through something like [miningpool.observer](https://miningpool.observer).",
      "created_at" : "2022-11-03T13:41:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26438#issuecomment-1302133133",
      "id" : 1302133133,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26438",
      "node_id" : "IC_kwDOABII585NnPmN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302133133/reactions"
      },
      "updated_at" : "2022-11-03T13:41:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302133133",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
