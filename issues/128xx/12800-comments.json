[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12800#discussion_r177461890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177461890"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I had the impression it was possible to specify the type even for the \"deprecated\" enum.",
      "commit_id" : "0fee2b4180815628bd9be03bbb0217e3f8515b57",
      "created_at" : "2018-03-27T15:10:55Z",
      "diff_hunk" : "@@ -39,6 +39,7 @@ code.\n   - `++i` is preferred over `i++`.\n   - `nullptr` is preferred over `NULL` or `(void*)0`.\n   - `static_assert` is preferred over `assert` where possible. Generally; compile-time checking is preferred over run-time checking.\n+  - `enum class` is preferred over `enum` where possible. Scoped enumerations avoid three potential pitfalls/problems with traditional C++ enumerations: 1.) implicit conversions to int, 2.) name clashes due to enumerators being exported to the surrounding scope, and 3.) inability to specify the underlying type of the enum.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12800#discussion_r177461890",
      "id" : 177461890,
      "original_commit_id" : "5cb262bf8589513e327b591d10bb2f736b036833",
      "original_position" : 4,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 107335820,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12800",
      "updated_at" : "2018-03-27T15:18:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177461890",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12800#discussion_r177464309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12800"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177464309"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke Ah, you're right. Forward declaration of `enum`:s was fixed in C++11. Will update!",
      "commit_id" : "0fee2b4180815628bd9be03bbb0217e3f8515b57",
      "created_at" : "2018-03-27T15:17:13Z",
      "diff_hunk" : "@@ -39,6 +39,7 @@ code.\n   - `++i` is preferred over `i++`.\n   - `nullptr` is preferred over `NULL` or `(void*)0`.\n   - `static_assert` is preferred over `assert` where possible. Generally; compile-time checking is preferred over run-time checking.\n+  - `enum class` is preferred over `enum` where possible. Scoped enumerations avoid three potential pitfalls/problems with traditional C++ enumerations: 1.) implicit conversions to int, 2.) name clashes due to enumerators being exported to the surrounding scope, and 3.) inability to specify the underlying type of the enum.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12800#discussion_r177464309",
      "id" : 177464309,
      "in_reply_to_id" : 177461890,
      "original_commit_id" : "5cb262bf8589513e327b591d10bb2f736b036833",
      "original_position" : 4,
      "path" : "doc/developer-notes.md",
      "position" : null,
      "pull_request_review_id" : 107338790,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12800",
      "updated_at" : "2018-03-27T15:18:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177464309",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
