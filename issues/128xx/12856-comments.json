[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12856#discussion_r178491923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12856"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178491923"
         }
      },
      "author_association" : "NONE",
      "body" : "As is this is not integrated into your current CI. Still trying to wrap my head around everything so I could be wrong on this but since you are using your own test suite / runner which uses this meta class I don't think there's a great way to integrate into your current workflow. This can be tested directly from the command line as needed",
      "commit_id" : "f68e6b4b3f5f625e0111a334c46e912bf23d7f42",
      "created_at" : "2018-04-02T06:04:04Z",
      "diff_hunk" : "@@ -0,0 +1,80 @@\n+\"\"\"Tests for the base metaclass\n+\n+The tests contained within this module ensure that the base metaclass for\n+tests will raise a ``TypeError`` if either:\n+\n+    - Subclasses try to override either `__init__` or `main` OR\n+    - Subclasses do not override the `run_test` and `set_test_params` methods\n+\n+The metaclass should allow classes adhering to the above standards to be\n+created.\n+\"\"\"\n+import unittest\n+\n+from base import BitcoinTestMetaClass\n+\n+\n+class TestMetaClass(unittest.TestCase):\n+\n+    def test_allows_valid_class(self):\n+        class Foo(metaclass=BitcoinTestMetaClass):\n+            def run_test(self):\n+                pass\n+\n+            def set_test_params(self):\n+                pass\n+\n+    def test_raises_for_init(self):\n+        msg = (\"BitcoinTestFramework subclasses may not override \"\n+               \"'__init__' or 'main'\")\n+\n+        with self.assertRaises(TypeError, msg=msg):\n+            class Foo(metaclass=BitcoinTestMetaClass):\n+                def __init__(self):\n+                    pass\n+\n+                def run_test(self):\n+                    pass\n+\n+                def set_test_params(self):\n+                    pass\n+\n+    def test_raises_for_main(self):\n+        msg = (\"BitcoinTestFramework subclasses may not override \"\n+               \"'__init__' or 'main'\")\n+\n+        with self.assertRaises(TypeError, msg=msg):\n+            class Foo(metaclass=BitcoinTestMetaClass):\n+                def main(self):\n+                    pass\n+\n+                def run_test(self):\n+                    pass\n+\n+                def set_test_params(self):\n+                    pass\n+\n+    def test_raises_if_no_run_test(self):\n+        msg = (\"BitcoinTestFramework subclasses must override \"\n+               \"'run_test' and 'set_test_params'\")\n+\n+        with self.assertRaises(TypeError, msg=msg):\n+            class Foo(metaclass=BitcoinTestMetaClass):\n+                def set_test_params(self):\n+                    pass\n+\n+    def test_raises_if_no_set_test_params(self):\n+        msg = (\"BitcoinTestFramework subclasses must override \"\n+               \"'run_test' and 'set_test_params'\")\n+\n+        with self.assertRaises(TypeError, msg=msg):\n+            class Foo(metaclass=BitcoinTestMetaClass):\n+                def run_test(self):\n+                    pass\n+\n+    def test_exempts_framework_class(self):\n+        class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):\n+            pass\n+\n+if __name__ == '__main__':\n+    unittest.main()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12856#discussion_r178491923",
      "id" : 178491923,
      "original_commit_id" : "f68e6b4b3f5f625e0111a334c46e912bf23d7f42",
      "original_position" : 80,
      "path" : "test/functional/test_framework/test_base.py",
      "position" : 80,
      "pull_request_review_id" : 108554221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12856",
      "updated_at" : "2018-04-02T06:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178491923",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/609873?v=4",
         "events_url" : "https://api.github.com/users/WillAyd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/WillAyd/followers",
         "following_url" : "https://api.github.com/users/WillAyd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/WillAyd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/WillAyd",
         "id" : 609873,
         "login" : "WillAyd",
         "organizations_url" : "https://api.github.com/users/WillAyd/orgs",
         "received_events_url" : "https://api.github.com/users/WillAyd/received_events",
         "repos_url" : "https://api.github.com/users/WillAyd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/WillAyd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/WillAyd"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12856#discussion_r178491989"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12856"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178491989"
         }
      },
      "author_association" : "NONE",
      "body" : "To more strictly enforce this protocol I had to add this here, even though it just calls the superclass implementation anyway. I figured this is cleaner than making an exception in the metaclass",
      "commit_id" : "f68e6b4b3f5f625e0111a334c46e912bf23d7f42",
      "created_at" : "2018-04-02T06:04:59Z",
      "diff_hunk" : "@@ -444,6 +445,9 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n+    def run_test(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12856#discussion_r178491989",
      "id" : 178491989,
      "original_commit_id" : "f68e6b4b3f5f625e0111a334c46e912bf23d7f42",
      "original_position" : 21,
      "path" : "test/functional/test_framework/test_framework.py",
      "position" : 21,
      "pull_request_review_id" : 108554297,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12856",
      "updated_at" : "2018-04-02T06:04:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/178491989",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/609873?v=4",
         "events_url" : "https://api.github.com/users/WillAyd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/WillAyd/followers",
         "following_url" : "https://api.github.com/users/WillAyd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/WillAyd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/WillAyd",
         "id" : 609873,
         "login" : "WillAyd",
         "organizations_url" : "https://api.github.com/users/WillAyd/orgs",
         "received_events_url" : "https://api.github.com/users/WillAyd/received_events",
         "repos_url" : "https://api.github.com/users/WillAyd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/WillAyd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/WillAyd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/WillAyd"
      }
   }
]
