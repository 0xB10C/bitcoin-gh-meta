[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179046912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179046912"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops, these probably should be merged back into the previous check\r\n",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T07:22:37Z",
      "diff_hunk" : "@@ -265,6 +270,106 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n }\n \n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+    BOOST_CHECK(1\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" ); // 1st value takes precedence\n+    BOOST_CHECK(1\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" ); // 1st value takes precedence\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179046912",
      "id" : 179046912,
      "original_commit_id" : "0068900bf239993de7f4c124f53beaf28366294b",
      "original_position" : 72,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 109214721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T07:48:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179046912",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179157828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179157828"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment is wrong (since 55a89751faaada5598771d10401030e9e86eecbd when `MAX_NETWORK_TYPES` was removed). May as well remove it now that you're moving the function.",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T14:22:26Z",
      "diff_hunk" : "@@ -305,6 +307,12 @@ class ArgsManager\n     // been set. Also called directly in testing.\n     void ForceSetArg(const std::string& strArg, const std::string& strValue);\n \n+    /**\n+     * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+     * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179157828",
      "id" : 179157828,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 15,
      "path" : "src/util.h",
      "position" : 15,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179157828",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179163873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179163873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "remove comment?",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T14:37:01Z",
      "diff_hunk" : "@@ -735,35 +735,56 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& stream)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    // assert(streamConfig.good());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179163873",
      "id" : 179163873,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 10,
      "path" : "src/util.cpp",
      "position" : 10,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179163873",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166079"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't understand this comment. Can you make it more explicit about what you mean, or remove?",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T14:42:10Z",
      "diff_hunk" : "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166079",
      "id" : 179166079,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 76,
      "path" : "src/test/util_tests.cpp",
      "position" : 76,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "and `h` and `i`?",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T14:43:44Z",
      "diff_hunk" : "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166647",
      "id" : 179166647,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 84,
      "path" : "src/test/util_tests.cpp",
      "position" : 84,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166647",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179170959"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179170959"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this is clearer in C++11:\r\n\r\n`    for (auto def : { false, true }) {`",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T14:55:25Z",
      "diff_hunk" : "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179170959",
      "id" : 179170959,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 121,
      "path" : "src/test/util_tests.cpp",
      "position" : 121,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179170959",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173614"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why no: `    BOOST_CHECK(test_args.GetArgs(\"-ggg\").size() == 1);` ?",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T15:02:16Z",
      "diff_hunk" : "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {\n+        bool def = (i > 0);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n+                     && test_args.GetBoolArg(\"-b\", def)\n+                     && !test_args.GetBoolArg(\"-ccc\", def)\n+                     && !test_args.GetBoolArg(\"-d\", def)\n+                     && !test_args.GetBoolArg(\"-fff\", def)\n+                     && test_args.GetBoolArg(\"-ggg\", def)\n+                     && test_args.GetBoolArg(\"-h\", def)\n+                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && test_args.GetBoolArg(\"-zzz\", def) == def\n+                   );\n+    }\n+\n+    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n+                && test_args.GetArgs(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n+                && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n+                && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n+                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173614",
      "id" : 179173614,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 143,
      "path" : "src/test/util_tests.cpp",
      "position" : 143,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173614",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> IsArgNegated==true when noggg=0\r\n\r\nyuck. Can we change that?",
      "commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "created_at" : "2018-04-04T15:03:10Z",
      "diff_hunk" : "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {\n+        bool def = (i > 0);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n+                     && test_args.GetBoolArg(\"-b\", def)\n+                     && !test_args.GetBoolArg(\"-ccc\", def)\n+                     && !test_args.GetBoolArg(\"-d\", def)\n+                     && !test_args.GetBoolArg(\"-fff\", def)\n+                     && test_args.GetBoolArg(\"-ggg\", def)\n+                     && test_args.GetBoolArg(\"-h\", def)\n+                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && test_args.GetBoolArg(\"-zzz\", def) == def\n+                   );\n+    }\n+\n+    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n+                && test_args.GetArgs(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n+                && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n+                && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n+                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2\n+                && test_args.GetArgs(\"-h\").front() == \"1\"\n+                && test_args.GetArgs(\"-h\").back() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 2\n+                && test_args.GetArgs(\"-i\").front() == \"0\"\n+                && test_args.GetArgs(\"-i\").back() == \"1\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-ccc\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-d\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-fff\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-ggg\")); // IsArgNegated==true when noggg=0",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173942",
      "id" : 179173942,
      "original_commit_id" : "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
      "original_position" : 158,
      "path" : "src/test/util_tests.cpp",
      "position" : 158,
      "pull_request_review_id" : 109348348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
      "updated_at" : "2018-04-04T15:07:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173942",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
