[
   {
      "author_association" : "MEMBER",
      "body" : "This is #7729 with the following changes:\r\n\r\n- rebased on master\r\n- don't mark `getaddressinfo` as deprecated (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177767690)\r\n- used `address` instead of `bitcoinaddress` as the argument for several RPC methods (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177768880)\r\n- remove destdata from RPC return objects (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177769646)\r\n- remove the `getlabel` RPC method, now that we have `getaddressinfo` (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177770329)\r\n- sort labels before returning in `listlabels` RPC (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177771425)\r\n- add an optional `force` bool argument to `getlabeladdress`, defaulting to False. When set to false, `getlabeladdress` will fail with an error if called on a label that doesn't exist. When set to true `getlabeladdress` will create a new label and new label address if called on a label that doesn't exist. I originally wanted to always throw an error if the label didn't exist (https://github.com/bitcoin/bitcoin/pull/7729/files/fef41789e8d7293ccfd859bc90fa0a3b2484752d#diff-df7d84ff2f53fcb2a0dc15a3a51e55ce), but apparently some miners depend on being able to create labels/accounts this way (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036)\r\n- `getaddressesbylabel` throws an error if called for a label that doesn't exist (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177776131)\r\n- fixup python tests to work with slightly modified RPCs\r\n\r\n@laanwj doesn't have time to maintain #7729. I'd like to try to get this merged before v0.17.",
      "created_at" : "2018-04-05T17:34:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379016369",
      "id" : 379016369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T17:43:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379016369",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For full history of this PR, see #7729. Requesting review from reviewers of that PR: @Sjors , @MarcoFalke , @ryanofsky , @jonasschnelli , @instagibbs , @sipa , @luke-jr .\r\n",
      "created_at" : "2018-04-05T17:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379016903",
      "id" : 379016903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T17:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379016903",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unrelated change.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T17:39:55Z",
      "diff_hunk" : "@@ -294,10 +314,10 @@ UniValue setlabel(const JSONRPCRequest& request)\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544127",
      "id" : 179544127,
      "original_commit_id" : "a8d607dda88526519ce0d49c30fa4732db9d77d2",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109808648,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "reverted",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T17:41:42Z",
      "diff_hunk" : "@@ -294,10 +314,10 @@ UniValue setlabel(const JSONRPCRequest& request)\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544644",
      "id" : 179544644,
      "in_reply_to_id" : 179544127,
      "original_commit_id" : "a8d607dda88526519ce0d49c30fa4732db9d77d2",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109809269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544644",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179550228"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this call gets even weirder, shouldn't we deprecate it in this PR?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T18:00:10Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228",
      "id" : 179550228,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109816045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179550228",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179586165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179586165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Aparently some miners require this functionality (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036).\r\n\r\nI'd personally prefer to deprecate/remove this RPC method, but in the interest of making progress on this, let's maintain the current functionality and reconsider deprecation later.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:09:28Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179586165",
      "id" : 179586165,
      "in_reply_to_id" : 179550228,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109859344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179586165",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179595395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179595395"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `cs_main`?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:45:36Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179595395",
      "id" : 179595395,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 168,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179595395",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Future improvements:\r\n  - move this to wallet function?\r\n  - index address by label with a multi map?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:49:18Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596357",
      "id" : 179596357,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 174,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596357",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could push to `ret` and avoid `addresses`?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:50:29Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596659",
      "id" : 179596659,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 176,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `cs_main`?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:51:05Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596812",
      "id" : 179596812,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 220,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596812",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`!params[0].isNull()`",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:51:45Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596968",
      "id" : 179596968,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 223,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596968",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179597144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179597144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, space before `{`.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:52:20Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179597144",
      "id" : 179597144,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179597144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Already sorted?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:56:39Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598325",
      "id" : 179598325,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 236,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598325",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit space after `&`.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T20:58:41Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : label_list) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598904",
      "id" : 179598904,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 238,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179605981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179605981"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, move to `CWallet::DeleteLabel(const std::string& label)`? Or make it `static` for now?",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T21:27:09Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179605981",
      "id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179605981",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `( force )`.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T21:28:06Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606230",
      "id" : 179606230,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 19,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606230",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606340"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `< 1`.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T21:28:32Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606340",
      "id" : 179606340,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 17,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606340",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606516"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, add `{}`.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T21:29:13Z",
      "diff_hunk" : "@@ -224,6 +230,20 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = false;\n+    if (!request.params[1].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606516",
      "id" : 179606516,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 37,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606516",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @promag . Will address comments tomorrow.",
      "created_at" : "2018-04-05T21:36:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379084425",
      "id" : 379084425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T21:36:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379084425",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179629187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179629187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, if left unchanged this would be the only direct `CWalletDB` call from rpcwallet. Seems as though it should go through `CWallet`",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-05T23:39:49Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179629187",
      "id" : 179629187,
      "in_reply_to_id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109911554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179629187",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179796359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179796359"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems odd to me that `label` is marked as a required argument for `setlabel` but if it's not provided then we default to an empty string instead of throwing an error. If we want to keep the behavior then `label` should be marked as optional.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T15:36:58Z",
      "diff_hunk" : "@@ -308,22 +328,24 @@ UniValue setlabel(const JSONRPCRequest& request)\n     }\n \n     std::string label;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179796359",
      "id" : 179796359,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 67,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110110892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179796359",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179802956"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179802956"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:00:01Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179802956",
      "id" : 179802956,
      "in_reply_to_id" : 179595395,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 168,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110118893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179802956",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179803063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179803063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:00:20Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179803063",
      "id" : 179803063,
      "in_reply_to_id" : 179596812,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 220,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110119005,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179803063",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809220"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809220"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes, done.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:25:56Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809220",
      "id" : 179809220,
      "in_reply_to_id" : 179596659,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 176,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110126650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809220",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:27:42Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809653",
      "id" : 179809653,
      "in_reply_to_id" : 179596968,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 223,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110127174,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809880"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809880"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:28:36Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179809880",
      "id" : 179809880,
      "in_reply_to_id" : 179597144,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110127429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179809880",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810654"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, you're right. I've removed `label_list`",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:31:50Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810654",
      "id" : 179810654,
      "in_reply_to_id" : 179598325,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 236,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110128383,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810654",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810711"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810711"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:32:06Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : label_list) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179810711",
      "id" : 179810711,
      "in_reply_to_id" : 179598904,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 238,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110128468,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179810711",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812404"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812404"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moved into `CWallet`",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:39:06Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812404",
      "id" : 179812404,
      "in_reply_to_id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110130447,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812404",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812653"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:40:07Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179812653",
      "id" : 179812653,
      "in_reply_to_id" : 179606230,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 19,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110130759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179812653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179814333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179814333"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated the behaviour to match the help text: the rpc call will fail if no label is provided.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:46:08Z",
      "diff_hunk" : "@@ -308,22 +328,24 @@ UniValue setlabel(const JSONRPCRequest& request)\n     }\n \n     std::string label;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179814333",
      "id" : 179814333,
      "in_reply_to_id" : 179796359,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 67,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110132694,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179814333",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815039"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:49:12Z",
      "diff_hunk" : "@@ -224,6 +230,20 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = false;\n+    if (!request.params[1].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815039",
      "id" : 179815039,
      "in_reply_to_id" : 179606516,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 37,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110133596,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815039",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815534"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815534"
         }
      },
      "author_association" : "MEMBER",
      "body" : "fixed",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:51:37Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815534",
      "id" : 179815534,
      "in_reply_to_id" : 179606340,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 17,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110134251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815534",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'll leave this functionality here for now. Can be refactored later if required.",
      "commit_id" : "cec0de87233622c95a4b77ee9d0a95e7b4cabbfe",
      "created_at" : "2018-04-06T16:52:02Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179815634",
      "id" : 179815634,
      "in_reply_to_id" : 179596357,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 174,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 110134371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-06T16:53:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179815634",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Addressed review comments from @promag and @PierreRochard . Are you able to re-review?",
      "created_at" : "2018-04-06T16:54:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379312744",
      "id" : 379312744,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-06T16:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379312744",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, re-reviewing now",
      "created_at" : "2018-04-06T18:33:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379339376",
      "id" : 379339376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-06T18:33:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379339376",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "A behavior difference between the old `getaccountaddress` and the new aliased `getlabeladdress` is causing the `wallet_basic.py` to fail. I was able to fix it by adding `force` to the test, but I think it's the endpoint that should be changed if the goal is to not break the API with the aliasing.\r\n\r\n`rpc_listtransactions.py` and `wallet_listreceivedby.py` are also failing, it may be due to the same root cause but I won't be able to confirm until tomorrow.",
      "created_at" : "2018-04-06T21:47:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379392774",
      "id" : 379392774,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-06T21:47:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379392774",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixing `wallet_basic.py` and `rpc_listtransactions.py`: If we want to continue supporting the behavior of the aliased `getaccountaddress`, `force` should default to `true` when that call is made, so something like `bool force = request.strMethod == \"getaccountaddress\" ? true : false;`\r\n\r\nFixing `wallet_listreceivedby.py`: line 143 should read `self.nodes[1].getlabeladdress(label=\"mynewlabel\", force=True)`\r\n\r\n",
      "created_at" : "2018-04-07T09:21:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379456090",
      "id" : 379456090,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-07T09:21:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379456090",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the fixes @PierreRochard! I've updated the tests as you suggested and force pushed.",
      "created_at" : "2018-04-07T16:43:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379482863",
      "id" : 379482863,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-07T16:43:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379482863",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested ACK 1f7f1dfd1c16cf0c9a700e2b262ffa8f6c6559cd",
      "created_at" : "2018-04-07T19:06:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379491909",
      "id" : 379491909,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-07T19:06:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379491909",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "I'm still not convinced we really need `getlabeladdress` in the first place, but anyhow.\r\nutACK https://github.com/bitcoin/bitcoin/pull/12892/commits/1f7f1dfd1c16cf0c9a700e2b262ffa8f6c6559cd",
      "created_at" : "2018-04-09T02:40:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379611854",
      "id" : 379611854,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T02:40:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379611854",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs rebase",
      "created_at" : "2018-04-09T18:24:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379847574",
      "id" : 379847574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T18:24:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379847574",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased.\r\n\r\n> I'm still not convinced we really need getlabeladdress\r\n\r\nok, that's three concept NACKs for `getlabeladdress` (me, @jonasschnelli https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228 and @laanwj https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379611854).\r\n\r\nI kept this call because there was a comment in the previous PR (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036) that this functionality was important for some miners and I wanted to avoid controversy to get this PR merged. However, if there's overwhelming opposition to `getlabeladdress`, it makes sense to remove it. `getlabeladdress` doesn't make much sense to me, and blurs the distinction that \"labels are associated with addresses, instead of addresses associated with labels\".\r\n\r\nOther reviewers of this and the previous PR (@promag, @PierreRochard, @Sjors, @MarcoFalke , @ryanofsky , @instagibbs , @sipa , @luke-jr) - please can you provide concept input into whether we should just remove `getlabeladdress`?",
      "created_at" : "2018-04-09T19:22:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379864444",
      "id" : 379864444,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T19:22:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379864444",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery I agree that `getlabeladdress` should be removed, it has too much overlap with `getnewaddress` and miner-specific use cases are likely best implemented in the mining software (this suggestion seems reasonable: https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206938418)",
      "created_at" : "2018-04-09T19:58:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379874953",
      "id" : 379874953,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T19:58:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379874953",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Other reviewers of this and the previous PR (@promag, @PierreRochard, @Sjors, @MarcoFalke , @ryanofsky , @instagibbs , @sipa , @luke-jr) - please can you provide concept input into whether we should just remove getlabeladdress?\r\n\r\nI think it would be better to keep this PR as focused as possible. The goal should just be to fill in the last missing bits of the label implementation, so it is easy to switch from accounts to labels and we can get rid of broken \"account balance\" code and code that tries to track what account a transaction is sent from. I don't think it makes sense to introduce additional differences between accounts and labels that will make migration more difficult than necessary.\r\n\r\nThe main problem I see with `getlabeladdress` is just the documentation which is completely self-referential:\r\n\r\n> Returns the current 'label address' for this label.\r\n\r\nInstead of explanatory like:\r\n\r\n> Returns the default receiving address for this label. This will reset to a fresh address once there's a transaction that spends to it.\r\n\r\nMaybe there are other problems with `getlabeladdress`, but I can't see where they have been mentioned.\r\n\r\nAlso, I think this PR needs release notes. Good documentation is probably the most important part of this change.",
      "created_at" : "2018-04-09T20:02:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379876303",
      "id" : 379876303,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T20:03:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379876303",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think it makes sense to introduce additional differences between accounts and labels that will make migration more difficult than necessary.\r\n\r\nok, I can see the merit in that. Let's keep this PR focused and we can squabble over removing `getlabeladdress` later.\r\n\r\nI've updated the help text for `getlabeladdress` and added release notes.\r\n\r\nRe-review would be very much appreciated at this point :smiley: ",
      "created_at" : "2018-04-09T21:25:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379898889",
      "id" : 379898889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-09T21:25:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379898889",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "My intent was not for the `getlabeladdress` discussion to block this PR. We need to make a decision about it before the 0.17 release, not necessarily now.\r\n\r\n> getlabeladdress doesn't make much sense to me, and blurs the distinction that \"labels are associated with addresses, instead of addresses associated with labels\".\r\n\r\nAnother problem with it is that it requires keeping this whole `CAccount` administration in place. Part of the reason for this account to label refactor is simplify the wallet mess and to get rid of that.\r\n\r\nWill re-review.",
      "created_at" : "2018-04-10T08:46:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-380023219",
      "id" : 380023219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-10T08:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/380023219",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
