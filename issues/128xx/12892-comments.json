[
   {
      "author_association" : "MEMBER",
      "body" : "This is #7729 with the following changes:\r\n\r\n- rebased on master\r\n- don't mark `getaddressinfo` as deprecated (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177767690)\r\n- used `address` instead of `bitcoinaddress` as the argument for several RPC methods (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177768880)\r\n- remove destdata from RPC return objects (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177769646)\r\n- remove the `getlabel` RPC method, now that we have `getaddressinfo` (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177770329)\r\n- sort labels before returning in `listlabels` RPC (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177771425)\r\n- add an optional `force` bool argument to `getlabeladdress`, defaulting to False. When set to false, `getlabeladdress` will fail with an error if called on a label that doesn't exist. When set to true `getlabeladdress` will create a new label and new label address if called on a label that doesn't exist. I originally wanted to always throw an error if the label didn't exist (https://github.com/bitcoin/bitcoin/pull/7729/files/fef41789e8d7293ccfd859bc90fa0a3b2484752d#diff-df7d84ff2f53fcb2a0dc15a3a51e55ce), but apparently some miners depend on being able to create labels/accounts this way (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036)\r\n- `getaddressesbylabel` throws an error if called for a label that doesn't exist (https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177776131)\r\n- fixup python tests to work with slightly modified RPCs\r\n\r\n@laanwj doesn't have time to maintain #7729. I'd like to try to get this merged before v0.17.",
      "created_at" : "2018-04-05T17:34:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379016369",
      "id" : 379016369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T17:43:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379016369",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "For full history of this PR, see #7729. Requesting review from reviewers of that PR: @Sjors , @MarcoFalke , @ryanofsky , @jonasschnelli , @instagibbs , @sipa , @luke-jr .\r\n",
      "created_at" : "2018-04-05T17:36:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379016903",
      "id" : 379016903,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T17:36:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379016903",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unrelated change.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T17:39:55Z",
      "diff_hunk" : "@@ -294,10 +314,10 @@ UniValue setlabel(const JSONRPCRequest& request)\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544127",
      "id" : 179544127,
      "original_commit_id" : "a8d607dda88526519ce0d49c30fa4732db9d77d2",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109808648,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T17:41:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544644"
         }
      },
      "author_association" : "MEMBER",
      "body" : "reverted",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T17:41:42Z",
      "diff_hunk" : "@@ -294,10 +314,10 @@ UniValue setlabel(const JSONRPCRequest& request)\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179544644",
      "id" : 179544644,
      "in_reply_to_id" : 179544127,
      "original_commit_id" : "a8d607dda88526519ce0d49c30fa4732db9d77d2",
      "original_position" : 63,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 109809269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T17:41:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179544644",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179550228"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since this call gets even weirder, shouldn't we deprecate it in this PR?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T18:00:10Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179550228",
      "id" : 179550228,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 21,
      "pull_request_review_id" : 109816045,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T18:00:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179550228",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179586165"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179586165"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Aparently some miners require this functionality (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036).\r\n\r\nI'd personally prefer to deprecate/remove this RPC method, but in the interest of making progress on this, let's maintain the current functionality and reconsider deprecation later.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:09:28Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179586165",
      "id" : 179586165,
      "in_reply_to_id" : 179550228,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 21,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 21,
      "pull_request_review_id" : 109859344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T20:09:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179586165",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179595395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179595395"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `cs_main`?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:45:36Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179595395",
      "id" : 179595395,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 168,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 168,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179595395",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596357"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Future improvements:\r\n  - move this to wallet function?\r\n  - index address by label with a multi map?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:49:18Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596357",
      "id" : 179596357,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 174,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 174,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596357",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could push to `ret` and avoid `addresses`?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:50:29Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596659",
      "id" : 179596659,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 176,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 176,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596659",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Remove `cs_main`?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:51:05Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596812",
      "id" : 179596812,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 220,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 220,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596812",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`!params[0].isNull()`",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:51:45Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179596968",
      "id" : 179596968,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 223,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 223,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179596968",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179597144"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179597144"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, space before `{`.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:52:20Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179597144",
      "id" : 179597144,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 229,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 229,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179597144",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Already sorted?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:56:39Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598325",
      "id" : 179598325,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 236,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 236,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598325",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598904"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598904"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit space after `&`.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T20:58:41Z",
      "diff_hunk" : "@@ -3809,6 +3849,118 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n         }\n     }\n+\n+    // Currently only one label can be associated with an address, return an array\n+    // so the API remains stable if we allow multiple labels to be associated with\n+    // an address.\n+    UniValue labels(UniValue::VARR);\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+    }\n+    ret.pushKV(\"labels\", std::move(labels));\n+\n+    return ret;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"address\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string label = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    std::vector<std::pair<std::string, UniValue>> addresses;\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == label) {\n+            addresses.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+\n+    if (addresses.empty()) {\n+        throw JSONRPCError(RPC_WALLET_INVALID_LABEL_NAME, std::string(\"No addresses with label \" + label));\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    for (auto address : addresses) {\n+        ret.push_back(address);\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> label_set;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            label_set.insert(entry.second.name);\n+        }\n+    }\n+\n+    // Move label names to a list and sort before returning\n+    std::list<std::string> label_list(label_set.begin(), label_set.end());\n+    label_list.sort();\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : label_list) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179598904",
      "id" : 179598904,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 238,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 238,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179598904",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179605981"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179605981"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, move to `CWallet::DeleteLabel(const std::string& label)`? Or make it `static` for now?",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T21:27:09Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179605981",
      "id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 4,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179605981",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `( force )`.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T21:28:06Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606230",
      "id" : 179606230,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 19,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 19,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606230",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606340"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `< 1`.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T21:28:32Z",
      "diff_hunk" : "@@ -205,14 +210,15 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606340",
      "id" : 179606340,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 17,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 17,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606340",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606516"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606516"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit, add `{}`.",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T21:29:13Z",
      "diff_hunk" : "@@ -224,6 +230,20 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n \n     // Parse the label first so we don't generate a key if there's an error\n     std::string label = LabelFromValue(request.params[0]);\n+    bool force = false;\n+    if (!request.params[1].isNull())",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179606516",
      "id" : 179606516,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 37,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 37,
      "pull_request_review_id" : 109870972,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T21:31:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179606516",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the review @promag . Will address comments tomorrow.",
      "created_at" : "2018-04-05T21:36:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#issuecomment-379084425",
      "id" : 379084425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12892",
      "updated_at" : "2018-04-05T21:36:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379084425",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179629187"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179629187"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, if left unchanged this would be the only direct `CWalletDB` call from rpcwallet. Seems as though it should go through `CWallet`",
      "commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "created_at" : "2018-04-05T23:39:49Z",
      "diff_hunk" : "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12892#discussion_r179629187",
      "id" : 179629187,
      "in_reply_to_id" : 179605981,
      "original_commit_id" : "c733a983bc34f604bcac1dba4d69df62f17199ab",
      "original_position" : 4,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 4,
      "pull_request_review_id" : 109911554,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12892",
      "updated_at" : "2018-04-05T23:40:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179629187",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/6299681?v=4",
         "events_url" : "https://api.github.com/users/PierreRochard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/PierreRochard/followers",
         "following_url" : "https://api.github.com/users/PierreRochard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/PierreRochard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/PierreRochard",
         "id" : 6299681,
         "login" : "PierreRochard",
         "organizations_url" : "https://api.github.com/users/PierreRochard/orgs",
         "received_events_url" : "https://api.github.com/users/PierreRochard/received_events",
         "repos_url" : "https://api.github.com/users/PierreRochard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/PierreRochard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/PierreRochard"
      }
   }
]
