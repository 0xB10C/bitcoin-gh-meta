[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100259230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100259230"
         }
      },
      "body" : "`>=`?",
      "commit_id" : "c07019415a9ffdcc1409ee360cca2e3b51e6326c",
      "created_at" : "2017-02-09T09:15:43Z",
      "diff_hunk" : "@@ -59,6 +63,10 @@ class CHDChain\n         READWRITE(this->nVersion);\n         READWRITE(nExternalChainCounter);\n         READWRITE(masterKeyID);\n+        if (this->nVersion <= SUPPORT_WATCHONLY_VERSION) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100259230",
      "id" : 100259230,
      "original_commit_id" : "4bca1ceca05e8bdcd5a3c60451ddff89a3741d2a",
      "original_position" : 18,
      "path" : "src/wallet/walletdb.h",
      "position" : null,
      "pull_request_review_id" : 20958705,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728",
      "updated_at" : "2017-02-09T15:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100259230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100259436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100259436"
         }
      },
      "body" : "`s/AddKey/AddWatchOnly/`",
      "commit_id" : "c07019415a9ffdcc1409ee360cca2e3b51e6326c",
      "created_at" : "2017-02-09T09:16:36Z",
      "diff_hunk" : "@@ -93,72 +94,116 @@ CPubKey CWallet::GenerateNewKey()\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n-\n+    CPubKey pubkey;\n+    bool hasSecret = true;\n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret);\n+        hasSecret = DeriveNewChildKey(metadata, secret, pubkey);\n     } else {\n         secret.MakeNewKey(fCompressed);\n+        pubkey = secret.GetPubKey();\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed)\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n \n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n+    if (hasSecret)\n+    {\n+        assert(secret.VerifyPubKey(pubkey));\n+    }\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n \n-    if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    if(hasSecret) {\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    else {\n+        if (!AddWatchOnly(GetScriptForDestination(pubkey.GetID())))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100259436",
      "id" : 100259436,
      "original_commit_id" : "4bca1ceca05e8bdcd5a3c60451ddff89a3741d2a",
      "original_position" : 51,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 20958918,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728",
      "updated_at" : "2017-02-09T15:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100259436",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100259868"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100259868"
         }
      },
      "body" : "I think returning false in case of `isWatchOnly` is confusing.\r\nIMO better set the `hasSecret` boolean with another check of `hdChain.isWatchOnly`.",
      "commit_id" : "c07019415a9ffdcc1409ee360cca2e3b51e6326c",
      "created_at" : "2017-02-09T09:18:59Z",
      "diff_hunk" : "@@ -93,72 +94,116 @@ CPubKey CWallet::GenerateNewKey()\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n-\n+    CPubKey pubkey;\n+    bool hasSecret = true;\n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret);\n+        hasSecret = DeriveNewChildKey(metadata, secret, pubkey);\n     } else {\n         secret.MakeNewKey(fCompressed);\n+        pubkey = secret.GetPubKey();\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed)\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n \n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n+    if (hasSecret)\n+    {\n+        assert(secret.VerifyPubKey(pubkey));\n+    }\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n \n-    if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    if(hasSecret) {\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    else {\n+        if (!AddWatchOnly(GetScriptForDestination(pubkey.GetID())))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n     return pubkey;\n }\n \n void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret)\n {\n+    CPubKey pubKey;\n+    if(!DeriveNewChildKey(metadata, secret, pubKey))\n+        throw std::runtime_error(std::string(__func__) + \": Private key not available for this wallet\");\n+}\n+\n+bool CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, CPubKey& pubKey)\n+{\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)\n-    CExtKey masterKey;             //hd master key\n-    CExtKey accountKey;            //key at m/0'\n-    CExtKey externalChainChildKey; //key at m/0'/0'\n-    CExtKey childKey;              //key at m/0'/0'/<n>'\n-\n-    // try to get the master key\n-    if (!GetKey(hdChain.masterKeyID, key))\n+    if (GetKey(hdChain.masterKeyID, key)) {\n+        CExtKey masterKey;             //hd master key\n+        CExtKey accountKey;            //key at m/0'\n+        CExtKey externalChainChildKey; //key at m/0'/0'\n+        CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+        masterKey.SetMaster(key.begin(), key.size());\n+\n+        // derive m/0'\n+        // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+        masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive m/0'/0'\n+        accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            // always derive hardened keys\n+            // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+            // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+            // increment childkey index\n+            hdChain.nExternalChainCounter++;\n+        } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+        secret = childKey.key;\n+        pubKey = childKey.key.GetPubKey();\n+        // update the chain model in the database\n+        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+        return true;\n+    }\n+    else if (hdChain.isWatchOnly) {\n+        CExtPubKey& masterKey = hdChain.masterPubKey;             //hd master key\n+        CExtPubKey accountKey;            //key at m/0\n+        CExtPubKey externalChainChildKey; //key at m/0/0\n+        CExtPubKey childKey;              //key at m/0/0/<n>\n+\n+        // derive m/0\n+        masterKey.Derive(accountKey, BIP32_NONHARDENED_KEY_LIMIT);\n+\n+        // derive m/0/0\n+        accountKey.Derive(externalChainChildKey, BIP32_NONHARDENED_KEY_LIMIT);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_NONHARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0/0/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+            // increment childkey index\n+            hdChain.nExternalChainCounter++;\n+        } while (HaveWatchOnly(GetScriptForDestination(childKey.pubkey.GetID())));\n+        pubKey = childKey.pubkey;\n+        // update the chain model in the database\n+        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100259868",
      "id" : 100259868,
      "original_commit_id" : "4bca1ceca05e8bdcd5a3c60451ddff89a3741d2a",
      "original_position" : 131,
      "path" : "src/wallet/wallet.cpp",
      "position" : 131,
      "pull_request_review_id" : 20959354,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728",
      "updated_at" : "2017-02-09T15:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100259868",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "Concept ACK (will review in detail and test soon).\r\nI think this is a great feature!\r\nTogether with #9662 this would allow better HWW/Cold-Storage interaction.",
      "created_at" : "2017-02-09T09:20:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278588257",
      "id" : 278588257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T09:20:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278588257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "> The user create a new wallet by removing the old wallet.dat and running ./bitcoind -hdwatchonly=[ExtPubKey base58].\r\n\r\nInstead of removing the wallet, it would also be possible to specify an alternative one with `-wallet`, I guess?",
      "created_at" : "2017-02-09T09:44:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278593539",
      "id" : 278593539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T09:44:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278593539",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100266332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100266332"
         }
      },
      "body" : "I can replace returns bool by void, and make the client responsible to test the validity of the returned Key.\r\n\r\nBut I fear that a new user would assume that DeriveNewKey always returns a valid CKey.",
      "commit_id" : "c07019415a9ffdcc1409ee360cca2e3b51e6326c",
      "created_at" : "2017-02-09T09:45:29Z",
      "diff_hunk" : "@@ -93,72 +94,116 @@ CPubKey CWallet::GenerateNewKey()\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n-\n+    CPubKey pubkey;\n+    bool hasSecret = true;\n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret);\n+        hasSecret = DeriveNewChildKey(metadata, secret, pubkey);\n     } else {\n         secret.MakeNewKey(fCompressed);\n+        pubkey = secret.GetPubKey();\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed)\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n \n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n+    if (hasSecret)\n+    {\n+        assert(secret.VerifyPubKey(pubkey));\n+    }\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n \n-    if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    if(hasSecret) {\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    else {\n+        if (!AddWatchOnly(GetScriptForDestination(pubkey.GetID())))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n     return pubkey;\n }\n \n void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret)\n {\n+    CPubKey pubKey;\n+    if(!DeriveNewChildKey(metadata, secret, pubKey))\n+        throw std::runtime_error(std::string(__func__) + \": Private key not available for this wallet\");\n+}\n+\n+bool CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, CPubKey& pubKey)\n+{\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)\n-    CExtKey masterKey;             //hd master key\n-    CExtKey accountKey;            //key at m/0'\n-    CExtKey externalChainChildKey; //key at m/0'/0'\n-    CExtKey childKey;              //key at m/0'/0'/<n>'\n-\n-    // try to get the master key\n-    if (!GetKey(hdChain.masterKeyID, key))\n+    if (GetKey(hdChain.masterKeyID, key)) {\n+        CExtKey masterKey;             //hd master key\n+        CExtKey accountKey;            //key at m/0'\n+        CExtKey externalChainChildKey; //key at m/0'/0'\n+        CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+        masterKey.SetMaster(key.begin(), key.size());\n+\n+        // derive m/0'\n+        // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+        masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive m/0'/0'\n+        accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            // always derive hardened keys\n+            // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+            // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+            // increment childkey index\n+            hdChain.nExternalChainCounter++;\n+        } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+        secret = childKey.key;\n+        pubKey = childKey.key.GetPubKey();\n+        // update the chain model in the database\n+        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+        return true;\n+    }\n+    else if (hdChain.isWatchOnly) {\n+        CExtPubKey& masterKey = hdChain.masterPubKey;             //hd master key\n+        CExtPubKey accountKey;            //key at m/0\n+        CExtPubKey externalChainChildKey; //key at m/0/0\n+        CExtPubKey childKey;              //key at m/0/0/<n>\n+\n+        // derive m/0\n+        masterKey.Derive(accountKey, BIP32_NONHARDENED_KEY_LIMIT);\n+\n+        // derive m/0/0\n+        accountKey.Derive(externalChainChildKey, BIP32_NONHARDENED_KEY_LIMIT);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_NONHARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0/0/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+            // increment childkey index\n+            hdChain.nExternalChainCounter++;\n+        } while (HaveWatchOnly(GetScriptForDestination(childKey.pubkey.GetID())));\n+        pubKey = childKey.pubkey;\n+        // update the chain model in the database\n+        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100266332",
      "id" : 100266332,
      "original_commit_id" : "4bca1ceca05e8bdcd5a3c60451ddff89a3741d2a",
      "original_position" : 131,
      "path" : "src/wallet/wallet.cpp",
      "position" : 131,
      "pull_request_review_id" : 20965936,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728",
      "updated_at" : "2017-02-09T15:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100266332",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100269433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100269433"
         }
      },
      "body" : "Yes. I once did a PR where we separate the key/pubkey records: https://github.com/bitcoin/bitcoin/pull/9298\r\nI guess this would be the cleaner solution... but maybe later.",
      "commit_id" : "c07019415a9ffdcc1409ee360cca2e3b51e6326c",
      "created_at" : "2017-02-09T09:58:35Z",
      "diff_hunk" : "@@ -93,72 +94,116 @@ CPubKey CWallet::GenerateNewKey()\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n-\n+    CPubKey pubkey;\n+    bool hasSecret = true;\n     // Create new metadata\n     int64_t nCreationTime = GetTime();\n     CKeyMetadata metadata(nCreationTime);\n \n     // use HD key derivation if HD was enabled during wallet creation\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(metadata, secret);\n+        hasSecret = DeriveNewChildKey(metadata, secret, pubkey);\n     } else {\n         secret.MakeNewKey(fCompressed);\n+        pubkey = secret.GetPubKey();\n     }\n \n     // Compressed public keys were introduced in version 0.6.0\n     if (fCompressed)\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n \n-    CPubKey pubkey = secret.GetPubKey();\n-    assert(secret.VerifyPubKey(pubkey));\n+    if (hasSecret)\n+    {\n+        assert(secret.VerifyPubKey(pubkey));\n+    }\n \n     mapKeyMetadata[pubkey.GetID()] = metadata;\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n \n-    if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    if(hasSecret) {\n+        if (!AddKeyPubKey(secret, pubkey))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n+    else {\n+        if (!AddWatchOnly(GetScriptForDestination(pubkey.GetID())))\n+            throw std::runtime_error(std::string(__func__) + \": AddKey failed\");\n+    }\n     return pubkey;\n }\n \n void CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret)\n {\n+    CPubKey pubKey;\n+    if(!DeriveNewChildKey(metadata, secret, pubKey))\n+        throw std::runtime_error(std::string(__func__) + \": Private key not available for this wallet\");\n+}\n+\n+bool CWallet::DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, CPubKey& pubKey)\n+{\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey key;                      //master key seed (256bit)\n-    CExtKey masterKey;             //hd master key\n-    CExtKey accountKey;            //key at m/0'\n-    CExtKey externalChainChildKey; //key at m/0'/0'\n-    CExtKey childKey;              //key at m/0'/0'/<n>'\n-\n-    // try to get the master key\n-    if (!GetKey(hdChain.masterKeyID, key))\n+    if (GetKey(hdChain.masterKeyID, key)) {\n+        CExtKey masterKey;             //hd master key\n+        CExtKey accountKey;            //key at m/0'\n+        CExtKey externalChainChildKey; //key at m/0'/0'\n+        CExtKey childKey;              //key at m/0'/0'/<n>'\n+\n+        masterKey.SetMaster(key.begin(), key.size());\n+\n+        // derive m/0'\n+        // use hardened derivation (child keys >= 0x80000000 are hardened after bip32)\n+        masterKey.Derive(accountKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive m/0'/0'\n+        accountKey.Derive(externalChainChildKey, BIP32_HARDENED_KEY_LIMIT);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            // always derive hardened keys\n+            // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n+            // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n+            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+            // increment childkey index\n+            hdChain.nExternalChainCounter++;\n+        } while (HaveKey(childKey.key.GetPubKey().GetID()));\n+        secret = childKey.key;\n+        pubKey = childKey.key.GetPubKey();\n+        // update the chain model in the database\n+        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+        return true;\n+    }\n+    else if (hdChain.isWatchOnly) {\n+        CExtPubKey& masterKey = hdChain.masterPubKey;             //hd master key\n+        CExtPubKey accountKey;            //key at m/0\n+        CExtPubKey externalChainChildKey; //key at m/0/0\n+        CExtPubKey childKey;              //key at m/0/0/<n>\n+\n+        // derive m/0\n+        masterKey.Derive(accountKey, BIP32_NONHARDENED_KEY_LIMIT);\n+\n+        // derive m/0/0\n+        accountKey.Derive(externalChainChildKey, BIP32_NONHARDENED_KEY_LIMIT);\n+\n+        // derive child key at next index, skip keys already known to the wallet\n+        do {\n+            externalChainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_NONHARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0/0/\" + std::to_string(hdChain.nExternalChainCounter) + \"'\";\n+            metadata.hdMasterKeyID = hdChain.masterKeyID;\n+            // increment childkey index\n+            hdChain.nExternalChainCounter++;\n+        } while (HaveWatchOnly(GetScriptForDestination(childKey.pubkey.GetID())));\n+        pubKey = childKey.pubkey;\n+        // update the chain model in the database\n+        if (!CWalletDB(strWalletFile).WriteHDChain(hdChain))\n+            throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+        return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#discussion_r100269433",
      "id" : 100269433,
      "original_commit_id" : "4bca1ceca05e8bdcd5a3c60451ddff89a3741d2a",
      "original_position" : 131,
      "path" : "src/wallet/wallet.cpp",
      "position" : 131,
      "pull_request_review_id" : 20969169,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9728",
      "updated_at" : "2017-02-09T15:58:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/100269433",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "How does this work, considering that Core is exclusively hardened derivation right now? Or can it only watch non-Core wallets? O.o",
      "created_at" : "2017-02-09T10:11:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278599655",
      "id" : 278599655,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T10:11:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278599655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "> How does this work, considering that Core is exclusively hardened derivation right now? Or can it only watch non-Core wallets? O.o\r\n\r\nFor the hd-watch-only default keypath, we should probably use Bip44.\r\nThis PR makes much more sense if we would have the flexible key path feature https://github.com/bitcoin/bitcoin/pull/8723",
      "created_at" : "2017-02-09T10:24:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278602807",
      "id" : 278602807,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T10:24:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278602807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@luke-jr  for watchonly hd I am using non hardened derivation. goal is to eventually combine with flexible path.\r\n\r\n@laanwj yes. What I mean is that if you specify -hdwatchonly on an already existing wallet, you get an error at startup.",
      "created_at" : "2017-02-09T12:14:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278625008",
      "id" : 278625008,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T12:14:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278625008",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "Travis error not related to this PR.",
      "created_at" : "2017-02-09T13:20:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278638183",
      "id" : 278638183,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T13:20:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278638183",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3020646?v=3",
         "events_url" : "https://api.github.com/users/NicolasDorier/events{/privacy}",
         "followers_url" : "https://api.github.com/users/NicolasDorier/followers",
         "following_url" : "https://api.github.com/users/NicolasDorier/following{/other_user}",
         "gists_url" : "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/NicolasDorier",
         "id" : 3020646,
         "login" : "NicolasDorier",
         "organizations_url" : "https://api.github.com/users/NicolasDorier/orgs",
         "received_events_url" : "https://api.github.com/users/NicolasDorier/received_events",
         "repos_url" : "https://api.github.com/users/NicolasDorier/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/NicolasDorier/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/NicolasDorier"
      }
   },
   {
      "body" : "@NicolasDorier: I think in order to pass travis you need to add `-hdwatchonly` to the check doc script.",
      "created_at" : "2017-02-09T15:07:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9728#issuecomment-278669151",
      "id" : 278669151,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9728",
      "updated_at" : "2017-02-09T15:07:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/278669151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
