[
   {
      "author_association" : "MEMBER",
      "body" : "Is this one of those cases where `std::less` is more? :)",
      "created_at" : "2020-07-11T21:53:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657135963",
      "id" : 657135963,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzEzNTk2Mw==",
      "updated_at" : "2020-07-11T21:53:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657135963",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Ha ha ha ð  \r\n\r\nNo, I don't believe so.  :)  (The iterators in question don't define `operator<` .. one would have to actually examine the underlying `.first` perhaps and do `<` on those...)",
      "created_at" : "2020-07-11T23:36:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657147172",
      "id" : 657147172,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzE0NzE3Mg==",
      "updated_at" : "2020-07-11T23:41:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657147172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266627?v=4",
         "events_url" : "https://api.github.com/users/cculianu/events{/privacy}",
         "followers_url" : "https://api.github.com/users/cculianu/followers",
         "following_url" : "https://api.github.com/users/cculianu/following{/other_user}",
         "gists_url" : "https://api.github.com/users/cculianu/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/cculianu",
         "id" : 266627,
         "login" : "cculianu",
         "node_id" : "MDQ6VXNlcjI2NjYyNw==",
         "organizations_url" : "https://api.github.com/users/cculianu/orgs",
         "received_events_url" : "https://api.github.com/users/cculianu/received_events",
         "repos_url" : "https://api.github.com/users/cculianu/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/cculianu/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/cculianu/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/cculianu"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I am not convinced this is UB.\n\nPointer comparison of objects that are not in the same array (or one past it) is unspecified in C++, not undefined. This means the compiler can choose whatever it likes about the order of the two objects, but it's one or the other, and cannot do anything else.\n\nHowever, there is no guaranteed total ordering on unrelated pointers. This means that while not UB, the code in IteratorComparator may in theory not do what it's intended to do. E.g. a<b and b<a might both be simultaneously true.\n\nI'm not sure if this is what @practicalswift was alluding to, but std::less (and friends) when specialized to any given pointer type *is* a well defined total ordering, even when < etc are not.\n\nSo it seems that to be fully compliant, it is sufficient to replace < with std::less in these sorts of operations.",
      "created_at" : "2020-07-12T16:09:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19496#issuecomment-657242758",
      "id" : 657242758,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19496",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY1NzI0Mjc1OA==",
      "updated_at" : "2020-07-12T16:09:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/657242758",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
