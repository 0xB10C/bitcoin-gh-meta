[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on fixing #17548\r\n\r\nThanks for tackling this issue!",
      "created_at" : "2020-04-15T10:39:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-613961712",
      "id" : 613961712,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxMzk2MTcxMg==",
      "updated_at" : "2020-04-15T17:57:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613961712",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Few thoughts:\r\n\r\n* This changes rpc method signature every every method from `UniValue(const JSONRPCRequest&)` by adding NodeContext parameter, but Marco's #18531 is already changing method signatures a different way. You should work with Marco to come up with signature for rpc methods that doesn't conflict\r\n* This PR doesn't actually get rid of the `g_rpc_node` variable, just a handful of uses. Maybe that is temporary (you could mark this PR a draft), but otherwise title is kind of misleading.\r\n* `NodeContext& rpc_node` arguments should be renamed `NodeContext& node`, RPC prefix is misleading and not doing anything\r\n* `NodeContext* pnode_ctx` followed by `CHECK_NONFATAL(pnode_ctx)` should probably be `NodeContext& node` and not using a pointer. Also current coding convention doesn't prefix pointers variable with p.\r\n* Wallet RPC methods shouldn't have access to NodeContext. At some point we should have WalletContext struct that will hold things like vpwallets and let us get rid of wallet globals, and it would make sense for wallet RPC methods to have access to this. That is why suggestion from #17548 was to just add a new member to JSONRPCRequest that could hold a generic context, not something tied to the wallet or node. Other advantage of using JSONRPCRequest is that you dont' have to change RPC method signatures.\r\n* This appears to be adding `NodeContext&` parameters to many RPC methods that don't use it. Again this may be another reason to just make it accessible through JSONRPCRequest",
      "created_at" : "2020-04-15T14:02:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614059391",
      "id" : 614059391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDA1OTM5MQ==",
      "updated_at" : "2020-04-15T14:02:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614059391",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "#18531 Doesn't change how RPC methods are dispatched, but it wraps them into an RPCMan. Assuming my pull makes it in first, it is going to reduce the diff of this pull significantly. Though, when `JSONRPCRequest` is used to pass in context, the two pulls should not conflict at all.",
      "created_at" : "2020-04-15T14:21:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614069686",
      "id" : 614069686,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDA2OTY4Ng==",
      "updated_at" : "2020-04-15T14:21:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614069686",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Hi @ryanofsky, and many thanks!\r\n\r\n> Few thoughts:\r\n> \r\n> * This changes rpc method signature every every method from `UniValue(const JSONRPCRequest&)` by adding NodeContext parameter, but Marco's #18531 is already changing method signatures a different way. You should work with Marco to come up with signature for rpc methods that doesn't conflict\r\n\r\nDidn't know about that.  Could not find anything in the original issue. Anyway, thanks for pointing this out!\r\n\r\n> * This PR doesn't actually get rid of the `g_rpc_node` variable, just a handful of uses. Maybe that is temporary (you could mark this PR a draft), but otherwise title is kind of misleading.\r\n\r\nI never wanted to get rid of it, only make it: \r\n\r\n* **const ref**\r\n* forwarded to actors directly and in one place (and not scattered around as it currently is)\r\n* while keeping **JSONRPCRequest** structure as it is. Why should JSONRPCRequest know anything about NodeContext? I see no reason to let a passive object (a request) that's going back and forth knowing anything about its environment. But maybe there are other things I know nothing about that would mandate such behavior.\r\n\r\nAnd yes, there are still a few places where we still need *g_rpc_node*, but those aren't directly related to this PR, so I deliberately didn't change them. \r\n\r\n**--EDIT**: *My sentence \"never wanted to get rid of it\" might have been misleading. Actually, I want to get rid of it as a global, but wanted to keep the NodeContext itself available to all RPC methods by forwarding it to Actors, of course.*\r\n\r\n**--EDIT 2**: Now the **g_rpc_node** is completely gone.\r\n\r\n> * `NodeContext& rpc_node` arguments should be renamed `NodeContext& node`, RPC prefix is misleading and not doing anything\r\n\r\nOk.\r\n\r\n**--EDIT**: Was changed and force-pushed.\r\n\r\n> * `NodeContext* pnode_ctx` followed by `CHECK_NONFATAL(pnode_ctx)` should probably be `NodeContext& node` and not using a pointer. Also current coding convention doesn't prefix pointers variable with p.\r\n\r\nOk. Will check it again.\r\n\r\n**--EDIT**: *Have checked it. Sadly, not possible because copy assignment operator of NodeContext is implicitly deleted. So, will keep it a pointer there, and the check, unless someone comes with a better idea. Any inputs that help me get rid of raw pointers are highly welcome :)*\r\n\r\n> * Wallet RPC methods shouldn't have access to NodeContext. \r\n\r\nI didn't know about his. I thought it's the right place to put the context in, because those methods are being executed *within* a NodeContext. It's like \"self\" variable in python, for example. It's simply there, be it used or not, because at no point in time is an RPC method being used outside NodeContext. But I might be mistaken.\r\n\r\n> At some point we should have WalletContext struct that will hold things like vpwallets and let us get rid of wallet globals, and it would make sense for wallet RPC methods to have access to this. That is why suggestion from #17548 was to just add a new member to JSONRPCRequest that could hold a generic context, not something tied to the wallet or node. Other advantage of using JSONRPCRequest is that you dont' have to change RPC method signatures.\r\n\r\nAgain, why should a passive object, like a request, know anything about the environment that's using it? Why not create some kind of *MetaContext* that holds both Node- and WalletContext and forwards it directly to actors? This way one could easily extend contexts, if there might be a need to do so in future (*I'm only speculating here*)\r\n\r\n**--EDIT**: Another option would be to create a MetaContext that's based on aliasing shared_ptr. Something like this: \r\n\r\n```cpp\r\nstruct MetaContext {\r\n    NodeContext node;\r\n    WalletContext wallet;\r\n};\r\n```\r\n\r\nWe then initialize the meta-context first:\r\n\r\n```cpp\r\nauto meta_ctx = std::shared_ptr<MetaContext>(new MetaContext());\r\n```\r\n\r\nNow, when we want to forward the \"correct\" context to a particular actor, we would do this:\r\n\r\n```cpp\r\nauto subctx_node = std::shared_ptr<NodeContext>(meta_ctx, &meta_ctx->node);  \r\n```\r\n\r\nFor functions that should only deal with Wallet, we then go this way:\r\n\r\n```cpp\r\nauto subctx_wallet = std::shared_ptr<WalletContext>(meta_ctx, &meta_ctx->wallet);  \r\n```\r\n\r\nWith this strategy we could put any number of different contexts in the same place, but only reveal those that are of use to functions which will consume them.\r\n\r\n> * This appears to be adding `NodeContext&` parameters to many RPC methods that don't use it. Again this may be another reason to just make it accessible through JSONRPCRequest\r\n\r\nI see it like the \"self\" or \"this\" pointers. They're always there, regardless of usage. \"Some\" context is always there.\r\n\r\nAnyway, thanks again!\r\n",
      "created_at" : "2020-04-15T14:23:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614070351",
      "id" : 614070351,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDA3MDM1MQ==",
      "updated_at" : "2020-04-15T19:58:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614070351",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18699 (wallet: Avoid translating RPC errors by MarcoFalke)\n* #18698 (Make g_chainman internal to validation by MarcoFalke)\n* #18671 (wallet: Add BlockUntilSyncedToCurrentChain to dumpwallet by MarcoFalke)\n* #18654 (rpc: separate bumpfee's psbt creation function into psbtbumpfee by achow101)\n* #18606 (test: checks that bitcoin-cli autocomplete is in sync by pierreN)\n* #18531 (rpc: Assert that RPCArg names are equal to CRPCCommand ones by MarcoFalke)\n* #18453 (rpc, cli: add multiwallet balances rpc and use it in -getinfo by jonatack)\n* #17579 ([refactor] Merge getreceivedby tally into GetReceived function by andrewtoth)\n* #17356 (RPC: Internal named params by luke-jr)\n* #16528 (Native Descriptor Wallets using DescriptorScriptPubKeyMan by achow101)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* #16224 (gui: Bilingual GUI error messages by hebasto)\n* #15761 (Replace -upgradewallet startup option with upgradewallet RPC by achow101)\n* #12674 (RPC: Support addnode onetry without making the connection priviliged by luke-jr)\n* #11413 ([wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-04-15T14:32:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614075590",
      "id" : 614075590,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDA3NTU5MA==",
      "updated_at" : "2020-04-18T22:32:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614075590",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I never wanted to get rid of it, only make it:\r\n> \r\n> * **const ref**\r\n\r\nI don't think the the const part is good. RPC methods can start/stop the node, initiate connections, load wallets, so I don't think they should be prevented from changing all context members that exist now and all new context members we may add in the future.\r\n\r\n> * forwarded to actors directly and in one place (and not scattered around as it currently is)\r\n\r\nThis seems good. Maybe list it as a benefit in PR description. If you think of examples where it could help practically, those are good to mention too.\r\n\r\n> * while keeping **JSONRPCRequest** structure as it is. Why should JSONRPCRequest know anything about NodeContext? I see no reason to let a passive object (a request) that's going back and forth knowing anything about its environment.\r\n\r\nMaybe my suggestion here and in #17548 wasn't clear, but I'm not saying add a NodeContext member to JSONRPCRequest. I'm saying add a generic context member so it can be a vehicle for information about the environment without knowing about the environment, the same way it is vehicle for params without knowing about the meaning of params\r\n\r\n\r\n\r\n",
      "created_at" : "2020-04-15T15:28:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614108634",
      "id" : 614108634,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDEwODYzNA==",
      "updated_at" : "2020-04-15T15:28:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614108634",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > I never wanted to get rid of it, only make it:\r\n> > \r\n> > * **const ref**\r\n> \r\n> I don't think the the const part is good. RPC methods can start/stop the node, initiate connections, load wallets, so I don't think they should be prevented from changing all context members that exist now and all new context members we may add in the future.\r\n> \r\n\r\nWell, then I think we should have different variants of contexts at our disposal. Maybe something similar to the example with aliasing shared_ptrs (*in the EDIT-ed part of my previous posting*). Read-only contexts, writeable ones etc.\r\n\r\n> > * forwarded to actors directly and in one place (and not scattered around as it currently is)\r\n> \r\n> This seems good. Maybe list it as a benefit in PR description. If you think of examples where it could help practically, those are good to mention too.\r\n> \r\n\r\nThanks for pointing this out. I will update the PR description.\r\n\r\n> > * while keeping **JSONRPCRequest** structure as it is. Why should JSONRPCRequest know anything about NodeContext? I see no reason to let a passive object (a request) that's going back and forth knowing anything about its environment.\r\n> \r\n> Maybe my suggestion here and in #17548 wasn't clear, but I'm not saying add a NodeContext member to JSONRPCRequest. I'm saying add a generic context member so it can be a vehicle for information about the environment without knowing about the environment, the same way it is vehicle for params without knowing about the meaning of params\r\n\r\nI would not extend JSONRPCRequest in any way. It should be a message carrier in the purest KISS sense. \r\n",
      "created_at" : "2020-04-15T15:32:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614111139",
      "id" : 614111139,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDExMTEzOQ==",
      "updated_at" : "2020-04-15T15:38:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614111139",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Well, then I think we should need different variant of contexts.\r\n\r\nIt would be good to elaborate on the problem being solved in the PR description. It seems to have something to do with data data hiding, but specifics are unclear. \r\n\r\nI think the goal of #17548 is remove the global variable, though, so I wouldn't say this fixes that issue, even though it could help",
      "created_at" : "2020-04-15T15:40:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614115427",
      "id" : 614115427,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDExNTQyNw==",
      "updated_at" : "2020-04-15T15:40:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614115427",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > Well, then I think we should need different variant of contexts.\r\n> \r\n> It would be good to elaborate on the problem being solved in the PR description. It seems to have something to do with data data hiding, but specifics are unclear.\r\n> \r\n> I think the goal of #17548 is remove the global variable, though, so I wouldn't say this fixes that issue, even though it could help\r\n\r\nYes, of course. I am very glad that my PR found much attention within such a short time frame. The learning process I went through while thinking about \"*this damn global NodeContext and how to make it less exposed*\" is already a win for me.\r\n\r\nWe will surely find a way. ",
      "created_at" : "2020-04-15T15:43:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-614117585",
      "id" : 614117585,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNDExNzU4NQ==",
      "updated_at" : "2020-04-15T15:44:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614117585",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/56779?v=4",
         "events_url" : "https://api.github.com/users/brakmic/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brakmic/followers",
         "following_url" : "https://api.github.com/users/brakmic/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brakmic/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brakmic",
         "id" : 56779,
         "login" : "brakmic",
         "node_id" : "MDQ6VXNlcjU2Nzc5",
         "organizations_url" : "https://api.github.com/users/brakmic/orgs",
         "received_events_url" : "https://api.github.com/users/brakmic/received_events",
         "repos_url" : "https://api.github.com/users/brakmic/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brakmic/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brakmic"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-04-19T13:08:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18647#issuecomment-616130591",
      "id" : 616130591,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18647",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYxNjEzMDU5MQ==",
      "updated_at" : "2020-04-19T13:08:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616130591",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
