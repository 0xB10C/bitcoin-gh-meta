[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18653#discussion_r408919423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408919423"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Isn't this racy?",
      "commit_id" : "c28c7b882b40cc75989dd102414de3b3dad69706",
      "created_at" : "2020-04-15T15:11:03Z",
      "diff_hunk" : "@@ -55,31 +46,50 @@ def run_test(self):\n         self.log.info(\"Test connecting with non-existing RPC cookie file\")\n         assert_raises_process_error(1, \"Could not locate RPC credentials\", self.nodes[0].cli('-rpccookiefile=does-not-exist', '-rpcpassword=').echo)\n \n-        self.log.info(\"Make sure that -getinfo with arguments fails\")\n+        self.log.info(\"Test -getinfo with arguments fails\")\n         assert_raises_process_error(1, \"-getinfo takes no arguments\", self.nodes[0].cli('-getinfo').help)\n \n-        self.log.info(\"Test that -getinfo returns the expected network and blockchain info\")\n+        self.log.info(\"Test -getinfo returns expected network and blockchain info\")\n+        if self.is_wallet_compiled():\n+            self.nodes[0].encryptwallet(password)\n         cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()\n-\n         assert_equal(cli_get_info['version'], network_info['version'])\n         assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n+        assert_equal(cli_get_info['headers'], blockchain_info['headers'])\n         assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n         assert_equal(cli_get_info['connections'], network_info['connections'])\n         assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n         assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n         assert_equal(cli_get_info['chain'], blockchain_info['chain'])\n+\n         if self.is_wallet_compiled():\n-            self.log.info(\"Test that -getinfo returns the expected wallet info\")\n+            self.log.info(\"Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info\")\n             assert_equal(cli_get_info['balance'], BALANCE)\n             wallet_info = self.nodes[0].getwalletinfo()\n             assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n+            assert_equal(cli_get_info['unlocked_until'], wallet_info['unlocked_until'])\n             assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n             assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n-            # unlocked_until is not tested because the wallet is not encrypted\n+            assert_equal(self.nodes[0].cli.getwalletinfo(), wallet_info)\n         else:\n-            self.log.info(\"*** Wallet not compiled; -getinfo wallet tests skipped\")\n+            self.log.info(\"*** Wallet not compiled; cli getwalletinfo and -getinfo wallet tests skipped\")\n+\n+        self.stop_node(0)\n+\n+        self.log.info(\"Test -version with node stopped\")\n+        cli_response = self.nodes[0].cli(\"-version\").send_cli()\n+        assert \"{} RPC client version\".format(self.config['environment']['PACKAGE_NAME']) in cli_response\n+\n+        self.log.info(\"Test -rpcwait option waits for RPC connection instead of failing\")\n+        # Start node without RPC connection.\n+        self.nodes[0].start()\n+        # Verify failure without -rpcwait.\n+        assert_raises_process_error(1, \"Could not connect to the server\", self.nodes[0].cli('getblockcount').echo)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18653#discussion_r408919423",
      "id" : 408919423,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxOTQyMw==",
      "original_commit_id" : "c28c7b882b40cc75989dd102414de3b3dad69706",
      "original_line" : 89,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "test/functional/interface_bitcoin_cli.py",
      "position" : 66,
      "pull_request_review_id" : 393871318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18653",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-15T15:11:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408919423",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18653#discussion_r408926975"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18653"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408926975"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Running `(for i in {1..1000}; do test/functional/interface_bitcoin_cli.py ; done)` to see.",
      "commit_id" : "c28c7b882b40cc75989dd102414de3b3dad69706",
      "created_at" : "2020-04-15T15:20:48Z",
      "diff_hunk" : "@@ -55,31 +46,50 @@ def run_test(self):\n         self.log.info(\"Test connecting with non-existing RPC cookie file\")\n         assert_raises_process_error(1, \"Could not locate RPC credentials\", self.nodes[0].cli('-rpccookiefile=does-not-exist', '-rpcpassword=').echo)\n \n-        self.log.info(\"Make sure that -getinfo with arguments fails\")\n+        self.log.info(\"Test -getinfo with arguments fails\")\n         assert_raises_process_error(1, \"-getinfo takes no arguments\", self.nodes[0].cli('-getinfo').help)\n \n-        self.log.info(\"Test that -getinfo returns the expected network and blockchain info\")\n+        self.log.info(\"Test -getinfo returns expected network and blockchain info\")\n+        if self.is_wallet_compiled():\n+            self.nodes[0].encryptwallet(password)\n         cli_get_info = self.nodes[0].cli('-getinfo').send_cli()\n         network_info = self.nodes[0].getnetworkinfo()\n         blockchain_info = self.nodes[0].getblockchaininfo()\n-\n         assert_equal(cli_get_info['version'], network_info['version'])\n         assert_equal(cli_get_info['blocks'], blockchain_info['blocks'])\n+        assert_equal(cli_get_info['headers'], blockchain_info['headers'])\n         assert_equal(cli_get_info['timeoffset'], network_info['timeoffset'])\n         assert_equal(cli_get_info['connections'], network_info['connections'])\n         assert_equal(cli_get_info['proxy'], network_info['networks'][0]['proxy'])\n         assert_equal(cli_get_info['difficulty'], blockchain_info['difficulty'])\n         assert_equal(cli_get_info['chain'], blockchain_info['chain'])\n+\n         if self.is_wallet_compiled():\n-            self.log.info(\"Test that -getinfo returns the expected wallet info\")\n+            self.log.info(\"Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info\")\n             assert_equal(cli_get_info['balance'], BALANCE)\n             wallet_info = self.nodes[0].getwalletinfo()\n             assert_equal(cli_get_info['keypoolsize'], wallet_info['keypoolsize'])\n+            assert_equal(cli_get_info['unlocked_until'], wallet_info['unlocked_until'])\n             assert_equal(cli_get_info['paytxfee'], wallet_info['paytxfee'])\n             assert_equal(cli_get_info['relayfee'], network_info['relayfee'])\n-            # unlocked_until is not tested because the wallet is not encrypted\n+            assert_equal(self.nodes[0].cli.getwalletinfo(), wallet_info)\n         else:\n-            self.log.info(\"*** Wallet not compiled; -getinfo wallet tests skipped\")\n+            self.log.info(\"*** Wallet not compiled; cli getwalletinfo and -getinfo wallet tests skipped\")\n+\n+        self.stop_node(0)\n+\n+        self.log.info(\"Test -version with node stopped\")\n+        cli_response = self.nodes[0].cli(\"-version\").send_cli()\n+        assert \"{} RPC client version\".format(self.config['environment']['PACKAGE_NAME']) in cli_response\n+\n+        self.log.info(\"Test -rpcwait option waits for RPC connection instead of failing\")\n+        # Start node without RPC connection.\n+        self.nodes[0].start()\n+        # Verify failure without -rpcwait.\n+        assert_raises_process_error(1, \"Could not connect to the server\", self.nodes[0].cli('getblockcount').echo)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18653#discussion_r408926975",
      "id" : 408926975,
      "in_reply_to_id" : 408919423,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjk3NQ==",
      "original_commit_id" : "c28c7b882b40cc75989dd102414de3b3dad69706",
      "original_line" : 89,
      "original_position" : 66,
      "original_start_line" : null,
      "path" : "test/functional/interface_bitcoin_cli.py",
      "position" : 66,
      "pull_request_review_id" : 393880711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18653",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-04-15T15:20:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408926975",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
