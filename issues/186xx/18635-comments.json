[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18635#discussion_r421218027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18635"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421218027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Rather than duplicating the function, you can use a template:\r\n\r\n```c++\r\ntemplate<typename PARENT>\r\nvoid AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, AnnotatedMixin<PARENT>* cs)\r\n{ ... }\r\n\r\ntemplate void AssertLockHeldInternal(const char*, const char*, int, Mutex*);\r\ntemplate void AssertLockHeldInternal(const char*, const char*, int, RecursiveMutex*);\r\n```\r\n\r\nThat means changing the header to:\r\n\r\n```c++\r\ntemplate<typename PARENT>\r\nvoid AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, AnnotatedMixin<PARENT>* cs) ASSERT_EXCLUSIVE_LOCK(cs);\r\n```\r\n\r\nto match.\r\n\r\nOr alternatively, don't touch sync.cpp file at all, drop the `ASSERT_EXCLUSIVE_LOCK(cs)` from `AssertLockHeldInternal` and change `AssertLockHeld` to:\r\n\r\n```c++\r\ntemplate<typename PARENT>\r\nvoid static inline AssertLockHeldInternalTyped(const char* pszName, const char* pszFile, int nLine, AnnotatedMixin<PARENT>* cs) ASSERT_EXCLUSIVE_LOCK(cs) { AssertLockHeldInternal(pszName, pszFile, nLine, (void*)cs); };\r\n\r\n#define AssertLockHeld(cs) AssertLockHeldInternalTyped(#cs, __FILE__, __LINE__, &cs)\r\n```\r\n\r\n",
      "commit_id" : "b6e44c3fd4c41a89bd9392c720b856a1a67c0e0a",
      "created_at" : "2020-05-07T03:30:00Z",
      "diff_hunk" : "@@ -185,7 +185,16 @@ std::string LocksHeld()\n     return result;\n }\n \n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, RecursiveMutex* cs)\n+{\n+    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+        if (i.first == cs)\n+            return;\n+    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n+    abort();\n+}\n+\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, Mutex* cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18635#discussion_r421218027",
      "id" : 421218027,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODAyNw==",
      "original_commit_id" : "b6e44c3fd4c41a89bd9392c720b856a1a67c0e0a",
      "original_line" : 197,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 14,
      "pull_request_review_id" : 407126753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18635",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T04:37:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421218027",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18635#discussion_r421218377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18635"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421218377"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No need to repeat the definitions of `Mutex` and `RecursiveMutex` after you added the definitions above.",
      "commit_id" : "b6e44c3fd4c41a89bd9392c720b856a1a67c0e0a",
      "created_at" : "2020-05-07T03:31:25Z",
      "diff_hunk" : "@@ -110,7 +117,7 @@ class LOCKABLE AnnotatedMixin : public PARENT\n using RecursiveMutex = AnnotatedMixin<std::recursive_mutex>;\n \n /** Wrapped mutex: supports waiting but not recursive locking */\n-typedef AnnotatedMixin<std::mutex> Mutex;\n+using Mutex = AnnotatedMixin<std::mutex>;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18635#discussion_r421218377",
      "id" : 421218377,
      "line" : 120,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxODM3Nw==",
      "original_commit_id" : "b6e44c3fd4c41a89bd9392c720b856a1a67c0e0a",
      "original_line" : 120,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 37,
      "pull_request_review_id" : 407126753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18635",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T04:37:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421218377",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ajtowns \r\n> It's not clear to me what the value of adding `-Wthread-safety-attributes` is, but better typing makes sense in general to me.\r\n\r\nFrom the Thread Safety Analysis [docs](https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#warning-flags):\r\n> `-Wthread-safety-attributes`: Sanity checks on attribute syntax.",
      "created_at" : "2020-05-07T07:47:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18635#issuecomment-625090321",
      "id" : 625090321,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18635",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTA5MDMyMQ==",
      "updated_at" : "2020-05-07T07:47:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625090321",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nI confirm that if `master` (3b1e28924) is compiled with `-Wthread-safety-attributes` then some warnings are shown. This patch fixes all such warnings (Clang 11, FreeBSD 12).\r\n\r\nI agree with @ajtowns that it would be better to use a template than duplicating the function body. Further, instead of `template<typename PARENT>` / `AnnotatedMixin<PARENT>* cs` we can use `template <typename MutexType>` / `MutexType* cs` - that is simpler and removes the need to move the `Mutex` and `RecursiveMutex` definitions higher in `sync.h`. Just to be explicit, this is what I mean:\r\n<details>\r\n<summary>patch to use MutexType* argument, on top of this PR (b6e44c3fd)</summary>\r\n\r\n```diff\r\ndiff --git i/src/sync.cpp w/src/sync.cpp\r\nindex 67779b33a..8fc7f5d97 100644\r\n--- i/src/sync.cpp\r\n+++ w/src/sync.cpp\r\n@@ -182,29 +182,25 @@ std::string LocksHeld()\r\n     std::string result;\r\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n         result += i.second.ToString() + std::string(\"\\n\");\r\n     return result;\r\n }\r\n \r\n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, RecursiveMutex* cs)\r\n+template <typename MutexType>\r\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs)\r\n {\r\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n         if (i.first == cs)\r\n             return;\r\n     tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\n     abort();\r\n }\r\n \r\n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, Mutex* cs)\r\n-{\r\n-    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\r\n-        if (i.first == cs)\r\n-            return;\r\n-    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\n-    abort();\r\n-}\r\n+// Explicitly instantiate for Mutex and RecursiveMutex.\r\n+template void AssertLockHeldInternal(const char*, const char*, int, Mutex*);\r\n+template void AssertLockHeldInternal(const char*, const char*, int, RecursiveMutex*);\r\n \r\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\r\n {\r\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\r\n         if (i.first == cs) {\r\n             tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\r\ndiff --git i/src/sync.h w/src/sync.h\r\nindex 78adf29c0..60e5a87ae 100644\r\n--- i/src/sync.h\r\n+++ w/src/sync.h\r\n@@ -11,17 +11,12 @@\r\n \r\n #include <condition_variable>\r\n #include <mutex>\r\n #include <string>\r\n #include <thread>\r\n \r\n-template <typename PARENT>\r\n-class AnnotatedMixin;\r\n-using RecursiveMutex = AnnotatedMixin<std::recursive_mutex>;\r\n-using Mutex = AnnotatedMixin<std::mutex>;\r\n-\r\n ////////////////////////////////////////////////\r\n //                                            //\r\n // THE SIMPLE DEFINITION, EXCLUDING DEBUG CODE //\r\n //                                            //\r\n ////////////////////////////////////////////////\r\n \r\n@@ -54,14 +49,14 @@ LEAVE_CRITICAL_SECTION(mutex); // no RAII\r\n \r\n #ifdef DEBUG_LOCKORDER\r\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\r\n void LeaveCritical();\r\n void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line);\r\n std::string LocksHeld();\r\n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, RecursiveMutex* cs) ASSERT_EXCLUSIVE_LOCK(cs);\r\n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, Mutex* cs) ASSERT_EXCLUSIVE_LOCK(cs);\r\n+template <typename MutexType>\r\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) ASSERT_EXCLUSIVE_LOCK(cs);\r\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\r\n void DeleteLock(void* cs);\r\n \r\n /**\r\n  * Call abort() if a potential lock order deadlock bug is detected, instead of\r\n  * just logging information and throwing a logic_error. Defaults to true, and\r\n@@ -69,14 +64,14 @@ void DeleteLock(void* cs);\r\n  */\r\n extern bool g_debug_lockorder_abort;\r\n #else\r\n void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\r\n void static inline LeaveCritical() {}\r\n void static inline CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\r\n-void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, RecursiveMutex* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}\r\n-void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, Mutex* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}\r\n+template <typename MutexType>\r\n+void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) ASSERT_EXCLUSIVE_LOCK(cs) {}\r\n void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\r\n void static inline DeleteLock(void* cs) {}\r\n #endif\r\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\r\n #define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)\r\n \r\n```\r\n</details>\r\n\r\nMaybe add `thread-safety-attributes` to the warnings flags in `configure.ac` to make sure future changes do not introduce such warnings:\r\n<details>\r\n<summary>patch to extend warnings in configure.ac</summary>\r\n\r\n```diff\r\ndiff --git i/configure.ac w/configure.ac\r\nindex 4c9902efc..e19346e59 100644\r\n--- i/configure.ac\r\n+++ w/configure.ac\r\n@@ -326,12 +326,13 @@ if test \"x$enable_werror\" = \"xyes\"; then\r\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\r\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\r\n   fi\r\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\r\n+  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-attributes],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-attributes\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\r\n fi\r\n\r\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\r\n@@ -339,12 +340,13 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\r\n   AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wformat],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\r\n+  AX_CHECK_COMPILE_FLAG([-Wthread-safety-attributes],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-attributes\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\r\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\r\n\r\n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\r\n```\r\n</details>\r\n",
      "created_at" : "2020-05-07T10:09:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18635#issuecomment-625160150",
      "id" : 625160150,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18635",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDYyNTE2MDE1MA==",
      "updated_at" : "2020-05-07T10:09:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625160150",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18635#discussion_r421395808"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18635"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421395808"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, in `C` the \"any type\" is `void*`, whereas in `C++` we have templates.\r\n\r\nThat `void*` typecast at the bottom of the comment above is like sweeping it under the carpet and it still leaves the possibility to use `AssertLockHeldInternal()` in a type unsafe way (because it takes `void*` argument).",
      "commit_id" : "b6e44c3fd4c41a89bd9392c720b856a1a67c0e0a",
      "created_at" : "2020-05-07T10:16:06Z",
      "diff_hunk" : "@@ -185,7 +185,16 @@ std::string LocksHeld()\n     return result;\n }\n \n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, RecursiveMutex* cs)\n+{\n+    for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n+        if (i.first == cs)\n+            return;\n+    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n+    abort();\n+}\n+\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, Mutex* cs)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18635#discussion_r421395808",
      "id" : 421395808,
      "in_reply_to_id" : 421218027,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM5NTgwOA==",
      "original_commit_id" : "b6e44c3fd4c41a89bd9392c720b856a1a67c0e0a",
      "original_line" : 197,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/sync.cpp",
      "position" : 14,
      "pull_request_review_id" : 407336290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18635",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-05-07T10:16:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/421395808",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
