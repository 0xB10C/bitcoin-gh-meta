[
   {
      "body" : "Reluctant ACK.\r\n\r\nCode ACK, agree about avoiding the circular dependency, and agree about avoiding GetArg calls to determine the mempool max size the whole time.\r\n\r\nI dislike moving more policy knowledge into the mempool itself (its size limit), though. It will complicate a more generic memory limiting approach, where there is not a single memory size limit, but one that depends on the UTXO size and perhaps other buffers. ",
      "created_at" : "2015-11-27T14:28:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160150366",
      "id" : 160150366,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T14:28:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160150366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Complicate it by putting it into a single attribute in the class that makes more sense?\r\nAlthough I'm not sure how what you have in mind would interact with the current mempool limiting, can't we just create a simple setter when we need it?\r\nI mean, putting it as an attribute there is not the only solution. We can also make it a global in main that the mempool takes as parameter.\r\nAbout having policy code in the mempool, now that #6871 has been merged I'm eager to also decouple the CTxMemPool from CBlockPolicyEstimator (making them completely independent of each other). I expect it to be harder than last time I did it though.\r\nUnless we don't want anything else related to policy encapsulation in 0.12, in that case I can just leave that for Bitcoin JT 0.12...",
      "created_at" : "2015-11-27T14:48:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160153553",
      "id" : 160153553,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T14:48:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160153553",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@jtimon It's a philosophical point. The CTxMempool data structure IMHO should not make policy decisions at all. It shouldn't even know there is something like a size limit, it's just a data structure. It should provide methods to query its state and indexes and make mutations to it, but not be involved in what data should be in it. That's the caller's responsibility. That's just separation of concerns, and is easier to reason about if you know what responsibility is located where in the code. Just because moving a variable somewhere makes the code easier doesn't mean it's the right place for it.\r\n\r\nAs I said, ACK. I don't know a better solution right now, and I agree that the actual problem you're after (the circular dependency) needs to be solved.",
      "created_at" : "2015-11-27T14:58:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160155110",
      "id" : 160155110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T14:58:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160155110",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "> @jtimon It's a philosophical point. The CTxMempool data structure IMHO should not make policy decisions at all.\r\n\r\nAnd I agree. But we're very far from that. Right now CTxMempool has a CBlockPolicyEstimator, which is a policy class.\r\nBut I would like to understand your point about \"a more generic memory limiting approach\" better.\r\n\r\n> Just because moving a variable somewhere makes the code easier doesn't mean it's the right place for it.\r\n\r\nThe main goal is not simplifying the code but removing the circular dependency, and this is not the only way to do it. As said another option is to make it a global instead of an attribute of CTxMempool.\r\nI'm fine doing that instead if that is preferred.",
      "created_at" : "2015-11-27T15:05:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160156577",
      "id" : 160156577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T15:05:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160156577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Well, ideally (but that would require significant changes, which I'm not suggesting now) is that the mempool has generic hooks that inform listeners about changes, and that the policyestimator registrers itself there. The code that manages the mempool (currently main) would tell the policyestimator what the memory limit is, if any. The -maxmempool option would only be parsed there.",
      "created_at" : "2015-11-27T15:09:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160157160",
      "id" : 160157160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T15:09:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160157160",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Here's another option without the new attribute in CTxMemPool: https://github.com/bitcoin/bitcoin/compare/master...jtimon:mempool-circular-dependency\r\n\r\nIf that is preferred, I'm happy with that too.\r\n\r\nI believe I disagree with your ideal solution with generic hooks.\r\nAs said I would prefer to just make CTxMempool  and CBlockPolicyEstimator completely independent, and only parse  -maxmempool in CBlockPolicyEstimator's or CStandardPolicy's constructor (it would become an attribute instead of a global). \r\nBut that also requires more changes. Last time I did it, it included things as disruptive as #6068, so it's almost certainly too much for 0.12. Jokes aside, this is the less outdated preparations for the complete decoupling I have at hand in case anyone is interested https://github.com/jtimon/bitcoin/commits/policy-minrelayfee-0.12.99\r\n",
      "created_at" : "2015-11-27T15:49:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160164675",
      "id" : 160164675,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T15:49:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160164675",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "NACK for now.\r\n\r\n@sipa Why does this circular dependency have to be solved right now?\r\n\r\nI'm all for cleaning up the code design, but I think the proper next step is to make the mempool unaware of the policy estimator not the other way around.   I think it would make sense for the mempool to be aware of it's current state, so when TrimToSize is called with an argument, the mempool should remember what size it has now been trimmed to, thus GetMinFee would no longer need an argument.  I think thats cleaner and makes more sense than having two TrimToSize functions just for testing purposes as in this pull.  I'm happy to do that as soon as I'm in front of a computer again.\r\n\r\nMore importantly, the bigger problem with this pull is it has now put logic inside of the CTxMemPool::estimate functions which were previously just dumb pass throughs.  When those functions go away (because the block policy estimator is used directly), then that logic will have to be repeated at all calling sites.  I don't see why calling code should need to understand that you have to ask the mempool for its min fee in order to call estimate fee.  I think all the logic thats required to do smart fee estimation should be contained in one place, and the policy estimator makes sense to me as that place.\r\n\r\nEven further, future developments in the policy estimator are surely going to require it to be aware of the mempool, I just don't see a way around that.  The most obvious next direct step is to asses how much current back log there is in the mempool and make sure a fee is not returned which is lower than could be reached in the target number of blocks.\r\n\r\nThese concerns have been raised with @jtimon previously, and it would been nice if this pull would have referenced them.\r\n",
      "created_at" : "2015-11-27T16:29:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160170819",
      "id" : 160170819,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T16:29:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160170819",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4360349?v=3",
         "events_url" : "https://api.github.com/users/morcos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/morcos/followers",
         "following_url" : "https://api.github.com/users/morcos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/morcos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/morcos",
         "id" : 4360349,
         "login" : "morcos",
         "organizations_url" : "https://api.github.com/users/morcos/orgs",
         "received_events_url" : "https://api.github.com/users/morcos/received_events",
         "repos_url" : "https://api.github.com/users/morcos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/morcos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/morcos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/morcos"
      }
   },
   {
      "body" : "> @sipa Why does this circular dependency have to be solved right now?\r\n\r\nBecause you just introduced it without the need to do so?\r\nThe question could be rather, why this circular dependency needed to be introduced in  #6134?\r\n\r\n> I'm all for cleaning up the code design, but I think the proper next step is to make the mempool unaware of the policy estimator not the other way around. \r\n\r\nI agree with that next step, but \"the other way around\" was already done until #6134. You don't have to chose one or the other, they can be completely independent.\r\n\r\n> I think it would make sense for the mempool to be aware of it's current state, so when TrimToSize is called with an argument, the mempool should remember what size it has now been trimmed to, thus GetMinFee would no longer need an argument\r\n\r\nI highly dislike that \"solution\" (what is this solving exactly?), the default if not provided being \"the same that was used in the last call\" is a twisted interface.\r\n\r\n> More importantly, the bigger problem with this pull is it has now put logic inside of the CTxMemPool::estimate functions which were previously just dumb pass throughs. When those functions go away (because the block policy estimator is used directly), then that logic will have to be repeated at all calling sites\r\n\r\nIt is really dumb logic, but as you say that can be solved when those functions go away. For example, if GetMinFee() was part of the estimator rather than the mempool, it could be called internally CBlockPolicyEstimator::estimateSmartFee()\r\n\r\n> I don't see why calling code should need to understand that you have to ask the mempool for its min fee in order to call estimate fee. I think all the logic thats required to do smart fee estimation should be contained in one place, and the policy estimator makes sense to me as that place.\r\n\r\nAgreed, but this has nothing to do with CBlockPolicyEstimator depending on CTxMemPool.\r\n\r\n> Even further, future developments in the policy estimator are surely going to require it to be aware of the mempool, I just don't see a way around that. \r\n\r\nI've done it once, I will do it again, and I'm convinced it is completely possible to make the mempool and the policy fully independent no matter the functionality.\r\nIf you are skeptic, that's fine. But please don't put obstacles in the way just because you don't think is possible. I'll gladly rewrite all that whenever \"is time\" for #6068 and friends again (a signal I'm waiting to hear from @sipa, btw, since he insisted that policy encapsulation would get in the way of mempool work).\r\n\r\n> These concerns have been raised with @jtimon previously, and it would been nice if this pull would have referenced them.\r\n\r\nI very explicitly and repeatedly referenced #6134 where those discussions where happening.\r\nBut for better reference: https://github.com/bitcoin/bitcoin/pull/6134#discussion_r45216058 \r\nhttps://github.com/bitcoin/bitcoin/pull/6134#issuecomment-159282982\r\n",
      "created_at" : "2015-11-27T17:13:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160177787",
      "id" : 160177787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T17:13:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160177787",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "I should have been more explicit and just nacked #6134 instead of coding a nit to be ignored...\r\n\r\n@sipa did you looked at the option without moving anything to mempool.o ?",
      "created_at" : "2015-11-27T17:14:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7115#issuecomment-160178012",
      "id" : 160178012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7115",
      "updated_at" : "2015-11-27T17:14:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/160178012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   }
]
