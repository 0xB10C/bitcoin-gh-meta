[
   {
      "author_association" : "MEMBER",
      "body" : "I need to test this still myself, but I wanted to open this as a potential alternative to feeling the need to backport #18044 (as @jnewbery has proposed in #19606) in order to protect older software from wasting bandwidth in the event of taproot activation in the future.\r\n\r\nI have a branch where I backported this patch to 0.20 here: https://github.com/sdaftuar/bitcoin/tree/2020-07-reject-unknown-wit-0.20.  \r\n\r\nNote that this PR should be independently useful to mitigate an issue @ariard brought up here: https://github.com/bitcoin/bitcoin/pull/18044#discussion_r457768442",
      "created_at" : "2020-07-29T15:46:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-665743887",
      "id" : 665743887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NTc0Mzg4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-29T15:46:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665743887",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19620#discussion_r462433102"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19620"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462433102"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Strictly speaking, do we want to move this check above any other check that could return TX_NOT_STANDARD, so transactions with non-standard inputs are guaranteed to be put in the recentrejects filter? I don't think it matters, since upgraded peers won't relay transactions that fail other standardness checks, unless we loosen those checks for some other reason.",
      "commit_id" : "be23c2af9fb3b7d571e62ae1045941a1724a3e35",
      "created_at" : "2020-07-29T16:33:28Z",
      "diff_hunk" : "@@ -690,7 +690,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Check for non-standard pay-to-script-hash in inputs\n     if (fRequireStandard && !AreInputsStandard(tx, m_view))\n-        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n+        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19620#discussion_r462433102",
      "id" : 462433102,
      "line" : 693,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQzMzEwMg==",
      "original_commit_id" : "be23c2af9fb3b7d571e62ae1045941a1724a3e35",
      "original_line" : 693,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 457695196,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19620",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-29T16:33:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462433102",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19620#discussion_r462442871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19620"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462442871"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah I agree.  It doesn't seem worth the effort to figure out how to make it so that a tx that would fail in `AreInputsStandard()` will always have its txid go into the rejects filter -- there are a lot of checks that happen before that (including checks that don't depend on looking up the inputs first), which we'd have to move around somehow and complicate the logic.  But, if this proves to be insufficient for some reason we can always try to revisit.",
      "commit_id" : "be23c2af9fb3b7d571e62ae1045941a1724a3e35",
      "created_at" : "2020-07-29T16:50:06Z",
      "diff_hunk" : "@@ -690,7 +690,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Check for non-standard pay-to-script-hash in inputs\n     if (fRequireStandard && !AreInputsStandard(tx, m_view))\n-        return state.Invalid(TxValidationResult::TX_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n+        return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19620#discussion_r462442871",
      "id" : 462442871,
      "in_reply_to_id" : 462433102,
      "line" : 693,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ0Mjg3MQ==",
      "original_commit_id" : "be23c2af9fb3b7d571e62ae1045941a1724a3e35",
      "original_line" : 693,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 5,
      "pull_request_review_id" : 457707738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19620",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-07-29T16:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/462442871",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK and lite code review ACK.\r\n\r\nIt seems to me that this change won't help that much in the future upgrade case because even though this fixes witness versions things like leaf versions in taproot (which may be upgraded more often) will require a witness dependent check, and can't be txid reject filtered, unless we made it a policy that transactions spending taproots that mix and match leaf versions are non-standard (but only detectable in the case where an previous attempted witness is nonstandard).",
      "created_at" : "2020-07-29T17:44:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19620#issuecomment-665805640",
      "id" : 665805640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19620",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NTgwNTY0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-07-29T17:44:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/665805640",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   }
]
