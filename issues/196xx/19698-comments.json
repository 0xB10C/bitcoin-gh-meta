[
   {
      "author_association" : "MEMBER",
      "body" : "Not sure this is a good idea. Tests should ideally test one thing only, and failing due to other bugs would be annoying.",
      "created_at" : "2020-08-11T22:10:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-672309636",
      "id" : 672309636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MjMwOTYzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-11T22:10:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672309636",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Looks like one of the sanitizers finds an integer conversion/truncation problem in the changed code:\r\n```\r\nï¿½[1;34;49mtest/transaction_tests.cpp(251): Leaving test case \"tx_invalid\"; testing time: 591590us\r\nï¿½[0;39;49mï¿½[1;34;49mtest/transaction_tests.cpp(164): Entering test case \"tx_valid\"\r\ntest/transaction_tests.cpp:237:35: runtime error: implicit conversion from type 'unsigned long' of value 18446744073709526401 (64-bit, unsigned) to type 'unsigned int' changed the value to 4294942081 (32-bit, unsigned)\r\n    #0 0x558b927932d2 in transaction_tests::tx_valid::test_method() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/transaction_tests.cpp:237:35\r\n    #1 0x558b9278fb88 in transaction_tests::tx_valid_invoker() /tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/transaction_tests.cpp:164:1\r\n    #2 0x558b91e8e608 in boost::detail::function::void_function_invoker0<void (*)(), void>::invoke(boost::detail::function::function_buffer&) /usr/include/boost/function/function_template.hpp:117:11\r\n    #3 0x7f37eb6e23f1  (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x353f1)\r\n    #4 0x7f37eb6dfc74 in boost::execution_monitor::catch_signals(boost::function<int ()> const&) (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x32c74)\r\n    #5 0x7f37eb6dfcf7 in boost::execution_monitor::execute(boost::function<int ()> const&) (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x32cf7)\r\n    #6 0x7f37eb6dfdcd in boost::execution_monitor::vexecute(boost::function<void ()> const&) (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x32dcd)\r\n    #7 0x7f37eb70d134 in boost::unit_test::unit_test_monitor_t::execute_and_translate(boost::function<void ()> const&, unsigned long) (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x60134)\r\n    #8 0x7f37eb6f05a8  (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x435a8)\r\n    #9 0x7f37eb6f0b03  (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x43b03)\r\n    #10 0x7f37eb6f0b03  (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x43b03)\r\n    #11 0x7f37eb6e7939 in boost::unit_test::framework::run(unsigned long, bool) (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x3a939)\r\n    #12 0x7f37eb70bfea in boost::unit_test::unit_test_main(bool (*)(), int, char**) (/lib/x86_64-linux-gnu/libboost_unit_test_framework.so.1.71.0+0x5efea)\r\n    #13 0x558b91dd63a6 in main /usr/include/boost/test/unit_test.hpp:63:12\r\n    #14 0x7f37eae990b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)\r\n    #15 0x558b91d2bbbd in _start (/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/test_bitcoin+0x21c5bbd)\r\n\r\nSUMMARY: UndefinedBehaviorSanitizer: implicit-unsigned-integer-truncation test/transaction_tests.cpp:237:35 in \r\n```",
      "created_at" : "2020-08-12T11:13:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-672809318",
      "id" : 672809318,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MjgwOTMxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-12T11:13:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/672809318",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@laanwj I'm looking into the issue, is there a way to run this sanitizer locally?\r\nEdit: nvm I think I got it, from developer-notes...",
      "created_at" : "2020-08-14T16:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-674167151",
      "id" : 674167151,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDE2NzE1MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T17:16:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674167151",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/gzhao408/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gzhao408/followers",
         "following_url" : "https://api.github.com/users/gzhao408/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gzhao408/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gzhao408",
         "id" : 25183001,
         "login" : "gzhao408",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/gzhao408/orgs",
         "received_events_url" : "https://api.github.com/users/gzhao408/received_events",
         "repos_url" : "https://api.github.com/users/gzhao408/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gzhao408/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gzhao408/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gzhao408"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Not sure this is a good idea. Tests should ideally test one thing only, and failing due to other bugs would be annoying.\r\n\r\n@luke-jr I would think of it more as... each test sanity checks itself to make sure it's testing exactly what we want it to test. Passing/failing because the test itself is incorrect would be more annoying imo. All the current tests pass; as more tests are added, I'd think it's a good idea to have this check.",
      "created_at" : "2020-08-14T16:56:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-674168094",
      "id" : 674168094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDE2ODA5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T16:56:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674168094",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/gzhao408/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gzhao408/followers",
         "following_url" : "https://api.github.com/users/gzhao408/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gzhao408/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gzhao408",
         "id" : 25183001,
         "login" : "gzhao408",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/gzhao408/orgs",
         "received_events_url" : "https://api.github.com/users/gzhao408/received_events",
         "repos_url" : "https://api.github.com/users/gzhao408/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gzhao408/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gzhao408/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gzhao408"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Last push fixed the sanitizer bug - just needed a cast. Ready for review :) ",
      "created_at" : "2020-08-21T15:00:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-678337313",
      "id" : 678337313,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODMzNzMxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T15:00:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678337313",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/gzhao408/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gzhao408/followers",
         "following_url" : "https://api.github.com/users/gzhao408/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gzhao408/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gzhao408",
         "id" : 25183001,
         "login" : "gzhao408",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/gzhao408/orgs",
         "received_events_url" : "https://api.github.com/users/gzhao408/received_events",
         "repos_url" : "https://api.github.com/users/gzhao408/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gzhao408/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gzhao408/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gzhao408"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "A little bit quiet here... @laanwj and @practicalswift you both left reviews on the original PR, if you have time I'd appreciate a look here as well :)",
      "created_at" : "2020-09-04T00:10:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-686826416",
      "id" : 686826416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4NjgyNjQxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-04T00:10:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/686826416",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/gzhao408/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gzhao408/followers",
         "following_url" : "https://api.github.com/users/gzhao408/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gzhao408/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gzhao408",
         "id" : 25183001,
         "login" : "gzhao408",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/gzhao408/orgs",
         "received_events_url" : "https://api.github.com/users/gzhao408/received_events",
         "repos_url" : "https://api.github.com/users/gzhao408/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gzhao408/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gzhao408/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gzhao408"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Code review ACK, thanks for solving the sanitizer bug.\r\n\r\nI would like @sipa @MarcoFalke or someone else close with the verification testing code to look at this and give concept ACK.",
      "created_at" : "2020-10-27T09:35:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-717112252",
      "id" : 717112252,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcxNzExMjI1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-27T09:35:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/717112252",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2020-11-14T04:21:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#issuecomment-727141883",
      "id" : 727141883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19698",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcyNzE0MTg4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-11-14T04:21:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/727141883",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r523373704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523373704"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: ++i",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-14T04:23:02Z",
      "diff_hunk" : "@@ -240,27 +306,34 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n             TxValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n+            if (!fValid) {\n+                BOOST_CHECK_MESSAGE(test[2].get_str() == \"BADTX\", strTest);\n+                continue;\n+            }\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+            // Not using FillFlags() in the main test, in order to detect invalid verifyFlags combination\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags[0], txdata, strTest, /* expect_valid */ false))\n+                BOOST_ERROR(\"Tx unexpectedly passed: \" << strTest);\n+            // Check that flags are minimal: transaction should succeed if any set flags are unset.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r523373704",
      "id" : 523373704,
      "line" : 321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM3MzcwNA==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 321,
      "original_position" : 217,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 217,
      "pull_request_review_id" : 530553252,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-14T04:25:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523373704",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r523373709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523373709"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: ++f",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-14T04:23:13Z",
      "diff_hunk" : "@@ -240,27 +306,34 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n             TxValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n+            if (!fValid) {\n+                BOOST_CHECK_MESSAGE(test[2].get_str() == \"BADTX\", strTest);\n+                continue;\n+            }\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+            // Not using FillFlags() in the main test, in order to detect invalid verifyFlags combination\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags[0], txdata, strTest, /* expect_valid */ false))\n+                BOOST_ERROR(\"Tx unexpectedly passed: \" << strTest);\n+            // Check that flags are minimal: transaction should succeed if any set flags are unset.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)\n+            {\n+                // Backwards compatibility: Adding a flag should not validate an invalid transaction\n+                unsigned int flags = FillFlags(verify_flags[0] | (1U << i));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false))\n+                    BOOST_ERROR(\"Tx unexpectedly passed with flag \" << ToString(i) << \" set: \" << strTest);\n+                // Backwards compatibility: Adding some random flags should not validate an invalid transaction\n+                flags = FillFlags(verify_flags[0] | (unsigned int)InsecureRandBits(mapFlagNames.size()));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false))\n+                    BOOST_ERROR(\"Tx unexpectedly passed with random flags \" << ToString(flags) << \": \" << strTest);\n+            }\n+            for (size_t f = 1; f < verify_flags.size(); f++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r523373709",
      "id" : 523373709,
      "line" : 332,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzM3MzcwOQ==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 332,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 228,
      "pull_request_review_id" : 530553252,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-14T04:25:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/523373709",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531165886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531165886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think the format of tx_valid.json should be documented here _and_ in the file itself. It'd be better to consolidate this documentation to just the json file.\r\n\r\nNo need to capitalize MINIMAL.",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:38:56Z",
      "diff_hunk" : "@@ -104,10 +169,9 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // or [[[prevout hash, prevout index, prevout scriptPubKey], [input 2], ...],\"], serializedTransaction, verifyFlags\n     // ... where all scripts are stringified scripts.\n     //\n-    // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n+    // verifyFlags is a comma separated list of MINIMAL script verification flags to exclude, or \"NONE\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531165886",
      "id" : 531165886,
      "line" : 172,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2NTg4Ng==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 172,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 118,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531165886",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531166325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531166325"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would a better interface be to take a reference and update it in place?",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:40:05Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)\n+{\n+    bool tx_valid = true;\n+    ScriptError err = expect_valid ? SCRIPT_ERR_UNKNOWN_ERROR : SCRIPT_ERR_OK;\n+    for (unsigned int i = 0; i < tx.vin.size() && tx_valid; i++)\n+    {\n+        const CAmount amount = mapprevOutValues.count(tx.vin[i].prevout) ? mapprevOutValues.at(tx.vin[i].prevout) : 0;\n+        try\n+        {\n+            tx_valid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys.at(tx.vin[i].prevout), &tx.vin[i].scriptWitness, flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+        }\n+        catch (...)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            return true; // The test format is bad and an error is thrown. Return true to silence further error.\n+        }\n+        if (expect_valid) {\n+            BOOST_CHECK_MESSAGE(tx_valid, strTest);\n+            BOOST_CHECK_MESSAGE((err == SCRIPT_ERR_OK), ScriptErrorString(err));\n+            err = SCRIPT_ERR_UNKNOWN_ERROR;\n+        }\n+    }\n+    if (!expect_valid) {\n+        BOOST_CHECK_MESSAGE(!tx_valid, strTest);\n+        BOOST_CHECK_MESSAGE((err != SCRIPT_ERR_OK), ScriptErrorString(err));\n+    }\n+    return (tx_valid == expect_valid);\n+}\n+\n+/*\n+ * Trim or fill flags to make the combination valid:\n+ * ** WITNESS must be used with P2SH\n+ * ** CLEANSTACK must be used WITNESS and P2SH\n+ * */\n+\n+unsigned int TrimFlags(unsigned int flags)\n+{\n+    if (!(flags & SCRIPT_VERIFY_WITNESS)) {\n+        flags &= ~(unsigned int)SCRIPT_VERIFY_CLEANSTACK;\n+    }\n+    else if (!(flags & SCRIPT_VERIFY_P2SH)) {\n+        flags &= ~(unsigned int)SCRIPT_VERIFY_WITNESS;\n+        flags &= ~(unsigned int)SCRIPT_VERIFY_CLEANSTACK;\n+    }\n+    return flags;\n+}\n+\n+unsigned int FillFlags(unsigned int flags)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531166325",
      "id" : 531166325,
      "line" : 150,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2NjMyNQ==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 150,
      "original_position" : 98,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 98,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531166325",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167693"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531167693"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps clearer:\r\n\r\n```suggestion\r\n    // CLEANSTACK implies WITNESS\r\n    if (flags & SCRIPT_VERIFY_CLEANSTACK) flags |= SCRIPT_VERIFY_WITNESS;\r\n    \r\n    // WITNESS implies P2SH (and transitively CLEANSTACK implies P2SH)\r\n    if (flags & SCRIPT_VERIFY_WITNESS) flags |= SCRIPT_VERIFY_P2SH;\r\n```",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:44:10Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)\n+{\n+    bool tx_valid = true;\n+    ScriptError err = expect_valid ? SCRIPT_ERR_UNKNOWN_ERROR : SCRIPT_ERR_OK;\n+    for (unsigned int i = 0; i < tx.vin.size() && tx_valid; i++)\n+    {\n+        const CAmount amount = mapprevOutValues.count(tx.vin[i].prevout) ? mapprevOutValues.at(tx.vin[i].prevout) : 0;\n+        try\n+        {\n+            tx_valid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys.at(tx.vin[i].prevout), &tx.vin[i].scriptWitness, flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+        }\n+        catch (...)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            return true; // The test format is bad and an error is thrown. Return true to silence further error.\n+        }\n+        if (expect_valid) {\n+            BOOST_CHECK_MESSAGE(tx_valid, strTest);\n+            BOOST_CHECK_MESSAGE((err == SCRIPT_ERR_OK), ScriptErrorString(err));\n+            err = SCRIPT_ERR_UNKNOWN_ERROR;\n+        }\n+    }\n+    if (!expect_valid) {\n+        BOOST_CHECK_MESSAGE(!tx_valid, strTest);\n+        BOOST_CHECK_MESSAGE((err != SCRIPT_ERR_OK), ScriptErrorString(err));\n+    }\n+    return (tx_valid == expect_valid);\n+}\n+\n+/*\n+ * Trim or fill flags to make the combination valid:\n+ * ** WITNESS must be used with P2SH\n+ * ** CLEANSTACK must be used WITNESS and P2SH\n+ * */\n+\n+unsigned int TrimFlags(unsigned int flags)\n+{\n+    if (!(flags & SCRIPT_VERIFY_WITNESS)) {\n+        flags &= ~(unsigned int)SCRIPT_VERIFY_CLEANSTACK;\n+    }\n+    else if (!(flags & SCRIPT_VERIFY_P2SH)) {\n+        flags &= ~(unsigned int)SCRIPT_VERIFY_WITNESS;\n+        flags &= ~(unsigned int)SCRIPT_VERIFY_CLEANSTACK;\n+    }\n+    return flags;\n+}\n+\n+unsigned int FillFlags(unsigned int flags)\n+{\n+    if (flags & SCRIPT_VERIFY_WITNESS) {\n+        flags |= SCRIPT_VERIFY_P2SH;\n+    }\n+    else if (flags & SCRIPT_VERIFY_CLEANSTACK) {\n+        flags |= SCRIPT_VERIFY_P2SH;\n+        flags |= SCRIPT_VERIFY_WITNESS;\n+    }\n+    return flags;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167693",
      "id" : 531167693,
      "line" : 159,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2NzY5Mw==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 159,
      "original_position" : 107,
      "original_start_line" : 152,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 107,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 152,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531167693",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167852"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531167852"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please split this line (and perhaps comment what this function is doing)",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:44:33Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167852",
      "id" : 531167852,
      "line" : 103,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2Nzg1Mg==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 103,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 51,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531167852",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167903"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531167903"
         }
      },
      "author_association" : "MEMBER",
      "body" : "join",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:44:42Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)\n+{\n+    bool tx_valid = true;\n+    ScriptError err = expect_valid ? SCRIPT_ERR_UNKNOWN_ERROR : SCRIPT_ERR_OK;\n+    for (unsigned int i = 0; i < tx.vin.size() && tx_valid; i++)\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531167903",
      "id" : 531167903,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2NzkwMw==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 108,
      "original_position" : 56,
      "original_start_line" : 107,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 56,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 107,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531167903",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168267"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168267"
         }
      },
      "author_association" : "MEMBER",
      "body" : "join",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:45:35Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)\n+{\n+    bool tx_valid = true;\n+    ScriptError err = expect_valid ? SCRIPT_ERR_UNKNOWN_ERROR : SCRIPT_ERR_OK;\n+    for (unsigned int i = 0; i < tx.vin.size() && tx_valid; i++)\n+    {\n+        const CAmount amount = mapprevOutValues.count(tx.vin[i].prevout) ? mapprevOutValues.at(tx.vin[i].prevout) : 0;\n+        try\n+        {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168267",
      "id" : 531168267,
      "line" : 111,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODI2Nw==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 111,
      "original_position" : 59,
      "original_start_line" : 110,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 59,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 110,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168267",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168304"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168304"
         }
      },
      "author_association" : "MEMBER",
      "body" : "join",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:45:41Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)\n+{\n+    bool tx_valid = true;\n+    ScriptError err = expect_valid ? SCRIPT_ERR_UNKNOWN_ERROR : SCRIPT_ERR_OK;\n+    for (unsigned int i = 0; i < tx.vin.size() && tx_valid; i++)\n+    {\n+        const CAmount amount = mapprevOutValues.count(tx.vin[i].prevout) ? mapprevOutValues.at(tx.vin[i].prevout) : 0;\n+        try\n+        {\n+            tx_valid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys.at(tx.vin[i].prevout), &tx.vin[i].scriptWitness, flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+        }\n+        catch (...)\n+        {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168304",
      "id" : 531168304,
      "line" : 115,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODMwNA==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 115,
      "original_position" : 63,
      "original_start_line" : 113,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 63,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 113,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168304",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168436"
         }
      },
      "author_association" : "MEMBER",
      "body" : "braces",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:45:58Z",
      "diff_hunk" : "@@ -157,24 +221,28 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK(state.IsValid());\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n-                                    strTest);\n-                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+            // Do not use TrimFlags() in the main test in order to detect invalid verifyFlags combination in the test file.\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags[0], txdata, strTest, /* expect_valid */ true))\n+                BOOST_ERROR(\"Tx unexpectedly failed: \" << strTest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168436",
      "id" : 531168436,
      "line" : 228,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODQzNg==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 228,
      "original_position" : 150,
      "original_start_line" : 227,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 150,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 227,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168436",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "join",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:46:04Z",
      "diff_hunk" : "@@ -157,24 +221,28 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK(state.IsValid());\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n-                                    strTest);\n-                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+            // Do not use TrimFlags() in the main test in order to detect invalid verifyFlags combination in the test file.\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags[0], txdata, strTest, /* expect_valid */ true))\n+                BOOST_ERROR(\"Tx unexpectedly failed: \" << strTest);\n+            // Check that flags are maximal: transaction should fail if any unset flags are set.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)\n+            {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168471",
      "id" : 531168471,
      "line" : 231,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODQ3MQ==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 231,
      "original_position" : 153,
      "original_start_line" : 230,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 153,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 230,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168471",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "consider making an alias reference for `tx.vin[i]` here, since you'll use it a lot below.",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:47:23Z",
      "diff_hunk" : "@@ -94,6 +100,65 @@ std::string FormatScriptFlags(unsigned int flags)\n     return ret.substr(0, ret.size() - 1);\n }\n \n+bool CheckTxScripts(const CTransaction& tx, const std::map<COutPoint, CScript>& mapprevOutScriptPubKeys, const std::map<COutPoint, int64_t>& mapprevOutValues, const unsigned int& flags, const PrecomputedTransactionData& txdata, const std::string& strTest, const bool expect_valid)\n+{\n+    bool tx_valid = true;\n+    ScriptError err = expect_valid ? SCRIPT_ERR_UNKNOWN_ERROR : SCRIPT_ERR_OK;\n+    for (unsigned int i = 0; i < tx.vin.size() && tx_valid; i++)\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531168936",
      "id" : 531168936,
      "line" : 108,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODkzNg==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 108,
      "original_position" : 56,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 56,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531168936",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531169696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531169696"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a really weird function. It'll now return a vector of:\r\n- first item is the sum of all the flags\r\n- then a list of the sum of all except one flag for each flag.\r\n\r\nI think the function should be left unchanged and the client do whatever it needs with the sum of all the flags. At the very least, the function should be documented.",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:49:45Z",
      "diff_hunk" : "@@ -59,10 +59,12 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"CONST_SCRIPTCODE\"), (unsigned int)SCRIPT_VERIFY_CONST_SCRIPTCODE},\n };\n \n-unsigned int ParseScriptFlags(std::string strFlags)\n+std::vector<unsigned int> ParseScriptFlags(std::string strFlags)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531169696",
      "id" : 531169696,
      "line" : 62,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2OTY5Ng==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 62,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 21,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531169696",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170275"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531170275"
         }
      },
      "author_association" : "MEMBER",
      "body" : "braces",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:51:12Z",
      "diff_hunk" : "@@ -157,24 +221,28 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK(state.IsValid());\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n-                                    strTest);\n-                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+            // Do not use TrimFlags() in the main test in order to detect invalid verifyFlags combination in the test file.\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags[0], txdata, strTest, /* expect_valid */ true))\n+                BOOST_ERROR(\"Tx unexpectedly failed: \" << strTest);\n+            // Check that flags are maximal: transaction should fail if any unset flags are set.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)\n+            {\n+                // Backwards compatibility: Removing a flag should not invalidate a valid transaction\n+                unsigned int flags = TrimFlags(~(verify_flags[0] | (1U << i)));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true))\n+                    BOOST_ERROR(\"Tx unexpectedly failed with flag \" << ToString(i) << \" unset: \" << strTest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170275",
      "id" : 531170275,
      "line" : 235,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MDI3NQ==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 235,
      "original_position" : 157,
      "original_start_line" : 234,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 157,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 234,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531170275",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531170369"
         }
      },
      "author_association" : "MEMBER",
      "body" : "join",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:51:27Z",
      "diff_hunk" : "@@ -157,24 +221,28 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK(state.IsValid());\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n-                                    strTest);\n-                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+            // Do not use TrimFlags() in the main test in order to detect invalid verifyFlags combination in the test file.\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags[0], txdata, strTest, /* expect_valid */ true))\n+                BOOST_ERROR(\"Tx unexpectedly failed: \" << strTest);\n+            // Check that flags are maximal: transaction should fail if any unset flags are set.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)\n+            {\n+                // Backwards compatibility: Removing a flag should not invalidate a valid transaction\n+                unsigned int flags = TrimFlags(~(verify_flags[0] | (1U << i)));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true))\n+                    BOOST_ERROR(\"Tx unexpectedly failed with flag \" << ToString(i) << \" unset: \" << strTest);\n+                // Backwards compatibility: Removing some random flags should not invalidate a valid transaction\n+                flags = TrimFlags(~(verify_flags[0] | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true))\n+                    BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\n+            }\n+            for (size_t f = 1; f < verify_flags.size(); f++)\n+            {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170369",
      "id" : 531170369,
      "line" : 242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MDM2OQ==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 242,
      "original_position" : 164,
      "original_start_line" : 241,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 164,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 241,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531170369",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531170443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use range-based loop?",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:51:38Z",
      "diff_hunk" : "@@ -157,24 +221,28 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             BOOST_CHECK(state.IsValid());\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err),\n-                                    strTest);\n-                BOOST_CHECK_MESSAGE(err == SCRIPT_ERR_OK, ScriptErrorString(err));\n+            // Do not use TrimFlags() in the main test in order to detect invalid verifyFlags combination in the test file.\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, ~verify_flags[0], txdata, strTest, /* expect_valid */ true))\n+                BOOST_ERROR(\"Tx unexpectedly failed: \" << strTest);\n+            // Check that flags are maximal: transaction should fail if any unset flags are set.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)\n+            {\n+                // Backwards compatibility: Removing a flag should not invalidate a valid transaction\n+                unsigned int flags = TrimFlags(~(verify_flags[0] | (1U << i)));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true))\n+                    BOOST_ERROR(\"Tx unexpectedly failed with flag \" << ToString(i) << \" unset: \" << strTest);\n+                // Backwards compatibility: Removing some random flags should not invalidate a valid transaction\n+                flags = TrimFlags(~(verify_flags[0] | (unsigned int)InsecureRandBits(mapFlagNames.size())));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ true))\n+                    BOOST_ERROR(\"Tx unexpectedly failed with random flags \" << ToString(flags) << \": \" << strTest);\n+            }\n+            for (size_t f = 1; f < verify_flags.size(); f++)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531170443",
      "id" : 531170443,
      "line" : 241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MDQ0Mw==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 241,
      "original_position" : 163,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 163,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531170443",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531171017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531171017"
         }
      },
      "author_association" : "MEMBER",
      "body" : "join these lines and don't use the local variable `fValid` (it means 'the test file was malformed' above and 'the transaction failed validation' here).",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:53:14Z",
      "diff_hunk" : "@@ -240,27 +306,34 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n             TxValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n+            if (!fValid) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531171017",
      "id" : 531171017,
      "line" : 309,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MTAxNw==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 309,
      "original_position" : 190,
      "original_start_line" : 308,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 190,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : 308,
      "start_side" : "RIGHT",
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531171017",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531171230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531171230"
         }
      },
      "author_association" : "MEMBER",
      "body" : "or just use range-based for loop.",
      "commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "created_at" : "2020-11-26T17:53:49Z",
      "diff_hunk" : "@@ -240,27 +306,34 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n             TxValidationState state;\n             fValid = CheckTransaction(tx, state) && state.IsValid();\n+            if (!fValid) {\n+                BOOST_CHECK_MESSAGE(test[2].get_str() == \"BADTX\", strTest);\n+                continue;\n+            }\n \n             PrecomputedTransactionData txdata(tx);\n-            for (unsigned int i = 0; i < tx.vin.size() && fValid; i++)\n-            {\n-                if (!mapprevOutScriptPubKeys.count(tx.vin[i].prevout))\n-                {\n-                    BOOST_ERROR(\"Bad test: \" << strTest);\n-                    break;\n-                }\n+            std::vector<unsigned int> verify_flags = ParseScriptFlags(test[2].get_str());\n \n-                unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n-                CAmount amount = 0;\n-                if (mapprevOutValues.count(tx.vin[i].prevout)) {\n-                    amount = mapprevOutValues[tx.vin[i].prevout];\n-                }\n-                const CScriptWitness *witness = &tx.vin[i].scriptWitness;\n-                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      witness, verify_flags, TransactionSignatureChecker(&tx, i, amount, txdata), &err);\n+            // Not using FillFlags() in the main test, in order to detect invalid verifyFlags combination\n+            if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, verify_flags[0], txdata, strTest, /* expect_valid */ false))\n+                BOOST_ERROR(\"Tx unexpectedly passed: \" << strTest);\n+            // Check that flags are minimal: transaction should succeed if any set flags are unset.\n+            for (size_t i = 0; i < mapFlagNames.size(); i++)\n+            {\n+                // Backwards compatibility: Adding a flag should not validate an invalid transaction\n+                unsigned int flags = FillFlags(verify_flags[0] | (1U << i));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false))\n+                    BOOST_ERROR(\"Tx unexpectedly passed with flag \" << ToString(i) << \" set: \" << strTest);\n+                // Backwards compatibility: Adding some random flags should not validate an invalid transaction\n+                flags = FillFlags(verify_flags[0] | (unsigned int)InsecureRandBits(mapFlagNames.size()));\n+                if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags, txdata, strTest, /* expect_valid */ false))\n+                    BOOST_ERROR(\"Tx unexpectedly passed with random flags \" << ToString(flags) << \": \" << strTest);\n+            }\n+            for (size_t f = 1; f < verify_flags.size(); f++) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19698#discussion_r531171230",
      "id" : 531171230,
      "in_reply_to_id" : 523373709,
      "line" : 332,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE3MTIzMA==",
      "original_commit_id" : "110239f2ff673eaea8f59c650792f3641855263d",
      "original_line" : 332,
      "original_position" : 228,
      "original_start_line" : null,
      "path" : "src/test/transaction_tests.cpp",
      "position" : 228,
      "pull_request_review_id" : 539485735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19698",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-11-26T17:56:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/531171230",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   }
]
