[
   {
      "author_association" : "MEMBER",
      "body" : "@sumBTC you might find this useful--I've been using it to observe your issue https://github.com/bitcoin/bitcoin/issues/19500.",
      "created_at" : "2020-08-02T17:51:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667704787",
      "id" : 667704787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcwNDc4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-02T17:51:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667704787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@jonatack Ah was wondering what you were using. Nice to know this kind of information will soon be part of bitcoin-cli.",
      "created_at" : "2020-08-02T18:21:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667707855",
      "id" : 667707855,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcwNzg1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-02T18:21:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667707855",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/6618131?v=4",
         "events_url" : "https://api.github.com/users/sumBTC/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sumBTC/followers",
         "following_url" : "https://api.github.com/users/sumBTC/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sumBTC/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sumBTC",
         "id" : 6618131,
         "login" : "sumBTC",
         "node_id" : "MDQ6VXNlcjY2MTgxMzE=",
         "organizations_url" : "https://api.github.com/users/sumBTC/orgs",
         "received_events_url" : "https://api.github.com/users/sumBTC/received_events",
         "repos_url" : "https://api.github.com/users/sumBTC/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sumBTC/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sumBTC/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sumBTC"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Added an `asmap` column to the detailed peers report after a [tweet by @wtogami](https://twitter.com/jonatack/status/1290004560606457858) reminded me of it.",
      "created_at" : "2020-08-02T20:06:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667718507",
      "id" : 667718507,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcxODUwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-02T20:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667718507",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2020-08-02T20:13:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667719280",
      "id" : 667719280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcxOTI4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-20T21:09:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667719280",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Especially on the _detailed peers listing_ as `getpeerinfo` formatted for humans.",
      "created_at" : "2020-08-03T10:00:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-667932302",
      "id" : 667932302,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzkzMjMwMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-03T10:00:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667932302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Wow, this is really neat!\r\n\r\nAs a pure terminal user I love the `bitcoin-cli -netinfo t` output -- that is terminal usability at its finest!\r\n\r\nConcept ACK\r\n",
      "created_at" : "2020-08-03T15:51:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-668098753",
      "id" : 668098753,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2ODA5ODc1Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-03T15:51:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668098753",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465344036"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465344036"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "just for me to understand: Why do you check if the address **contains** \".onion\" and not **ends with** it (as it's done in `src/netaddress.cpp`)?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-04T21:36:04Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465344036",
      "id" : 465344036,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NDAzNg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 329,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 461191719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465344036",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465368500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465368500"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: This is only the IPv4 localhost. Maybe:\r\n\r\n```suggestion\r\nstatic const std::string LOCALHOST_IPV4{\"127.0.0.1\"};\r\n```\r\n\r\n",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-04T22:36:30Z",
      "diff_hunk" : "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};\n+static const std::string LOCALHOST{\"127.0.0.1\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465368500",
      "id" : 465368500,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODUwMA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 20,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/netaddress.h",
      "position" : null,
      "pull_request_review_id" : 461191719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465368500",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465369430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465369430"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Does it make sense to use a `LOCALHOST_IPV6` constant here as well? (even if you would otherwise not touch it)",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-04T22:39:27Z",
      "diff_hunk" : "@@ -167,7 +168,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.clear();\n     CNetAddr localv4;\n     CNetAddr localv6;\n-    LookupHost(\"127.0.0.1\", localv4, false);\n+    LookupHost(LOCALHOST, localv4, false);\n     LookupHost(\"::1\", localv6, false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465369430",
      "id" : 465369430,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2OTQzMA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 171,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 461191719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465369430",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465378252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465378252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Probably needs a unit behind the `min ping` and `ping` values.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-04T23:05:07Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465378252",
      "id" : 465378252,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3ODI1Mg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 461191719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465378252",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465379408"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465379408"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I found ping times displayed in seconds to be somewhat uninutive. I'd personally prefer milliseconds.\r\n\r\n(Had pings under one second to most of my peers. This might be different for other users.)",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-04T23:08:48Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465379408",
      "id" : 465379408,
      "line" : 415,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3OTQwOA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 128,
      "original_start_line" : 403,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 132,
      "pull_request_review_id" : 461191719,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : 414,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465379408",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465394468"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465394468"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Longer peer ids as found on long running nodes cause the table columns to become misaligned.  \r\n\r\n```\r\nPeer connections sorted by direction and min ping\r\n  id  <->  relay   conn  min ping    ping     asmap  address\r\n13417   in   full   ipv4  0.005165  0.005495          XXX.XXX.XX.XX:XXXXX\r\n13715  out  block   ipv4  0.011632  0.013025          XX.XXX.XX.XXX:XXXX\r\n   5  out   full   ipv4  0.014787  0.016915          XXX.XX.XX.XX:XXXX\r\n```\r\n\r\n\r\n",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-04T23:57:56Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r465394468",
      "id" : 465394468,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5NDQ2OA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 461252635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/465394468",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466315958"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466315958"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no need for this inline comment",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:24:31Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466315958",
      "id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNTk1OA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 462394409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466315958",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466317336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466317336"
         }
      },
      "author_association" : "MEMBER",
      "body" : "remove inline comment",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:27:10Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466317336",
      "id" : 466317336,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxNzMzNg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/torcontrol.cpp",
      "position" : null,
      "pull_request_review_id" : 462394409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466317336",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320226"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:33:18Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320226",
      "id" : 466320226,
      "in_reply_to_id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDIyNg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 462399712,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320226",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320295"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:33:28Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466320295",
      "id" : 466320295,
      "in_reply_to_id" : 466317336,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDI5NQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/torcontrol.cpp",
      "position" : null,
      "pull_request_review_id" : 462399805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466320295",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322601"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322601"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7e0727b73841d5f2abc96cd2fac50de74546a281\r\n\r\nFor Bitcoin Core it seems conventional to use `-netinfo=<...>`, no?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:38:17Z",
      "diff_hunk" : "@@ -58,6 +59,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions(argsman);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional boolean argument can be passed for a detailed peers listing (default: false).\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322601",
      "id" : 466322601,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjYwMQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 61,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 462401586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322601",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@jnewbery agreed, I added it for reviewers so they wouldn't wonder why this was added ;) will remove\r\n\r\n@hebasto if you are referring to *Every .cpp and .h file should #include every header file it directly uses classes, functions or other definitions from, even if those headers are already included indirectly through other headers.*... yes, this is why I added the #include. Are you posting the link for a different reason?\r\n\r\n",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:38:37Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466322757",
      "id" : 466322757,
      "in_reply_to_id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjc1Nw==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 462402928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466322757",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466323888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323888"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7e0727b73841d5f2abc96cd2fac50de74546a281\r\n\r\nMind following [convention](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#c-data-structures) about `switch` statement on an enumeration?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:40:53Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466323888",
      "id" : 466323888,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzg4OA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 342,
      "original_position" : 66,
      "original_start_line" : 337,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 462401586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466323888",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466324599"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466324599"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I added it for reviewers so they wouldn't wonder why this was added\r\n\r\nYou can leave github comments on your own PR for that. If we added a code comment \"// already included via .... \" to all includes that were already included indirectly, then most of the includes would have that comment.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:42:19Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466324599",
      "id" : 466324599,
      "in_reply_to_id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNDU5OQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 462405106,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466324599",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466325434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466325434"
         }
      },
      "author_association" : "MEMBER",
      "body" : "56b156dc161b766e4aaae1ca07c719a3c599c4cb\r\n\r\n```suggestion\r\nstatic const std::string ONION_DOMAIN{\".onion\"};\r\n```",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:43:55Z",
      "diff_hunk" : "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466325434",
      "id" : 466325434,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNTQzNA==",
      "original_commit_id" : "56b156dc161b766e4aaae1ca07c719a3c599c4cb",
      "original_line" : 19,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/netaddress.h",
      "position" : null,
      "pull_request_review_id" : 462401586,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466325434",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326730"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agreed",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:46:31Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326730",
      "id" : 466326730,
      "in_reply_to_id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNjczMA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 462407627,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326730",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326813"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326813"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Are you posting the link for a different reason?\r\n\r\nNo, you point the reason exactly :)",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T10:46:39Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466326813",
      "id" : 466326813,
      "in_reply_to_id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNjgxMw==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 462407730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466326813",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Concept ACK, but not sure about `min ping` data usefulness though.\r\n\r\nThanks for having a look. `min ping` is an inbound eviction criterium and I look at it more than `ping`; also mulling adding a human-readable `conntime` column and maybe a couple others (last send/recv, addnode).",
      "created_at" : "2020-08-06T10:54:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-669858187",
      "id" : 669858187,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTg1ODE4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-06T10:54:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669858187",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > Concept ACK, but not sure about `min ping` data usefulness though.\r\n> \r\n> Thanks for having a look. `min ping` is an inbound eviction criterium and I look at it more than `ping`; also mulling adding a human-readable `conntime` column and maybe a couple others (last send/recv, addnode).\r\n\r\nGreat!",
      "created_at" : "2020-08-06T10:55:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-669858787",
      "id" : 669858787,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTg1ODc4Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-06T10:55:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669858787",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466502794"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466502794"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems `netaddress.cpp` is part of `LIBBITCOIN_COMMON`, which is not linked into `bitcoin-cli`. So you're not currently allowed to use this here.\r\n\r\nAs you are only including this header to get a few constants, `ONION` and `LOCALHOST`, might make sense to factor them out to another header? or even just duplicate them?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T15:37:35Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <netaddress.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466502794",
      "id" : 466502794,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMjc5NA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 462638484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466502794",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept and functionality ACK",
      "created_at" : "2020-08-06T15:38:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-670005797",
      "id" : 670005797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MDAwNTc5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-06T15:38:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670005797",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466574579"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466574579"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think adding user agent in verbose mode is worthy. Beyond mode of display, how do you see the data split between this new RPC and `getpeerinfo` ? Static-set-at-once-at-connection-opening versus dynamic-messages-processed ?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-06T17:32:08Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r466574579",
      "id" : 466574579,
      "line" : 335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU3NDU3OQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 335,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 52,
      "pull_request_review_id" : 462733775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/466574579",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK :+1: ",
      "created_at" : "2020-08-07T12:09:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-670485225",
      "id" : 670485225,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MDQ4NTIyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-07T12:09:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670485225",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467568717"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467568717"
         }
      },
      "author_association" : "MEMBER",
      "body" : "By user agent, do you mean getpeerinfo.subver? aka `cleanSubVer` in net.h",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T10:58:24Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467568717",
      "id" : 467568717,
      "in_reply_to_id" : 466574579,
      "line" : 335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU2ODcxNw==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 335,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 52,
      "pull_request_review_id" : 463863953,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467568717",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594332"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! I forgot to look at the makefile. Moved them to `httpserver.h`, which seems to be allowed, IIUC.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:03:15Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <netaddress.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594332",
      "id" : 467594332,
      "in_reply_to_id" : 466502794,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDMzMg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881214,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594332",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594357"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594357"
         }
      },
      "author_association" : "MEMBER",
      "body" : "AFAICT the outbound onion addrs returned by getpeerinfo don't end with `.onion` but with `.onion:<port id>`",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:03:33Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594357",
      "id" : 467594357,
      "in_reply_to_id" : 465344036,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDM1Nw==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 329,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881234,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594357",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594362"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594362"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:03:39Z",
      "diff_hunk" : "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};\n+static const std::string LOCALHOST{\"127.0.0.1\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594362",
      "id" : 467594362,
      "in_reply_to_id" : 465368500,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDM2Mg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 20,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/netaddress.h",
      "position" : null,
      "pull_request_review_id" : 463881241,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594362",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594375"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594375"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:03:45Z",
      "diff_hunk" : "@@ -167,7 +168,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.clear();\n     CNetAddr localv4;\n     CNetAddr localv6;\n-    LookupHost(\"127.0.0.1\", localv4, false);\n+    LookupHost(LOCALHOST, localv4, false);\n     LookupHost(\"::1\", localv6, false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594375",
      "id" : 467594375,
      "in_reply_to_id" : 465369430,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDM3NQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 171,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 463881249,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594375",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594437"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594437"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done by adding units in a line at the bottom to save on horizontal space",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:04:23Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594437",
      "id" : 467594437,
      "in_reply_to_id" : 465378252,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDQzNw==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881292,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594437",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594460"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594460"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done for min ping and ping",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:04:34Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594460",
      "id" : 467594460,
      "in_reply_to_id" : 465379408,
      "line" : 415,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDQ2MA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 128,
      "original_start_line" : 403,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 132,
      "pull_request_review_id" : 463881306,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : 414,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594460",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594508"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594508"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done; the spacing is now dynamically based on the size of the largest peer id",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:04:46Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594508",
      "id" : 467594508,
      "in_reply_to_id" : 465394468,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDUwOA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594508",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594611"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594611"
         }
      },
      "author_association" : "MEMBER",
      "body" : "also moved the id column next to the version and address ones",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:05:22Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        std::vector<m_peer> peers;\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, min_ping, ping, addr, conn_type, !is_inbound, is_block_relay});\n+            }\n+        }\n+        // Generate reports\n+        std::string result;\n+        // Report 1: peer connections sorted by direction and minimum ping time\n+        if (m_verbose) {\n+            result += \"Peer connections sorted by direction and min ping\\n  id  <->  relay   conn  min ping    ping     asmap  address\\n\";\n+            std::sort(peers.begin(), peers.end());\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\"%4i  %3s  %5s  %5s  %-8d  %-8d  %6s  %s\\n\", peer.id, peer.is_outbound ? \"out\" : \"in\", peer.is_block_relay ? \"block\" : \"full\", ConnTypeEnumToString(peer.conn_type), peer.min_ping, peer.ping, peer.mapped_as == 0 ? \"\" : ToString(peer.mapped_as), peer.addr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594611",
      "id" : 467594611,
      "in_reply_to_id" : 465394468,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDYxMQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 415,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881388,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594611",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594662"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594662"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:05:42Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n \n #include <chainparamsbase.h>\n #include <compat.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594662",
      "id" : 467594662,
      "in_reply_to_id" : 466315958,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDY2Mg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/httpserver.cpp",
      "position" : null,
      "pull_request_review_id" : 463881417,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594662",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:05:50Z",
      "diff_hunk" : "@@ -6,6 +6,7 @@\n #include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n+#include <netaddress.h> // For explicitness; already included via netbase.h",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594671",
      "id" : 467594671,
      "in_reply_to_id" : 466317336,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDY3MQ==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 9,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/torcontrol.cpp",
      "position" : null,
      "pull_request_review_id" : 463881428,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594671",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594696"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unless I'm confused, I think `-option=<...>` would be for config args, not CLI ones. See `-generate`.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:06:02Z",
      "diff_hunk" : "@@ -58,6 +59,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-getinfo\", \"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     SetupChainParamsBaseOptions(argsman);\n     argsman.AddArg(\"-named\", strprintf(\"Pass named instead of positional arguments (default: %s)\", DEFAULT_NAMED), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-netinfo\", \"Get network peer connection information from the remote server. An optional boolean argument can be passed for a detailed peers listing (default: false).\", ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594696",
      "id" : 467594696,
      "in_reply_to_id" : 466322601,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDY5Ng==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 61,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594696",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! -- done",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:06:13Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST) == 0 && addr_local.find(ONION) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        default: return \"invalid\";\n+        };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594703",
      "id" : 467594703,
      "in_reply_to_id" : 466323888,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDcwMw==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 342,
      "original_position" : 66,
      "original_start_line" : 337,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881454,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594703",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "done",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:06:19Z",
      "diff_hunk" : "@@ -16,6 +16,9 @@\n #include <string>\n #include <vector>\n \n+static const std::string ONION{\".onion\"};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594708",
      "id" : 467594708,
      "in_reply_to_id" : 466325434,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDcwOA==",
      "original_commit_id" : "56b156dc161b766e4aaae1ca07c719a3c599c4cb",
      "original_line" : 19,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/netaddress.h",
      "position" : null,
      "pull_request_review_id" : 463881457,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594708",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594740"
         }
      },
      "author_association" : "MEMBER",
      "body" : "added version+subver together in a column",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:06:39Z",
      "diff_hunk" : "@@ -291,6 +293,146 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        m_conn_type conn_type;\n+        bool is_outbound;\n+        bool is_block_relay;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467594740",
      "id" : 467594740,
      "in_reply_to_id" : 466574579,
      "line" : 335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NDc0MA==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 335,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 52,
      "pull_request_review_id" : 463881484,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467594740",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467595062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467595062"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops, *A new circular dependency in the form of \"httpserver -> netbase -> netaddress -> httpserver appears to have been introduced.* Will create a header, I guess.\r\n\r\nEdit: placed them in `util/url.h`\r\n\r\nEdit 2: removed the constants.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-09T15:10:08Z",
      "diff_hunk" : "@@ -9,6 +9,7 @@\n \n #include <chainparamsbase.h>\n #include <clientversion.h>\n+#include <netaddress.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r467595062",
      "id" : 467595062,
      "in_reply_to_id" : 466502794,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzU5NTA2Mg==",
      "original_commit_id" : "7e0727b73841d5f2abc96cd2fac50de74546a281",
      "original_line" : 12,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 463881730,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/467595062",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> @sumBTC you might find this useful--I've been using it to observe your issue #19500.\r\n\r\n",
      "created_at" : "2020-08-09T15:25:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671065280",
      "id" : 671065280,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTA2NTI4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-09T15:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671065280",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/69403487?v=4",
         "events_url" : "https://api.github.com/users/yufi1213/events{/privacy}",
         "followers_url" : "https://api.github.com/users/yufi1213/followers",
         "following_url" : "https://api.github.com/users/yufi1213/following{/other_user}",
         "gists_url" : "https://api.github.com/users/yufi1213/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/yufi1213",
         "id" : 69403487,
         "login" : "yufi1213",
         "node_id" : "MDQ6VXNlcjY5NDAzNDg3",
         "organizations_url" : "https://api.github.com/users/yufi1213/orgs",
         "received_events_url" : "https://api.github.com/users/yufi1213/received_events",
         "repos_url" : "https://api.github.com/users/yufi1213/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/yufi1213/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/yufi1213/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/yufi1213"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Took most all of the feedback and also added `lastsend` and `lastrecv` in addition to the requested `version` column.",
      "created_at" : "2020-08-09T15:51:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671068195",
      "id" : 671068195,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTA2ODE5NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-09T15:51:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671068195",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Did not see anything in the `asmap` column. Guess that's due to me not using the asmap feature.\r\n\r\nUpdated to not display the `asmap` column unless it is being used.\r\n",
      "created_at" : "2020-08-09T15:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671068570",
      "id" : 671068570,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTA2ODU3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-09T15:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671068570",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "What I am using at the moment is this version with additional columns for the time since the last tx (in sec) and the last block (in min), done by adding `nLastBlockTime` and `nLastTXTime` to `getpeerinfo`, because these are possible criteria for inbound peer evictions. Maybe for a follow-up.\r\n\r\n<details><summary>code diff</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/bitcoin-cli.cpp b/src/bitcoin-cli.cpp\r\nindex 32d9cb9d3d..3b14806bea 100644\r\n--- a/src/bitcoin-cli.cpp\r\n+++ b/src/bitcoin-cli.cpp\r\n@@ -307,8 +307,10 @@ private:\r\n         int mapped_as;\r\n         int version;\r\n         int64_t conn_time;\r\n+        int64_t last_block;\r\n         int64_t last_recv;\r\n         int64_t last_send;\r\n+        int64_t last_tx;\r\n         double min_ping;\r\n         double ping;\r\n         std::string addr;\r\n@@ -410,11 +412,13 @@ public:\r\n                 const int version{peer[\"version\"].get_int()};\r\n                 const std::string sub_version{peer[\"subver\"].get_str()};\r\n                 const int64_t conn_time{peer[\"conntime\"].get_int64()};\r\n+                const int64_t last_block{peer[\"last_block\"].get_int64()};\r\n                 const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\r\n                 const int64_t last_send{peer[\"lastsend\"].get_int64()};\r\n+                const int64_t last_tx{peer[\"last_tx\"].get_int64()};\r\n                 const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\r\n                 const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\r\n-                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\r\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_block, last_recv, last_send, last_tx, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\r\n                 is_asmap_on |= (mapped_as != 0);\r\n                 max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\r\n                 max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\r\n@@ -425,12 +429,12 @@ public:\r\n         // Report 1: detailed peer connections sorted by direction and minimum ping time\r\n         if (m_verbose) {\r\n             std::sort(peers.begin(), peers.end());\r\n-            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn   time minping   ping lastsend lastrecv \";\r\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn   time minping   ping lastsend lastrecv lasttx lastblk \";\r\n             if (is_asmap_on) result += \"asmap \";\r\n             result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\r\n             for (const m_peer& peer : peers) {\r\n                 result += strprintf(\r\n-                    \"%3s %5s %5s%7s%8d%7d %8s %8s%*i %*s %-*s %s\\n\",\r\n+                    \"%3s %5s %5s%7s%8d%7d %8s %8s%7s%8s%*i %*s %-*s %s\\n\",\r\n                     peer.is_outbound ? \"out\" : \"in\",\r\n                     peer.is_block_relay ? \"block\" : \"full\",\r\n                     ConnTypeEnumToString(peer.conn_type),\r\n@@ -439,6 +443,8 @@ public:\r\n                     round(1000 * peer.ping),\r\n                     peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\r\n                     peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\r\n+                    peer.last_tx == 0 ? \"\" : ToString(time_now - peer.last_tx),\r\n+                    peer.last_block == 0 ? \"\" : ToString(time_now - peer.last_block),\r\n                     is_asmap_on ? 6 : 0, // variable spacing\r\n                     is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\r\n                     max_peer_id_length, // variable spacing\r\n@@ -447,7 +453,7 @@ public:\r\n                     ToString(peer.version) + peer.sub_version,\r\n                     peer.addr);\r\n             }\r\n-            result += \"                   min      ms     ms      sec      sec\\n\\n\";\r\n+            result += \"                   min      ms     ms      sec      sec    sec     sec\\n\\n\";\r\n         }\r\n         // Report 2: peer connections summary\r\n         total_i = ipv4_i + ipv6_i + onion_i;\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex 0c56cddbdc..15f2b6044c 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -530,6 +530,8 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\r\n     X(nLastRecv);\r\n     X(nTimeConnected);\r\n     X(nTimeOffset);\r\n+    X(nLastBlockTime);\r\n+    X(nLastTXTime);\r\n     stats.addrName = GetAddrName();\r\n     X(nVersion);\r\n     {\r\ndiff --git a/src/net.h b/src/net.h\r\nindex 17d8fda372..4ecfcce223 100644\r\n--- a/src/net.h\r\n+++ b/src/net.h\r\n@@ -594,6 +594,8 @@ public:\r\n     int64_t m_ping_usec;\r\n     int64_t m_ping_wait_usec;\r\n     int64_t m_min_ping_usec;\r\n+    int64_t nLastBlockTime;\r\n+    int64_t nLastTXTime;\r\n     CAmount minFeeFilter;\r\n     // Our address, as reported by the peer\r\n     std::string addrLocal;\r\ndiff --git a/src/rpc/net.cpp b/src/rpc/net.cpp\r\nindex 9981ea35df..533d424611 100644\r\n--- a/src/rpc/net.cpp\r\n+++ b/src/rpc/net.cpp\r\n@@ -169,10 +169,13 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\r\n         obj.pushKV(\"relaytxes\", stats.fRelayTxes);\r\n         obj.pushKV(\"lastsend\", stats.nLastSend);\r\n         obj.pushKV(\"lastrecv\", stats.nLastRecv);\r\n+        obj.pushKV(\"last_block\", stats.nLastBlockTime);\r\n+        obj.pushKV(\"last_tx\", stats.nLastTXTime);\r\n         obj.pushKV(\"bytessent\", stats.nSendBytes);\r\n         obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\r\n         obj.pushKV(\"conntime\", stats.nTimeConnected);\r\n         obj.pushKV(\"timeoffset\", stats.nTimeOffset);\r\n```\r\n</p></details>\r\n\r\nOutput\r\n```\r\nPeer connections sorted by direction and min ping\r\n<-> relay  conn   time minping   ping lastsend lastrecv lasttx lastblk  asmap   id version                                    address\r\n in  full  ipv6    902      47     58        4       25                 14061   11 70015/bitnodes.earn.com:0.1/               [2a03:b0c0:2:d0::4bc:2001]:21160\r\n in  full  ipv6    492      53     66        4       49                 34878  995 70002/dsn.tm.kit.edu/bitcoin:0.9.99/       [2a00:1398:4:2a03:921b:eff:fe35:aed9]:41110\r\n in block  ipv6     55      53     69        1        1                 14061 2092 70012/bitcoinj:0.15.6/                     [2a03:b0c0:3:f0::3a:8000]:38318\r\n in  full  ipv6    902      54    120        4       25                 34878   12 70002/dsn.tm.kit.edu/bitcoin:0.9.99/       [2a00:1398:4:2a03:4e52:62ff:fe22:6c13]:41222\r\n in  full  ipv6    900      57     74        4       27                 24940   28 70015/bitnodes.io:0.1/                     [2a01:4f8:10a:37ee::2]:60418\r\n in  full  ipv6    839     131    239        4        2    188          12637  154 70015/Satoshi:0.18.1/                      [2a0b:f4c2:2::1]:4237\r\n in  full  ipv6      1     214    214        5       72                 16509 2240 70015/Satoshi:0.19.1/                      [2600:1f16:625:e00:ab19:5fe3:f155:1371]:53146\r\n in  full  ipv6      1     226    226        5        7                 16509 2239 70015/Satoshi:0.19.1/                      [2406:da18:f7c:4351:5729:102:998c:d41a]:35564\r\n in  full  ipv6      9     239    273        5       92                 54098 2204 70015/bitcoinj:0.15-SNAPSHOT/              [2604:d500:4:1::2]:29044\r\n in  full  ipv6      2     262    322        5       25                 54098 2237 70015/bitcoinj:0.13.4/Bitcoin Wallet:4.46/ [2604:d500:4:1::2]:37601\r\n in  full  ipv6      0     277    277        5       15                 54098 2241 70015/Satoshi:0.10.1/                      [2604:d500:4:1::2]:36310\r\n in  full  ipv6      2     286    286        5       25                 54098 2236 70015/bitcoinj:0.14.4/Bitcoin:1.075/       [2604:d500:4:1::2]:41908\r\n in  full onion    783     297   1357        4       50                        286 70015/bitnodes.io:0.1/                     127.0.0.1:59452\r\n in block onion    614     616    998       19       19                        702 70015/Satoshi:0.20.0/                      127.0.0.1:37594\r\n in  full onion     77   58745 157842        5       23                       2038 70015/Satoshi:0.19.1/                      127.0.0.1:33374\r\nout  full  ipv4     92      57     99        2        9     13          43350 2006 70015/Satoshi:0.18.0/                      109.201.140.9:8333\r\nout  full  ipv4    901      67    249        2        7     10      18  24940   21 70015/Satoshi:0.19.99/                     94.130.10.158:8333\r\nout  full  ipv4    352      68    130        2        2      2     105  12876 1357 70015/Satoshi:0.19.0.1/                    51.158.27.215:8333\r\nout block  ipv4    901     129    201       76       76            277  13768   22 70015/Satoshi:0.19.1/                      64.227.13.20:8333\r\nout block  ipv4    901     203    280       67       67            839  14061   25 70015/Satoshi:0.17.2/                      165.22.223.100:8333\r\nout  full  ipv4    281     211    248        3        3      3          63949 1527 70015/Satoshi:0.17.1/                      173.230.157.253:8333\r\nout  full  ipv4    638     309    391        2       30     30     247 132203  637 70015/Satoshi:0.18.0/                      129.226.125.10:8333\r\nout  full onion     23     461    789        2       13     13                2163 70015/Satoshi:0.20.99/                     XXXXXXXXy7q47OID.onion:8333\r\nout  full onion    902     545   1003        3        5     35                  20 70015/Satoshi:0.19.0.1/                    XXXXXXXXuomUx6ln.onion:8333\r\nout  full onion    223     705   1261        1        1    327                1706 70015/Satoshi:0.19.1/                      XXXXXXXXmexaT7zd.onion:8333\r\nout  full onion    903     724   1267        4        4   2414                   8 70015/Satoshi:0.20.0/                      XXXXXXXX5pans2i4.onion:8333\r\n                   min      ms     ms      sec      sec    sec     min\r\n\r\nInbound and outbound peer connections\r\nin:  ipv4   0  |  ipv6  12  |  onion   3  |  total  15  (2 block-relay)\r\nout: ipv4   7  |  ipv6   0  |  onion   4  |  total  11  (2 block-relay)\r\nall: 26\r\n\r\nLocal addresses\r\nXXXX:XXX:53c:a200:bb54:3be5:c3d0:9ce5  |  port  8333  |  score   1505\r\nXXXXXXXXrn5pknnd.onion                 |  port  8333  |  score    235\r\n```\r\n",
      "created_at" : "2020-08-09T19:48:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-671093420",
      "id" : 671093420,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MTA5MzQyMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-10T10:02:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/671093420",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468039429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039429"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`ONION_EXTENSION` or `ONION_SUFFIX` would be a more accurate name here imo",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-10T16:45:11Z",
      "diff_hunk" : "@@ -102,7 +103,7 @@ bool CNetAddr::SetInternal(const std::string &name)\n  */\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n-    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == ONION_DOMAIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468039429",
      "id" : 468039429,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzOTQyOQ==",
      "original_commit_id" : "5cdce7a07547f90ae5ea81c7ea8cc9314717d5b2",
      "original_line" : 106,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/netaddress.cpp",
      "position" : null,
      "pull_request_review_id" : 464400314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468039429",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468042236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468042236"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't think a comment should recite the implementation details of the code. For this level of detail, ppl can read the code. Same with the two functions below.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-10T16:50:07Z",
      "diff_hunk" : "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468042236",
      "id" : 468042236,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MjIzNg==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 325,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 464400314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468042236",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468068980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468068980"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think agreement is now to not allow \"1\" instead of \"true\" if it can be avoided. Came up here: https://github.com/bitcoin/bitcoin/pull/19544#discussion_r458695235",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-10T17:38:17Z",
      "diff_hunk" : "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION_DOMAIN) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST_IPV4) == 0 && addr_local.find(ONION_DOMAIN) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468068980",
      "id" : 468068980,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA2ODk4MA==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 357,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 464400314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468068980",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468075252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468075252"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would expect something like this instead:\r\n```suggestion\r\n     * @returns true if addr is identified as IPv6. */\r\n```",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-10T17:49:11Z",
      "diff_hunk" : "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468075252",
      "id" : 468075252,
      "in_reply_to_id" : 468042236,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA3NTI1Mg==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 325,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 464446233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468075252",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468834976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468834976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure about initialisation order here.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-11T20:08:30Z",
      "diff_hunk" : "@@ -28,7 +29,7 @@\n #include <event2/thread.h>\n \n /** Default control port */\n-const std::string DEFAULT_TOR_CONTROL = \"127.0.0.1:9051\";\n+const std::string DEFAULT_TOR_CONTROL = LOCALHOST_IPV4 + \":9051\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468834976",
      "id" : 468834976,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNDk3Ng==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 32,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/torcontrol.cpp",
      "position" : null,
      "pull_request_review_id" : 465390818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468834976",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468835327"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468835327"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`ONION_TLD`?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-11T20:09:14Z",
      "diff_hunk" : "@@ -102,7 +103,7 @@ bool CNetAddr::SetInternal(const std::string &name)\n  */\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n-    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == ONION_DOMAIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468835327",
      "id" : 468835327,
      "in_reply_to_id" : 468039429,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODgzNTMyNw==",
      "original_commit_id" : "5cdce7a07547f90ae5ea81c7ea8cc9314717d5b2",
      "original_line" : 106,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/netaddress.cpp",
      "position" : null,
      "pull_request_review_id" : 465390818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468835327",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470081234"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470081234"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Interesting, thanks. That may possibly apply more to the RPC API than to the CLI, but ok, done.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-13T16:36:55Z",
      "diff_hunk" : "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */\n+    bool IsAddrIPv6(const std::string& addr) const { return addr.front() == '['; }\n+\n+    /** Whether a peer is an outbound onion connection.\n+     * @returns true if addr contains \".onion\". */\n+    bool IsOutboundOnion(const std::string& addr) const { return addr.find(ONION_DOMAIN) != std::string::npos; }\n+\n+    /** Whether a peer is an inbound onion connection.\n+     * @returns true if mapped_as == 0, addr starts with \"127.0.0.1\", and addr_local contains \".onion\". */\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(LOCALHOST_IPV4) == 0 && addr_local.find(ONION_DOMAIN) != std::string::npos;\n+    }\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\" || arg == \"1\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470081234",
      "id" : 470081234,
      "in_reply_to_id" : 468068980,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4MTIzNA==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 357,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 466931399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470081234",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084772"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084772"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Dropped the commit adding the constants.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-13T16:42:52Z",
      "diff_hunk" : "@@ -102,7 +103,7 @@ bool CNetAddr::SetInternal(const std::string &name)\n  */\n bool CNetAddr::SetSpecial(const std::string &strName)\n {\n-    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == \".onion\") {\n+    if (strName.size()>6 && strName.substr(strName.size() - 6, 6) == ONION_DOMAIN) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084772",
      "id" : 470084772,
      "in_reply_to_id" : 468039429,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NDc3Mg==",
      "original_commit_id" : "5cdce7a07547f90ae5ea81c7ea8cc9314717d5b2",
      "original_line" : 106,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/netaddress.cpp",
      "position" : null,
      "pull_request_review_id" : 466935954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084772",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084976"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the Doxygen comments.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-13T16:43:13Z",
      "diff_hunk" : "@@ -291,6 +292,180 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    /** Whether a peer is an IPv6 connection.\n+     * @returns true if addr starts with '['. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470084976",
      "id" : 470084976,
      "in_reply_to_id" : 468042236,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NDk3Ng==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 325,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 466936232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470084976",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470085563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470085563"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Not sure about initialisation order here.\r\n\r\nWas working fine for me the past weeks, but point taken. Dropped the commit adding the constants to simplify things.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-13T16:44:16Z",
      "diff_hunk" : "@@ -28,7 +29,7 @@\n #include <event2/thread.h>\n \n /** Default control port */\n-const std::string DEFAULT_TOR_CONTROL = \"127.0.0.1:9051\";\n+const std::string DEFAULT_TOR_CONTROL = LOCALHOST_IPV4 + \":9051\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470085563",
      "id" : 470085563,
      "in_reply_to_id" : 468834976,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA4NTU2Mw==",
      "original_commit_id" : "324aa5eaf9b1790f275d2af75bc821f70ff53a5f",
      "original_line" : 32,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/torcontrol.cpp",
      "position" : null,
      "pull_request_review_id" : 466937028,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470085563",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks everyone for reviewing and the 9-10 Concept ACKs.\r\n\r\nTo simplify things, I dropped the commit that added the constants, took the other feedback, and made a number of further improvements. As there were no full ACKs and almost no feedback on the code itself, and to make the changes easy to review, I organised the 200 lines of changes into step-by-step hygienic commits to hopefully garner some final ACKs.\r\n\r\nAt this point, I'd like to defer any further changes to follow-ups, as there are more improvements I'd propose as well as a release note if this is merged. So looking for ACKs now and hoping to see this in master soon.",
      "created_at" : "2020-08-13T16:56:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-673591921",
      "id" : 673591921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MzU5MTkyMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-20T15:38:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673591921",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470583883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470583883"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is undefined behavior if `addr` is empty, you might want to guard against that.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-14T12:06:08Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return addr.front() == '[';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470583883",
      "id" : 470583883,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4Mzg4Mw==",
      "original_commit_id" : "bf1c49a2a06d0ff94123ca2131aea0517423c0dd",
      "original_line" : 302,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 467522715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470583883",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470586065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470586065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> This is undefined behavior if `addr` is empty, you might want to guard against that.\r\n\r\nThanks! will fix",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-14T12:11:22Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return addr.front() == '[';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470586065",
      "id" : 470586065,
      "in_reply_to_id" : 470583883,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NjA2NQ==",
      "original_commit_id" : "bf1c49a2a06d0ff94123ca2131aea0517423c0dd",
      "original_line" : 302,
      "original_position" : 19,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : null,
      "pull_request_review_id" : 467525408,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T12:33:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470586065",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Updated with a non-empty check per `git diff bf1c49a f63cecc` (thanks!)",
      "created_at" : "2020-08-14T12:36:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674053200",
      "id" : 674053200,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDA1MzIwMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T12:36:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674053200",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470655849"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470655849"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This uses a different boolean argument parsing than the rest of the software, which doesn't interpret \"1\" as true, for example. And it doesn't raise a parse error for invalid values, but simply ignores them (and assumes them to be false). \r\nI understand that it's not possible to use `GetBoolArg` here because the arguments are passed in, but it'd be nice to be consistent.\r\n\r\nAlternatively we could make this optional argument \"verbose\"/\"v\" instead of \"true\", to not confuse it with boolean parsing at all. I don't know.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-14T14:24:59Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470655849",
      "id" : 470655849,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1NTg0OQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 355,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 72,
      "pull_request_review_id" : 467617377,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T14:28:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470655849",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested and code review ACK f63ceccca31aa624819b429d015f8f1bf2daf49f, my comment above is just a small nit.\r\nTested it on a busy node and it works great.",
      "created_at" : "2020-08-14T14:52:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674113018",
      "id" : 674113018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDExMzAxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T14:52:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674113018",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470706424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470706424"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, new context. As this is very simple, doesn't wrap any RPC arguments and will only be used by humans, I began with the simplest (and probably least annoying option to users) of not raising parsing errors.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-14T15:46:01Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470706424",
      "id" : 470706424,
      "in_reply_to_id" : 470655849,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwNjQyNA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 355,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 72,
      "pull_request_review_id" : 467682585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-15T11:48:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470706424",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470709201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470709201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I originally counted \"1\" as truthy but removed that after https://github.com/bitcoin/bitcoin/pull/19643#discussion_r468068980.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-14T15:51:08Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r470709201",
      "id" : 470709201,
      "in_reply_to_id" : 470655849,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwOTIwMQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 355,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 72,
      "pull_request_review_id" : 467686084,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-14T15:51:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470709201",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Tested on multiple nodes and light code review ACK f63ceccca31aa624819b429d015f8f1bf2daf49f. \r\n\r\nAwesome that this is backwards compatible with e.g. Bitcoin Core v0.18 as well!",
      "created_at" : "2020-08-14T16:53:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674166571",
      "id" : 674166571,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDE2NjU3MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T16:53:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674166571",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/19157360?v=4",
         "events_url" : "https://api.github.com/users/0xB10C/events{/privacy}",
         "followers_url" : "https://api.github.com/users/0xB10C/followers",
         "following_url" : "https://api.github.com/users/0xB10C/following{/other_user}",
         "gists_url" : "https://api.github.com/users/0xB10C/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/0xB10C",
         "id" : 19157360,
         "login" : "0xB10C",
         "node_id" : "MDQ6VXNlcjE5MTU3MzYw",
         "organizations_url" : "https://api.github.com/users/0xB10C/orgs",
         "received_events_url" : "https://api.github.com/users/0xB10C/received_events",
         "repos_url" : "https://api.github.com/users/0xB10C/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/0xB10C/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/0xB10C/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/0xB10C"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tested ACK f63ceccca31aa624819b429d015f8f1bf2daf49f\r\n\r\nReviewed changes since last review per `git diff 324aa5e f63cecc`. Tested on a testnet node.",
      "created_at" : "2020-08-14T17:52:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674191423",
      "id" : 674191423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDE5MTQyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-14T17:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674191423",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471455320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471455320"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "IMO `-netinfo verbose` is clearer than `-netinfo true`. My wish list:\r\n\r\n* change it to `-netinfo verbose`\r\n* make a reusable function that takes a string and returns `Optional<bool>`. It can support `true/false`, `t/f`, `yes/no`, `y/n`, `1/0`.\r\n* leave it as is (silently interpreting e.g. `truw` as `false` :/)",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T12:49:39Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471455320",
      "id" : 471455320,
      "in_reply_to_id" : 470655849,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1NTMyMA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 355,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 72,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471455320",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471475084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471475084"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is `net` more suitable here than `conn`? The values printed are e.g. `ipv4`, `ipv6`.\r\n\r\nWe have `minping` and `ping`. It is unclear whether `ping` is the last ping or average ping.\r\nThe output from `ping(1)` contains something like\r\n```\r\nmin/avg/max/mdev = 367.149/488.941/628.650/107.507 ms\r\n```",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T13:23:30Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471475084",
      "id" : 471475084,
      "line" : 430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3NTA4NA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 430,
      "original_position" : 147,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 147,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471475084",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471478691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471478691"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The TOR proxy could be running on another machine, not necessary on `127.0.0.1`. Isn't `addr_local.find(\".onion\")` sufficient?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T13:29:07Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471478691",
      "id" : 471478691,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3ODY5MQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 306,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 23,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471478691",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471479177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471479177"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This and the one above would match e.g. \"www.onionfoo.com\". Or is `addr` always numeric for IP networks?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T13:29:49Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471479177",
      "id" : 471479177,
      "line" : 310,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3OTE3Nw==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 310,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 27,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471479177",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471484236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471484236"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: here and in other places: consider `++foo` instead of `foo += 1`.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T13:38:17Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471484236",
      "id" : 471484236,
      "line" : 386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NDIzNg==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 386,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 103,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471484236",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471552680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471552680"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: ditch unnecessary local variable (but maybe keep it if you decide to check whether `local_addrs` is empty)\r\n```suggestion\r\n        for (const UniValue& addr : networkinfo[\"localaddresses\"].getValues()) {\r\n```",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T15:20:25Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";\n+        const UniValue& local_addrs{networkinfo[\"localaddresses\"]};\n+        for (const UniValue& addr : local_addrs.getValues()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471552680",
      "id" : 471552680,
      "line" : 466,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MjY4MA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 466,
      "original_position" : 183,
      "original_start_line" : 465,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 183,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : 465,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471552680",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471554091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471554091"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Given that the `Local addresses` header may be followed by nothing, what about skipping it if there are no local addresses or printing something like `none` or `n/a` below it in that case?",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T15:22:24Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471554091",
      "id" : 471554091,
      "line" : 464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NDA5MQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 464,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 181,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471554091",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471557671"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This and `m_peer` are types, not member variables. I think they should be named `ConnType` and `Peer`.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T15:27:43Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671",
      "id" : 471557671,
      "line" : 314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1NzY3MQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 314,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 31,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471557671",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @laanwj, @0xB10C, and @fjahr. 9 Concept ACKs and 3 tested ACKs -> RFM?",
      "created_at" : "2020-08-17T15:43:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674957263",
      "id" : 674957263,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDk1NzI2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T15:43:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674957263",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471574239"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471574239"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Does it make sense to position this optional column as the last one? The \"target audience\" for this is humans, but maybe somebody will write a script that parses it and it will get bricked occasionally by the presence or absence of the `asmap` column if it is in the middle.\r\n\r\nAlso for humans - if somebody gets used to search for certain information at a certain position on the screen, e.g. `id`, it would be annoying if it gets shifted to the right by the occasional presence of an extra column.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T15:52:00Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471574239",
      "id" : 471574239,
      "line" : 431,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NDIzOQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 431,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 148,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471574239",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471575005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471575005"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`std::string::length()` returns `size_t` and if our variables `max_peer_id_length` and `max_version_length` are defined as `size_t`, then there would not be a need for the typecast to `int`.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T15:53:10Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471575005",
      "id" : 471575005,
      "line" : 420,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NTAwNQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 420,
      "original_position" : 137,
      "original_start_line" : 419,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 137,
      "pull_request_review_id" : 468431850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : 419,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-17T15:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471575005",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471581038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471581038"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`ping` is `pingtime` in `getpeerinfo`: this list is essentially getpeerinfo for humans with sometimes-shorter field names to save horizontal space.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:02:35Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471581038",
      "id" : 471581038,
      "in_reply_to_id" : 471475084,
      "line" : 430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4MTAzOA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 430,
      "original_position" : 147,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 147,
      "pull_request_review_id" : 468596034,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T16:25:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471581038",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Don't consider my review as a blocker - no stopper issues. All except https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471557671 can be ignored and that one can be addressed in this or a followup PR.",
      "created_at" : "2020-08-17T16:03:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674967770",
      "id" : 674967770,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDk2Nzc3MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-17T16:03:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674967770",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471585004"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471585004"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I gradually adjusted this over the past month of using it continually. Generally I don't think people change frequently between using asmap or not (based on my recent twitter usage polls, I suspect very few are using asmap yet). I initially wrote this using only asmap, and only realized that it would be annoying when @0xB10C mentioned it was just empty without it. When I did change to test it, it was better to not display it than have an empty column and wasted horizontal space. Thus, the current proposal.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:08:53Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471585004",
      "id" : 471585004,
      "in_reply_to_id" : 471574239,
      "line" : 431,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4NTAwNA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 431,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 148,
      "pull_request_review_id" : 468601032,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-18T16:01:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471585004",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471589614"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471589614"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Given that this dashboard shows all of the peer addresses, AFAICT I've found this to be reliable as-is over the past month WRT onions.\r\n\r\nEdit: have still not seen an issue with this.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:16:49Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471589614",
      "id" : 471589614,
      "in_reply_to_id" : 471478691,
      "line" : 306,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4OTYxNA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 306,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 23,
      "pull_request_review_id" : 468607087,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:13:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471589614",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for the detailed review @vasild. As I wrote above in https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-673591921, I'd like to defer any further code style or edge case changes to follow-ups, as there are more improvements I'd propose, including using #19731 if it is merged.\r\n\r\nWith 3 tested ACKs, 9 Concept ACKs and an Approach ACK (which for a CLI PR is miraculous), it's also better to not invalidate the 3 tested ACKs. \r\n\r\nI've been using this continually for a number of weeks and it works great in practice.",
      "created_at" : "2020-08-17T16:18:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674975915",
      "id" : 674975915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NDk3NTkxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T16:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/674975915",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471591519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471591519"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I hesitated on this. Will update in a follow-up.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:20:10Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471591519",
      "id" : 471591519,
      "in_reply_to_id" : 471557671,
      "line" : 314,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MTUxOQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 314,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 31,
      "pull_request_review_id" : 468609711,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T16:20:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471591519",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471592642"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471592642"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Skipping it might violate the principle of least surprise but no strong opinion on what would be best or if any change is needed.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:22:04Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471592642",
      "id" : 471592642,
      "in_reply_to_id" : 471554091,
      "line" : 464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MjY0Mg==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 464,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 181,
      "pull_request_review_id" : 468611259,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-19T16:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471592642",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471593698"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471593698"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I haven't seen this to be an issue yet. Happy to look at a proposal.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:23:54Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471593698",
      "id" : 471593698,
      "in_reply_to_id" : 471479177,
      "line" : 310,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MzY5OA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 310,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 27,
      "pull_request_review_id" : 468612609,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-17T16:23:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471593698",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471595284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471595284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm open to `net` for a follow-up if people prefer that. I agree it may be better.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:26:29Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471595284",
      "id" : 471595284,
      "in_reply_to_id" : 471475084,
      "line" : 430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NTI4NA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 430,
      "original_position" : 147,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 147,
      "pull_request_review_id" : 468614584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:21:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471595284",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471596278"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471596278"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea; noting this style nit for the follow-up.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-17T16:28:20Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471596278",
      "id" : 471596278,
      "in_reply_to_id" : 471575005,
      "line" : 420,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5NjI3OA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 420,
      "original_position" : 137,
      "original_start_line" : 419,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 137,
      "pull_request_review_id" : 468615878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : 419,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-23T19:04:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471596278",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "To be explicit that I am ok with this as is:\r\n\r\nACK f63ceccca\r\n\r\nThe worthwhile suggestions I mentioned can be addressed in a follow up.",
      "created_at" : "2020-08-18T07:07:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675298410",
      "id" : 675298410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTI5ODQxMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T07:07:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675298410",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471987413"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471987413"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see this for an IPv4 connection to www.onionfoo.com:8345, mistakenly labelled as \"conn=onion\" instead of \"conn=ipv4\".\r\n\r\n```\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id version               address\r\nout  full onion       4      4        0        0      0  0 70015/Satoshi:0.20.0/ www.onionfoo.com:8345\r\n```\r\n\r\n```suggestion\r\n        const char* suffix = \".onion\";\r\n        const size_t suffix_len = 6;\r\n        return addr.length() > suffix_len &&\r\n               addr.compare(addr.length() - suffix_len, std::string::npos, suffix) == 0;\r\n```",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-18T07:55:45Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471987413",
      "id" : 471987413,
      "in_reply_to_id" : 471479177,
      "line" : 310,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk4NzQxMw==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 310,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 27,
      "pull_request_review_id" : 469079774,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-18T07:55:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471987413",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471990490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471990490"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see this:\r\n```\r\n$ ./src/bitcoin-cli -netinfo \r\nBitcoin Core v0.20.99.0-f63ceccca - 70015/Satoshi:0.20.0/\r\n\r\nInbound and outbound peer connections\r\nin:  ...\r\nout: ...\r\nall: ...\r\n\r\nLocal addresses\r\n$ \r\n```\r\n\r\nI guess it happens when the node does not have an incoming connections and `--externalip=` is not provided to `bitcoind`.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-18T08:00:42Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471990490",
      "id" : 471990490,
      "in_reply_to_id" : 471554091,
      "line" : 464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk5MDQ5MA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 464,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 181,
      "pull_request_review_id" : 469083423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-18T08:00:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471990490",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471992157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471992157"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks! will test; can pull in a commit from you in the follow-up if this is merged. If you see a way to distinguish between inbound ipv4 and ipv6 conns, that would be great too.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-18T08:03:46Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r471992157",
      "id" : 471992157,
      "in_reply_to_id" : 471479177,
      "line" : 310,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk5MjE1Nw==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 310,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 27,
      "pull_request_review_id" : 469085563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-18T08:07:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471992157",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> With 3 tested ACKs, 9 Concept ACKs and an Approach ACK (which for a CLI PR is miraculous), it's also better to not invalidate the 3 tested ACKs.\r\n\r\nI just want to comment on [\"it's also better to not invalidate the 3 tested ACKs.\"](https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-674975915). If this was a taproot PR, some consensus or in some other way critical code, or had accumulated review from a number of less-active but more-knowledgeable for some portion of the code-base reviewers I might agree. However, this is a few hundred lines, adding a new, \"cool\" feature to a binary which isn't bitcoind. I don't think there's any problem with \"invalidating ACKs\" here to fix bugs or outstanding issues, and it looks like there might be a couple, or even just fixing this up so that newly added code is following the developer/style guidelines, which really should always be the case.\r\n\r\nSpeaking generally, I think, \"we'll fix bugs/issues in a follow up\", isn't the right mindset for this project, not only because I don't think ACKs are so precious that we'd rather merge suboptimal/buggy code, but also because I don't want to discourage reviewers from actually reviewing, or have them change how they review based on how many ACKs a PR already has (not saying this is happening right now). Also, when comments are left with follow ups, care has to be taken to make sure they all end up accounted for, and/or the reviewers that left them know they should also be following up in another PR. It's easy for something to get lost in GitHub's ever collapsing GUI.\r\n\r\nRegardless of the above, I'm a ~0 on this change. I agree with @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/19643#pullrequestreview-462394409) about this being scope creep. It seems now that we've now got to maintain a kind of \"GUI\" in a cli tool. This also seems like the sort of feature that has the potential to be constantly tweaked/redone to the liking of whoever is modifying this code. Hopefully we don't end up having to maintain a bunch of tests / some sort of backwards-compatibility for a cli-tool based GUI. I think in general if we can ship tools with nice APIs, so that end-users can write scripts & tools to consume the data, that's I think that's a win (hopefully they'll even share/publish them). Ideally we won't have to bring too much functionality like this into our tools.",
      "created_at" : "2020-08-18T11:09:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675415319",
      "id" : 675415319,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQxNTMxOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T11:09:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675415319",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake Much could be said and debated concerning the project norms, I suppose, but an issue or gist may be a better place for that. I'm trying to follow the norms as best I've been able to observe them and would prefer to keep the discussion here to review/testing of the PR.",
      "created_at" : "2020-08-18T12:04:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675437434",
      "id" : 675437434,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTQzNzQzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T12:04:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675437434",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK f63ceccca31aa624819b429d015f8f1bf2daf49f\r\n\r\nVery nice addition @jonatack - I've been using it for a while and I'm already hooked: I can't wait for it to land in `master` :)",
      "created_at" : "2020-08-18T15:09:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-675537418",
      "id" : 675537418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NTUzNzQxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-18T15:09:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675537418",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Agree that it's not always bad to invalidate ACKs. I'll happily retest this if it's needed.\r\n\r\n> Regardless of the above, I'm a ~0 on this change. I agree with @jnewbery's comment about this being scope creep. It seems now that we've now got to maintain a kind of \"GUI\" in a cli tool\r\n\r\nI don't disagree with your point but at least we've managed to keep this fully client-side.\r\n\r\nI'm very wary for server-side scope creep, but don't have a problem with making our client more user friendly with localized changes. \r\n\r\nWe *have* a GUI too. I don't much of a problem with having a nice command-line tool. I kind of like Rust's philosophy in that regard (\"command line is also an UI\"). But if people disagree and think having a *simple as possible* cli is more important than feel free to close  #17314.\r\n\r\nEdit: so I kind of see the conflict, on one hand bitcoin-cli is for usage in scripts, on the other it's a user-facing tool. It's important to document what is what, that the output for these kind of convenience tools is not a stable API meant for machine parsing.",
      "created_at" : "2020-08-19T09:14:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676004980",
      "id" : 676004980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NjAwNDk4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T09:51:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676004980",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r473143045"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473143045"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same here, behind a firewall with no port forwarding, my local addresses is empty. Not sure the best way to handle it visually. Perhaps even just an empty newline.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-19T16:06:28Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r473143045",
      "id" : 473143045,
      "in_reply_to_id" : 471554091,
      "line" : 464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0MzA0NQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 464,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 181,
      "pull_request_review_id" : 470609207,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-19T16:06:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/473143045",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK, tested ACK, approach ACK.\r\n\r\nI think this is very cool feature and I tried it out on clearnet and onion. I find the output of `getpeerinfo` too big or verbose to be helpful without a `grep` and this makes the data nice and tidy.\r\n\r\nNone of the style nits are game-changers for me.\r\n\r\n\r\n\r\n```\r\n$ src/bitcoin-cli -datadir=/Volumes/Serenity/bitcoin -netinfo true\r\nBitcoin Core v0.20.99.0-f63ceccca - 70016/Satoshi:0.20.99/\r\n\r\nPeer connections sorted by direction and min ping\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id version                              address\r\nout  full onion     384    388        9        8     32  5 70015/Satoshi:0.20.1/                4iczunxx6krcaqbp.onion:8333\r\nout  full onion     385    468        9        8     32  3 70015/Satoshi:0.20.0/                oah44d75fd3sbyf3.onion:8333\r\nout  full onion     424    561        9        8     32  4 70015/Satoshi:0.18.1/                sjx3sqpsxxn73ihg.onion:8333\r\nout  full onion     438    654       13        4     32  0 70015/Satoshi:0.19.1/Knots:20200304/ gx3z4jk7bug3ctka.onion:8333\r\nout  full onion     476    574       10       10     32  7 70015/Satoshi:0.18.1/                xjc5ref2kcqxkf6i.onion:8333\r\nout  full onion     479    619        9        8     32  2 70015/Satoshi:0.20.0/                e5pvabgdvrhznfx5.onion:8333\r\nout block onion     550    552        4        3     31  9 70015/Satoshi:0.20.0/                yba4brm555denlt7.onion:8333\r\nout block onion     594    927        4        5     32  8 70015/Satoshi:0.20.0/                uvaqn6udr2vmhxni.onion:8333\r\nout  full onion     602    755       13       13     32  6 70015/Satoshi:0.20.0/                bzvptsceamcojin4.onion:8333\r\nout  full onion     692    822       13       12     32  1 70015/Satoshi:0.20.1/                qfuccrxvh5i526g4.onion:8333\r\n                     ms     ms      sec      sec    min\r\n\r\nInbound and outbound peer connections\r\nin:  ipv4   0  |  ipv6   0  |  onion   0  |  total   0  (0 block-relay)\r\nout: ipv4   0  |  ipv6   0  |  onion  10  |  total  10  (2 block-relay)\r\nall: 10\r\n\r\nLocal addresses\r\n```\r\n\r\n",
      "created_at" : "2020-08-19T16:23:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676526940",
      "id" : 676526940,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NjUyNjk0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T16:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676526940",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jonatack A minor UI nit if you choose to touch this PR: when testing this PR I noticed that the `address` column sometimes ends up outside the visible part of the terminal due to very long `version` strings (these can be 256 chars IIRC).\r\n\r\nI suggest printing the `address` column (which is guaranteed to be short) before the `version` column. That way all column headers are guaranteed to be visible :)\r\n\r\nIn other words â¦\r\n\r\n```\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id address                     version\r\nout  full onion     438    654       13        4     32  0 l0ckdwncyph3rpnk.onion:8333 70015/Satoshi:0.19.1/Knots:20200304/Libertarian-Cypherpunk-Anarchists-Supporting-COVID-19-Lockdowns/\r\n```\r\n\r\nâ¦ instead of â¦\r\n\r\n```\r\n<-> relay  conn minping   ping lastsend lastrecv uptime id version                                                                                              address\r\nout  full onion     438    654       13        4     32  0 70015/Satoshi:0.19.1/Knots:20200304/Libertarian-Cypherpunk-Anarchists-Supporting-COVID-19-Lockdowns/ l0ckdwncyph3rpnk.onion:8333\r\n```\r\n\r\nMakes sense? :)\r\n\r\n(Details in the screen capture above edited to protect the privacy of our users.)",
      "created_at" : "2020-08-19T18:44:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-676596264",
      "id" : 676596264,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3NjU5NjI2NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-19T18:47:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/676596264",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253487"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253487"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> maybe somebody will write a script that parses it and it will get bricked occasionally by the presence or absence of the `asmap` column if it is in the middle.\r\n\r\nScripts should consume the RPC API, not the CLI.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-23T19:02:31Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253487",
      "id" : 475253487,
      "in_reply_to_id" : 471574239,
      "line" : 431,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzQ4Nw==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 431,
      "original_position" : 148,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 148,
      "pull_request_review_id" : 473034565,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:02:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253487",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253878"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253878"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can propose adding \"n/a\\n\" in the follow-up.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-23T19:07:15Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253878",
      "id" : 475253878,
      "in_reply_to_id" : 471554091,
      "line" : 464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1Mzg3OA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 464,
      "original_position" : 181,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 181,
      "pull_request_review_id" : 473034786,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:07:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253878",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253942"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Noted; deferring this nit to a follow-up.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-23T19:07:57Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;\n+                } else if (IsInboundOnion(mapped_as, addr, addr_local)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_i += 1;\n+                } else {\n+                    ipv4_i += 1;\n+                }\n+                if (is_block_relay) block_relay_i += 1;\n+            } else {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_o += 1;\n+                } else if (IsOutboundOnion(addr)) {\n+                    conn_type = m_conn_type::onion;\n+                    onion_o += 1;\n+                } else {\n+                    ipv4_o += 1;\n+                }\n+                if (is_block_relay) block_relay_o += 1;\n+            }\n+            if (m_verbose) {\n+                // Push data for this peer to the peers vector.\n+                const int peer_id{peer[\"id\"].get_int()};\n+                const int version{peer[\"version\"].get_int()};\n+                const std::string sub_version{peer[\"subver\"].get_str()};\n+                const int64_t conn_time{peer[\"conntime\"].get_int64()};\n+                const int64_t last_recv{peer[\"lastrecv\"].get_int64()};\n+                const int64_t last_send{peer[\"lastsend\"].get_int64()};\n+                const double min_ping{peer[\"minping\"].isNull() ? 0 : peer[\"minping\"].get_real()};\n+                const double ping{peer[\"pingtime\"].isNull() ? 0 : peer[\"pingtime\"].get_real()};\n+                peers.push_back({peer_id, mapped_as, version, conn_time, last_recv, last_send, min_ping, ping, addr, sub_version, conn_type, is_block_relay, !is_inbound});\n+\n+                is_asmap_on |= (mapped_as != 0);\n+                max_peer_id_length = std::max(int(ToString(peer_id).length()), max_peer_id_length);\n+                max_version_length = std::max(int((ToString(version) + sub_version).length()), max_version_length);\n+            }\n+        }\n+        // Generate reports.\n+        const UniValue& networkinfo{batch[ID_NETWORKINFO][\"result\"]};\n+        std::string result{strprintf(\"%s %s - %i%s\\n\\n\", PACKAGE_NAME, FormatFullVersion(), networkinfo[\"protocolversion\"].get_int(), networkinfo[\"subversion\"].get_str())};\n+\n+        // Report detailed peer connections list sorted by direction and minimum ping time.\n+        if (m_verbose) {\n+            std::sort(peers.begin(), peers.end());\n+            result += \"Peer connections sorted by direction and min ping\\n<-> relay  conn minping   ping lastsend lastrecv uptime \";\n+            if (is_asmap_on) result += \" asmap \";\n+            result += strprintf(\"%*s %-*s address\\n\", max_peer_id_length, \"id\", max_version_length, \"version\");\n+            for (const m_peer& peer : peers) {\n+                result += strprintf(\n+                    \"%3s %5s %5s%8d%7d %8s %8s%7s%*i %*s %-*s %s\\n\",\n+                    peer.is_outbound ? \"out\" : \"in\",\n+                    peer.is_block_relay ? \"block\" : \"full\",\n+                    ConnTypeEnumToString(peer.conn_type),\n+                    round(1000 * peer.min_ping),\n+                    round(1000 * peer.ping),\n+                    peer.last_send == 0 ? \"\" : ToString(time_now - peer.last_send),\n+                    peer.last_recv == 0 ? \"\" : ToString(time_now - peer.last_recv),\n+                    peer.conn_time == 0 ? \"\" : ToString((time_now - peer.conn_time) / 60),\n+                    is_asmap_on ? 7 : 0, // variable spacing\n+                    is_asmap_on && peer.mapped_as != 0 ? ToString(peer.mapped_as) : \"\",\n+                    max_peer_id_length, // variable spacing\n+                    peer.id,\n+                    max_version_length, // variable spacing\n+                    ToString(peer.version) + peer.sub_version,\n+                    peer.addr);\n+            }\n+            result += \"                     ms     ms      sec      sec    min\\n\\n\";\n+        }\n+\n+        // Report peer connection totals by type.\n+        total_i = ipv4_i + ipv6_i + onion_i;\n+        total_o = ipv4_o + ipv6_o + onion_o;\n+        result += \"Inbound and outbound peer connections\\n\";\n+        result += strprintf(\"in:  ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_i, ipv6_i, onion_i, total_i, block_relay_i);\n+        result += strprintf(\"out: ipv4 %3i  |  ipv6 %3i  |  onion %3i  |  total %3i  (%i block-relay)\\n\", ipv4_o, ipv6_o, onion_o, total_o, block_relay_o);\n+        result += strprintf(\"all: %i\\n\", total_i + total_o);\n+\n+        // Report local addresses, ports, and scores.\n+        result += \"\\nLocal addresses\";\n+        const UniValue& local_addrs{networkinfo[\"localaddresses\"]};\n+        for (const UniValue& addr : local_addrs.getValues()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475253942",
      "id" : 475253942,
      "in_reply_to_id" : 471552680,
      "line" : 466,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1Mzk0Mg==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 466,
      "original_position" : 183,
      "original_start_line" : 465,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 183,
      "pull_request_review_id" : 473034831,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : 465,
      "start_side" : "RIGHT",
      "updated_at" : "2020-08-23T19:07:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475253942",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254064"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254064"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Noted for a follow-up.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-23T19:09:28Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");\n+        }\n+        UniValue result(UniValue::VARR);\n+        result.push_back(JSONRPCRequestObj(\"getpeerinfo\", NullUniValue, ID_PEERINFO));\n+        result.push_back(JSONRPCRequestObj(\"getnetworkinfo\", NullUniValue, ID_NETWORKINFO));\n+        return result;\n+    }\n+\n+    UniValue ProcessReply(const UniValue& batch_in) override\n+    {\n+        const std::vector<UniValue> batch{JSONRPCProcessBatchReply(batch_in)};\n+        if (!batch[ID_PEERINFO][\"error\"].isNull()) return batch[ID_PEERINFO];\n+        if (!batch[ID_NETWORKINFO][\"error\"].isNull()) return batch[ID_NETWORKINFO];\n+        // Count peer connection totals, and if m_verbose is true, store peer data in a vector of structs.\n+        int64_t time_now{GetSystemTimeInSeconds()};\n+        int ipv4_i{0}, ipv6_i{0}, onion_i{0}, block_relay_i{0}, total_i{0}; // inbound conn counters\n+        int ipv4_o{0}, ipv6_o{0}, onion_o{0}, block_relay_o{0}, total_o{0}; // outbound conn counters\n+        int max_peer_id_length{2}, max_version_length{1};\n+        bool is_asmap_on{false};\n+        std::vector<m_peer> peers;\n+        const UniValue& getpeerinfo{batch[ID_PEERINFO][\"result\"]};\n+        for (const UniValue& peer : getpeerinfo.getValues()) {\n+            const std::string addr{peer[\"addr\"].get_str()};\n+            const std::string addr_local{peer[\"addrlocal\"].isNull() ? \"\" : peer[\"addrlocal\"].get_str()};\n+            const int mapped_as{peer[\"mapped_as\"].isNull() ? 0 : peer[\"mapped_as\"].get_int()};\n+            const bool is_block_relay{!peer[\"relaytxes\"].get_bool()};\n+            const bool is_inbound{peer[\"inbound\"].get_bool()};\n+            m_conn_type conn_type{m_conn_type::ipv4};\n+            if (is_inbound) {\n+                if (IsAddrIPv6(addr)) {\n+                    conn_type = m_conn_type::ipv6;\n+                    ipv6_i += 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254064",
      "id" : 475254064,
      "in_reply_to_id" : 471484236,
      "line" : 386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDA2NA==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 386,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 103,
      "pull_request_review_id" : 473034916,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:09:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254064",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254399"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In more than a month of running this and also the original python script, I still have not seen a case like this and have not found the node in question on the network. Seems like a pretty pathological edge case but happy to look at tightening the detection in the follow-up. ",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-23T19:13:17Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254399",
      "id" : 475254399,
      "in_reply_to_id" : 471479177,
      "line" : 310,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDM5OQ==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 310,
      "original_position" : 27,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 27,
      "pull_request_review_id" : 473035140,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254399",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254672"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm considering proposing replacing the boolean arg with an integer one in the follow-up, to allow choosing from a number of degrees of detail rather than just two.",
      "commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "created_at" : "2020-08-23T19:16:17Z",
      "diff_hunk" : "@@ -291,6 +293,184 @@ class GetinfoRequestHandler: public BaseRequestHandler\n     }\n };\n \n+/** Process netinfo requests */\n+class NetinfoRequestHandler : public BaseRequestHandler\n+{\n+private:\n+    bool IsAddrIPv6(const std::string& addr) const\n+    {\n+        return !addr.empty() && addr.front() == '[';\n+    }\n+    bool IsInboundOnion(int mapped_as, const std::string& addr, const std::string& addr_local) const\n+    {\n+        return mapped_as == 0 && addr.find(\"127.0.0.1\") == 0 && addr_local.find(\".onion\") != std::string::npos;\n+    }\n+    bool IsOutboundOnion(const std::string& addr) const\n+    {\n+        return addr.find(\".onion\") != std::string::npos;\n+    }\n+    bool m_verbose{false}; //!< Whether user requested verbose -netinfo report\n+\n+    enum struct m_conn_type {\n+        ipv4,\n+        ipv6,\n+        onion,\n+    };\n+\n+    struct m_peer {\n+        int id;\n+        int mapped_as;\n+        int version;\n+        int64_t conn_time;\n+        int64_t last_recv;\n+        int64_t last_send;\n+        double min_ping;\n+        double ping;\n+        std::string addr;\n+        std::string sub_version;\n+        m_conn_type conn_type;\n+        bool is_block_relay;\n+        bool is_outbound;\n+        bool operator<(const m_peer& rhs) const { return std::tie(is_outbound, min_ping) < std::tie(rhs.is_outbound, rhs.min_ping); }\n+    };\n+\n+    std::string ConnTypeEnumToString(m_conn_type t)\n+    {\n+        switch (t) {\n+        case m_conn_type::ipv4: return \"ipv4\";\n+        case m_conn_type::ipv6: return \"ipv6\";\n+        case m_conn_type::onion: return \"onion\";\n+        } // no default case, so the compiler can warn about missing cases\n+        assert(false);\n+    }\n+\n+public:\n+    const int ID_PEERINFO = 0;\n+    const int ID_NETWORKINFO = 1;\n+\n+    UniValue PrepareRequest(const std::string& method, const std::vector<std::string>& args) override\n+    {\n+        if (!args.empty()) {\n+            const std::string arg{ToLower(args.at(0))};\n+            m_verbose = (arg == \"true\" || arg == \"t\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672",
      "id" : 475254672,
      "in_reply_to_id" : 470655849,
      "line" : 355,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDY3Mg==",
      "original_commit_id" : "f63ceccca31aa624819b429d015f8f1bf2daf49f",
      "original_line" : 355,
      "original_position" : 72,
      "original_start_line" : null,
      "path" : "src/bitcoin-cli.cpp",
      "position" : 72,
      "pull_request_review_id" : 473035317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19643",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-23T19:16:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475254672",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift thanks for the feedback. Worth a try. See also https://github.com/bitcoin/bitcoin/pull/19643#discussion_r475254672; higher integer values e.g. `-netinfo 2` could be passed for more/wider columns.",
      "created_at" : "2020-08-23T19:19:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19643#issuecomment-678813539",
      "id" : 678813539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19643",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3ODgxMzUzOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-23T19:19:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678813539",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
