[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19339 (validation: re-delegate absurd fee checking from mempool to clients by gzhao408)\n* #19306 (refactor: Replace RecursiveMutex with Mutex in CTxMemPool by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-08-02T20:11:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667719132",
      "id" : 667719132,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcxOTEzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-03T01:51:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667719132",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "i'm leaning toward a concept nack.\r\n\r\nI don't think this is urgent to fix and incentivizes using the mempool as working space for negotiating smaller witnesses, rather than attempting to produce a smaller signature on first broadcast. Further, this opens up potential attacks where you can make malleable smaller and smaller witnesses and keep resubmitting to boost feerate or something. I also think it's sufficiently rare that we'd even have smaller valid witnesses to submit, but then if someone starts relying on this behavior we're stuck supporting it forever.\r\n\r\nwhere you might convince me that it's a problem is if Alice and Bob are doing a payjoin or something, and then Bob changes his witness to be an even bigger one and then broadcasts, locking Alice onto a lower fee rate for the transaction.\r\n\r\nBut again, on urgency, these replacement policies are really only relevant once more complex taproot scripts are widely deployed and a change like this can be added to a future release policy easily.",
      "created_at" : "2020-08-02T20:35:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667721613",
      "id" : 667721613,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcyMTYxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-02T20:35:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667721613",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I don't think this is urgent to fix and incentivizes using the mempool as working space for negotiating smaller witnesses, rather than attempting to produce a smaller signature on first broadcast.\r\n\r\nI think the notion of first broadcast doesn't hold when you have multiple-party involved with alternatives spending paths and so potential concurrent broadcasts. Parties can't produce smaller signatures because key distribution across script branches encodes a policy, it can be either Alice or Bob+Caroll+Dave, where Alice has a higher level of privileges. As a practical example you might have pre-signed vault transactions, like https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-April/017793.html\r\n\r\n> Further, this opens up potential attacks where you can make malleable smaller and smaller witnesses and keep resubmitting to boost feerate or something.\r\n\r\nYou're still liable to RBF rules compliance, especially rule 4 on incremental relay fee ?\r\n\r\n> where you might convince me that it's a problem is if Alice and Bob are doing a payjoin or something, and then Bob changes his witness to be an even bigger one and then broadcasts, locking Alice onto a lower fee rate for the transaction.\r\n\r\nAs a first step you should avoid to introduce witness malleability if parties are distrusted, and currently as I mentioned it won't likely propagate due to default mempool settings. But yes if we change it in the future, it would be a limited guardrail for this kind of scenario.\r\n\r\nThere is no urgency to fix, it's more making consistent our relay wtxid-policy with our mempool one.\r\n",
      "created_at" : "2020-08-02T21:37:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667727767",
      "id" : 667727767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2NzcyNzc2Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-02T21:42:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667727767",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. As long as this is re-using the BIP125 RBF logic, then I can't see how it can be any more of an attack vector than any other kind of RBF.\r\n\r\n> these replacement policies are really only relevant once more complex taproot scripts are widely deployed and a change like this can be added to a future release policy easily.\r\n\r\nI think we'd want this widely deployed _before_  such scripts were possible.",
      "created_at" : "2020-08-03T12:21:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-667992586",
      "id" : 667992586,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2Nzk5MjU4Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-05T13:19:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667992586",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Conceptually I agree this would be a reasonable (incentive-compatible) behavior, but I'm not sure this is worth the complexity/effort to implement this change.  To do this correctly, you'd also want to not evict all the descendants of the replaced transaction in situations like this, which I think means more special cased mempool acceptance logic.\r\n\r\nIs there any application out there that would expect to use this behavior?  I know this is fun to theorize about but it's hard for me to imagine there will be anyone using this -- so I am skeptical this is worth the effort and added code complexity.",
      "created_at" : "2020-08-05T13:12:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669185028",
      "id" : 669185028,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTE4NTAyOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-05T13:12:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669185028",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sdaftuar I think the issue is more that an adversary can use it.\r\n\r\nE.g., say I do a coinjoin with you, and we create a txn with a feerate A and a witness weight of X. Then, as one of the parties to the txn, I create a much heavier witness weight 2X, and decrease the feerate to like 0.7A. Now it takes forever to confirm.\r\n\r\nSo it's less so someone using it, than abusing it.",
      "created_at" : "2020-08-05T16:53:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669308250",
      "id" : 669308250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTMwODI1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-05T16:53:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669308250",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> E.g., say I do a coinjoin with you, and we create a txn with a feerate A and a witness weight of X. Then, as one of the parties to the txn, I create a much heavier witness weight 2X, and decrease the feerate to like 0.7A. Now it takes forever to confirm.\r\n\r\nI get that this is a theoretical concern, but has this ever actually happened to anyone?  I can imagine there could be lots of reasons why behavior like this would not actually take place in practice.\r\n\r\nIf stuff like this has happened, then I can get on board with wanting to deal with it in the right way.",
      "created_at" : "2020-08-05T17:03:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669313663",
      "id" : 669313663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTMxMzY2Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-05T17:03:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669313663",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">  To do this correctly, you'd also want to not evict all the descendants of the replaced transaction in situations like this, which I think means more special cased mempool acceptance logic.\r\n\r\nI agree in-place substitution while conserving chain of transactions would be better bandwidth-wise. But that would require special RBF rules to handle it and I think it's better to strictly bound to our current RBF rules to make it easier to reason on. We already have the same issue with someone replacing a parent tx with a new txid and advertising again a chain of transaction paying the same outputs. Cheap RBF replacement should be addressed on its own, this PR doesn't pretend to make it better or worse ?\r\n\r\n> Is there any application out there that would expect to use this behavior? \r\n\r\nBeyond preventing abuse for potential coinjoin/payjoin/vaults and easing future usage for taproot branches, as of today there is the practical usage of selecting your best-feerate witness among a set of valid ones. I don't think a lot of users have yet this mental model but I expect this to change with wider adoption of Miniscript.\r\n\r\nUpdated with better comment/logs. Let me know if you think it's worthy further review time otherwise I would close it.",
      "created_at" : "2020-08-06T09:42:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669827588",
      "id" : 669827588,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTgyNzU4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-06T09:42:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669827588",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> E.g., say I do a coinjoin with you, and we create a txn with a feerate A and a witness weight of X. Then, as one of the parties to the txn, I create a much heavier witness weight 2X, and decrease the feerate to like 0.7A. Now it takes forever to confirm.\r\n\r\nI think this concern is indeed valid and the problem should be addressed. However, it's hard for me to justify at which cost (code complexity) we want to address it.\r\n\r\nWe also want to make sure that this solution is indeed sufficient and the best alternative among others.",
      "created_at" : "2020-08-06T10:12:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669840943",
      "id" : 669840943,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTg0MDk0Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-06T10:12:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669840943",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> We also want to make sure that this solution is indeed sufficient and the best alternative among others.\r\n\r\nJust to clarify, this current proposal doesn't effectively mitigate this without further change to our RBF handling due to the default `incrementalrelayfee` value. However, as my previous comment aims to underscore, it does provide value today for users with alternative script branches, as a tool to select the best-feerate witness, assuming a local policy of `incrementalrelayfee=0`.\r\n\r\nI think mitigating low-feerate pinning is an orthogonal discussion, see https://github.com/bitcoin/bitcoin/issues/14895#issuecomment-665969902\r\n\r\nIMO, the code complexity of the current proposed PR is straightforward as it doesn't interfere with RBF.\r\n",
      "created_at" : "2020-08-06T12:34:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19645#issuecomment-669899731",
      "id" : 669899731,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19645",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY2OTg5OTczMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-06T12:36:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/669899731",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   }
]
