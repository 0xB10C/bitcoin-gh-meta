[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234518469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234518469"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Remove space before `()` :-)\r\n\r\nApplies throughout this PR.",
      "commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "created_at" : "2018-11-19T07:48:06Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash ());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234518469",
      "id" : 234518469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDUxODQ2OQ==",
      "original_commit_id" : "6473702ebc6d63335677345da67ba0b890396bc6",
      "original_position" : 29,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 176172615,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2018-11-19T10:50:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234518469",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234572978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234572978"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch (that's left over from me coding GNU style most of the time outside of Bitcoin), fixed.",
      "commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "created_at" : "2018-11-19T10:51:15Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash ());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234572978",
      "id" : 234572978,
      "in_reply_to_id" : 234518469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDU3Mjk3OA==",
      "original_commit_id" : "6473702ebc6d63335677345da67ba0b890396bc6",
      "original_position" : 29,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 176238949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2018-11-19T10:51:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234572978",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236981458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236981458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I might be missing something but the two `BOOST_CHECK`s here seem to be testing `IsPayToWitnessScriptHash()` on identical `CScript`s. If the intention is to test that the two ways of constructing a `CScript` yield the same `CScript`, perhaps that should be in another test case in another file.",
      "commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "created_at" : "2018-11-28T08:31:10Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236981458",
      "id" : 236981458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk4MTQ1OA==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 14,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 14,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2018-11-28T09:46:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236981458",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236983416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236983416"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's a little unclear why the construction of the `CScript` here is different from the other two `CHECK`s in the same test, does this change in construction test the correctness of `IsExpectedWitnessProgram` in any way? As in, what advantages does this have over:\r\n\r\n```c++\r\nwit.clear();\r\nprogram.resize(30);\r\nwit << OP_5 << program;\r\nBOOST_CHECK(IsExpectedWitnessProgram(wit, 5, program));\r\n```",
      "commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "created_at" : "2018-11-28T08:37:47Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    program.resize(40);\n+    wit << OP_16 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 16, program));\n+\n+    program.resize(32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236983416",
      "id" : 236983416,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk4MzQxNg==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 105,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 105,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2018-11-28T09:46:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236983416",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236998799"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236998799"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // Witness programs have a minimum data push of 2 bytes\r\n    std::vector<unsigned char> program = {42, 18};\r\n```",
      "commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "created_at" : "2018-11-28T09:21:35Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236998799",
      "id" : 236998799,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk5ODc5OQ==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 95,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 95,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2018-11-28T09:46:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236998799",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236999231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236999231"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // Witness programs have a maximum data push of 40 bytes\r\n    program.resize(40);\r\n```",
      "commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "created_at" : "2018-11-28T09:22:53Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    program.resize(40);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236999231",
      "id" : 236999231,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk5OTIzMQ==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 101,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 101,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2018-11-28T09:46:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236999231",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   }
]
