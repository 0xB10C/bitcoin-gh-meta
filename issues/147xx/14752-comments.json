[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234518469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234518469"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Remove space before `()` :-)\r\n\r\nApplies throughout this PR.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-19T07:48:06Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash ());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234518469",
      "id" : 234518469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDUxODQ2OQ==",
      "original_commit_id" : "6473702ebc6d63335677345da67ba0b890396bc6",
      "original_position" : 29,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 176172615,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234518469",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234572978"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234572978"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch (that's left over from me coding GNU style most of the time outside of Bitcoin), fixed.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-19T10:51:15Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash ());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r234572978",
      "id" : 234572978,
      "in_reply_to_id" : 234518469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDU3Mjk3OA==",
      "original_commit_id" : "6473702ebc6d63335677345da67ba0b890396bc6",
      "original_position" : 29,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 176238949,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234572978",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236981458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236981458"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I might be missing something but the two `BOOST_CHECK`s here seem to be testing `IsPayToWitnessScriptHash()` on identical `CScript`s. If the intention is to test that the two ways of constructing a `CScript` yield the same `CScript`, perhaps that should be in another test case in another file.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T08:31:10Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236981458",
      "id" : 236981458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk4MTQ1OA==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 14,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 14,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236981458",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236983416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236983416"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's a little unclear why the construction of the `CScript` here is different from the other two `CHECK`s in the same test, does this change in construction test the correctness of `IsExpectedWitnessProgram` in any way? As in, what advantages does this have over:\r\n\r\n```c++\r\nwit.clear();\r\nprogram.resize(30);\r\nwit << OP_5 << program;\r\nBOOST_CHECK(IsExpectedWitnessProgram(wit, 5, program));\r\n```",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T08:37:47Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    program.resize(40);\n+    wit << OP_16 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 16, program));\n+\n+    program.resize(32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236983416",
      "id" : 236983416,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk4MzQxNg==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 105,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 107,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236983416",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236998799"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236998799"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // Witness programs have a minimum data push of 2 bytes\r\n    std::vector<unsigned char> program = {42, 18};\r\n```",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T09:21:35Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236998799",
      "id" : 236998799,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk5ODc5OQ==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 95,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 96,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236998799",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236999231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236999231"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n    // Witness programs have a maximum data push of 40 bytes\r\n    program.resize(40);\r\n```",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T09:22:53Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    program.resize(40);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r236999231",
      "id" : 236999231,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNjk5OTIzMQ==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 101,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 103,
      "pull_request_review_id" : 179170361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/236999231",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237077887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237077887"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The main reason why I added the second version here is because that code is used later for constructing the \"invalid\" ones as well (basically so that we would likely notice if the construction itself is wrong and the other tests invalid).  But if you thank that it is clear enough that those scripts are constructed in the right way, then I'm happy to drop either of the two tests in this test case.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T13:14:14Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237077887",
      "id" : 237077887,
      "in_reply_to_id" : 236981458,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzA3Nzg4Nw==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 14,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 14,
      "pull_request_review_id" : 179288090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237077887",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237078619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237078619"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I added this for the same reason as with the other comment above - to make sure that code constructing a script \"this way\" yields a valid witness program as well, while very similar code in later tests with slight modifications yields an invalid program.  Again I'm happy to remove that one if everyone else thinks this is clear anyway.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T13:16:39Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    program.resize(40);\n+    wit << OP_16 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 16, program));\n+\n+    program.resize(32);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237078619",
      "id" : 237078619,
      "in_reply_to_id" : 236983416,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzA3ODYxOQ==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 105,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 107,
      "pull_request_review_id" : 179289036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237078619",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237079443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237079443"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added to the commit, thanks for the suggestion!",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T13:19:26Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237079443",
      "id" : 237079443,
      "in_reply_to_id" : 236998799,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzA3OTQ0Mw==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 95,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 96,
      "pull_request_review_id" : 179290123,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237079443",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237079483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237079483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-11-28T13:19:33Z",
      "diff_hunk" : "@@ -0,0 +1,162 @@\n+// Copyright (c) 2012-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/script.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(script_segwit_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Valid)\n+{\n+    uint256 dummy;\n+    CScript p2wsh;\n+    p2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(p2wsh.IsPayToWitnessScriptHash());\n+\n+    std::vector<unsigned char> bytes = {OP_0, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_NotOp0)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_1 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Size)\n+{\n+    uint160 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Nop)\n+{\n+    uint256 dummy;\n+    CScript notp2wsh;\n+    notp2wsh << OP_0 << OP_NOP << ToByteVector(dummy);\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_EmptyScript)\n+{\n+    CScript notp2wsh;\n+    BOOST_CHECK(!notp2wsh.IsPayToWitnessScriptHash());\n+}\n+\n+BOOST_AUTO_TEST_CASE(IsPayToWitnessScriptHash_Invalid_Pushdata)\n+{\n+    // A script is not P2WSH if OP_PUSHDATA is used to push the hash.\n+    std::vector<unsigned char> bytes = {OP_0, OP_PUSHDATA1, 32};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA2, 32, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+\n+    bytes = {OP_0, OP_PUSHDATA4, 32, 0, 0, 0};\n+    bytes.insert(bytes.end(), 32, 0);\n+    BOOST_CHECK(!CScript(bytes.begin(), bytes.end()).IsPayToWitnessScriptHash());\n+}\n+\n+namespace {\n+\n+bool IsExpectedWitnessProgram(const CScript& script, const int expectedVersion, const std::vector<unsigned char>& expectedProgram)\n+{\n+    int actualVersion;\n+    std::vector<unsigned char> actualProgram;\n+    if (!script.IsWitnessProgram(actualVersion, actualProgram)) {\n+        return false;\n+    }\n+    BOOST_CHECK_EQUAL(actualVersion, expectedVersion);\n+    BOOST_CHECK(actualProgram == expectedProgram);\n+    return true;\n+}\n+\n+bool IsNoWitnessProgram(const CScript& script)\n+{\n+    int dummyVersion;\n+    std::vector<unsigned char> dummyProgram;\n+    return !script.IsWitnessProgram(dummyVersion, dummyProgram);\n+}\n+\n+} // anonymous namespace\n+\n+BOOST_AUTO_TEST_CASE(IsWitnessProgram_Valid)\n+{\n+    std::vector<unsigned char> program = {42, 18};\n+    CScript wit;\n+    wit << OP_0 << program;\n+    BOOST_CHECK(IsExpectedWitnessProgram(wit, 0, program));\n+\n+    wit.clear();\n+    program.resize(40);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r237079483",
      "id" : 237079483,
      "in_reply_to_id" : 236999231,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNzA3OTQ4Mw==",
      "original_commit_id" : "54c648d327c3c5903edd7ec738666f9bd9bf564d",
      "original_position" : 101,
      "path" : "src/test/script_segwit_tests.cpp",
      "position" : 103,
      "pull_request_review_id" : 179290178,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/237079483",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r241164191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241164191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Meh, I'd prefer if this was dropped from this pull request. Could create a separate pull request later if you feel strongly.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-12-12T19:57:48Z",
      "diff_hunk" : "@@ -213,14 +213,22 @@ BOOST_AUTO_TEST_CASE(is)\n     BOOST_CHECK(p2sh.IsPayToScriptHash());\n \n     // Not considered pay-to-script-hash if using one of the OP_PUSHDATA opcodes:\n-    static const unsigned char direct[] =    { OP_HASH160, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(CScript(direct, direct+sizeof(direct)).IsPayToScriptHash());\n-    static const unsigned char pushdata1[] = { OP_HASH160, OP_PUSHDATA1, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata1, pushdata1+sizeof(pushdata1)).IsPayToScriptHash());\n-    static const unsigned char pushdata2[] = { OP_HASH160, OP_PUSHDATA2, 20,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata2, pushdata2+sizeof(pushdata2)).IsPayToScriptHash());\n-    static const unsigned char pushdata4[] = { OP_HASH160, OP_PUSHDATA4, 20,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata4, pushdata4+sizeof(pushdata4)).IsPayToScriptHash());\n+    std::vector<unsigned char> direct = {OP_HASH160, 20};\n+    direct.insert(direct.end(), 20, 0);\n+    direct.push_back(OP_EQUAL);\n+    BOOST_CHECK(CScript(direct.begin(), direct.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata1 = {OP_HASH160, OP_PUSHDATA1, 20};\n+    pushdata1.insert(pushdata1.end(), 20, 0);\n+    pushdata1.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata1.begin(), pushdata1.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata2 = {OP_HASH160, 20, 0};\n+    pushdata2.insert(pushdata2.end(), 20, 0);\n+    pushdata2.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata2.begin(), pushdata2.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata4 = {OP_HASH160, 20, 0, 0, 0};\n+    pushdata4.insert(pushdata4.end(), 20, 0);\n+    pushdata4.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata4.begin(), pushdata4.end()).IsPayToScriptHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r241164191",
      "id" : 241164191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTE2NDE5MQ==",
      "original_commit_id" : "5072c40b292dfd7aeb59a52f5576c2a57f426134",
      "original_position" : 27,
      "path" : "src/test/script_p2sh_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 184368154,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241164191",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Could also add coverage to `IsPayToScriptHash`?",
      "created_at" : "2018-12-12T20:03:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#issuecomment-446724627",
      "id" : 446724627,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14752",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NjcyNDYyNw==",
      "updated_at" : "2018-12-12T20:03:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/446724627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r241297490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241297490"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I do not feel particularly strongly, but I think it is clearly an improvement in readability.  Since it is mostly unrelated to this change (except that it is the same kind of test), I put it into a separate commit.  But I'm happy to remove it from here and perhaps submit separately if the community thinks that's what we should do.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2018-12-13T07:43:28Z",
      "diff_hunk" : "@@ -213,14 +213,22 @@ BOOST_AUTO_TEST_CASE(is)\n     BOOST_CHECK(p2sh.IsPayToScriptHash());\n \n     // Not considered pay-to-script-hash if using one of the OP_PUSHDATA opcodes:\n-    static const unsigned char direct[] =    { OP_HASH160, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(CScript(direct, direct+sizeof(direct)).IsPayToScriptHash());\n-    static const unsigned char pushdata1[] = { OP_HASH160, OP_PUSHDATA1, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata1, pushdata1+sizeof(pushdata1)).IsPayToScriptHash());\n-    static const unsigned char pushdata2[] = { OP_HASH160, OP_PUSHDATA2, 20,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata2, pushdata2+sizeof(pushdata2)).IsPayToScriptHash());\n-    static const unsigned char pushdata4[] = { OP_HASH160, OP_PUSHDATA4, 20,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata4, pushdata4+sizeof(pushdata4)).IsPayToScriptHash());\n+    std::vector<unsigned char> direct = {OP_HASH160, 20};\n+    direct.insert(direct.end(), 20, 0);\n+    direct.push_back(OP_EQUAL);\n+    BOOST_CHECK(CScript(direct.begin(), direct.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata1 = {OP_HASH160, OP_PUSHDATA1, 20};\n+    pushdata1.insert(pushdata1.end(), 20, 0);\n+    pushdata1.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata1.begin(), pushdata1.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata2 = {OP_HASH160, 20, 0};\n+    pushdata2.insert(pushdata2.end(), 20, 0);\n+    pushdata2.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata2.begin(), pushdata2.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata4 = {OP_HASH160, 20, 0, 0, 0};\n+    pushdata4.insert(pushdata4.end(), 20, 0);\n+    pushdata4.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata4.begin(), pushdata4.end()).IsPayToScriptHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r241297490",
      "id" : 241297490,
      "in_reply_to_id" : 241164191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MTI5NzQ5MA==",
      "original_commit_id" : "5072c40b292dfd7aeb59a52f5576c2a57f426134",
      "original_position" : 27,
      "path" : "src/test/script_p2sh_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 184532619,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T08:59:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/241297490",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Could also add coverage to `IsPayToScriptHash`?\r\n\r\nThat test already exists, in `script_p2sh_tests.cpp` (in fact, that's where the \"unrelated\" change from above is).",
      "created_at" : "2018-12-13T07:44:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#issuecomment-446872409",
      "id" : 446872409,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14752",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Njg3MjQwOQ==",
      "updated_at" : "2018-12-13T07:44:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/446872409",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r245242804"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245242804"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Split out into #15099.",
      "commit_id" : "4cf6e7c96e4485940edec0f15076d800c93cb8d5",
      "created_at" : "2019-01-04T09:06:45Z",
      "diff_hunk" : "@@ -213,14 +213,22 @@ BOOST_AUTO_TEST_CASE(is)\n     BOOST_CHECK(p2sh.IsPayToScriptHash());\n \n     // Not considered pay-to-script-hash if using one of the OP_PUSHDATA opcodes:\n-    static const unsigned char direct[] =    { OP_HASH160, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(CScript(direct, direct+sizeof(direct)).IsPayToScriptHash());\n-    static const unsigned char pushdata1[] = { OP_HASH160, OP_PUSHDATA1, 20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata1, pushdata1+sizeof(pushdata1)).IsPayToScriptHash());\n-    static const unsigned char pushdata2[] = { OP_HASH160, OP_PUSHDATA2, 20,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata2, pushdata2+sizeof(pushdata2)).IsPayToScriptHash());\n-    static const unsigned char pushdata4[] = { OP_HASH160, OP_PUSHDATA4, 20,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, OP_EQUAL };\n-    BOOST_CHECK(!CScript(pushdata4, pushdata4+sizeof(pushdata4)).IsPayToScriptHash());\n+    std::vector<unsigned char> direct = {OP_HASH160, 20};\n+    direct.insert(direct.end(), 20, 0);\n+    direct.push_back(OP_EQUAL);\n+    BOOST_CHECK(CScript(direct.begin(), direct.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata1 = {OP_HASH160, OP_PUSHDATA1, 20};\n+    pushdata1.insert(pushdata1.end(), 20, 0);\n+    pushdata1.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata1.begin(), pushdata1.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata2 = {OP_HASH160, 20, 0};\n+    pushdata2.insert(pushdata2.end(), 20, 0);\n+    pushdata2.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata2.begin(), pushdata2.end()).IsPayToScriptHash());\n+    std::vector<unsigned char> pushdata4 = {OP_HASH160, 20, 0, 0, 0};\n+    pushdata4.insert(pushdata4.end(), 20, 0);\n+    pushdata4.push_back(OP_EQUAL);\n+    BOOST_CHECK(!CScript(pushdata4.begin(), pushdata4.end()).IsPayToScriptHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14752#discussion_r245242804",
      "id" : 245242804,
      "in_reply_to_id" : 241164191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NTI0MjgwNA==",
      "original_commit_id" : "5072c40b292dfd7aeb59a52f5576c2a57f426134",
      "original_position" : 27,
      "path" : "src/test/script_p2sh_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 189297209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14752",
      "updated_at" : "2019-01-04T09:06:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/245242804",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/4943644?v=4",
         "events_url" : "https://api.github.com/users/domob1812/events{/privacy}",
         "followers_url" : "https://api.github.com/users/domob1812/followers",
         "following_url" : "https://api.github.com/users/domob1812/following{/other_user}",
         "gists_url" : "https://api.github.com/users/domob1812/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/domob1812",
         "id" : 4943644,
         "login" : "domob1812",
         "node_id" : "MDQ6VXNlcjQ5NDM2NDQ=",
         "organizations_url" : "https://api.github.com/users/domob1812/orgs",
         "received_events_url" : "https://api.github.com/users/domob1812/received_events",
         "repos_url" : "https://api.github.com/users/domob1812/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/domob1812/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/domob1812"
      }
   }
]
