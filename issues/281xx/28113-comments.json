[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28113#discussion_r1269708017"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28113"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269708017"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Missing self-include?",
      "commit_id" : "03e06e589a24f0bcb7dbd28a0aaa925b18b87b9d",
      "created_at" : "2023-07-20T16:32:32Z",
      "diff_hunk" : "@@ -0,0 +1,47 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28113#discussion_r1269708017",
      "id" : 1269708017,
      "line" : 4,
      "node_id" : "PRRC_kwDOABII585LrjTx",
      "original_commit_id" : "03e06e589a24f0bcb7dbd28a0aaa925b18b87b9d",
      "original_line" : 4,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/common/univalue_helpers.cpp",
      "position" : 4,
      "pull_request_review_id" : 1539670029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28113",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269708017/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T16:37:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269708017",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28113#discussion_r1269712862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28113"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269712862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "it may be nice to include univalue.h and then mark it as `export` for iwyu. This would allow include-sites to drop the univalue.h include, since it should be obvious that there is a univalue dependency with the `univalue_helpers.h` include already.\r\n\r\nAlso, this shouldn't increase compile cost, because it would be rare (in this case) for a call-site to include this header, but not need the univalue header.",
      "commit_id" : "03e06e589a24f0bcb7dbd28a0aaa925b18b87b9d",
      "created_at" : "2023-07-20T16:37:42Z",
      "diff_hunk" : "@@ -0,0 +1,17 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMMON_UNIVALUE_HELPERS_H\n+#define BITCOIN_COMMON_UNIVALUE_HELPERS_H\n+\n+#include <string>\n+#include <vector>\n+\n+class UniValue;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28113#discussion_r1269712862",
      "id" : 1269712862,
      "line" : 11,
      "node_id" : "PRRC_kwDOABII585Lrkfe",
      "original_commit_id" : "03e06e589a24f0bcb7dbd28a0aaa925b18b87b9d",
      "original_line" : 11,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "src/common/univalue_helpers.h",
      "position" : 11,
      "pull_request_review_id" : 1539670029,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28113",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269712862/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T16:37:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269712862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28113#discussion_r1269745657"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28113"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269745657"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't really find this fn to be a `UniValue` helper, pretty much all the logic is sighash specific. While thinking for a better place to sit, I ended up thinking the better solution may be to keep it where it is but just remove the (imo unnecessary) dependency on UV? Offloading the default value and type check to a helper function like `ParseSighashString` is opaque, and even though my approach here is slightly more verbose in the callsite I find the clarity of what's happening to be worth it (different callsites may require different behaviour in case of wrong types or `sighash_str`).\r\n\r\nWhat do you think?\r\n\r\n_(I think returning a `std::optional` instead of throwing is probably even better, but orthogonal to this pull)_\r\n\r\n<details>\r\n<summary>git diff on master</summary>\r\n\r\n```diff\r\ndiff --git a/src/core_io.h b/src/core_io.h\r\nindex 997f3bfd5b..ea07042b82 100644\r\n--- a/src/core_io.h\r\n+++ b/src/core_io.h\r\n@@ -46,7 +46,7 @@ bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\r\n  */\r\n bool ParseHashStr(const std::string& strHex, uint256& result);\r\n std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\r\n-int ParseSighashString(const UniValue& sighash);\r\n+int ParseSighashString(const std::string& sighash);\r\n \r\n // core_write.cpp\r\n UniValue ValueFromAmount(const CAmount amount);\r\ndiff --git a/src/core_read.cpp b/src/core_read.cpp\r\nindex 84cd559b7f..31f121206c 100644\r\n--- a/src/core_read.cpp\r\n+++ b/src/core_read.cpp\r\n@@ -252,26 +252,20 @@ std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strN\r\n     return ParseHex(strHex);\r\n }\r\n \r\n-int ParseSighashString(const UniValue& sighash)\r\n+int ParseSighashString(const std::string& sighash_str)\r\n {\r\n-    int hash_type = SIGHASH_DEFAULT;\r\n-    if (!sighash.isNull()) {\r\n-        static std::map<std::string, int> map_sighash_values = {\r\n-            {std::string(\"DEFAULT\"), int(SIGHASH_DEFAULT)},\r\n-            {std::string(\"ALL\"), int(SIGHASH_ALL)},\r\n-            {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\r\n-            {std::string(\"NONE\"), int(SIGHASH_NONE)},\r\n-            {std::string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY)},\r\n-            {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\r\n-            {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\r\n-        };\r\n-        const std::string& strHashType = sighash.get_str();\r\n-        const auto& it = map_sighash_values.find(strHashType);\r\n-        if (it != map_sighash_values.end()) {\r\n-            hash_type = it->second;\r\n-        } else {\r\n-            throw std::runtime_error(strHashType + \" is not a valid sighash parameter.\");\r\n-        }\r\n+    static std::map<std::string, int> map_sighash_values = {\r\n+        {std::string(\"DEFAULT\"), int(SIGHASH_DEFAULT)},\r\n+        {std::string(\"ALL\"), int(SIGHASH_ALL)},\r\n+        {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\r\n+        {std::string(\"NONE\"), int(SIGHASH_NONE)},\r\n+        {std::string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY)},\r\n+        {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\r\n+        {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\r\n+    };\r\n+    const auto& it{map_sighash_values.find(sighash_str)};\r\n+    if (it != map_sighash_values.end()) {\r\n+        return it->second;\r\n     }\r\n-    return hash_type;\r\n+    throw std::runtime_error(sighash_str + \" is not a valid sighash parameter.\");\r\n }\r\ndiff --git a/src/rpc/rawtransaction.cpp b/src/rpc/rawtransaction.cpp\r\nindex eb0200ccf5..e0e30b2d9e 100644\r\n--- a/src/rpc/rawtransaction.cpp\r\n+++ b/src/rpc/rawtransaction.cpp\r\n@@ -1964,7 +1964,7 @@ RPCHelpMan descriptorprocesspsbt()\r\n         EvalDescriptorStringOrObject(descs[i], provider, /*expand_priv=*/true);\r\n     }\r\n \r\n-    int sighash_type = ParseSighashString(request.params[2]);\r\n+    int sighash_type{request.params[2].isNull() ? SIGHASH_DEFAULT: ParseSighashString(request.params[2].get_str())};\r\n     bool bip32derivs = request.params[3].isNull() ? true : request.params[3].get_bool();\r\n     bool finalize = request.params[4].isNull() ? true : request.params[4].get_bool();\r\n \r\ndiff --git a/src/rpc/rawtransaction_util.cpp b/src/rpc/rawtransaction_util.cpp\r\nindex 3a6fa39e4d..7272cca1c5 100644\r\n--- a/src/rpc/rawtransaction_util.cpp\r\n+++ b/src/rpc/rawtransaction_util.cpp\r\n@@ -289,7 +289,7 @@ void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keyst\r\n \r\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result)\r\n {\r\n-    int nHashType = ParseSighashString(hashType);\r\n+    int nHashType{hashType.isNull() ? SIGHASH_DEFAULT : ParseSighashString(hashType.get_str())};\r\n \r\n     // Script verification errors\r\n     std::map<int, bilingual_str> input_errors;\r\ndiff --git a/src/test/fuzz/parse_univalue.cpp b/src/test/fuzz/parse_univalue.cpp\r\nindex bfa856211d..5cb2c64f26 100644\r\n--- a/src/test/fuzz/parse_univalue.cpp\r\n+++ b/src/test/fuzz/parse_univalue.cpp\r\n@@ -73,10 +73,6 @@ FUZZ_TARGET(parse_univalue, .init = initialize_parse_univalue)\r\n     } catch (const UniValue&) {\r\n     } catch (const std::runtime_error&) {\r\n     }\r\n-    try {\r\n-        (void)ParseSighashString(univalue);\r\n-    } catch (const std::runtime_error&) {\r\n-    }\r\n     try {\r\n         (void)AmountFromValue(univalue);\r\n     } catch (const UniValue&) {\r\ndiff --git a/src/wallet/rpc/spend.cpp b/src/wallet/rpc/spend.cpp\r\nindex b695d4bed3..3d74b12ef7 100644\r\n--- a/src/wallet/rpc/spend.cpp\r\n+++ b/src/wallet/rpc/spend.cpp\r\n@@ -943,7 +943,7 @@ RPCHelpMan signrawtransactionwithwallet()\r\n     // Parse the prevtxs array\r\n     ParsePrevouts(request.params[1], nullptr, coins);\r\n \r\n-    int nHashType = ParseSighashString(request.params[2]);\r\n+    int nHashType{request.params[2].isNull() ? SIGHASH_DEFAULT: ParseSighashString(request.params[2].get_str())};\r\n \r\n     // Script verification errors\r\n     std::map<int, bilingual_str> input_errors;\r\n@@ -1587,7 +1587,7 @@ RPCHelpMan walletprocesspsbt()\r\n     }\r\n \r\n     // Get the sighash type\r\n-    int nHashType = ParseSighashString(request.params[2]);\r\n+    int nHashType{request.params[2].isNull() ? SIGHASH_DEFAULT: ParseSighashString(request.params[2].get_str())};\r\n \r\n     // Fill transaction with our data and also sign\r\n     bool sign = request.params[1].isNull() ? true : request.params[1].get_bool();\r\n\r\n```\r\n</details>",
      "commit_id" : "03e06e589a24f0bcb7dbd28a0aaa925b18b87b9d",
      "created_at" : "2023-07-20T17:09:58Z",
      "diff_hunk" : "@@ -0,0 +1,47 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/interpreter.h>\n+#include <univalue.h>\n+#include <util/strencodings.h>\n+\n+#include <map>\n+#include <stdexcept>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName)\n+{\n+    std::string strHex;\n+    if (v.isStr())\n+        strHex = v.getValStr();\n+    if (!IsHex(strHex))\n+        throw std::runtime_error(strName + \" must be hexadecimal string (not '\" + strHex + \"')\");\n+    return ParseHex(strHex);\n+}\n+\n+int ParseSighashString(const UniValue& sighash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28113#discussion_r1269745657",
      "id" : 1269745657,
      "line" : 25,
      "node_id" : "PRRC_kwDOABII585Lrsf5",
      "original_commit_id" : "03e06e589a24f0bcb7dbd28a0aaa925b18b87b9d",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/common/univalue_helpers.cpp",
      "position" : 25,
      "pull_request_review_id" : 1539728494,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28113",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269745657/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-20T17:20:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269745657",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   }
]
