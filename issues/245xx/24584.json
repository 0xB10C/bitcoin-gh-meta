{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "CONTRIBUTOR",
   "body" : "_**NOTE:**_ the first commit (`test: make feature_coinstatindex deterministic`) is handled in https://github.com/bitcoin/bitcoin/pull/24570\r\n\r\n# Concept\r\n\r\nFollowing https://github.com/bitcoin/bitcoin/pull/23789, Bitcoin Core wallet will now generate a change address that matches the payment address type. This improves privacy by not revealing which of the outputs is the change at the time of the transaction in scenarios where the input address types differ from the payment address type.\r\n\r\nThis raises two concerns:\r\n\r\n1) Information about the change can be leaked in a later transaction\r\n2) Wallets can start accumulating older `OutputType` UTXOs\r\n\r\nThis proposal attempts to address these concerns.\r\n\r\n## Leaking information in a later transaction\r\n\r\nConsider the following scenario:\r\n\r\n![mix input types(1)](https://user-images.githubusercontent.com/7444140/158597086-788339b0-c698-4b60-bd45-9ede4cd3a483.png)\r\n\r\n1. Alice has a wallet with bech32 type UTXOs and pays Bob, who gives her a P2SH address\r\n2. Alice's wallet generates a P2SH change output, preserving her privacy in `txid: a`\r\n3. Alice then pays Carol, who gives her a bech32 address\r\n4. Alice's wallet combines the P2SH UTXO with a bech32 UTXO and `txid: b` has two bech32 outputs\r\n\r\nFrom a chain analysis perspective, it is reasonable to infer that the P2SH Output in `txid: b` was the change from `txid: a`. To avoid leaking information in this scenario, Alice's wallet should avoid picking the P2SH output and instead fund the transaction with only bech32 Outputs. If the payment to Carol can be funded with just the P2SH output, it should be preferred over the bech32 outputs as this will convert the P2SH UTXO to bech32 UTXOs via the payment and change outputs of the new transaction.\r\n\r\n**TLDR;** Avoid mixing output types, always prefer spending older output types first.\r\n\r\n## Accumulating older `OutputType` UTXOs\r\n\r\nIf a user defaults to using bech32/bech32m addresses in their wallet, it is undesirable to accumulate older type UTXOs. However, this can happen if many payments to older type address are made. Consider the following scenario:\r\n\r\n![utxo rotation(1)](https://user-images.githubusercontent.com/7444140/158597154-30789d40-82ff-499c-b2d3-4783a5db4842.png)\r\n\r\nAlice has only bech32 UTXOs in her wallet. Over time, she makes many payments to Bob, who always provides P2SH addresses. If her wallet consistently spends the bech32 UTXOs first, she will eventually rotate all of her bech32 UTXOs into P2SH UTXOs.\r\n\r\nThis can be mitigated by always preferring to spend older type outputs first. After Alice's first payment to Bob, Alice's wallet should attempt to spend the P2SH outputs first, effectively clearing them out of the wallet. If Alice has a mix of Legacy and P2SH outputs and neither group is able to fund the transaction by itself, her wallet should first mix these two output types before mixing with bech32/bech32m\r\n\r\n**TLDR;** Always try to spend older type outputs first. If a transaction can't be funded from any single group of older outputs, mix older output types first before spending default outputs.\r\n\r\n# Aproach\r\n\r\nI have written a rudimentary first pass at this by adding a filter to `AvailableCoins` and then running multiple rounds of coin selection, leaving the coin selection algorithm unchanged. The mapping from `TxoutType` -> `OutputType` feels hacky and I'm sure I'm not covering every edge case, so I'm hoping this can be improved. Additionally, in the worst case, this can lead to running coin selection 6 times. This can be improved if there is a way to grab all UTXOs owned by the wallet by `OutputType`, rather than iterating over the full set each time with a different filter.\r\n\r\nI've added a functional test (`test/functional/wallet_avoid_mixing_output_types.py`) so that the approach can be easily iterated on to make it less hacky and improve performance\r\n\r\n## Requests for reviewers\r\n\r\n* If the concept is good, I am looking for feedback on how to improve the approach\r\n* Suggestions on additional cases to test for in the functional test",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 3,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24584/comments",
   "created_at" : "2022-03-16T13:13:49Z",
   "draft" : false,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24584/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/24584",
   "id" : 1171006691,
   "labels" : [
      {
         "color" : "08a781",
         "default" : false,
         "description" : null,
         "id" : 149424,
         "name" : "Wallet",
         "node_id" : "MDU6TGFiZWwxNDk0MjQ=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Wallet"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24584/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII5840iDo1",
   "number" : 24584,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/24584.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24584",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/24584.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24584"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24584/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24584/timeline",
   "title" : "[RFC] wallet: avoid mixing different `OutputTypes` during coin selection",
   "updated_at" : "2022-03-16T14:35:28Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24584",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/7444140?v=4",
      "events_url" : "https://api.github.com/users/josibake/events{/privacy}",
      "followers_url" : "https://api.github.com/users/josibake/followers",
      "following_url" : "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url" : "https://api.github.com/users/josibake/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/josibake",
      "id" : 7444140,
      "login" : "josibake",
      "node_id" : "MDQ6VXNlcjc0NDQxNDA=",
      "organizations_url" : "https://api.github.com/users/josibake/orgs",
      "received_events_url" : "https://api.github.com/users/josibake/received_events",
      "repos_url" : "https://api.github.com/users/josibake/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/josibake/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/josibake"
   }
}
