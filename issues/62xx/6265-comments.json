[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917"
         }
      },
      "body" : "This should be based on sendmany (not sendtoaddress) and take the chain to use for change as a parameter. The *existing* RPCs and GUI should use the hdsetchain-configured default - no need for random keys.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-10T11:23:34Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+\n+    const unsigned int bip32MasterSeedLength = 32;\n+    CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n+    bool fGenerateMasterSeed = true;\n+    HDChainID chainId;\n+    std::string chainPath = hd_default_chainpath;\n+    if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n+        chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+\n+    if (params.size() > 1 && params[1].isStr())\n+    {\n+        if (!IsHex(params[1].get_str()))\n+            throw runtime_error(\"HD master seed must encoded in hex\");\n+\n+        std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n+        if (seed.size() != bip32MasterSeedLength)\n+            throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+\n+        memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+        memory_cleanse(&seed[0], bip32MasterSeedLength);\n+        fGenerateMasterSeed = false;\n+    }\n+\n+    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, chainId);\n+    if (fGenerateMasterSeed)\n+        result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+    result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+    return result;\n+}\n+\n+UniValue hdsetchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"hdsetchain <chainid>\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"chainid\\\"        (string|hex, required) chainid is a bitcoin hash of the master public key of the corresponding chain.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdsetchain\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    HDChainID chainId;\n+    if (!IsHex(params[0].get_str()))\n+        throw runtime_error(\"Chain id format is invalid\");\n+\n+    chainId.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->HDSetActiveChainID(chainId))\n+        throw runtime_error(\"Could not set active chain\");\n+\n+    return NullUniValue;\n+}\n+\n+UniValue hdgetinfo(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"hdgetinfo\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"chainid\\\" : \\\"<chainid>\\\",  string) A bitcoinhash of the master public key\\n\"\n+                            \"  \\\"creationtime\\\" : The creation time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The chainpath (like m/44'/0'/0'/c)\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetinfo\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::vector<HDChainID> chainIDs;\n+    if (!pwalletMain->GetAvailableChainIDs(chainIDs))\n+        throw runtime_error(\"Could not load chain ids\");\n+\n+    UniValue result(UniValue::VARR);\n+    BOOST_FOREACH(const HDChainID& chainId, chainIDs)\n+    {\n+        CHDChain chain;\n+        if (!pwalletMain->GetChain(chainId, chain))\n+            throw runtime_error(\"Could not load chain\");\n+\n+        UniValue chainObject(UniValue::VOBJ);\n+        chainObject.push_back(Pair(\"chainid\", chainId.GetHex()));\n+        chainObject.push_back(Pair(\"creationtime\", chain.nCreateTime));\n+        chainObject.push_back(Pair(\"chainpath\", chain.chainPath));\n+\n+        result.push_back(chainObject);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue hdgetaddress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+                            \"hdgetaddress (<childindex>)\\n\"\n+                            \"\\nReturns a Bitcoin address for receiving payments.\\n\"\n+                            \"\\nAutomatically uses the next available childindex if no index is given\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"childindex\\\"        (numeric, optional) child key index. ATTENTION: automatic index counting will start at the highes available child key index\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"address\\\" : \\\"<address>\\\",  string) The new bitcoin address\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The used chainpath\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetaddress\", \"\")\n+                            + HelpExampleCli(\"hdgetaddress\", \"100\")\n+                            + HelpExampleRpc(\"hdgetaddress\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CPubKey newKey;\n+    std::string keyChainPath;\n+    if (params.size() == 1 && params[0].isNum())\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, params[0].get_int()))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    else\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey, keyChainPath))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    CKeyID keyID = newKey.GetID();\n+    \n+    pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));\n+    result.push_back(Pair(\"chainpath\", keyChainPath));\n+    return result;\n+}\n+\n+UniValue hdsendtoaddress(const UniValue& params, bool fHelp)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917",
      "id" : 32107917,
      "original_commit_id" : "c85a0b62455750098280bbb8fa5977596ca6cc81",
      "original_position" : 251,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-10T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023"
         }
      },
      "body" : "Needs a check that the wallet format has been upgraded to support HD keys. The new format can be the default, but shouldn't upgrade unless -upgradewallet is used.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-10T11:25:43Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023",
      "id" : 32108023,
      "original_commit_id" : "c85a0b62455750098280bbb8fa5977596ca6cc81",
      "original_position" : 97,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 97,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-10T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486"
         }
      },
      "body" : "I think (didn't test) that the hd wallet format is backward compatible. No existing database key/values records got changed. Only new ones added.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-10T11:33:01Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486",
      "id" : 32108486,
      "original_commit_id" : "c85a0b62455750098280bbb8fa5977596ca6cc81",
      "original_position" : 97,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 97,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-10T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "One warning while compiling \r\n```\r\n  CXX      qt/qt_libbitcoinqt_a-walletmodeltransaction.o\r\nqt/walletmodeltransaction.cpp:20:5: warning: delete called on 'CReserveKey' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]\r\n    delete keyChange;\r\n    ^\r\n1 warning generated.\r\n```\r\n\r\nhdgetaddress doesn't seem to work?\r\n```\r\ntinyformat: Not enough conversion specifiers in format string (code -1)\r\n```",
      "created_at" : "2015-06-16T22:55:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-112596561",
      "id" : 112596561,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
      "updated_at" : "2015-06-16T22:55:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112596561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=3",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580541"
         }
      },
      "body" : "s/acctual/actual",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-16T22:55:43Z",
      "diff_hunk" : "@@ -0,0 +1,169 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+/** hdpublic key for a persistant store. */\n+class CHDPubKey\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    CPubKey pubkey; //the acctual pubkey",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580541",
      "id" : 32580541,
      "original_commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "original_position" : 21,
      "path" : "src/wallet/hdkeystore.h",
      "position" : 21,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-16T22:55:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=3",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580607"
         }
      },
      "body" : "s/oder",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-16T22:56:57Z",
      "diff_hunk" : "@@ -0,0 +1,169 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_HDKEYSTORE_H\n+#define BITCOIN_WALLET_HDKEYSTORE_H\n+\n+#include \"keystore.h\"\n+#include \"wallet/crypter.h\"\n+#include \"serialize.h\"\n+#include \"pubkey.h\"\n+\n+typedef uint256 HDChainID;\n+\n+/** hdpublic key for a persistant store. */\n+class CHDPubKey\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    CPubKey pubkey; //the acctual pubkey\n+    unsigned int nChild; //child index\n+    HDChainID chainHash; //hash of the chains master pubkey\n+    std::string chainPath; //individual key chainpath like m/44'/0'/0'/0/1\n+    bool internal;\n+\n+    CHDPubKey()\n+    {\n+        SetNull();\n+    }\n+\n+    bool IsValid()\n+    {\n+        return pubkey.IsValid();\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDPubKey::CURRENT_VERSION;\n+        chainHash.SetNull();\n+        chainPath.clear();\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(pubkey);\n+        READWRITE(nChild);\n+        READWRITE(chainHash);\n+        READWRITE(chainPath);\n+        READWRITE(internal);\n+    }\n+};\n+\n+/** class for representing a hd chain of keys. */\n+class CHDChain\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime; // 0 means unknown\n+\n+    HDChainID chainHash; //hash() of the masterpubkey\n+    std::string chainPath; //something like \"m'/44'/0'/0'/c\"\n+    CExtPubKey externalPubKey;\n+    CExtPubKey internalPubKey; // pubkey.IsValid() == false means only use external chain\n+\n+    CHDChain()\n+    {\n+        SetNull();\n+    }\n+\n+    CHDChain(int64_t nCreateTime_)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTime_;\n+    }\n+\n+    bool IsValid()\n+    {\n+        return externalPubKey.pubkey.IsValid();\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+\n+        READWRITE(nCreateTime);\n+        READWRITE(chainHash);\n+        READWRITE(chainPath);\n+        READWRITE(externalPubKey);\n+        READWRITE(internalPubKey);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CHDChain::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        chainHash.SetNull();\n+    }\n+};\n+\n+class CHDKeyStore : public CCryptoKeyStore\n+{\n+protected:\n+    std::map<HDChainID, CKeyingMaterial > mapHDMasterSeeds; //master seeds are stored outside of CHDChain (crypto)\n+    std::map<HDChainID, std::vector<unsigned char> > mapHDCryptedMasterSeeds;\n+    std::map<CKeyID, CHDPubKey> mapHDPubKeys; //all hd pubkeys of all chains\n+    std::map<HDChainID, CHDChain> mapChains; //all available chains\n+\n+    //!derive key from a CHDPubKey object\n+    bool DeriveKey(const CHDPubKey hdPubKey, CKey& keyOut) const;\n+\n+public:\n+    //!add a master seed with a given pubkeyhash (memory only)\n+    virtual bool AddMasterSeed(const HDChainID& pubkeyhash, const CKeyingMaterial& masterSeed);\n+\n+    //!add a crypted master seed with a given pubkeyhash (memory only)\n+    virtual bool AddCryptedMasterSeed(const HDChainID& hash, const std::vector<unsigned char>& vchCryptedSecret);\n+\n+    //!encrypt existing uncrypted seeds and remove unencrypted data\n+    virtual bool EncryptSeeds();\n+\n+    //!export the master seed from a given chain id (hash of the master pub key)\n+    virtual bool GetMasterSeed(const HDChainID& hash, CKeyingMaterial& seedOut) const;\n+\n+    //!get the encrypted master seed of a giveb chain id\n+    virtual bool GetCryptedMasterSeed(const HDChainID& hash, std::vector<unsigned char>& vchCryptedSecret) const;\n+\n+    //!writes all available chain ids to a vector\n+    virtual bool GetAvailableChainIDs(std::vector<HDChainID>& chainIDs);\n+\n+    //!add a CHDPubKey object to the keystore (memory only)\n+    bool LoadHDPubKey(const CHDPubKey &pubkey);\n+\n+\n+    //!add a new chain to the keystore (memory only)\n+    bool AddChain(const CHDChain& chain);\n+\n+    //!writes a chain defined by given chainId to chainOut, returns false if not found\n+    bool GetChain(const HDChainID chainId, CHDChain& chainOut) const;\n+\n+    //!Derives a hdpubkey object in a given chain defined by chainId from the existing external oder internal chain root pub key",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32580607",
      "id" : 32580607,
      "original_commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "original_position" : 150,
      "path" : "src/wallet/hdkeystore.h",
      "position" : 150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-16T22:56:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32580607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=3",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "body" : "@fanquake: thanks for the tests. Will have a look at it. Before calling `hdgetaddress` did you call `hdaddchain`?",
      "created_at" : "2015-06-17T06:26:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-112670705",
      "id" : 112670705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
      "updated_at" : "2015-06-17T06:26:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/112670705",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "can this be used to import master seeds? If not, would this require much additional work?",
      "created_at" : "2015-06-18T13:56:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-113164322",
      "id" : 113164322,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
      "updated_at" : "2015-06-18T13:56:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113164322",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1530283?v=3",
         "events_url" : "https://api.github.com/users/rebroad/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rebroad/followers",
         "following_url" : "https://api.github.com/users/rebroad/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rebroad/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rebroad",
         "id" : 1530283,
         "login" : "rebroad",
         "organizations_url" : "https://api.github.com/users/rebroad/orgs",
         "received_events_url" : "https://api.github.com/users/rebroad/received_events",
         "repos_url" : "https://api.github.com/users/rebroad/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rebroad/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rebroad"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32764654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32764654"
         }
      },
      "body" : "Should this not read `HelpExampleCli(\"hdaddchain\", \"\")` ? Since by providing \"set\" as an argument, you must also provide a seed ... I believe the intention was to provide a example run without providing a seed, which should just run as `hdaddchain` without arguments\r\n",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-18T18:48:39Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32764654",
      "id" : 32764654,
      "original_commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "original_position" : 88,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-18T18:48:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32764654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2230604?v=3",
         "events_url" : "https://api.github.com/users/faizkhan00/events{/privacy}",
         "followers_url" : "https://api.github.com/users/faizkhan00/followers",
         "following_url" : "https://api.github.com/users/faizkhan00/following{/other_user}",
         "gists_url" : "https://api.github.com/users/faizkhan00/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/faizkhan00",
         "id" : 2230604,
         "login" : "faizkhan00",
         "organizations_url" : "https://api.github.com/users/faizkhan00/orgs",
         "received_events_url" : "https://api.github.com/users/faizkhan00/received_events",
         "repos_url" : "https://api.github.com/users/faizkhan00/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/faizkhan00/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/faizkhan00/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/faizkhan00"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32821421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32821421"
         }
      },
      "body" : "Right. Will fix this.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-19T11:37:07Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32821421",
      "id" : 32821421,
      "original_commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "original_position" : 88,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 88,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-19T11:37:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32821421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "@rebroad: right. This PR would enabled HD features in the main bitcoin-core wallet. It won't affect the current ways of generating keys and sending coins. It's totally independent form the rest of the wallet features. So it is relatively save to use/test this.\r\n\r\nYou can import hd seeds, but only in raw hex. There is no support for Bip39 word lists. I'm pretty sure you'll find a tool to convert bip39 wordlists into 32byte master seed represented in hex.\r\n\r\nIMO bip39 has no reason to exists (sorry, a bit harsh).",
      "created_at" : "2015-06-19T11:41:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-113485620",
      "id" : 113485620,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
      "updated_at" : "2015-06-19T11:41:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113485620",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "body" : "I haven't gotten to testing this yet, but why did you not decide to accept a base58 encoded key?\r\n\r\nThe first reason against accepting raw hex is there's no way to validate the key without visually comparing. And extended keys can often look similar at the start. xpub/xprv's include a checksum, so the user can be sure they entered the right thing.\r\n\r\nThe other reason is extensibility, since adding watch-only chains implies there won't be any master hex around to use. ",
      "created_at" : "2015-06-25T02:32:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-115075308",
      "id" : 115075308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
      "updated_at" : "2015-06-25T02:32:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115075308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5617245?v=3",
         "events_url" : "https://api.github.com/users/afk11/events{/privacy}",
         "followers_url" : "https://api.github.com/users/afk11/followers",
         "following_url" : "https://api.github.com/users/afk11/following{/other_user}",
         "gists_url" : "https://api.github.com/users/afk11/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/afk11",
         "id" : 5617245,
         "login" : "afk11",
         "organizations_url" : "https://api.github.com/users/afk11/orgs",
         "received_events_url" : "https://api.github.com/users/afk11/received_events",
         "repos_url" : "https://api.github.com/users/afk11/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/afk11/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/afk11/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/afk11"
      }
   },
   {
      "body" : "@afk11: The lack of base58check encoded master keys is only because it's not implemented yet (didn't find time to do it). But it's very trivial to add. I decided to export the master seed hex to potentially allow to create a bip39 mnemonic (there could be a tool hex-seed->bip39mnemonic). IIRC, you can't create a bip39 mnemonic from the master private key (not sure). Somehow i feel to store a hd chains of keys in the very root, the seed and not in the first derivation, the master private key.\r\nIndeed, you can't visually verify a hex master seed. At the moment i'm not sure what's best practice here. I'd like to avoid Bip39 for security reasons and so im stuck now with hex encoding for the 256bit entropy.\r\n\r\nBut right. Especially for watch-only and HDM wallets, base58check encoded public key importing and usage as external chain root is extremely helpful. I also wrote that in the PR description (see \"whats next\").",
      "created_at" : "2015-06-25T06:41:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#issuecomment-115125281",
      "id" : 115125281,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6265",
      "updated_at" : "2015-06-25T06:41:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115125281",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
