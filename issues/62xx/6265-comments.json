[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917"
         }
      },
      "body" : "This should be based on sendmany (not sendtoaddress) and take the chain to use for change as a parameter. The *existing* RPCs and GUI should use the hdsetchain-configured default - no need for random keys.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-10T11:23:34Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+\n+    const unsigned int bip32MasterSeedLength = 32;\n+    CKeyingMaterial vSeed = CKeyingMaterial(bip32MasterSeedLength);\n+    bool fGenerateMasterSeed = true;\n+    HDChainID chainId;\n+    std::string chainPath = hd_default_chainpath;\n+    if (params.size() > 0 && params[0].isStr() && params[0].get_str() != \"default\")\n+        chainPath = params[1].get_str(); //todo bip32 chainpath sanity\n+\n+    if (params.size() > 1 && params[1].isStr())\n+    {\n+        if (!IsHex(params[1].get_str()))\n+            throw runtime_error(\"HD master seed must encoded in hex\");\n+\n+        std::vector<unsigned char> seed = ParseHex(params[1].get_str());\n+        if (seed.size() != bip32MasterSeedLength)\n+            throw runtime_error(\"HD master seed must be \"+itostr(bip32MasterSeedLength*8)+\"bit\");\n+\n+        memcpy(&vSeed[0], &seed[0], bip32MasterSeedLength);\n+        memory_cleanse(&seed[0], bip32MasterSeedLength);\n+        fGenerateMasterSeed = false;\n+    }\n+\n+    pwalletMain->HDSetChainPath(chainPath, fGenerateMasterSeed, vSeed, chainId);\n+    if (fGenerateMasterSeed)\n+        result.push_back(Pair(\"seed_hex\", HexStr(vSeed)));\n+    result.push_back(Pair(\"chainid\", chainId.GetHex()));\n+    return result;\n+}\n+\n+UniValue hdsetchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+                            \"hdsetchain <chainid>\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"chainid\\\"        (string|hex, required) chainid is a bitcoin hash of the master public key of the corresponding chain.\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdsetchain\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    HDChainID chainId;\n+    if (!IsHex(params[0].get_str()))\n+        throw runtime_error(\"Chain id format is invalid\");\n+\n+    chainId.SetHex(params[0].get_str());\n+\n+    if (!pwalletMain->HDSetActiveChainID(chainId))\n+        throw runtime_error(\"Could not set active chain\");\n+\n+    return NullUniValue;\n+}\n+\n+UniValue hdgetinfo(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+                            \"hdgetinfo\\n\"\n+                            \"\\nReturns some hd relevant information.\\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"chainid\\\" : \\\"<chainid>\\\",  string) A bitcoinhash of the master public key\\n\"\n+                            \"  \\\"creationtime\\\" : The creation time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The chainpath (like m/44'/0'/0'/c)\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetinfo\", \"\")\n+                            + HelpExampleCli(\"hdgetinfo\", \"True\")\n+                            + HelpExampleRpc(\"hdgetinfo\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::vector<HDChainID> chainIDs;\n+    if (!pwalletMain->GetAvailableChainIDs(chainIDs))\n+        throw runtime_error(\"Could not load chain ids\");\n+\n+    UniValue result(UniValue::VARR);\n+    BOOST_FOREACH(const HDChainID& chainId, chainIDs)\n+    {\n+        CHDChain chain;\n+        if (!pwalletMain->GetChain(chainId, chain))\n+            throw runtime_error(\"Could not load chain\");\n+\n+        UniValue chainObject(UniValue::VOBJ);\n+        chainObject.push_back(Pair(\"chainid\", chainId.GetHex()));\n+        chainObject.push_back(Pair(\"creationtime\", chain.nCreateTime));\n+        chainObject.push_back(Pair(\"chainpath\", chain.chainPath));\n+\n+        result.push_back(chainObject);\n+    }\n+\n+    return result;\n+}\n+\n+UniValue hdgetaddress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+                            \"hdgetaddress (<childindex>)\\n\"\n+                            \"\\nReturns a Bitcoin address for receiving payments.\\n\"\n+                            \"\\nAutomatically uses the next available childindex if no index is given\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. \\\"childindex\\\"        (numeric, optional) child key index. ATTENTION: automatic index counting will start at the highes available child key index\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"address\\\" : \\\"<address>\\\",  string) The new bitcoin address\\n\"\n+                            \"  \\\"chainpath\\\" : \\\"<keyschainpath>\\\",  string) The used chainpath\\n\"\n+                            \"}\\n\"\n+                            \"\\nExamples:\\n\"\n+                            + HelpExampleCli(\"hdgetaddress\", \"\")\n+                            + HelpExampleCli(\"hdgetaddress\", \"100\")\n+                            + HelpExampleRpc(\"hdgetaddress\", \"\")\n+                            );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CPubKey newKey;\n+    std::string keyChainPath;\n+    if (params.size() == 1 && params[0].isNum())\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetChildPubKeyAtIndex(emptyId, newKey, params[0].get_int()))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    else\n+    {\n+        HDChainID emptyId;\n+        if (!pwalletMain->HDGetNextChildPubKey(emptyId, newKey, keyChainPath))\n+            throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Can't generate HD child key\");\n+    }\n+    CKeyID keyID = newKey.GetID();\n+    \n+    pwalletMain->SetAddressBook(keyID, \"\", \"receive\");\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.push_back(Pair(\"address\", CBitcoinAddress(keyID).ToString()));\n+    result.push_back(Pair(\"chainpath\", keyChainPath));\n+    return result;\n+}\n+\n+UniValue hdsendtoaddress(const UniValue& params, bool fHelp)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32107917",
      "id" : 32107917,
      "original_commit_id" : "c85a0b62455750098280bbb8fa5977596ca6cc81",
      "original_position" : 251,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 251,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-10T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32107917",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023"
         }
      },
      "body" : "Needs a check that the wallet format has been upgraded to support HD keys. The new format can be the default, but shouldn't upgrade unless -upgradewallet is used.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-10T11:25:43Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108023",
      "id" : 32108023,
      "original_commit_id" : "c85a0b62455750098280bbb8fa5977596ca6cc81",
      "original_position" : 97,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 97,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-10T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108023",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486"
         }
      },
      "body" : "I think (didn't test) that the hd wallet format is backward compatible. No existing database key/values records got changed. Only new ones added.",
      "commit_id" : "3555883a506a415818eb240902fb46ebfbdf5c99",
      "created_at" : "2015-06-10T11:33:01Z",
      "diff_hunk" : "@@ -2359,3 +2361,293 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n \n     return results;\n }\n+\n+/*\n+///////////\n+BIP32 stack\n+///////////\n+\n+default chainpath after bip44\n+m = master key\n+<num>' or <num>h = hardened key\n+c stands for internal/external chain switch\n+  c=0 for external addresses\n+  c=1 for internal addresses\n+  \n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/0 for the first external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/0 for the first internal key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/0/1 for the second external key\n+example \"m/44'/0'/0'/c\" will result in m/44'/0'/0'/1/1 for the second internal key\n+*/\n+const std::string hd_default_chainpath = \"m/44'/0'/0'/c\";\n+\n+static void SendMoneyHD(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+{\n+    CAmount curBalance = pwalletMain->GetBalance();\n+\n+    // Check amount\n+    if (nValue <= 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount\");\n+\n+    if (nValue > curBalance)\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n+\n+    // Parse Bitcoin address\n+    CScript scriptPubKey = GetScriptForDestination(address);\n+\n+    // Create and send the transaction\n+    CHDReserveKey reservekey(pwalletMain);\n+    CAmount nFeeRequired;\n+    std::string strError;\n+    vector<CRecipient> vecSend;\n+    int nChangePosRet = -1;\n+    CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n+    vecSend.push_back(recipient);\n+    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+        if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+}\n+\n+UniValue hdaddchain(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp)\n+        throw runtime_error(\n+                            \"hdaddchain (<chainpath>|default) (<masterseed_hex>)\\n\"\n+                            \"\\nAdds a HD/Bip32 chain \\n\"\n+                            \"\\nArguments:\\n\"\n+                            \"1. chainpath        (string, optional, default=\"+hd_default_chainpath+\") chainpath for hd wallet structure\\n\"\n+                            \"   m stands for master, c for internal/external key-switch, k stands for upcounting child key index\"\n+                            \"2. masterseed_hex   (string/hex, optional) use this seed for master key generation\\n\"\n+                            \"\\nResult\\n\"\n+                            \"{\\n\"\n+                            \"  \\\"seed_hex\\\" : \\\"<hexstr>\\\",  (string) seed used during master key generation (only if no masterseed hex was provided\\n\"\n+                            \"}\\n\"\n+\n+                            \"\\nExamples\\n\"\n+                            + HelpExampleCli(\"hdaddchain\", \"set\")\n+                            + HelpExampleCli(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            + HelpExampleRpc(\"hdaddchain\", \"set m/44'/0'/0'/c/k\")\n+                            );\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    assert(pwalletMain != NULL);\n+    EnsureWalletIsUnlocked();\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6265#discussion_r32108486",
      "id" : 32108486,
      "original_commit_id" : "c85a0b62455750098280bbb8fa5977596ca6cc81",
      "original_position" : 97,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 97,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6265",
      "updated_at" : "2015-06-10T12:38:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/32108486",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   }
]
