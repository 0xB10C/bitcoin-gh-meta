[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23962](https://github.com/bitcoin/bitcoin/pull/23962) (Use int32_t type for transaction size/weight consistently by hebasto)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-01-26T23:53:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1022710490",
      "id" : 1022710490,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
      "node_id" : "IC_kwDOABII58489VLa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022710490/reactions"
      },
      "updated_at" : "2022-02-06T11:35:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022710490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "What is the relationship of this PR to your #18191? Just judging from the title, they seem to do very similar things, although the code changes are not the same.",
      "created_at" : "2022-02-16T19:49:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042101831",
      "id" : 1042101831,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
      "node_id" : "IC_kwDOABII584-HTZH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042101831/reactions"
      },
      "updated_at" : "2022-02-16T19:49:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042101831",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "They were split out from an initial patch set to make it easier to review.\r\n\r\n#18191 is the component which has some behavioral change, #24158 is a pure optimization.",
      "created_at" : "2022-02-16T19:59:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042110112",
      "id" : 1042110112,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
      "node_id" : "IC_kwDOABII584-HVag",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042110112/reactions"
      },
      "updated_at" : "2022-02-16T19:59:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042110112",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "see the pr description of #18191\r\n\r\n> There's potential for a better -- but more sophisticated -- algorithm that can be used taking advantage of epochs, but I figured it is better to do something that is simple and works first and upgrade it later as the other epoch mempool work proceeds as it makes the patches for the epoch algorithm simpler to understand, so you can consider this as preparatory work. It could either go in now if it is not controversial, or we could wait until the other patch is ready to go.",
      "created_at" : "2022-02-16T20:01:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042111972",
      "id" : 1042111972,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
      "node_id" : "IC_kwDOABII584-HV3k",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042111972/reactions"
      },
      "updated_at" : "2022-02-16T20:01:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042111972",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> see the pr description of #18191\r\n\r\nThat's from #21464 which was merged, my question is about the older #18191.",
      "created_at" : "2022-02-16T20:14:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042123094",
      "id" : 1042123094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
      "node_id" : "IC_kwDOABII584-HYlW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042123094/reactions"
      },
      "updated_at" : "2022-02-16T20:14:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042123094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "oh oops.\r\n\r\nuh yeah TBH I forgot I had that other PR open.\r\n\r\nThey should be mostly the same.\r\n\r\nThe main difference is the earlier one also applies an optimization getting rid of setExclude and just using the cache line presence instead, which ends up being redundant with the setExclude.\r\n\r\nWe can add that optimization as a separate PR since it's a little bit less obvious why it works, I left it out when I rewrote this one.",
      "created_at" : "2022-02-16T20:28:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#issuecomment-1042219410",
      "id" : 1042219410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24158",
      "node_id" : "IC_kwDOABII584-HwGS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042219410/reactions"
      },
      "updated_at" : "2022-02-16T20:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1042219410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808939277"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808939277"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't you first look for `descendant` in `cachedDescendants` before fetching its children? If its descendant set is available there, you wasted a cycle looking at the first generation.",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-17T11:15:52Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808939277",
      "id" : 808939277,
      "line" : 144,
      "node_id" : "PRRC_kwDOABII584wN28N",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 144,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 40,
      "pull_request_review_id" : 874762333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808939277/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-17T12:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808939277",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808951139"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951139"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIUC, you're swapping here in order to insert all of the descendants between this child and the next entry in the descendants vector, so you can just increment `i` to skip to the next child in the same generation. Note that you're still moving everything downwards n times where n is the number of cached descendants.\r\nApproach-wise, perhaps a `std::deque` (linked list) is more appropriate if you really want the constant time insert at arbitrary position. Also, I'm not too familiar with the implementation of `std::vector`, but I feel like it should be optimized enough for you to feel okay using `insert(i+1)` without using swaps. It might even do that in the background.\r\n\r\nAlso, please add a comment because it was not immediately obvious that you're doing swaps to maintain ordering.",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-17T11:30:56Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808951139",
      "id" : 808951139,
      "line" : 156,
      "node_id" : "PRRC_kwDOABII584wN51j",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 156,
      "original_position" : 52,
      "original_start_line" : 154,
      "path" : "src/txmempool.cpp",
      "position" : 52,
      "pull_request_review_id" : 874762333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951139/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 154,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-17T12:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951139",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808951919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What is the purpose of `i` here? You're re-assigning it later anyway.\r\n\r\nAlso, why can't you just do a `std::transform` from `children` to populate `descendants`?",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-17T11:31:59Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808951919",
      "id" : 808951919,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII584wN6Bv",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 132,
      "original_position" : 28,
      "original_start_line" : 128,
      "path" : "src/txmempool.cpp",
      "position" : 28,
      "pull_request_review_id" : 874762333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951919/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 128,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-17T12:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808951919",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808953118"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808953118"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is an appropriate use of epochs, but I think it's important to document what `visit`ing an entry means. IIUC, in this context it means you've added this entry to the `descendants` vector.",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-17T11:33:33Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808953118",
      "id" : 808953118,
      "line" : 135,
      "node_id" : "PRRC_kwDOABII584wN6Ue",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 135,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 31,
      "pull_request_review_id" : 874762333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808953118/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-17T12:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808953118",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808967963"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808967963"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would using `std::shrink_to_fit()` https://www.cplusplus.com/reference/vector/vector/shrink_to_fit/ \"guarantee we trim\" or no?",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-17T11:52:43Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808967963",
      "id" : 808967963,
      "line" : 194,
      "node_id" : "PRRC_kwDOABII584wN98b",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 194,
      "original_position" : 108,
      "original_start_line" : 184,
      "path" : "src/txmempool.cpp",
      "position" : 108,
      "pull_request_review_id" : 874762333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808967963/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 184,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-17T12:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808967963",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808974643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808974643"
         }
      },
      "author_association" : "MEMBER",
      "body" : "actually it might make more sense to resize to the children's aggregated descendant counts. You could overestimate, but there's most likely even fewer resizes.",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-17T12:01:27Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r808974643",
      "id" : 808974643,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII584wN_kz",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 127,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : 23,
      "pull_request_review_id" : 874762333,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808974643/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-17T12:04:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/808974643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r809932699"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809932699"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also I'm curious as to why it's necessary to free this memory here. We don't need to allocate anything in the rest of the function, and `descendants` goes out of scope when we return.",
      "commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "created_at" : "2022-02-18T11:54:36Z",
      "diff_hunk" : "@@ -120,47 +120,91 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap& cachedDescendan\n                                       const std::set<uint256>& setExclude, std::set<uint256>& descendants_to_remove,\n                                       uint64_t ancestor_size_limit, uint64_t ancestor_count_limit)\n {\n-    CTxMemPoolEntry::Children stageEntries, descendants;\n-    stageEntries = updateIt->GetMemPoolChildrenConst();\n-\n-    while (!stageEntries.empty()) {\n-        const CTxMemPoolEntry& descendant = *stageEntries.begin();\n-        descendants.insert(descendant);\n-        stageEntries.erase(descendant);\n-        const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n-        for (const CTxMemPoolEntry& childEntry : children) {\n-            cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    descendants.insert(*cacheEntry);\n+    const CTxMemPoolEntry::Children& children = updateIt->GetMemPoolChildrenConst();\n+\n+    // initialize to hold all direct children\n+    // children guaranteed to be unique at this point\n+    std::vector<txiter> descendants(children.size());\n+    size_t i = 0;\n+    for (const auto& child: children) {\n+        descendants[i] = mapTx.iterator_to(child);\n+        ++i;\n+    }\n+\n+    {\n+        WITH_FRESH_EPOCH(m_epoch);\n+        // visit all children\n+        for (auto& child : descendants) {\n+            visited(child);\n+        }\n+        for (size_t i = 0, n_to_process = descendants.size(); i < n_to_process; ++i) {\n+            const CTxMemPoolEntry& descendant = *descendants[i];\n+            const CTxMemPoolEntry::Children& children = descendant.GetMemPoolChildrenConst();\n+            for (const CTxMemPoolEntry& childEntry : children) {\n+                cacheMap::iterator cacheIt = cachedDescendants.find(mapTx.iterator_to(childEntry));\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        // Add all to descendants which have not yet been added\n+                        if (!visited(cacheEntry)) {\n+                            descendants.emplace_back(cacheEntry);\n+                            // skip self-swap because of buggy std::swap implementations\n+                            // on some platforms\n+                            if (!(descendants.size() == i+2)) {\n+                                std::swap(descendants[i+1], descendants.back());\n+                            }\n+                            // skip processing this element\n+                            ++i;\n+                        }\n+                    }\n+                } else if (!visited(mapTx.iterator_to(childEntry))) {\n+                    // Schedule for later processing\n+                    descendants.emplace_back(mapTx.iterator_to(childEntry));\n+                    ++n_to_process;\n                 }\n-            } else if (!descendants.count(childEntry)) {\n-                // Schedule for later processing\n-                stageEntries.insert(childEntry);\n             }\n         }\n-    }\n+    } // release epoch\n+\n+    // remove any descendants that are in setExclude\n+    auto included_upto = std::remove_if(descendants.begin(), descendants.end(),\n+            [&](txiter it) {\n+                return setExclude.count(it->GetTx().GetHash());\n+            });\n+\n+    // if none remain, we don't have to do any updating\n+    if (included_upto == descendants.begin()) return;\n+\n     // descendants now contains all in-mempool descendants of updateIt.\n     // Update and add to cached descendant map\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (const CTxMemPoolEntry& descendant : descendants) {\n-        if (!setExclude.count(descendant.GetTx().GetHash())) {\n-            modifySize += descendant.GetTxSize();\n-            modifyFee += descendant.GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(mapTx.iterator_to(descendant));\n-            // Update ancestor state for each descendant\n-            mapTx.modify(mapTx.iterator_to(descendant), update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-            // Don't directly remove the transaction here -- doing so would\n-            // invalidate iterators in cachedDescendants. Mark it for removal\n-            // by inserting into descendants_to_remove.\n-            if (descendant.GetCountWithAncestors() > ancestor_count_limit || descendant.GetSizeWithAncestors() > ancestor_size_limit) {\n-                descendants_to_remove.insert(descendant.GetTx().GetHash());\n-            }\n+    // Note: the below contains code which does some hacks to keep memory tight.\n+    // it could be improved in the future to detect if the vector is already tight\n+    // and then directly move it to cachedDescendants. For simplicity, we just\n+    // do a copy for now.\n+\n+    // emplace into a new vector to guarantee we trim memory\n+    const auto& it = cachedDescendants.emplace(std::piecewise_construct,\n+            std::forward_as_tuple(updateIt),\n+            std::forward_as_tuple(descendants.begin(), included_upto));\n+    // swap with descendants to release it early!\n+    std::vector<txiter>().swap(descendants);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24158#discussion_r809932699",
      "id" : 809932699,
      "in_reply_to_id" : 808967963,
      "line" : 194,
      "node_id" : "PRRC_kwDOABII584wRpeb",
      "original_commit_id" : "1eac472976badf52312b52dcb119fa8b50ed408b",
      "original_line" : 194,
      "original_position" : 108,
      "original_start_line" : 184,
      "path" : "src/txmempool.cpp",
      "position" : 108,
      "pull_request_review_id" : 887181840,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24158",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809932699/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 184,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-18T11:54:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809932699",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
