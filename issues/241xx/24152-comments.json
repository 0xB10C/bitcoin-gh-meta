[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#24404](https://github.com/bitcoin/bitcoin/pull/24404) (refactor: Remove confusing P1008R1 violation in ATMPArgs by MarcoFalke)\n* [#24007](https://github.com/bitcoin/bitcoin/pull/24007) ([mempool] allow tx replacement by smaller witness by LarryRuane)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-01-26T00:08:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1021726430",
      "id" : 1021726430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII58485k7e",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021726430/reactions"
      },
      "updated_at" : "2022-02-23T02:07:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1021726430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802669892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802669892"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "fee-bump **for** transaction B",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T13:38:53Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802669892",
      "id" : 802669892,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII584v18VE",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 85,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 29,
      "pull_request_review_id" : 877471788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802669892/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802669892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802723149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802723149"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's not really clear at this point of the document what \"deduplication\" means - I think both removal of transaction already in the mempool, and removal of package txs that would also get accepted individually. The *Rationale* section on this only mentions the first. Maybe add an explanation/pointer to the following section.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T14:31:46Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802723149",
      "id" : 802723149,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584v2JVN",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 64,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 8,
      "pull_request_review_id" : 877471788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802723149/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802723149",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802799166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802799166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Now that a PackageMempoolAcceptResult with empty `m_tx_results` is returned if the fee is too low, the `tx_pool_standard` fuzz test needs an update, because it [asserts](https://github.com/bitcoin/bitcoin/blob/5e8e0b3d7f6055e326bda61e60712b530e8920f0/src/test/fuzz/tx_pool.cpp#L242) non-emptiness.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T15:39:09Z",
      "diff_hunk" : "@@ -1199,6 +1211,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Transactions must meet two minimum feerates: the mempool minimum fee and min relay fee.\n+    // For transactions consisting of exactly one child and its parents, it suffices to use the\n+    // package feerate (total modified fees / total virtual size) to check this requirement.\n+    m_total_vsize = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](int64_t sum, auto& ws) { return sum + ws.m_vsize; });\n+    m_total_modified_fees = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](CAmount sum, auto& ws) { return sum + ws.m_modified_fees; });\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+    TxValidationState placeholder_state;\n+    if (args.m_package_feerates &&\n+        !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n+        return PackageMempoolAcceptResult(package_state, package_feerate, {});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802799166",
      "id" : 802799166,
      "line" : 1240,
      "node_id" : "PRRC_kwDOABII584v2b4-",
      "original_commit_id" : "f90b6c52681c4a7968c2467641a383f1fc1991d2",
      "original_line" : 1226,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 76,
      "pull_request_review_id" : 877471788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802799166/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802799166",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802851282"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802851282"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "this sentence confused me at first because it seems to describe the very use case of CPFP where a high fee of a child does impact the consideration of a parent - maybe \"insufficient fees of children should...\"",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T16:24:46Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.\n+Package feerate, as defined above, does not consider the fees and relationships between all\n+transactions in the package. We want to prevent \"parents pay for children\" behavior; fees of",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802851282",
      "id" : 802851282,
      "line" : 87,
      "node_id" : "PRRC_kwDOABII584v2onS",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 87,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 31,
      "pull_request_review_id" : 877471788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802851282/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802851282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802858141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802858141"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "shouldn't this be \"A's fees cannot help B\"?",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T16:29:52Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.\n+Package feerate, as defined above, does not consider the fees and relationships between all\n+transactions in the package. We want to prevent \"parents pay for children\" behavior; fees of\n+children should have no impact on the consideration of their parents, since they are not necessary\n+for the parents to be mined. More generally, if transaction B is not needed in order for transaction\n+A to be mined, B's fees cannot help A. In a child-with-parents package, simply excluding any parent",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802858141",
      "id" : 802858141,
      "line" : 90,
      "node_id" : "PRRC_kwDOABII584v2qSd",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 90,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 34,
      "pull_request_review_id" : 877471788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802858141/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802858141",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802872913"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802872913"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could `m_total_modified_fees` and  `m_total_vsize` just be local variables? They seem to be used only in `MemPoolAccept::AcceptMultipleTransactions`.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T16:43:22Z",
      "diff_hunk" : "@@ -649,6 +656,10 @@ class MemPoolAccept\n \n     CChainState& m_active_chainstate;\n \n+    // Used to calculate package feerate.\n+    CAmount m_total_modified_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802872913",
      "id" : 802872913,
      "line" : 674,
      "node_id" : "PRRC_kwDOABII584v2t5R",
      "original_commit_id" : "f90b6c52681c4a7968c2467641a383f1fc1991d2",
      "original_line" : 660,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 40,
      "pull_request_review_id" : 877471788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802872913/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:03:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802872913",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/48763452?v=4",
         "events_url" : "https://api.github.com/users/mzumsande/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mzumsande/followers",
         "following_url" : "https://api.github.com/users/mzumsande/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mzumsande/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mzumsande",
         "id" : 48763452,
         "login" : "mzumsande",
         "node_id" : "MDQ6VXNlcjQ4NzYzNDUy",
         "organizations_url" : "https://api.github.com/users/mzumsande/orgs",
         "received_events_url" : "https://api.github.com/users/mzumsande/received_events",
         "repos_url" : "https://api.github.com/users/mzumsande/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mzumsande/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mzumsande"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802952279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802952279"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit, most examples seem to designate a parent as A and its child as B (which I like, because that corresponds to time-order, first A, then B), but this seems to be reversed? I believe a few lines below, the convention I'm suggesting is followed, (A is parent, B is child). Also, should \"transaction B\" be \"transaction for B\"?",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T18:07:18Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802952279",
      "id" : 802952279,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII584v3BRX",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 85,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 29,
      "pull_request_review_id" : 877867313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802952279/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:19:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802952279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802954740"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802954740"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is okay, but when I first read this, I had no idea what \"modified\" meant (only learning later that the `prioritisetransaction` RPC does the modifying); perhaps \"modified\" can be dropped? I think it's implicit. Or maybe briefly mention the RPC here.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T18:10:16Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802954740",
      "id" : 802954740,
      "line" : 63,
      "node_id" : "PRRC_kwDOABII584v3B30",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 63,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 7,
      "pull_request_review_id" : 877867313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802954740/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:19:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802954740",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802955759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802955759"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's unclear to me what \"deduplication\" means here. I thought a package, by definition, contains no duplicate transactions.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T18:11:30Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r802955759",
      "id" : 802955759,
      "line" : 64,
      "node_id" : "PRRC_kwDOABII584v3CHv",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 64,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 8,
      "pull_request_review_id" : 877867313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802955759/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T18:19:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/802955759",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803135521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803135521"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"However, this should not allow parents to pay for children\"\r\n\r\nThis reads to me like \"parents must not pay for children\". When it is more (to my understanding), parents must be validated first before considering children. If the parent(s) is accepted into the mempool first a low fee child can later join them as part of a sufficient fee package but a low fee child must not prevent a sufficient fee parent from being accepted into the mempool. That's right yeah?",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-09T22:17:13Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803135521",
      "id" : 803135521,
      "line" : 710,
      "node_id" : "PRRC_kwDOABII584v3uAh",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 710,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 249,
      "pull_request_review_id" : 878118993,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803135521/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:17:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803135521",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nBuilt on MacOS Big Sur, ran unit tests (diagrams from [PR review club](https://bitcoincore.reviews/24152) are helpful here illustrating each unit test). Ideally I'd play around with these but just read through and ran them today. Didn't run the fuzz tests but the fuzzer seems to be failing on the CI.\r\n\r\nI asked about DoS vectors for CPFP in today's PR review club as that seems the greatest hurdle to get over for updated RBF rules and package RBF but seem to be less of a concern with CPFP (?). Not sure whether the CPFP carve out rule needs to be tweaked when CPFPing within a package?\r\n\r\nGreat to see this series of PRs progress. \r\n\r\n",
      "created_at" : "2022-02-09T22:50:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1034278526",
      "id" : 1034278526,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII5849pdZ-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034278526/reactions"
      },
      "updated_at" : "2022-02-09T22:51:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034278526",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803207380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803207380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "i agree as a design principle that backwards-compatibility of transaction relay policy is worthwhile.\r\n\r\nThat said, we might have in the future to make exceptions to that principle, where a transaction/package might be relayed across non-upgraded nodes though rejected by upgraded nodes. E.g I'm thinking if replace-by-feerate is deployed instead of replace-by-fee, you might have a (2000 sats; 10 sat/vB) transaction replacing a (5000 sats; 5 sat/vB) already-in-mempool one (even if we can envision some transition period with dual-support).\r\n\r\nThus I'm suggesting to enlighten the wording here, \"As a principle, backwards-compatibility of transaction relay policy is prioritized\", \"we prevent non-programmed restriction of policy\". Especially as all those questions of policy loosening/tightening and how the project operates them are relatively young, I think it's cautious to be more formal in the phrasing. Thereby avoiding in the future ecosystems users to claim an adamant stability of Core policy rules, like in the zero-conf/full-rbf past polemics.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-10T00:39:42Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.\n+Package feerate, as defined above, does not consider the fees and relationships between all\n+transactions in the package. We want to prevent \"parents pay for children\" behavior; fees of\n+children should have no impact on the consideration of their parents, since they are not necessary\n+for the parents to be mined. More generally, if transaction B is not needed in order for transaction\n+A to be mined, B's fees cannot help A. In a child-with-parents package, simply excluding any parent\n+transactions that meet feerate requirements individually is sufficient to ensure this.\n+\n+*Rationale*: For backwards-compatibility of transaction relay policy, it's important that package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803207380",
      "id" : 803207380,
      "line" : 93,
      "node_id" : "PRRC_kwDOABII584v3_jU",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 93,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 37,
      "pull_request_review_id" : 878210505,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803207380/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T00:54:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803207380",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803208009"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803208009"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From checking `prioritisetransaction` documentation, I think it's a valid behavior to subtract fees from a transaction, thus altering `ProcessNewPackage` result. If you think it's a case worthy to cover.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-10T00:41:05Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803208009",
      "id" : 803208009,
      "line" : 693,
      "node_id" : "PRRC_kwDOABII584v3_tJ",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 693,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 232,
      "pull_request_review_id" : 878210505,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803208009/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T00:54:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803208009",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803499685"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803499685"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea! I will add a test for this.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-10T10:02:45Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803499685",
      "id" : 803499685,
      "in_reply_to_id" : 803208009,
      "line" : 693,
      "node_id" : "PRRC_kwDOABII584v5G6l",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 693,
      "original_position" : 232,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 232,
      "pull_request_review_id" : 878595870,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803499685/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T10:02:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803499685",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803506080"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803506080"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks the help ",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-10T10:09:52Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803506080",
      "id" : 803506080,
      "in_reply_to_id" : 802669892,
      "line" : 85,
      "node_id" : "PRRC_kwDOABII584v5Ieg",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 85,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 29,
      "pull_request_review_id" : 878604821,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803506080/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T10:09:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803506080",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94844282?v=4",
         "events_url" : "https://api.github.com/users/Sagor2214/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sagor2214/followers",
         "following_url" : "https://api.github.com/users/Sagor2214/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sagor2214/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sagor2214",
         "id" : 94844282,
         "login" : "Sagor2214",
         "node_id" : "U_kgDOBac1eg",
         "organizations_url" : "https://api.github.com/users/Sagor2214/orgs",
         "received_events_url" : "https://api.github.com/users/Sagor2214/received_events",
         "repos_url" : "https://api.github.com/users/Sagor2214/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sagor2214/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sagor2214/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sagor2214"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803511729"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803511729"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Our goals are:\r\n\r\n(1) If the child's feerate is too low to be accepted, the parent's fees should not be able to pay for it. A parent should not pay for a child, because the child is not necessary for the parent to be mined.\r\n\r\n(2) If the child's feerate is too low to be accepted, that should not prevent the parent from being accepted. A child's fees should not harm its parent, because the child is not necessary for the parent to be mined.\r\n\r\nValidating the parents individually first is _how_ we achieve these goals. It is not the goal itself.\r\n\r\n> This reads to me like \"parents must not pay for children\". When it is more (to my understanding), parents must be validated first before considering children.\r\n\r\nThis is a reversal of the goal/implementation relationship. We install seatbelts in the car (implementation) so that drivers are protected in accidents (goal). The goal is not to install seatbelts for no reason, it's to protect drivers.",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-10T10:16:06Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803511729",
      "id" : 803511729,
      "in_reply_to_id" : 803135521,
      "line" : 710,
      "node_id" : "PRRC_kwDOABII584v5J2x",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 710,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 249,
      "pull_request_review_id" : 878612319,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803511729/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T10:16:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803511729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803543706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803543706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ok thanks. I understand why we'd want goal 2. What's the rationale for goal 1? Introduces too much complexity by reaching into the mempool to assess things not yet in the mempool? The parent is already in the mempool and what is in the mempool (parent) shouldn't impact what isn't in the mempool (child)?",
      "commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "created_at" : "2022-02-10T10:52:15Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803543706",
      "id" : 803543706,
      "in_reply_to_id" : 803135521,
      "line" : 710,
      "node_id" : "PRRC_kwDOABII584v5Rqa",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 710,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 249,
      "pull_request_review_id" : 878655662,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803543706/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T10:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803543706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803552783"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803552783"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point, I guess that is convention now: ancestors < descendants alphanumerically.",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T11:02:48Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803552783",
      "id" : 803552783,
      "in_reply_to_id" : 802952279,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v5T4P",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 85,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : null,
      "pull_request_review_id" : 878672854,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803552783/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T11:02:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803552783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803557914"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803557914"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A parent should not pay for its child, because the child is not necessary for the parent to be mined. We get a better feerate if we just include the parent by itself.",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T11:08:00Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803557914",
      "id" : 803557914,
      "in_reply_to_id" : 803135521,
      "line" : 733,
      "node_id" : "PRRC_kwDOABII584v5VIa",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 733,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 272,
      "pull_request_review_id" : 878679025,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803557914/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T11:08:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803557914",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803560027"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803560027"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Or maybe because in the process of a child (subsidized by a parent) being accepted into the mempool the parent could be mined on its own and then the child would need to be kicked out the mempool? ",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T11:10:01Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803560027",
      "id" : 803560027,
      "in_reply_to_id" : 803135521,
      "line" : 733,
      "node_id" : "PRRC_kwDOABII584v5Vpb",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 733,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 272,
      "pull_request_review_id" : 878681224,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803560027/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T11:10:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803560027",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803563613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803563613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We shouldn't accept the child into the mempool if it doesn't meet the minimum feerate.",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T11:13:24Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803563613",
      "id" : 803563613,
      "in_reply_to_id" : 803135521,
      "line" : 733,
      "node_id" : "PRRC_kwDOABII584v5Whd",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 733,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 272,
      "pull_request_review_id" : 878684919,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803563613/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T11:13:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803563613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803570323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803570323"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah its a miner's economic interest argument. Ok gotcha, makes sense. Thanks",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T11:20:22Z",
      "diff_hunk" : "@@ -557,6 +577,182 @@ BOOST_FIXTURE_TEST_CASE(package_witness_swap_tests, TestChain100Setup)\n         BOOST_CHECK(!m_node.mempool->exists(GenTxid::Wtxid(ptx_parent2_v1->GetWitnessHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_parent3->GetHash())));\n         BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(ptx_mixed_child->GetHash())));\n+\n+        // package feerate should include parent3 and child. It should not include parent1 or parent2_v1.\n+        BOOST_CHECK(mixed_result.m_package_feerate != std::nullopt);\n+        CFeeRate expected_feerate(1 * COIN, GetVirtualTransactionSize(*ptx_parent3) + GetVirtualTransactionSize(*ptx_mixed_child));\n+        BOOST_CHECK_MESSAGE(mixed_result.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      mixed_result.m_package_feerate.value().ToString()));\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(package_cpfp_tests, TestChain100Setup)\n+{\n+    mineBlocks(5);\n+    LOCK(cs_main);\n+    unsigned int expected_pool_size = m_node.mempool->size();\n+    CKey child_key;\n+    child_key.MakeNewKey(true);\n+    CScript parent_spk = GetScriptForDestination(WitnessV0KeyHash(child_key.GetPubKey()));\n+    CKey grandchild_key;\n+    grandchild_key.MakeNewKey(true);\n+    CScript child_spk = GetScriptForDestination(WitnessV0KeyHash(grandchild_key.GetPubKey()));\n+\n+    // zero-fee parent and child package\n+    const CAmount coinbase_value{50 * COIN};\n+    const CAmount parent_value{coinbase_value - 0};\n+    const CAmount child_value{parent_value - COIN};\n+\n+    Package package_cpfp;\n+    auto mtx_parent = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[0], /*vout=*/ 0,\n+                                                    /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                    /*output_destination=*/ parent_spk,\n+                                                    /*output_amount=*/ parent_value, /*submit=*/ false);\n+    CTransactionRef tx_parent = MakeTransactionRef(mtx_parent);\n+    package_cpfp.push_back(tx_parent);\n+\n+    auto mtx_child = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent, /*vout=*/ 0,\n+                                                   /*input_height=*/ 101, /*input_signing_key=*/ child_key,\n+                                                   /*output_destination=*/ child_spk,\n+                                                   /*output_amount=*/ child_value, /*submit=*/ false);\n+    CTransactionRef tx_child = MakeTransactionRef(mtx_child);\n+    package_cpfp.push_back(tx_child);\n+\n+    // Even though the parent pays 0 absolute fees, the child pays 1 BTC which is enough for the\n+    // package feerate to meet the threshold.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_cpfp = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_cpfp, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_state.IsValid(),\n+                            \"Package validation unexpectedly failed: \" << submit_cpfp.m_state.GetRejectReason());\n+        auto it_parent = submit_cpfp.m_tx_results.find(tx_parent->GetWitnessHash());\n+        auto it_child = submit_cpfp.m_tx_results.find(tx_child->GetWitnessHash());\n+        BOOST_CHECK(it_parent != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_parent->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_parent->second.m_base_fees.value() == 0);\n+        BOOST_CHECK(it_child != submit_cpfp.m_tx_results.end());\n+        BOOST_CHECK(it_child->second.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+        BOOST_CHECK(it_child->second.m_base_fees.value() == COIN);\n+\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_parent->GetHash())));\n+        BOOST_CHECK(m_node.mempool->exists(GenTxid::Txid(tx_child->GetHash())));\n+\n+        const CFeeRate expected_feerate(coinbase_value - child_value,\n+                                        GetVirtualTransactionSize(*tx_parent) + GetVirtualTransactionSize(*tx_child));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() > 1000);\n+        BOOST_CHECK(submit_cpfp.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_cpfp.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_cpfp.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Just because we allow low-fee parents doesn't mean we allow low-feerate packages.\n+    // This package just pays 200 satoshis total. This would be enough to pay for the child alone,\n+    // but isn't enough for the entire package to meet the 1sat/vbyte minimum.\n+    Package package_still_too_low;\n+    auto mtx_parent_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ m_coinbase_txns[1], /*vout=*/ 0,\n+                                                          /*input_height=*/ 0, /*input_signing_key=*/ coinbaseKey,\n+                                                          /*output_destination=*/ parent_spk,\n+                                                          /*output_amount=*/ coinbase_value, /*submit=*/ false);\n+    CTransactionRef tx_parent_cheap = MakeTransactionRef(mtx_parent_cheap);\n+    package_still_too_low.push_back(tx_parent_cheap);\n+\n+    auto mtx_child_cheap = CreateValidMempoolTransaction(/*input_transaction=*/ tx_parent_cheap, /*vout=*/ 0,\n+                                                         /*input_height=*/ 101, /* input_signing_key */ child_key,\n+                                                         /*output_destination=*/ child_spk,\n+                                                         /*output_amount=*/ coinbase_value - 200, /*submit=*/ false);\n+    CTransactionRef tx_child_cheap = MakeTransactionRef(mtx_child_cheap);\n+    package_still_too_low.push_back(tx_child_cheap);\n+\n+    // Cheap package should fail with package-fee-too-low.\n+    {\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const auto submit_package_too_low = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                   package_still_too_low, /* test_accept */ false);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_state.IsInvalid(), \"Package validation unexpectedly succeeded\");\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetResult(), PackageValidationResult::PCKG_POLICY);\n+        BOOST_CHECK_EQUAL(submit_package_too_low.m_state.GetRejectReason(), \"package-fee-too-low\");\n+        BOOST_CHECK_EQUAL(m_node.mempool->size(), expected_pool_size);\n+        const CFeeRate child_feerate(200, GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(child_feerate.GetFeePerK() > 1000);\n+        const CFeeRate expected_feerate(200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(expected_feerate.GetFeePerK() < 1000);\n+        BOOST_CHECK(submit_package_too_low.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_package_too_low.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_package_too_low.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate includes the modified fees of the transactions.\n+    // This means a child with its fee delta from prioritisetransaction can pay for a parent.\n+    m_node.mempool->PrioritiseTransaction(tx_child_cheap->GetHash(), 1 * COIN);\n+    // Now that the child's fees have \"increased\" by 1 BTC, the cheap package should succeed.\n+    {\n+        const auto submit_prioritised_package = ProcessNewPackage(m_node.chainman->ActiveChainstate(), *m_node.mempool,\n+                                                                  package_still_too_low, /*test_accept=*/ false);\n+        expected_pool_size += 2;\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_state.IsValid(),\n+                \"Package validation unexpectedly failed\" << submit_prioritised_package.m_state.GetRejectReason());\n+        const CFeeRate expected_feerate(1 * COIN + 200,\n+            GetVirtualTransactionSize(*tx_parent_cheap) + GetVirtualTransactionSize(*tx_child_cheap));\n+        BOOST_CHECK(submit_prioritised_package.m_package_feerate != std::nullopt);\n+        BOOST_CHECK_MESSAGE(submit_prioritised_package.m_package_feerate.value() == expected_feerate,\n+                            strprintf(\"Expected package feerate %s, got %s\", expected_feerate.ToString(),\n+                                      submit_prioritised_package.m_package_feerate.value().ToString()));\n+    }\n+\n+    // Package feerate is calculated without topology in mind; it's just aggregating fees and sizes.\n+    // However, this should not allow parents to pay for children. Each transaction should be",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803570323",
      "id" : 803570323,
      "in_reply_to_id" : 803135521,
      "line" : 733,
      "node_id" : "PRRC_kwDOABII584v5YKT",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 733,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/test/txpackage_tests.cpp",
      "position" : 272,
      "pull_request_review_id" : 878692821,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803570323/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T11:20:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803570323",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803610838"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803610838"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes good point, changed now. I originally added it as a member variable so we could reuse it in `PackageRBFChecks()` in the future, but we'll cross that bridge when we get there.",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T12:12:49Z",
      "diff_hunk" : "@@ -649,6 +656,10 @@ class MemPoolAccept\n \n     CChainState& m_active_chainstate;\n \n+    // Used to calculate package feerate.\n+    CAmount m_total_modified_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803610838",
      "id" : 803610838,
      "in_reply_to_id" : 802872913,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v5iDW",
      "original_commit_id" : "f90b6c52681c4a7968c2467641a383f1fc1991d2",
      "original_line" : 660,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 878750098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803610838/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T12:12:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803610838",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803610953"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803610953"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ooooh good catch",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T12:13:00Z",
      "diff_hunk" : "@@ -1199,6 +1211,21 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Transactions must meet two minimum feerates: the mempool minimum fee and min relay fee.\n+    // For transactions consisting of exactly one child and its parents, it suffices to use the\n+    // package feerate (total modified fees / total virtual size) to check this requirement.\n+    m_total_vsize = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](int64_t sum, auto& ws) { return sum + ws.m_vsize; });\n+    m_total_modified_fees = std::accumulate(workspaces.cbegin(), workspaces.cend(), 0,\n+        [](CAmount sum, auto& ws) { return sum + ws.m_modified_fees; });\n+    const CFeeRate package_feerate(m_total_modified_fees, m_total_vsize);\n+    TxValidationState placeholder_state;\n+    if (args.m_package_feerates &&\n+        !CheckFeeRate(m_total_vsize, m_total_modified_fees, placeholder_state)) {\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-fee-too-low\");\n+        return PackageMempoolAcceptResult(package_state, package_feerate, {});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803610953",
      "id" : 803610953,
      "in_reply_to_id" : 802799166,
      "line" : 1236,
      "node_id" : "PRRC_kwDOABII584v5iFJ",
      "original_commit_id" : "f90b6c52681c4a7968c2467641a383f1fc1991d2",
      "original_line" : 1236,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 81,
      "pull_request_review_id" : 878750274,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803610953/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T12:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803610953",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803611173"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803611173"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added explanation",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T12:13:18Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803611173",
      "id" : 803611173,
      "in_reply_to_id" : 802954740,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v5iIl",
      "original_commit_id" : "486cd4cfb1b66897cf3a414953b160faaeaafe0c",
      "original_line" : 63,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : null,
      "pull_request_review_id" : 878750597,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803611173/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T12:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803611173",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803611542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803611542"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree, added a sentence at the beginning to this effect.",
      "commit_id" : "9ff00abeef609a84693ab6baa6c9e09bd1c46bab",
      "created_at" : "2022-02-10T12:13:48Z",
      "diff_hunk" : "@@ -57,3 +57,40 @@ test accepts):\n \n    - Warning: Batched fee-bumping may be unsafe for some use cases. Users and application developers\n      should take caution if utilizing multi-parent packages.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees divided by the total virtual size of all transactions\n+in the package after deduplication.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+### Transactions Are Always Submitted Individually First\n+\n+Transactions within a package are always validated individually first, and package validation is\n+used for the transactions that failed.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping. That is, transaction A is a\n+\"legitimate\" fee-bump transaction B only if A is a descendant of B and has a higher feerate.\n+Package feerate, as defined above, does not consider the fees and relationships between all\n+transactions in the package. We want to prevent \"parents pay for children\" behavior; fees of\n+children should have no impact on the consideration of their parents, since they are not necessary\n+for the parents to be mined. More generally, if transaction B is not needed in order for transaction\n+A to be mined, B's fees cannot help A. In a child-with-parents package, simply excluding any parent\n+transactions that meet feerate requirements individually is sufficient to ensure this.\n+\n+*Rationale*: For backwards-compatibility of transaction relay policy, it's important that package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r803611542",
      "id" : 803611542,
      "in_reply_to_id" : 803207380,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v5iOW",
      "original_commit_id" : "7daf3d08b48669305574bc306d42a243ff1a25fb",
      "original_line" : 93,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : null,
      "pull_request_review_id" : 878751085,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803611542/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T12:13:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803611542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @ariard @mzumsande @LarryRuane @michaelfolkson! Addressed your review comments. Clarified the documentation, adjusted the fuzz/tx_pool, and added the test for negative prioritisation.",
      "created_at" : "2022-02-10T12:15:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1034853086",
      "id" : 1034853086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII5849rpre",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034853086/reactions"
      },
      "updated_at" : "2022-02-10T12:15:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034853086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2022-02-11T08:09:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1035964288",
      "id" : 1035964288,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII5849v4-A",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035964288/reactions"
      },
      "updated_at" : "2022-02-11T08:09:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035964288",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-02-12T23:19:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1037566659",
      "id" : 1037566659,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII58492ALD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1037566659/reactions"
      },
      "updated_at" : "2022-02-12T23:19:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1037566659",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8321330?v=4",
         "events_url" : "https://api.github.com/users/LarryRuane/events{/privacy}",
         "followers_url" : "https://api.github.com/users/LarryRuane/followers",
         "following_url" : "https://api.github.com/users/LarryRuane/following{/other_user}",
         "gists_url" : "https://api.github.com/users/LarryRuane/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/LarryRuane",
         "id" : 8321330,
         "login" : "LarryRuane",
         "node_id" : "MDQ6VXNlcjgzMjEzMzA=",
         "organizations_url" : "https://api.github.com/users/LarryRuane/orgs",
         "received_events_url" : "https://api.github.com/users/LarryRuane/received_events",
         "repos_url" : "https://api.github.com/users/LarryRuane/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/LarryRuane/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/LarryRuane"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-02-22T09:46:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1047609416",
      "id" : 1047609416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII584-cUBI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047609416/reactions"
      },
      "updated_at" : "2022-02-22T09:46:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047609416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased",
      "created_at" : "2022-02-22T09:55:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1047617839",
      "id" : 1047617839,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII584-cWEv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047617839/reactions"
      },
      "updated_at" : "2022-02-22T09:55:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047617839",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r812421159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812421159"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/backwards/backward/g ; s/compatibile/compatible/g (though ofc compatibility exists) ?",
      "commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "created_at" : "2022-02-22T22:41:36Z",
      "diff_hunk" : "@@ -72,3 +72,48 @@ test accepts):\n      a competing package or transaction with a mutated witness, even though the two\n      same-txid-different-witness transactions are conflicting and cannot replace each other, the\n      honest package should still be considered for acceptance.\n+\n+### Package Fees and Feerate\n+\n+*Package Feerate* is the total modified fees (base fees + any fee delta from\n+`prioritisetransaction`) divided by the total virtual size of all transactions in the package.\n+If any transactions in the package are already in the mempool, they are not submitted again\n+(\"deduplicated\"), and thus excluded from this calculation.\n+\n+To meet the two feerate requirements of a mempool, i.e., the pre-configured minimum relay feerate\n+(`minRelayTxFee`) and dynamic mempool minimum feerate, the total package feerate is used instead of\n+the individual feerate. The individual transactions are allowed to be below feerate requirements if\n+the package meets the feerate requirements. For example, the parent(s) in the package can have 0\n+fees but be paid for by the child.\n+\n+*Rationale*: This can be thought of as \"CPFP within a package,\" solving the issue of a parent not\n+meeting minimum fees on its own. This allows L2 applications to adjust their fees at broadcast time\n+instead of overshooting or risking getting stuck/pinned.\n+\n+*Rationale*: It would be incorrect to use the fees of transactions that are already in the mempool, as\n+we do not want a transaction's fees to be double-counted.\n+\n+Implementation Note: Transactions within a package are always validated individually first, and\n+package validation is used for the transactions that failed. Since package feerate is only\n+calculated using transactions that are not in the mempool, this implementation detail affects the\n+outcome of package validation.\n+\n+*Rationale*: Packages are intended for incentive-compatible fee-bumping: transaction B is a\n+\"legitimate\" fee-bump for transaction A only if B is a descendant of A and has a *higher* feerate\n+than A. We want to prevent \"parents pay for children\" behavior; fees of parents should not help\n+their children, since the parents can be mined without the child.  More generally, if transaction A\n+is not needed in order for transaction B to be mined, A's fees cannot help B. In a\n+child-with-parents package, simply excluding any parent transactions that meet feerate requirements\n+individually is sufficient to ensure this.\n+\n+*Rationale*: We must not allow a low-feerate child to prevent its parent from being accepted; fees\n+of children should not negatively impact their parents, since they are not necessary for the parents\n+to be mined. More generally, if transaction B is not needed in order for transaction A to be mined,\n+B's fees cannot harm A. In a child-with-parents package, simply validating parents individually\n+first is sufficient to ensure this.\n+\n+*Rationale*: As a principle, we want to avoid accidentally restricting policy in order to be\n+backwards-compatibile for users and applications that rely on p2p transaction relay. Concretely,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r812421159",
      "id" : 812421159,
      "line" : 116,
      "node_id" : "PRRC_kwDOABII584wbJAn",
      "original_commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "original_line" : 116,
      "original_position" : 45,
      "original_start_line" : null,
      "path" : "doc/policy/packages.md",
      "position" : 45,
      "pull_request_review_id" : 890450201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812421159/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-22T23:37:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812421159",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r812442247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812442247"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think the `TxValidationState` could be inspected here. If the failure cannot be assigned to the feerate check, the package validation could fail early ? Otherwise if you have a package of 25th component and the latest is faultive, we might validate twice the first 24 ones. Once here, the other one in `AcceptMultipleTransactions` and this could be avoid.\r\n\r\nAm I correct ?\r\n\r\nIf yes, I think it's always good to minimize our DoS surface. Though I'm unsure if the difference would be significant between the two implementations.",
      "commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "created_at" : "2022-02-22T23:21:35Z",
      "diff_hunk" : "@@ -1338,18 +1376,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             results.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n             // Transaction does not already exist in the mempool.\n-            txns_new.push_back(tx);\n+            // Try submitting the transaction on its own.\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r812442247",
      "id" : 812442247,
      "line" : 1380,
      "node_id" : "PRRC_kwDOABII584wbOKH",
      "original_commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "original_line" : 1380,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 135,
      "pull_request_review_id" : 890450201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812442247/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-22T23:37:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812442247",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r812449465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812449465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "IIUC `txns_new` is empty only if all submitted package transactions are accepted. Not because transactions are consensus-invalid, I'm unsure if the comment is accurate with the latest version of the code ?",
      "commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "created_at" : "2022-02-22T23:37:18Z",
      "diff_hunk" : "@@ -1338,18 +1376,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             results.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n             // Transaction does not already exist in the mempool.\n-            txns_new.push_back(tx);\n+            // Try submitting the transaction on its own.\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);\n+            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                // The transaction succeeded on its own and is now in the mempool. Don't include it\n+                // in package validation, because its fees should only be \"used\" once.\n+                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                results.emplace(wtxid, single_res);\n+            } else {\n+                txns_new.push_back(tx);\n+            }\n         }\n     }\n \n     // Nothing to do if the entire package has already been submitted.\n-    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Also quit now if any of the transactions was consensus-invalid because package validation",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r812449465",
      "id" : 812449465,
      "line" : 1393,
      "node_id" : "PRRC_kwDOABII584wbP65",
      "original_commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "original_line" : 1393,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 149,
      "pull_request_review_id" : 890450201,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812449465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-22T23:37:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/812449465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r813033268"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/813033268"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Correct - if the failure isn't feerate or missing inputs (i.e. the child, or the parents could depend on each other), then there's nothing package validation can do. I had this in the original version and took it out, but you're right that it's safer to have here. I've added it back in the latest push.",
      "commit_id" : "a70175076a5f85391a089607f6a19a58f173d4a1",
      "created_at" : "2022-02-23T15:45:00Z",
      "diff_hunk" : "@@ -1338,18 +1376,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             results.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n             // Transaction does not already exist in the mempool.\n-            txns_new.push_back(tx);\n+            // Try submitting the transaction on its own.\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r813033268",
      "id" : 813033268,
      "in_reply_to_id" : 812442247,
      "line" : 1381,
      "node_id" : "PRRC_kwDOABII584wdec0",
      "original_commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "original_line" : 1381,
      "original_position" : 135,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 136,
      "pull_request_review_id" : 891280687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/813033268/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-23T15:45:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/813033268",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r813033741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/813033741"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah sorry, leftover comment",
      "commit_id" : "a70175076a5f85391a089607f6a19a58f173d4a1",
      "created_at" : "2022-02-23T15:45:27Z",
      "diff_hunk" : "@@ -1338,18 +1376,33 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptPackage(const Package& package,\n             results.emplace(wtxid, MempoolAcceptResult::MempoolTxDifferentWitness(iter.value()->GetTx().GetWitnessHash()));\n         } else {\n             // Transaction does not already exist in the mempool.\n-            txns_new.push_back(tx);\n+            // Try submitting the transaction on its own.\n+            const auto single_res = AcceptSingleTransaction(tx, single_args);\n+            if (single_res.m_result_type == MempoolAcceptResult::ResultType::VALID) {\n+                // The transaction succeeded on its own and is now in the mempool. Don't include it\n+                // in package validation, because its fees should only be \"used\" once.\n+                assert(m_pool.exists(GenTxid::Wtxid(wtxid)));\n+                results.emplace(wtxid, single_res);\n+            } else {\n+                txns_new.push_back(tx);\n+            }\n         }\n     }\n \n     // Nothing to do if the entire package has already been submitted.\n-    if (txns_new.empty()) return PackageMempoolAcceptResult(package_state, std::move(results));\n+    // Also quit now if any of the transactions was consensus-invalid because package validation",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#discussion_r813033741",
      "id" : 813033741,
      "in_reply_to_id" : 812449465,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wdekN",
      "original_commit_id" : "9001b9ab2ef4dd7c185f8055fe90bbac66c295c5",
      "original_line" : 1393,
      "original_position" : 149,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 891281360,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24152",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/813033741/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-23T15:45:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/813033741",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Fixed the fuzzer issue, added a commit for quitting early if transactions fail for reasons other than policy or missing inputs.",
      "created_at" : "2022-02-23T15:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1048925167",
      "id" : 1048925167,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII584-hVPv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048925167/reactions"
      },
      "updated_at" : "2022-02-23T15:49:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1048925167",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "pinging @ariard @darosior @LarryRuane @mzumsande if you have time to take another look? :)",
      "created_at" : "2022-03-08T09:45:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24152#issuecomment-1061590410",
      "id" : 1061590410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24152",
      "node_id" : "IC_kwDOABII584_RpWK",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1061590410/reactions"
      },
      "updated_at" : "2022-03-08T09:45:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1061590410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
