[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Interesting idea. Can this be exposed as a testing only RPC? Or do real users need it?\r\n\r\nThere are privacy implications of using sweep as well -- if it's just to be used for e.g. taking an old potentially compromised wallet and migrating to a new one is it better to do a sweep that splits into a number of normal-ish looking txns?",
      "created_at" : "2022-01-20T22:42:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1017991367",
      "id" : 1017991367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848rVDH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017991367/reactions"
      },
      "updated_at" : "2022-01-20T22:42:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017991367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Cool, concept ACK\r\n\r\nTests look nice",
      "created_at" : "2022-01-20T22:43:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1017991697",
      "id" : 1017991697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848rVIR",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017991697/reactions"
      },
      "updated_at" : "2022-01-20T22:43:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017991697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Subtract fee from amount has historically been used for sweeping and there exist some issues on this repo that illustrate that there is usage.\r\n\r\nYou could achieve a \"normal\" looking transaction by specifying two recipients and setting an amount on one of them. There are examples to illustrate this usage in the RPC help text.",
      "created_at" : "2022-01-20T22:50:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1017995727",
      "id" : 1017995727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848rWHP",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017995727/reactions"
      },
      "updated_at" : "2022-01-20T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017995727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22751](https://github.com/bitcoin/bitcoin/pull/22751) (rpc/wallet: add simulaterawtransaction RPC by kallewoof)\n* [#21576](https://github.com/bitcoin/bitcoin/pull/21576) (rpc, gui: bumpfee signer support by Sjors)\n* [#21283](https://github.com/bitcoin/bitcoin/pull/21283) (Implement BIP 370 PSBTv2 by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2022-01-21T07:54:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1018265067",
      "id" : 1018265067,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848sX3r",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018265067/reactions"
      },
      "updated_at" : "2022-02-17T19:20:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018265067",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-01-21T14:16:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1018541892",
      "id" : 1018541892,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848tbdE",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018541892/reactions"
      },
      "updated_at" : "2022-01-21T14:16:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018541892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, I prefer this to #23534.",
      "created_at" : "2022-01-21T15:15:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1018599962",
      "id" : 1018599962,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848tpoa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018599962/reactions"
      },
      "updated_at" : "2022-01-21T15:15:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1018599962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-01-22T09:58:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1019147257",
      "id" : 1019147257,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5848vvP5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1019147257/reactions"
      },
      "updated_at" : "2022-01-22T09:58:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1019147257",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142312"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The fee_rate is defined twice:\r\n1. As an argument\r\n2. As an option object\r\n\r\nI presume this is an intentional design choice. But I can't seem to grasp the reason behind doing so.",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T13:23:07Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142312",
      "id" : 790142312,
      "line" : 1188,
      "node_id" : "PRRC_kwDOABII584vGJ1o",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 37,
      "original_start_line" : 1184,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 37,
      "pull_request_review_id" : 860205889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142312/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1184,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-22T13:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142638"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Two Questions:\r\n\r\n1. If I pass the `conf_target` argument and `estimate_mode` under the options object, this will cause an error. But should there be an error in such a scenario?\r\n\r\n2. `conf_target` and `estimate_mode` can be options objects, but they are not explicitly defined in the RPC help message under the options column as is done with the fee_rate object. Is it a deliberate decision?",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T13:26:53Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142638",
      "id" : 790142638,
      "line" : 1237,
      "node_id" : "PRRC_kwDOABII584vGJ6u",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1237,
      "original_position" : 86,
      "original_start_line" : 1235,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 86,
      "pull_request_review_id" : 860205889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142638/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1235,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-22T13:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142798"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142798"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit:\r\nI think it's better to replace `key-value` -> `key:value`, because that's how the pair is originally expressed in arguments.",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T13:29:02Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142798",
      "id" : 790142798,
      "line" : 1176,
      "node_id" : "PRRC_kwDOABII584vGJ9O",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1176,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 25,
      "pull_request_review_id" : 860205889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142798/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-22T13:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142893"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142893"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think you can add a `self.log.info(..)` statement here.",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T13:30:03Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142893",
      "id" : 790142893,
      "line" : 107,
      "node_id" : "PRRC_kwDOABII584vGJ-t",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 107,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "test/functional/wallet_sweep.py",
      "position" : 107,
      "pull_request_review_id" : 860205889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142893/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-22T13:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142893",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142968"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142968"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Here also, a `self.log.info(..)` statement can be added.",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T13:31:04Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790142968",
      "id" : 790142968,
      "line" : 120,
      "node_id" : "PRRC_kwDOABII584vGJ_4",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 120,
      "original_position" : 120,
      "original_start_line" : null,
      "path" : "test/functional/wallet_sweep.py",
      "position" : 120,
      "pull_request_review_id" : 860205889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142968/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-22T13:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790142968",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790143305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790143305"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Though it's not very difficult grasping the meaning of each section, I think it would be better if you added a comment:\r\n```\r\nsweep with sendmax enabled.\r\n```\r\nBefore line 127. And statement:\r\n```\r\nsweep with sendmax disabled.\r\n```\r\nBefore line 138.",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T13:34:45Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000300)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        sweep_tx_receipt = self.wallet.sweep(receivers=[self.return_addr_remainder], fee_rate=300, options={\"sendmax\": True})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790143305",
      "id" : 790143305,
      "line" : 127,
      "node_id" : "PRRC_kwDOABII584vGKFJ",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 127,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "test/functional/wallet_sweep.py",
      "position" : 127,
      "pull_request_review_id" : 860205889,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790143305/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-22T13:37:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790143305",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790144111"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790144111"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\r\n```\r\n\r\nnit: no need for newline",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-22T13:44:44Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790144111",
      "id" : 790144111,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vGKRv",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1166,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 860207447,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790144111/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T08:18:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790144111",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790189815"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790189815"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a place where this string is used? I could see only this declaration.",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-22T22:08:04Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);\n+                rawTx.vin.push_back(input);\n+                total_input_value += output.tx->tx->vout[output.i].nValue; // The horrors. Why doesn't this just have an alias on COutput?\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // First fill transaction with our data without signing,\n+            // so external signers are not asked sign more than once.\n+            bool complete;\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+            // Other than the name suggests, this actually will sign the transaction if possible\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : mtx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }\n+\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            if (psbt_opt_in || !complete || !add_to_wallet) {\n+                // Serialize the PSBT\n+                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                ssTx << psbtx;\n+                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            }\n+\n+            if (complete) {\n+                std::string err_string;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r790189815",
      "id" : 790189815,
      "line" : 1407,
      "node_id" : "PRRC_kwDOABII584vGVb3",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1407,
      "original_position" : 256,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 256,
      "pull_request_review_id" : 860245638,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790189815/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-22T22:08:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/790189815",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791134867"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791134867"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`replaceable` is not documented",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-24T20:42:16Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791134867",
      "id" : 791134867,
      "line" : 1284,
      "node_id" : "PRRC_kwDOABII584vJ8KT",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1284,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 133,
      "pull_request_review_id" : 861495232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791134867/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-24T20:43:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791134867",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791135520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791135520"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Needs to handle `rbf` and set the right sequence number\r\n\r\n```suggestion\r\n                CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\r\n```",
      "commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "created_at" : "2022-01-24T20:43:14Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791135520",
      "id" : 791135520,
      "line" : 1312,
      "node_id" : "PRRC_kwDOABII584vJ8Ug",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1312,
      "original_position" : 161,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 161,
      "pull_request_review_id" : 861495232,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791135520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-24T20:43:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791135520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The GUI will need access to this functionality too. It would be nice if the sweeping logic was refactored into a function in `src/wallet/spend.cpp` so that the GUI can access it.\r\n\r\nEdit: Actually that can wait until we figure out what the GUI is going to do for sweep.",
      "created_at" : "2022-01-24T22:28:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1020615011",
      "id" : 1020615011,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII58481Vlj",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1020615011/reactions"
      },
      "updated_at" : "2022-01-25T18:42:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1020615011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791932606"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791932606"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is consistent with how all other transaction creating RPCs permit setting the `fee_rate`, not offering both options may surprise some of the users.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:01:31Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791932606",
      "id" : 791932606,
      "in_reply_to_id" : 790142312,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vM-6-",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 37,
      "original_start_line" : 1184,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 862598415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791932606/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-25T17:01:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791932606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791952687"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791952687"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch, thanks. I'll make sure that the `conf_target` and `estimate_mode` appear in the documentation of the options.\r\n\r\nRegarding the error when `conf_target` and `estimate_mode` are passed in different ways, this is consistent with what `send` does.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:23:32Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791952687",
      "id" : 791952687,
      "in_reply_to_id" : 790142638,
      "line" : 1254,
      "node_id" : "PRRC_kwDOABII584vND0v",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1254,
      "original_position" : 86,
      "original_start_line" : 1235,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 178,
      "pull_request_review_id" : 862626593,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791952687/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1252,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-25T17:23:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791952687",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791954002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791954002"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "\"key-value\" is the prevalent way of describing this sort of datum.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:24:55Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791954002",
      "id" : 791954002,
      "in_reply_to_id" : 790142798,
      "line" : 1188,
      "node_id" : "PRRC_kwDOABII584vNEJS",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 112,
      "pull_request_review_id" : 862628344,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791954002/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:24:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791954002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791957317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957317"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:28:38Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791957317",
      "id" : 791957317,
      "in_reply_to_id" : 790142893,
      "line" : 107,
      "node_id" : "PRRC_kwDOABII584vNE9F",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 107,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "test/functional/wallet_sweep.py",
      "position" : 107,
      "pull_request_review_id" : 862632846,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957317/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:28:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957317",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791957352"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957352"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:28:40Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791957352",
      "id" : 791957352,
      "in_reply_to_id" : 790142968,
      "line" : 121,
      "node_id" : "PRRC_kwDOABII584vNE9o",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 121,
      "original_position" : 120,
      "original_start_line" : null,
      "path" : "test/functional/wallet_sweep.py",
      "position" : 121,
      "pull_request_review_id" : 862632892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957352/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:28:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791957352",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791958764"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791958764"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I've added comments as suggested.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:30:14Z",
      "diff_hunk" : "@@ -0,0 +1,172 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2022 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the sweep RPC command.\"\"\"\n+\n+from decimal import Decimal, getcontext\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+)\n+\n+class WalletSweepTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        getcontext().prec=10\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def assert_tx_has_output(self, tx, addr, value=None ):\n+        for output in tx[\"decoded\"][\"vout\"]:\n+            if addr == output[\"scriptPubKey\"][\"address\"] and value is None or value == output[\"value\"]:\n+                return\n+        raise AssertionError(\"Output to {} not present or wrong amount\".format(addr))\n+\n+    def assert_balance_swept_completely(self, tx, balance):\n+        output_sum = sum([o[\"value\"] for o in tx[\"decoded\"][\"vout\"]])\n+        assert_equal(output_sum, balance + tx[\"fee\"])\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+    def generate_initial_utxos(self, amounts):\n+        for a in amounts:\n+            self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), a)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+    def clean_up(self):\n+        if 0 < self.wallet.getbalances()[\"mine\"][\"trusted\"]:\n+            self.wallet.sweep([self.return_addr_remainder])\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def sweep_two_utxos(self):\n+        self.log.info(\"Testing basic sweep case without specific amounts\")\n+        self.generate_initial_utxos([10, 11])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 1)\n+        output = tx_from_wallet[\"decoded\"][\"vout\"][0]\n+        assert_equal(output[\"value\"], wallet_balance_before_sweep + tx_from_wallet[\"fee\"]) # fee is negative\n+        assert_equal(output[\"scriptPubKey\"][\"address\"], self.return_addr_remainder)\n+\n+    def sweep_to_two_outputs(self):\n+        self.log.info(\"Testing sweep where one output has specified amount\")\n+        self.generate_initial_utxos([8, 13])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        sweep_tx_receipt = self.wallet.sweep([{self.return_addr_with_amount: 5}, self.return_addr_remainder])\n+        self.generate(self.nodes[0], 1)\n+        assert_equal(0, self.wallet.getbalances()[\"mine\"][\"trusted\"]) # wallet is empty\n+\n+        assert_equal(sweep_tx_receipt[\"complete\"], True)\n+        tx_from_wallet = self.wallet.gettransaction(txid = sweep_tx_receipt[\"txid\"], verbose = True)\n+\n+        assert_equal(len(tx_from_wallet[\"decoded\"][\"vout\"]), 2)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_with_amount, 5)\n+        self.assert_tx_has_output(tx_from_wallet, self.return_addr_remainder)\n+\n+        self.assert_balance_swept_completely(tx_from_wallet, wallet_balance_before_sweep)\n+\n+    def sweep_invalid_receiver_addresses(self):\n+        self.log.info(\"Testing sweep only with specified amount\")\n+        self.generate_initial_utxos([12, 9])\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-8, \"Must provide at least one address without a specified amount\" , self.wallet.sweep, [{self.return_addr_with_amount: 5}])\n+\n+        self.clean_up()\n+\n+    def sweep_invalid_amounts(self):\n+        self.log.info(\"Try sweeping more than balance\")\n+        self.generate_initial_utxos([7, 14])\n+        wallet_balance_before_sweep = self.wallet.getbalances()[\"mine\"][\"trusted\"]\n+\n+        expected_tx = self.wallet.sweep(receivers=[{self.return_addr_with_amount: 5}, self.return_addr_remainder], options={\"add_to_wallet\": False})\n+        tx = self.wallet.decoderawtransaction(expected_tx['hex'])\n+        fee = 21 - sum([o[\"value\"] for o in tx[\"vout\"]])\n+\n+        assert_raises_rpc_error(-8, \"Assigned more value to outputs than available funds.\" , self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep + 1}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Insufficient funds for fees after creating specified outputs.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-8, \"Specified output amount to {} is below dust threshold\".format(self.return_addr_with_amount), self.wallet.sweep, [{self.return_addr_with_amount: 0.00000001}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee}, self.return_addr_remainder])\n+        assert_raises_rpc_error(-6, \"Dynamically assigned remainder results in dust output.\", self.wallet.sweep, [{self.return_addr_with_amount: wallet_balance_before_sweep - fee - Decimal(0.00000010)}, self.return_addr_remainder])\n+\n+        self.clean_up()\n+\n+    def sweep_negative_effective_value(self):\n+        self.nodes[0].createwallet(\"dustwallet\")\n+        dust_wallet = self.nodes[0].get_wallet_rpc(\"dustwallet\")\n+\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(dust_wallet.getnewaddress(), 0.00000300)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(dust_wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        assert_raises_rpc_error(-6, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\", dust_wallet.sweep, receivers=[self.return_addr_remainder], fee_rate=300)\n+\n+        dust_wallet.unloadwallet()\n+\n+    def sweep_with_sendmax(self):\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000400)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 0.00000300)\n+        self.def_wallet.sendtoaddress(self.wallet.getnewaddress(), 1)\n+        self.generate(self.nodes[0], 1)\n+        assert_greater_than(self.wallet.getbalances()[\"mine\"][\"trusted\"], 0)\n+\n+        sweep_tx_receipt = self.wallet.sweep(receivers=[self.return_addr_remainder], fee_rate=300, options={\"sendmax\": True})",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791958764",
      "id" : 791958764,
      "in_reply_to_id" : 790143305,
      "line" : 130,
      "node_id" : "PRRC_kwDOABII584vNFTs",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 130,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "test/functional/wallet_sweep.py",
      "position" : 130,
      "pull_request_review_id" : 862634775,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791958764/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:30:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791958764",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977558"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks. I also removed it from send where it also wasn't used.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:52:15Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);\n+                rawTx.vin.push_back(input);\n+                total_input_value += output.tx->tx->vout[output.i].nValue; // The horrors. Why doesn't this just have an alias on COutput?\n+            }\n+\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n+                } else {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            bool add_to_wallet = true;\n+            if (options.exists(\"add_to_wallet\")) {\n+                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            }\n+\n+            // Make a blank psbt\n+            PartiallySignedTransaction psbtx(rawTx);\n+\n+            // First fill transaction with our data without signing,\n+            // so external signers are not asked sign more than once.\n+            bool complete;\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+            // Other than the name suggests, this actually will sign the transaction if possible\n+            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+            if (err != TransactionError::OK) {\n+                throw JSONRPCTransactionError(err);\n+            }\n+\n+            CMutableTransaction mtx;\n+            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : mtx.vin) {\n+                    pwallet->LockCoin(txin.prevout);\n+                }\n+            }\n+\n+\n+            UniValue result(UniValue::VOBJ);\n+\n+            if (psbt_opt_in || !complete || !add_to_wallet) {\n+                // Serialize the PSBT\n+                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+                ssTx << psbtx;\n+                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            }\n+\n+            if (complete) {\n+                std::string err_string;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977558",
      "id" : 791977558,
      "in_reply_to_id" : 790189815,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vNJ5W",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1407,
      "original_position" : 256,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 862660702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977558/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977558",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977622"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed, thanks.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:52:20Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977622",
      "id" : 791977622,
      "in_reply_to_id" : 791134867,
      "line" : 1301,
      "node_id" : "PRRC_kwDOABII584vNJ6W",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1301,
      "original_position" : 133,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 225,
      "pull_request_review_id" : 862660788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977622/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:52:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977622",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977673"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Added, thanks.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:52:24Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"conf_target\", request.params[1]);\n+                options.pushKV(\"estimate_mode\", request.params[2]);\n+            }\n+            if (options.exists(\"fee_rate\")) {\n+                if (!request.params[3].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+                }\n+            } else {\n+                options.pushKV(\"fee_rate\", request.params[3]);\n+            }\n+\n+            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n+            }\n+\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n+\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n+            }\n+\n+            bool rbf = pwallet->m_signal_rbf;\n+            if (options.exists(\"replaceable\")) {\n+                rbf = options[\"replaceable\"].get_bool();\n+            }\n+\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n+\n+            CMutableTransaction rawTx = ConstructTransaction(NullUniValue, receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+            AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+\n+            const bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            CAmount total_input_value(0);\n+            for (const COutput& output : all_the_utxos) {\n+                CHECK_NONFATAL(output.nInputBytes > 0);\n+                if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                    continue;\n+                }\n+                CTxIn input(output.tx->GetHash(), output.i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977673",
      "id" : 791977673,
      "in_reply_to_id" : 791135520,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vNJ7J",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1312,
      "original_position" : 161,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 862660865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977673/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T17:52:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977758"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Removed the newline. (I was copying the style of `send` which has one.)",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-25T17:52:30Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r791977758",
      "id" : 791977758,
      "in_reply_to_id" : 790144111,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vNJ8e",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1166,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 862660968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977758/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-25T18:12:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/791977758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794424600"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794424600"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> \"key-value\" is the prevalent way of describing this sort of datum.\r\n\r\nI had checked with various RPC commands, and I think it is correct. ",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-28T11:29:15Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794424600",
      "id" : 794424600,
      "in_reply_to_id" : 790142798,
      "line" : 1188,
      "node_id" : "PRRC_kwDOABII584vWfUY",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 112,
      "pull_request_review_id" : 866027762,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794424600/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-28T11:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794424600",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794431354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794431354"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> This is consistent with how all other transaction creating RPCs permit setting the `fee_rate`.\r\n\r\nI checked with other RPCs where `\"fee_rate\", RPCArg::Type::AMOUNT,...` is used. It seems like the situation you are describing is true only for the `send` RPC (see https://github.com/bitcoin/bitcoin/blob/master/src/wallet/rpc/spend.cpp#L1050-L1062) and isn't a norm per se.\r\n\r\nOther RPCs that uses fee_rate but doesn't define it twice are:\r\n- sendtoaddress\r\n- sendmany\r\n- fundrawtransaction\r\n- bumpfee_helper, and,\r\n- walletcreatefundedpsbt\r\n\r\n",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-28T11:39:58Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794431354",
      "id" : 794431354,
      "in_reply_to_id" : 790142312,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584vWg96",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 37,
      "original_start_line" : 1184,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 866037257,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794431354/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-28T11:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794431354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794441216"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794441216"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Regarding the error when conf_target and estimate_mode are passed in different ways, this is consistent with what send does.\r\n\r\nI checked the code, and it seems like you are right. I can also see that the `sweep` RPC is modeled after the `send` RPC. However, I am not sure if it is an optimal behavior. I can't understand why the user is compelled to input both of these options as either options or as arguments. Why not allow them to pass the first `conf_target` in one way and `estimate_mode` in another. Similar to what is done with `fee_rate`.",
      "commit_id" : "87e497f3a82307e61b92214e7298af0aa014ec73",
      "created_at" : "2022-01-28T11:55:30Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind.\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweep\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweep\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r794441216",
      "id" : 794441216,
      "in_reply_to_id" : 790142638,
      "line" : 1254,
      "node_id" : "PRRC_kwDOABII584vWjYA",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1254,
      "original_position" : 86,
      "original_start_line" : 1235,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 178,
      "pull_request_review_id" : 866051255,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794441216/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 1252,
      "start_side" : "RIGHT",
      "updated_at" : "2022-01-28T11:55:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794441216",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/85434418?v=4",
         "events_url" : "https://api.github.com/users/shaavan/events{/privacy}",
         "followers_url" : "https://api.github.com/users/shaavan/followers",
         "following_url" : "https://api.github.com/users/shaavan/following{/other_user}",
         "gists_url" : "https://api.github.com/users/shaavan/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/shaavan",
         "id" : 85434418,
         "login" : "shaavan",
         "node_id" : "MDQ6VXNlcjg1NDM0NDE4",
         "organizations_url" : "https://api.github.com/users/shaavan/orgs",
         "received_events_url" : "https://api.github.com/users/shaavan/received_events",
         "repos_url" : "https://api.github.com/users/shaavan/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/shaavan/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/shaavan/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/shaavan"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I have no objection to a dedicated `sweep` RPC call, but I don't agree with the premise that subtracting fee from output is only useful for sweeping a full wallet. See https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024145620 ",
      "created_at" : "2022-01-28T12:01:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024148767",
      "id" : 1024148767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849C0Uf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024148767/reactions"
      },
      "updated_at" : "2022-01-28T12:01:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024148767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I have no objection to a dedicated `sweep` RPC call, but I don't agree with the premise that subtracting fee from output is only useful for sweeping a full wallet. See [#24142 (comment)](https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024145620)\r\n\r\nEither approach seems fine to me, but I do think it is potentially more confusing to have two completely different RPCs for sending funds: \"send\" vs\" sweep\" than to have one sending option that means \"Send approximate amount. I don't care about exact amount of BTC received, and am happy if it's a little less or a little more to economize on fees and avoid change.\" Obviously you shouldn't use this option if you are trying to send an exact amount to someone, but it seems like it would be generally useful whenever you are sending money to one of your own wallets, or exchange accounts, or paying for any service that can be incrementally topped up.\r\n\r\nI know one of achow101's recent PR was adding more complexity to subtract from output implementation to try to do something to help sweeping, but I don't think the original (current?) semantics inherently had to add much complexity. It is true the code has been complex at different points but I think that was mostly a result of code shittiness and duplication, which have generally improved recently.",
      "created_at" : "2022-01-28T15:42:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024341246",
      "id" : 1024341246,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849DjT-",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024341246/reactions"
      },
      "updated_at" : "2022-01-28T15:42:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024341246",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Indeed I suspect that a `sweep` RPC will be useless if we decide to keep 'subtracting fee from output' functionality. In that case adding a sweep feature to the `send` RPC would make more sense. C-lightling has a special case amount `all` for that purpose.",
      "created_at" : "2022-01-28T16:19:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024373727",
      "id" : 1024373727,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849DrPf",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024373727/reactions"
      },
      "updated_at" : "2022-01-28T16:20:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024373727",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nI have no objections to this RPC either, but something like `bitcoin-cli -named sendtoaddress address=\"....\" sweep=true` might be simpler for users instead of two commands to send funds.",
      "created_at" : "2022-01-28T16:59:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024420503",
      "id" : 1024420503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849D2qX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024420503/reactions"
      },
      "updated_at" : "2022-01-28T16:59:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024420503",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/94266259?v=4",
         "events_url" : "https://api.github.com/users/w0xlt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/w0xlt/followers",
         "following_url" : "https://api.github.com/users/w0xlt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/w0xlt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/w0xlt",
         "id" : 94266259,
         "login" : "w0xlt",
         "node_id" : "U_kgDOBZ5jkw",
         "organizations_url" : "https://api.github.com/users/w0xlt/orgs",
         "received_events_url" : "https://api.github.com/users/w0xlt/received_events",
         "repos_url" : "https://api.github.com/users/w0xlt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/w0xlt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/w0xlt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/w0xlt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> I have no objection to a dedicated `sweep` RPC call, but I don't agree with the premise that subtracting fee from output is only useful for sweeping a full wallet. See [#24142 (comment)](https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024145620)\r\n\r\nThat use case is what I call generalized sweep. Sweep can be viewed as spending all UTXOs in a given list without needing to specify the output amount. Whether that list is all the UTXOs in the wallet or a specific list of some UTXOs doesn't matter. So sweep can be extended to cover your use case by allowing for inputs to be specified.\r\n\r\n>  but it seems like it would be generally useful whenever you are sending money to one of your own wallets, or exchange accounts, or paying for any service that can be incrementally topped up.\r\n\r\nCan you describe why SFFO would be used in those cases? @Xekyo and I have had discussions with many people about SFFO use cases and even though the concept of \"send no more than X\" usually comes up, no one can express why that behavior would ever actually be useful. Just looking through many of the issues about SFFO show that its primary use case is to sweep an entire wallet, and sometimes spend just a preset list of coins without having to calculate the fee manually. Both of these cases can be covered by a sweep function without needing to maintain SFFO in coin selection logic.\r\n\r\n> I know one of achow101's recent PR was adding more complexity to subtract from output implementation to try to do something to help sweeping, but I don't think the original (current?) semantics inherently had to add much complexity. It is true the code has been complex at different points but I think that was mostly a result of code shittiness and duplication, which have generally improved recently.\r\n\r\nI find that SFFO makes it much harder to reason about our coin selection because we now use effective values for selection, but with SFFO, we don't actually want the effective values.",
      "created_at" : "2022-01-28T17:09:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024429070",
      "id" : 1024429070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849D4wO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024429070/reactions"
      },
      "updated_at" : "2022-01-28T17:09:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024429070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Another SFFO use case is when your recipient is legitimately taking on the cost of business. For example, it can be used when sending a loan.",
      "created_at" : "2022-01-29T08:32:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024866310",
      "id" : 1024866310,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849FjgG",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024866310/reactions"
      },
      "updated_at" : "2022-01-29T08:32:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024866310",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > but it seems like it would be generally useful whenever you are sending money to one of your own wallets, or exchange accounts, or paying for any service that can be incrementally topped up.\r\n> \r\n> Can you describe why SFFO would be used in those cases? @Xekyo and I have had discussions with many people about SFFO use cases and even though the concept of \"send no more than X\" usually comes up, no one can express why that behavior would ever actually be useful.\r\n\r\nI think, mostly, it is useful *conceptually* as a way to simplify creating transactions. It's a way of expressing the *intention* behind a transaction, and letting the implementation take care of the details, instead of being having to think about what the transaction will look like, and choose between sweep and send APIs to create it.\r\n\r\nAlso the concept here is not exactly \"spend no more than X.\" If there are two amounts associated with transaction: X is amount spent by sender, Y is amount received by receiver, then option lets you choose between fixing X and letting Y vary, or fixing Y and letting X vary. If you have 12 BTC, and want to budget exactly 1 BTC per month to spend on a service, the option let you do that. And in general, it lets you just say what your intention is instead of having to think at a lower level.\r\n\r\nAdditionally, there is my main practical concern:\r\n\r\n- This is duplicating existing CreateTransaction(Internal) logic instead of just calling CreateTransaction with the right options. The claim is that this will be a code simplification, but the followup PR #24142 is +588/â148 lines. And this is while REMOVING features which I think we agree are useful: providing GUI support for sweeping, and being able to select coins to sweep. The new code and tests are going to grow and become even more complex after adding these features. \r\n\r\nMy medium level practical concern:\r\n\r\n- Deprecating subtract from output in #24142 presumably is going to break existing workflows, and there doesn't seem to be a good release notes or FAQ style item saying what that the problem is with subtract from output, why its removal is justified, and how to transition to the sweep API.\r\n\r\nAnd my mini practical concern:\r\n\r\n- This sweep API might be less safe than send APIs because it doesn't force you to specify amount you are trying to send. It's easier to fat-finger by accidentally sweeping the wrong wallet (or when manual coin selection is added) sweeping the wrong coin and spending an amount larger than you intended. Maybe this is not a very big concern. If it is a concern, it could also be addresed by adding a mandatory amount argument requiring you to specify total amount of the sweep or an override value like `\"unchecked\"` or `\"yolo\"`",
      "created_at" : "2022-01-29T14:16:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024920250",
      "id" : 1024920250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849Fwq6",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024920250/reactions"
      },
      "updated_at" : "2022-01-29T14:18:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024920250",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I find that SFFO makes it much harder to reason about our coin selection because we now use effective values for selection, but with SFFO, we don't actually want the effective values.\r\n\r\nCould you explain this more? There is a [`m_subtract_fee_outputs ? m_value : effective_value`](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/coinselection.cpp#L355-L358) line but that hardly seems terrible\r\n\r\nEDIT: I see there is a counterpart to this in `CreateTransactionInternal` where the option is used to [set](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L733-L735) [tx_noinput_size](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L741-L743). This seems pretty straightforward as well. Is this the extent of the problem or is there more under the surface?",
      "created_at" : "2022-01-29T14:46:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024925012",
      "id" : 1024925012,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849Fx1U",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024925012/reactions"
      },
      "updated_at" : "2022-01-29T14:58:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024925012",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This discussion is getting a little mixed between here and https://github.com/bitcoin/bitcoin/pull/24142#issuecomment-1024417067. I don't need _automatic_ coin selection for the use case I describe above. I do still need the feature to work for _manual_ coin selection. Having to use a separate \"sweep\" RPC for that seems a bit odd, especially when it needs to support most of the `send` kitchen sink, like using hardware wallets, specifying the fee rate, RBF, etc. And it still has to work in the GUI send screen, which touches much of the same CWallet code.",
      "created_at" : "2022-01-29T15:00:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1024927423",
      "id" : 1024927423,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849Fya_",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024927423/reactions"
      },
      "updated_at" : "2022-01-29T15:00:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1024927423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> > I find that SFFO makes it much harder to reason about our coin selection because we now use effective values for selection, but with SFFO, we don't actually want the effective values.\r\n> \r\n> Could you explain this more? There is a [`m_subtract_fee_outputs ? m_value : effective_value`](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/coinselection.cpp#L355-L358) line but that hardly seems terrible\r\n> \r\n> EDIT: I see there is a counterpart to this in `CreateTransactionInternal` where the option is used to [set](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L733-L735) [tx_noinput_size](https://github.com/bitcoin/bitcoin/blob/5b4b8f76f3ae11064d4aa3ac157558e364751fd2/src/wallet/spend.cpp#L741-L743). This seems pretty straightforward as well. Is this the extent of the problem or is there more under the surface?\r\n\r\nIt makes the reasoning harder because the new coin selection code is almost entirely predicated on using effective values, particularly positive effective values. For BnB and SRD, we assume there are no negative ev inputs. For Knapsack and SRD, we assume we will make change and require a minimum change value. SFFO violates these assumptions, and that leads to bugs like #23026 (which happens to be a sweep use case).\r\n\r\n> and choose between sweep and send APIs to create it.\r\n> ...\r\n> This sweep API might be less safe than send APIs because it doesn't force you to specify amount you are trying to send. It's easier to fat-finger by accidentally sweeping the wrong wallet (or when manual coin selection is added) sweeping the wrong coin and spending an amount larger than you intended. Maybe this is not a very big concern. If it is a concern, it could also be addresed by adding a mandatory amount argument requiring you to specify total amount of the sweep or an override value like `\"unchecked\"` or `\"yolo\"`\r\n\r\nThere was some discussion about combining this with send where there would be some option for sweeping and some interpretation of magic values, but we felt that would end up being too clunky to use correctly so it was abandoned.\r\n\r\n> This is duplicating existing CreateTransaction(Internal) logic instead of just calling CreateTransaction with the right options. The claim is that this will be a code simplification, but the followup PR [Deprecate SubtractFeeFromOutputs #24142](https://github.com/bitcoin/bitcoin/pull/24142) is +588/â148 lines. \r\n\r\nThe followup only has more additions because it is adding `-deprecatedrpc=sffo`. It does not remove the behavior yet.\r\n\r\n> And this is while REMOVING features which I think we agree are useful: providing GUI support for sweeping, and being able to select coins to sweep.\r\n\r\nThere will be GUI support in the future.\r\n\r\n> The new code and tests are going to grow and become even more complex after adding these features.\r\n\r\nThis new code is unlikely to be expanded further given it's limited scope. However I agree there could be some refactors for deduplication between sweep and CreateTransactionInternal.\r\n\r\n> Deprecating subtract from output in [Deprecate SubtractFeeFromOutputs #24142](https://github.com/bitcoin/bitcoin/pull/24142) presumably is going to break existing workflows, and there doesn't seem to be a good release notes or FAQ style item saying what that the problem is with subtract from output, why its removal is justified, and how to transition to the sweep API.\r\n\r\nThe same could be said about every other time `-deprecatedrpc` has been used. Needing docs is not a reason to block a deprecation.\r\n",
      "created_at" : "2022-02-01T21:02:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1027283605",
      "id" : 1027283605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849OxqV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1027283605/reactions"
      },
      "updated_at" : "2022-02-01T21:02:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1027283605",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> I think, mostly, it is useful _conceptually_ as a way to simplify creating transactions. It's a way of expressing the _intention_ behind a transaction, and letting the implementation take care of the details, instead of being having to think about what the transaction will look like, and choose between sweep and send APIs to create it.\r\n\r\nAfter talking to some people in the last week and reading all comments on #24142 and here, I think I have a better understanding of how to distinguish the two domains of use cases between sweep and SFFO:\r\n\r\n- SFFO: Send to a recipient using a given budget deducting fees\r\n- Sweep: Send sum of inputs to recipient(s) deducting fees\r\n\r\nWe realize now, that SFFO is used more widely than we anticipated, and that the non-sweeping case is not covered by sweep. The problems and bugs occur when people use SFFO to specify the full wallet balance in order to arrive at a sweep functionality. Therefore, I do think that sweep is still useful, especially if we allow specifying an input list smaller than everything. We will work on that and GUI support.\r\n\r\n> * This is duplicating existing CreateTransaction(Internal) logic instead of just calling CreateTransaction with the right options. The claim is that this will be a code simplification, but the followup PR #24142 is +588/â148 lines. And this is while REMOVING features which I think we agree are useful: providing GUI support for sweeping, and being able to select coins to sweep. The new code and tests are going to grow and become even more complex after adding these features.\r\n\r\nWe looked into this, but found that we need to know the feerate to determine which inputs are eligible, need the inputs to be able to determine the receiver amounts, and when we have all the parameters to call `CreateTransaction(â¦)`, we already have used all of the duplicated code.",
      "created_at" : "2022-02-03T22:30:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1029462114",
      "id" : 1029462114,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849XFhi",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029462114/reactions"
      },
      "updated_at" : "2022-02-03T22:32:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029462114",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added the `inputs` option to sweep in 2664d3a.",
      "created_at" : "2022-02-04T00:42:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1029534293",
      "id" : 1029534293,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849XXJV",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029534293/reactions"
      },
      "updated_at" : "2022-02-04T00:42:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029534293",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm still a bit worried about the amount of duplicated code here, also in the RPC parameter parsing.\r\n\r\nCan you add some test coverage for external signer use? The easiest way is probably to tweak `wallet_signer.py` such that the `send` example results in exactly the same coin selection as the new `sweep` example. In that case you can just duplicate the `hww.send` line and compare `res[hex]` between the two calls.\r\n\r\nIf you end up with two separate transactions because the RPC calls can't produce identical results, then it's useful to know the mechanism that test uses: it has one wallet with private keys and a watch-only clone. A PSBT is generated on the watch-only wallet. The private key enabled wallet is then used to sign it, with the result stored in the file system. Once the test node calls `mocks/signer.py` it reads the stored signed PSBT and returns it, thus faking a hardware wallet that actually signed something. This can of course be done for two separate PSBT's with some refactoring, but having an identical PSBT to sign is easier.",
      "created_at" : "2022-02-04T09:30:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1029800249",
      "id" : 1029800249,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849YYE5",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029800249/reactions"
      },
      "updated_at" : "2022-02-04T09:30:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1029800249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed the proposed RPC `sweepwallet` to clarify that we are operating on the wallet's UTXO pool rather than a wallet-foreign private key as \"sweep\" may imply.\r\n\r\nRewrote the commit description.\r\n\r\n@Sjors: I will look into your feedback to reduce the code duplication and test external signer use.",
      "created_at" : "2022-02-04T21:54:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1030379808",
      "id" : 1030379808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849alkg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1030379808/reactions"
      },
      "updated_at" : "2022-02-04T21:54:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1030379808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Deduplicated the parameter processing, still working on the test in `wallet_signer.py`.",
      "created_at" : "2022-02-08T21:18:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1033071628",
      "id" : 1033071628,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849k2wM",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033071628/reactions"
      },
      "updated_at" : "2022-02-08T21:18:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033071628",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Now with `wallet_signer.py` test.",
      "created_at" : "2022-02-08T21:43:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1033090522",
      "id" : 1033090522,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849k7Xa",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033090522/reactions"
      },
      "updated_at" : "2022-02-08T21:43:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033090522",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Now with Release Notes.",
      "created_at" : "2022-02-08T22:31:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1033128992",
      "id" : 1033128992,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849lEwg",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033128992/reactions"
      },
      "updated_at" : "2022-02-08T22:31:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033128992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803092722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803092722"
         }
      },
      "author_association" : "MEMBER",
      "body" : "92b248498 nit, clang-format\r\n```diff\r\n-static void PreventOutdatedOptions(const UniValue& options) {\r\n+static void PreventOutdatedOptions(const UniValue& options)\r\n+{\r\n```\r\n74e3135 idem for `ParseFeeEstimationInstructions()`\r\n7ba3faa and for `FinishTransaction()`\r\n",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T21:13:46Z",
      "diff_hunk" : "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {\n+    bool add_to_wallet = options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true;\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803092722",
      "id" : 803092722,
      "line" : 119,
      "node_id" : "PRRC_kwDOABII584v3jjy",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 119,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 82,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803092722/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803092722",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803096066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803096066"
         }
      },
      "author_association" : "MEMBER",
      "body" : "74e3135ba0721f62c2bc0cbb9bcab88a34003d67 if you retouch, we've been converging on this named arg format for clang-tidy verification\r\n```suggestion\r\n            ParseFeeEstimationInstructions(/*conf_target=*/request.params[1], /*estimate_mode=*/request.params[2], /*fee_rate=*/request.params[3], options);\r\n```\r\nb2b1d6b idem, line 1265, line 1290, etc.",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T21:18:31Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803096066",
      "id" : 803096066,
      "line" : 1162,
      "node_id" : "PRRC_kwDOABII584v3kYC",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1162,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 210,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803096066/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803096066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803113395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803113395"
         }
      },
      "author_association" : "MEMBER",
      "body" : "7ba3faa4 minor style suggestions (initiialize localvar next to first use, const, braced initialization) if you retouch and are so inclined, these are already much improved\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\n static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {\r\n-    bool add_to_wallet = options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true;\r\n-\r\n     // Make a blank psbt\r\n     PartiallySignedTransaction psbtx(rawTx);\r\n \r\n@@ -94,7 +92,9 @@ static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const\r\n \r\n     UniValue result(UniValue::VOBJ);\r\n \r\n-    const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\r\n+    const bool psbt_opt_in{options.exists(\"psbt\") && options[\"psbt\"].get_bool()};\r\n+    const bool add_to_wallet{options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true};\r\n     if (psbt_opt_in || !complete || !add_to_wallet) {\r\n         // Serialize the PSBT\r\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\r\n@@ -1231,7 +1231,7 @@ RPCHelpMan send()\r\n \r\n             CAmount fee;\r\n             int change_position;\r\n-            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\r\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\r\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\r\n             CCoinControl coin_control;\r\n```\r\n</p></details>\r\n",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T21:43:59Z",
      "diff_hunk" : "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803113395",
      "id" : 803113395,
      "line" : 76,
      "node_id" : "PRRC_kwDOABII584v3omz",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 76,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 39,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803113395/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803113395",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803134312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134312"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b2b1d6b\r\n\r\n- I think you can add your release note directly to the file `doc/release-notes.md` in this section:\r\n\r\n```md\r\nNew RPCs\r\n--------\r\n```\r\n\r\n- s/without unspecified/without a specified/\r\n- add `(#24118)` to the end\r\n",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-09T22:15:22Z",
      "diff_hunk" : "@@ -0,0 +1,24 @@\n+Add `sweepwallet` RPC",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803134312",
      "id" : 803134312,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v3tto",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "doc/release-notes-24118.md",
      "position" : null,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134312/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T10:35:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803134829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134829"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b2b1d6b nit, sort",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T22:16:10Z",
      "diff_hunk" : "@@ -7,11 +7,13 @@\n #include <policy/policy.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/util.h>\n+#include <util/rbf.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803134829",
      "id" : 803134829,
      "line" : 10,
      "node_id" : "PRRC_kwDOABII584v3t1t",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 10,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 4,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134829/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803134829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803137411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803137411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b2b1d6b use a semi-colon here (\";\") or a new sentence\r\n```suggestion\r\n            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The sweep destinations. Each address may only appear once.\\n\"\r\n```",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T22:20:03Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803137411",
      "id" : 803137411,
      "line" : 1188,
      "node_id" : "PRRC_kwDOABII584v3ueD",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1188,
      "original_position" : 244,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 244,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803137411/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803137411",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803138716"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803138716"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b2b1d6b per the developer notes, snake case is used for new RPC arguments: `send_max`?  ",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T22:22:08Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803138716",
      "id" : 803138716,
      "line" : 1222,
      "node_id" : "PRRC_kwDOABII584v3uyc",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1222,
      "original_position" : 278,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 278,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803138716/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803138716",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803150069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803150069"
         }
      },
      "author_association" : "MEMBER",
      "body" : "b2b1d6b minor suggestions if you retouch and are so inclined\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\n@@ -1353,17 +1353,11 @@ RPCHelpMan sweepwallet()\r\n             }\r\n \r\n             CCoinControl coin_control;\r\n-\r\n-            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\r\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /*override_min_fee=*/false);\r\n \r\n             coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\r\n \r\n-            bool lock_unspents = false;\r\n-            if (options.exists(\"lock_unspents\")) {\r\n-                lock_unspents = options[\"lock_unspents\"].get_bool();\r\n-            }\r\n-\r\n-            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\r\n+            const bool rbf{options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf};\r\n \r\n             FeeCalculation fee_calc_out;\r\n             CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\r\n@@ -1422,7 +1416,7 @@ RPCHelpMan sweepwallet()\r\n                 }\r\n             }\r\n \r\n-            CAmount output_amounts_claimed(0);\r\n+            CAmount output_amounts_claimed{0};\r\n             for (CTxOut out : rawTx.vout) {\r\n                 output_amounts_claimed += out.nValue;\r\n             }\r\n@@ -1431,12 +1425,12 @@ RPCHelpMan sweepwallet()\r\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\r\n             }\r\n \r\n-            CAmount remainder = effective_value - output_amounts_claimed;\r\n+            const CAmount remainder{effective_value - output_amounts_claimed};\r\n             if (remainder < 0) {\r\n                 throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\r\n             }\r\n \r\n-            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\r\n+            const CAmount per_output_without_amount = remainder / addresses_without_amount.size();\r\n \r\n             bool gave_remaining_to_first = false;\r\n             for (CTxOut& out : rawTx.vout) {\r\n@@ -1461,6 +1455,7 @@ RPCHelpMan sweepwallet()\r\n                 }\r\n             }\r\n \r\n+            const bool lock_unspents{options.exists(\"lock_unspents\") ? options[\"lock_unspents\"].get_bool() : false};\r\n             if (lock_unspents) {\r\n                 for (const CTxIn& txin : rawTx.vin) {\r\n                     pwallet->LockCoin(txin.prevout);\r\n```\r\n</p></details>\r\n",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-09T22:40:28Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n \n-            UniValue result(UniValue::VOBJ);\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            if (options.exists(\"inputs\") && options.exists(\"sendmax\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine sendmax with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n                 } else {\n-                    result.pushKV(\"hex\", hex);\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803150069",
      "id" : 803150069,
      "line" : 1399,
      "node_id" : "PRRC_kwDOABII584v3xj1",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1399,
      "original_position" : 480,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 480,
      "pull_request_review_id" : 878060109,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803150069/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-09T22:46:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803150069",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803205253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803205253"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, I'll take another look at that. Thank you.",
      "commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "created_at" : "2022-02-10T00:34:28Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r803205253",
      "id" : 803205253,
      "in_reply_to_id" : 790142312,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v3_CF",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 37,
      "original_start_line" : 1184,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 878207785,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803205253/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-10T00:34:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/803205253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "â¢ Addressed @jonatack's comments\r\nâ¢ Added test for duplicate destinations\r\nâ¢ Added test for sweeping to multiple recipients sharing the remainder\r\nâ¢ Added `@cleanup` decorator to tests\r\nâ¢ Cleaned up extremely long lines in tests\r\n\r\nOpen questions: \r\nâ¢ Should this new RPC only allow one method (either options or positional args) to provide `fee_rate`, `feeconf_target` and `estimate_mode`?",
      "created_at" : "2022-02-10T22:25:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1035593556",
      "id" : 1035593556,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849uedU",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035593556/reactions"
      },
      "updated_at" : "2022-02-10T22:25:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035593556",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804181749"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804181749"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:28:16Z",
      "diff_hunk" : "@@ -7,11 +7,13 @@\n #include <policy/policy.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/util.h>\n+#include <util/rbf.h>",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804181749",
      "id" : 804181749,
      "in_reply_to_id" : 803134829,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7tb1",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 10,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 879600000,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804181749/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:28:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804181749",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185121"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185121"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think I got all these.",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:31:52Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},\n+                    },\n+                    FundTxDoc()\n+                ),\n+                \"options\"\n+            },\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", /*optional=*/true, \"The transaction id for the send. Only 1 transaction is created regardless of the number of addresses.\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", /*optional=*/true, \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", /*optional=*/true, \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSweep all UTXOs from the wallet with a fee rate of 1Â \" + CURRENCY_ATOM + \"/vB using named arguments\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"}' fee_rate=1\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.1 \" + CURRENCY_ATOM + \"/vB using positional arguments\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" 1.1\\n\") +\n+        \"Sweep all UTXOs split into equal amounts to two addresses with a fee rate of 1.5 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"\" + EXAMPLE_ADDRESS[1] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 1.5}'\\n\") +\n+        \"Leave dust UTXOs in wallet, sweep only UTXOs with positive effective value with a fee rate of 10 \" + CURRENCY_ATOM + \"/vB using the options argument\\n\"\n+        + HelpExampleCli(\"sweepwallet\", \"'[\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"]' null \\\"unset\\\" null '{\\\"fee_rate\\\": 10, \\\"sendmax\\\": true}'\\n\") +\n+        \"Sweep all UTXOs with a fee rate of 1.3 \" + CURRENCY_ATOM + \"/vB using named arguments and sending a 0.25 \" + CURRENCY_UNIT + \" to another recipient\\n\"\n+        + HelpExampleCli(\"-named sweepwallet\", \"receivers='[{\\\"\" + EXAMPLE_ADDRESS[1] + \"\\\": 0.25}, \\\"\"+ EXAMPLE_ADDRESS[0] + \"\\\"]' fee_rate=1.3\\n\")\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            RPCTypeCheck(request.params, {\n+                UniValue::VARR, // receivers\n+                UniValue::VNUM, // conf_target\n+                UniValue::VSTR, // estimate_mode\n+                UniValueType(), // fee_rate, will be checked by AmountFromValue() in SetFeeEstimateMode()\n+                UniValue::VOBJ, // options\n+                }, true\n+            );\n+\n+            std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+            if (!pwallet) return NullUniValue;\n+\n+            UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n+\n+\n+            std::set<std::string> addresses_without_amount;\n+            UniValue receiver_key_value_pairs(UniValue::VARR);\n+            const UniValue& receivers = request.params[0];\n+            for (unsigned int i = 0; i < receivers.size(); ++i) {\n+                const UniValue& receiver = receivers[i];\n+                if (receiver.isStr()) {\n+                    UniValue rkvp(UniValue::VOBJ);\n+                    rkvp.pushKV(receiver.get_str(), 0);\n+                    receiver_key_value_pairs.push_back(rkvp);\n+                    addresses_without_amount.insert(receiver.get_str());\n+                } else {\n+                    receiver_key_value_pairs.push_back(receiver);\n+                }\n+            }\n+\n+            if (addresses_without_amount.size() == 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Must provide at least one address without a specified amount\");\n             }\n \n-            // Make a blank psbt\n-            PartiallySignedTransaction psbtx(rawTx);\n+            CCoinControl coin_control;\n+\n+            SetFeeEstimateMode(*pwallet, coin_control, options[\"conf_target\"], options[\"estimate_mode\"], options[\"fee_rate\"], /* override_min_fee */ false);\n \n-            // First fill transaction with our data without signing,\n-            // so external signers are not asked sign more than once.\n-            bool complete;\n-            pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n-            const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n-            if (err != TransactionError::OK) {\n-                throw JSONRPCTransactionError(err);\n+            coin_control.fAllowWatchOnly = ParseIncludeWatchonly(options[\"include_watching\"], *pwallet);\n+\n+            bool lock_unspents = false;\n+            if (options.exists(\"lock_unspents\")) {\n+                lock_unspents = options[\"lock_unspents\"].get_bool();\n             }\n \n-            CMutableTransaction mtx;\n-            complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n \n-            UniValue result(UniValue::VOBJ);\n+            FeeCalculation fee_calc_out;\n+            CFeeRate fee_rate = GetMinimumFeeRate(*pwallet, coin_control, &fee_calc_out);\n+            // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n+            // provided one\n+            if (coin_control.m_feerate && fee_rate > *coin_control.m_feerate) {\n+               throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\", coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), fee_rate.ToString(FeeEstimateMode::SAT_VB)));\n+            }\n+            if (fee_calc_out.reason == FeeReason::FALLBACK && !pwallet->m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+            }\n \n-            if (psbt_opt_in || !complete || !add_to_wallet) {\n-                // Serialize the PSBT\n-                CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n-                ssTx << psbtx;\n-                result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+            CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], receiver_key_value_pairs, options[\"locktime\"], rbf);\n+            LOCK(pwallet->cs_wallet); // Lock automatically released at end of function\n+            std::vector<COutput> all_the_utxos;\n+\n+            CAmount total_input_value(0);\n+            bool sendmax = options.exists(\"sendmax\") && options[\"sendmax\"].get_bool();\n+            if (options.exists(\"inputs\") && options.exists(\"sendmax\")) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot combine sendmax with specific inputs.\");\n+            } else if (options.exists(\"inputs\")) {\n+                for (const CTxIn& input : rawTx.vin) {\n+                    if (pwallet->IsSpent(input.prevout.hash, input.prevout.n)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not available. UTXO (%s:%d) was already spent.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    const CWalletTx* tx = pwallet->GetWalletTx(input.prevout.hash);\n+                    if (!tx) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input not found. UTXO (%s:%d) is not part of wallet.\", input.prevout.hash.ToString(), input.prevout.n));\n+                    }\n+                    total_input_value += tx->tx->vout[input.prevout.n].nValue;\n+                }\n+            } else {\n+                AvailableCoins(*pwallet, all_the_utxos, &coin_control, /* sweep 0-value utxos*/ 0);\n+                for (const COutput& output : all_the_utxos) {\n+                    CHECK_NONFATAL(output.nInputBytes > 0);\n+                    if (sendmax && fee_rate.GetFee(output.nInputBytes) > output.tx->tx->vout[output.i].nValue) {\n+                        continue;\n+                    }\n+                    CTxIn input(output.tx->GetHash(), output.i, CScript(), rbf ? MAX_BIP125_RBF_SEQUENCE : CTxIn::SEQUENCE_FINAL);\n+                    rawTx.vin.push_back(input);\n+                    total_input_value += output.tx->tx->vout[output.i].nValue;\n+                }\n             }\n \n-            if (complete) {\n-                std::string err_string;\n-                std::string hex = EncodeHexTx(CTransaction(mtx));\n-                CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-                result.pushKV(\"txid\", tx->GetHash().GetHex());\n-                if (add_to_wallet && !psbt_opt_in) {\n-                    pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+            // estimate final size of tx\n+            TxSize tx_size = CalculateMaximumSignedTxSize(CTransaction(rawTx), pwallet.get());\n+            CAmount fee_from_size = fee_rate.GetFee(tx_size.vsize);\n+            CAmount effective_value = total_input_value - fee_from_size;\n+\n+            if (effective_value <= 0) {\n+                if (sendmax) {\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep, try using lower feerate.\");\n                 } else {\n-                    result.pushKV(\"hex\", hex);\n+                    throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Total value of UTXO pool too low to pay for sweep. Try using lower feerate or excluding uneconomic UTXOs with 'sendmax' option.\");\n+                }\n+            }\n+\n+            CAmount output_amounts_claimed(0);\n+            for (CTxOut out : rawTx.vout) {\n+                output_amounts_claimed += out.nValue;\n+            }\n+\n+            if (output_amounts_claimed > total_input_value) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Assigned more value to outputs than available funds.\");\n+            }\n+\n+            CAmount remainder = effective_value - output_amounts_claimed;\n+            if (remainder < 0) {\n+                throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds for fees after creating specified outputs.\");\n+            }\n+\n+            CAmount per_output_without_amount = remainder / addresses_without_amount.size();\n+\n+            bool gave_remaining_to_first = false;\n+            for (CTxOut& out : rawTx.vout) {\n+                CTxDestination dest;\n+                ExtractDestination(out.scriptPubKey, dest);\n+                std::string addr = EncodeDestination(dest);\n+                if (addresses_without_amount.count(addr) > 0) {\n+                    out.nValue = per_output_without_amount;\n+                    if (!gave_remaining_to_first) {\n+                        out.nValue += remainder % addresses_without_amount.size();\n+                        gave_remaining_to_first = true;\n+                    }\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Dynamically generated output amount is dust\n+                        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Dynamically assigned remainder results in dust output.\");\n+                    }\n+                } else {\n+                    if (IsDust(out, pwallet->chain().relayDustFee())) {\n+                        // Specified output amount is dust\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Specified output amount to %s is below dust threshold.\", addr));\n+                    }\n+                }\n+            }\n+\n+            if (lock_unspents) {\n+                for (const CTxIn& txin : rawTx.vin) {\n+                    pwallet->LockCoin(txin.prevout);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185121",
      "id" : 804185121,
      "in_reply_to_id" : 803150069,
      "line" : 1398,
      "node_id" : "PRRC_kwDOABII584v7uQh",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1398,
      "original_position" : 480,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : 487,
      "pull_request_review_id" : 879603283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185121/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:31:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185666"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:32:24Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\n+                \"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                Cat<std::vector<RPCArg>>(\n+                    {\n+                        {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                        {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+                        {\"include_watching\", RPCArg::Type::BOOL, RPCArg::DefaultHint{\"true for watch-only wallets, otherwise false\"}, \"Also select inputs which are watch only.\\n\"\n+                                              \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                              \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                        {\"inputs\", RPCArg::Type::ARR, RPCArg::Default{UniValue::VARR}, \"Use exactly the specified inputs to build the transaction. Specifying inputs is incompatible with sendmax. A JSON array of JSON objects\",\n+                            {\n+                                {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                                {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                                {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                            },\n+                        },\n+                        {\"locktime\", RPCArg::Type::NUM, RPCArg::Default{0}, \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                        {\"lock_unspents\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"Lock selected unspent outputs\"},\n+                        {\"psbt\", RPCArg::Type::BOOL,  RPCArg::DefaultHint{\"automatic\"}, \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                        {\"sendmax\", RPCArg::Type::BOOL, RPCArg::Default{false}, \"When true, only sweep UTXOs that can pay for their own fees to maximize the output amount. When 'false' (default), no UTXO is left behind. Sendmax is incompatible with providing specific inputs.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185666",
      "id" : 804185666,
      "in_reply_to_id" : 803138716,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7uZC",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1222,
      "original_position" : 278,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 879603799,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185666/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:32:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185666",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185871"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185871"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, sounds much better.",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:32:35Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);\n+            PreventOutdatedOptions(options);\n \n-            const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n \n             CAmount fee;\n             int change_position;\n-            bool rbf = pwallet->m_signal_rbf;\n-            if (options.exists(\"replaceable\")) {\n-                rbf = options[\"replaceable\"].get_bool();\n-            }\n+            bool rbf = options.exists(\"replaceable\") ? options[\"replaceable\"].get_bool() : pwallet->m_signal_rbf;\n             CMutableTransaction rawTx = ConstructTransaction(options[\"inputs\"], request.params[0], options[\"locktime\"], rbf);\n             CCoinControl coin_control;\n             // Automatically select coins, unless at least one is manually selected. Can\n             // be overridden by options.add_inputs.\n             coin_control.m_add_inputs = rawTx.vin.size() == 0;\n             FundTransaction(*pwallet, rawTx, fee, change_position, options, coin_control, /* override_min_fee */ false);\n \n-            bool add_to_wallet = true;\n-            if (options.exists(\"add_to_wallet\")) {\n-                add_to_wallet = options[\"add_to_wallet\"].get_bool();\n+            return FinishTransaction(pwallet, options, rawTx);\n+        }\n+    };\n+}\n+\n+RPCHelpMan sweepwallet()\n+{\n+    return RPCHelpMan{\"sweepwallet\",\n+        \"EXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all (or specific) confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweepwallet will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804185871",
      "id" : 804185871,
      "in_reply_to_id" : 803137411,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7ucP",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1188,
      "original_position" : 244,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 879603951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185871/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:32:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804185871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804186159"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804186159"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Moved and amended as suggested",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:32:54Z",
      "diff_hunk" : "@@ -0,0 +1,24 @@\n+Add `sweepwallet` RPC",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804186159",
      "id" : 804186159,
      "in_reply_to_id" : 803134312,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7ugv",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1,
      "original_position" : 1,
      "original_start_line" : null,
      "path" : "doc/release-notes-24118.md",
      "position" : null,
      "pull_request_review_id" : 879604210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804186159/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:32:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804186159",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804187419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804187419"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:34:14Z",
      "diff_hunk" : "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804187419",
      "id" : 804187419,
      "in_reply_to_id" : 803113395,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7u0b",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 76,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 879605191,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804187419/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804187419",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804188483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804188483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Got em.",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:35:26Z",
      "diff_hunk" : "@@ -1060,101 +1159,248 @@ RPCHelpMan send()\n             if (!pwallet) return NullUniValue;\n \n             UniValue options{request.params[4].isNull() ? UniValue::VOBJ : request.params[4]};\n-            if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n-                if (!request.params[1].isNull() || !request.params[2].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"conf_target\", request.params[1]);\n-                options.pushKV(\"estimate_mode\", request.params[2]);\n-            }\n-            if (options.exists(\"fee_rate\")) {\n-                if (!request.params[3].isNull()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n-                }\n-            } else {\n-                options.pushKV(\"fee_rate\", request.params[3]);\n-            }\n-            if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n-            }\n-            if (options.exists(\"feeRate\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use fee_rate (\" + CURRENCY_ATOM + \"/vB) instead of feeRate\");\n-            }\n-            if (options.exists(\"changeAddress\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_address\");\n-            }\n-            if (options.exists(\"changePosition\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use change_position\");\n-            }\n-            if (options.exists(\"includeWatching\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use include_watching\");\n-            }\n-            if (options.exists(\"lockUnspents\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use lock_unspents\");\n-            }\n-            if (options.exists(\"subtractFeeFromOutputs\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Use subtract_fee_from_outputs\");\n-            }\n+            ParseFeeEstimationInstructions(/*conf_target*/ request.params[1], /*estimate_mode*/ request.params[2], /*fee_rate*/ request.params[3], options);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804188483",
      "id" : 804188483,
      "in_reply_to_id" : 803096066,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7vFD",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 1162,
      "original_position" : 210,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 879606086,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804188483/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:35:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804188483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804189336"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804189336"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-10T22:36:31Z",
      "diff_hunk" : "@@ -50,6 +52,91 @@ static void ParseRecipients(const UniValue& address_amounts, const UniValue& sub\n     }\n }\n \n+static void ParseFeeEstimationInstructions(const UniValue& positional_conf_target, const UniValue& positional_estimate_mode, const UniValue& positional_fee_rate, UniValue& options) {\n+    if (options.exists(\"conf_target\") || options.exists(\"estimate_mode\")) {\n+        if (!positional_conf_target.isNull() || !positional_estimate_mode.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass conf_target and estimate_mode either as arguments or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"conf_target\", positional_conf_target);\n+        options.pushKV(\"estimate_mode\", positional_estimate_mode);\n+    }\n+    if (options.exists(\"fee_rate\")) {\n+        if (!positional_fee_rate.isNull()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Pass the fee_rate either as an argument, or in the options object, but not both\");\n+        }\n+    } else {\n+        options.pushKV(\"fee_rate\", positional_fee_rate);\n+    }\n+    if (!options[\"conf_target\"].isNull() && (options[\"estimate_mode\"].isNull() || (options[\"estimate_mode\"].get_str() == \"unset\"))) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Specify estimate_mode\");\n+    }\n+}\n+\n+static UniValue FinishTransaction(const std::shared_ptr<CWallet> pwallet, const UniValue& options, const CMutableTransaction& rawTx) {\n+    bool add_to_wallet = options.exists(\"add_to_wallet\") ? options[\"add_to_wallet\"].get_bool() : true;\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // First fill transaction with our data without signing,\n+    // so external signers are not asked sign more than once.\n+    bool complete;\n+    pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, false, true);\n+    const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_DEFAULT, true, false);\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    CMutableTransaction mtx;\n+    complete = FinalizeAndExtractPSBT(psbtx, mtx);\n+\n+    UniValue result(UniValue::VOBJ);\n+\n+    const bool psbt_opt_in = options.exists(\"psbt\") && options[\"psbt\"].get_bool();\n+    if (psbt_opt_in || !complete || !add_to_wallet) {\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n+    if (complete) {\n+        std::string hex = EncodeHexTx(CTransaction(mtx));\n+        CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n+        result.pushKV(\"txid\", tx->GetHash().GetHex());\n+        if (add_to_wallet && !psbt_opt_in) {\n+            pwallet->CommitTransaction(tx, {}, {} /* orderForm */);\n+        } else {\n+            result.pushKV(\"hex\", hex);\n+        }\n+    }\n+    result.pushKV(\"complete\", complete);\n+\n+    return result;\n+}\n+\n+static void PreventOutdatedOptions(const UniValue& options) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804189336",
      "id" : 804189336,
      "in_reply_to_id" : 803092722,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584v7vSY",
      "original_commit_id" : "b2b1d6b54386627d9fb5170a6a265b0fbd904fc2",
      "original_line" : 119,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 879606945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804189336/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-10T22:36:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804189336",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2022-02-10T22:47:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1035610384",
      "id" : 1035610384,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849uikQ",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035610384/reactions"
      },
      "updated_at" : "2022-02-10T22:47:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035610384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13405205?v=4",
         "events_url" : "https://api.github.com/users/prayank23/events{/privacy}",
         "followers_url" : "https://api.github.com/users/prayank23/followers",
         "following_url" : "https://api.github.com/users/prayank23/following{/other_user}",
         "gists_url" : "https://api.github.com/users/prayank23/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/prayank23",
         "id" : 13405205,
         "login" : "prayank23",
         "node_id" : "MDQ6VXNlcjEzNDA1MjA1",
         "organizations_url" : "https://api.github.com/users/prayank23/orgs",
         "received_events_url" : "https://api.github.com/users/prayank23/received_events",
         "repos_url" : "https://api.github.com/users/prayank23/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/prayank23/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/prayank23"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Hate to nitpick the name, but \"sweepwallet\" to me sounds too easily confused with sweeping funds *into* the wallet.",
      "created_at" : "2022-02-11T03:49:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1035859509",
      "id" : 1035859509,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849vfY1",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035859509/reactions"
      },
      "updated_at" : "2022-02-11T03:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035859509",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804545946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804545946"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure, but maybe `rpc_sweepwallet.py` would be the most coherent filename if the call is named \"sweepwallet\".",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-11T10:57:54Z",
      "diff_hunk" : "@@ -278,6 +278,8 @@\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n+    'wallet_sweep.py --legacy-wallet',\n+    'wallet_sweep.py --descriptors',",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804545946",
      "id" : 804545946,
      "line" : 282,
      "node_id" : "PRRC_kwDOABII584v9GWa",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 282,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_runner.py",
      "position" : 5,
      "pull_request_review_id" : 880031617,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804545946/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T11:28:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804545946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804560426"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804560426"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I wonder if the release note isn't a bit long and whether the how-to info would be best documented elsewhere more permanently like in the sweepwallet help or in one of the doc/ files.",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-11T11:19:12Z",
      "diff_hunk" : "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more\n+  receivers without creating change.\n+\n+  By default, the `sweepwallet` RPC will empty the wallet completely leaving no\n+  UTXOs behind. Optionally, the `send_max` option allows skipping uneconomic UTXOs\n+  and therefore maximizing the received amount.\n+\n+  The `sweepwallet` RPC can process a combination of receiver addresses with and\n+  without amounts specified. The specified amounts are paid first, and the\n+  remainder split among the receivers with unspecified amounts. At least one\n+  address must be provided without a specified amount to receive the balance left\n+  after fees.\n+\n+  Instead of the complete UTXO pool, the call can be used to create a transaction\n+  from a specific UTXO set. We recommend using `sweepwallet` to empty wallets\n+  or to spend specific UTXOs in full.\n+\n+  The `sweepwallet` RPC therefore provides a less cumbersome way of spending\n+  specific UTXOs or emptying wallets than subtract fee from output/amount (SFFO).\n+  If the user wishes to specify a budget rather than a set of UTXOs to delimit a\n+  transaction, they should continue to use SFFO. (#24118)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804560426",
      "id" : 804560426,
      "line" : 151,
      "node_id" : "PRRC_kwDOABII584v9J4q",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 151,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "doc/release-notes.md",
      "position" : 26,
      "pull_request_review_id" : 880051548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804560426/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T11:19:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804560426",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Hate to nitpick the name, but \"sweepwallet\" to me sounds too easily confused with sweeping funds _into_ the wallet.\r\n\r\nI changed it from `sweep` after multiple people stated that they first thought it was a feature to sweep a private key into the wallet. I'm open to suggestions, if you have an idea for a better name.",
      "created_at" : "2022-02-11T17:49:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1036462094",
      "id" : 1036462094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849xygO",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036462094/reactions"
      },
      "updated_at" : "2022-02-11T17:49:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036462094",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804915694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804915694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: s/balance/value",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-11T18:43:15Z",
      "diff_hunk" : "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r804915694",
      "id" : 804915694,
      "line" : 131,
      "node_id" : "PRRC_kwDOABII584v-gnu",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 131,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "doc/release-notes.md",
      "position" : 6,
      "pull_request_review_id" : 880551904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804915694/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-11T18:43:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/804915694",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "idk, I guess if you don't mind ignoring the advanced use cases in naming, \"emptywallet\" might work.",
      "created_at" : "2022-02-11T18:45:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1036510984",
      "id" : 1036510984,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII5849x-cI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036510984/reactions"
      },
      "updated_at" : "2022-02-11T18:45:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036510984",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2022-02-14T12:21:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1039022742",
      "id" : 1039022742,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII58497jqW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039022742/reactions"
      },
      "updated_at" : "2022-02-14T12:21:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039022742",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "or maybe \"drainwallet\". \"emptywallet\" sounds a lot like empty wallet, i.e. it's not immediately clear that \"empty\" is a verb in this case",
      "created_at" : "2022-02-14T15:50:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1039247112",
      "id" : 1039247112,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII58498acI",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039247112/reactions"
      },
      "updated_at" : "2022-02-14T15:50:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1039247112",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806111360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806111360"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see that some other wallet related calls do start with `rpc_â¦` as well, such as `rpc_rawtransaction.py`, `rpc_fundrawtransaction.py`, `rpc_signrawtransaction.py`, and `rpc_psbt.py`, but all the other send related calls are under `wallet_â¦`. I'm kinda thinking that it fits the pattern as it is currently. It should probably be `wallet_sweepwallet.py`, though.",
      "commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "created_at" : "2022-02-14T18:08:08Z",
      "diff_hunk" : "@@ -278,6 +278,8 @@\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n+    'wallet_sweep.py --legacy-wallet',\n+    'wallet_sweep.py --descriptors',",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806111360",
      "id" : 806111360,
      "in_reply_to_id" : 804545946,
      "line" : 282,
      "node_id" : "PRRC_kwDOABII584wDEiA",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 282,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_runner.py",
      "position" : 5,
      "pull_request_review_id" : 882010532,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806111360/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-14T18:08:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806111360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245395"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245395"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Amended.",
      "commit_id" : "1051bade0b1b9f304d504c0a90c5b3c05334c340",
      "created_at" : "2022-02-14T21:16:36Z",
      "diff_hunk" : "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245395",
      "id" : 806245395,
      "in_reply_to_id" : 804915694,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wDlQT",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 131,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "doc/release-notes.md",
      "position" : null,
      "pull_request_review_id" : 882196594,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245395/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-14T21:16:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245395",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245520"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245520"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I rewrote the release notes.",
      "commit_id" : "1051bade0b1b9f304d504c0a90c5b3c05334c340",
      "created_at" : "2022-02-14T21:16:46Z",
      "diff_hunk" : "@@ -126,6 +126,30 @@ Updated RPCs\n New RPCs\n --------\n \n+- Add `sweepwallet` RPC\n+\n+  The `sweepwallet` RPC spends some given UTXOs' complete balance to one or more\n+  receivers without creating change.\n+\n+  By default, the `sweepwallet` RPC will empty the wallet completely leaving no\n+  UTXOs behind. Optionally, the `send_max` option allows skipping uneconomic UTXOs\n+  and therefore maximizing the received amount.\n+\n+  The `sweepwallet` RPC can process a combination of receiver addresses with and\n+  without amounts specified. The specified amounts are paid first, and the\n+  remainder split among the receivers with unspecified amounts. At least one\n+  address must be provided without a specified amount to receive the balance left\n+  after fees.\n+\n+  Instead of the complete UTXO pool, the call can be used to create a transaction\n+  from a specific UTXO set. We recommend using `sweepwallet` to empty wallets\n+  or to spend specific UTXOs in full.\n+\n+  The `sweepwallet` RPC therefore provides a less cumbersome way of spending\n+  specific UTXOs or emptying wallets than subtract fee from output/amount (SFFO).\n+  If the user wishes to specify a budget rather than a set of UTXOs to delimit a\n+  transaction, they should continue to use SFFO. (#24118)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245520",
      "id" : 806245520,
      "in_reply_to_id" : 804560426,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wDlSQ",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 151,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "doc/release-notes.md",
      "position" : null,
      "pull_request_review_id" : 882196757,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245520/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-14T21:16:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245520",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245809"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed to `wallet_sweepwallet.py`.",
      "commit_id" : "1051bade0b1b9f304d504c0a90c5b3c05334c340",
      "created_at" : "2022-02-14T21:17:14Z",
      "diff_hunk" : "@@ -278,6 +278,8 @@\n     'wallet_create_tx.py --legacy-wallet',\n     'wallet_send.py --legacy-wallet',\n     'wallet_send.py --descriptors',\n+    'wallet_sweep.py --legacy-wallet',\n+    'wallet_sweep.py --descriptors',",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r806245809",
      "id" : 806245809,
      "in_reply_to_id" : 804545946,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wDlWx",
      "original_commit_id" : "27f8fb4c83e7178387afc86201cc14583fd943d2",
      "original_line" : 282,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_runner.py",
      "position" : null,
      "pull_request_review_id" : 882197184,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245809/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-02-14T21:17:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/806245809",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Moved the release notes back to their own file to avoid merge conflict (I think I had misunderstood some feedback I got about release notes).",
      "created_at" : "2022-02-15T22:47:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1040874284",
      "id" : 1040874284,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII584-Cnss",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1040874284/reactions"
      },
      "updated_at" : "2022-02-15T22:47:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1040874284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809377182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809377182"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "After talking to a few people, my sentiment is that this is the expected behavior. In the minimal use case, the most important arguments are available as positional, making it easy to use. When people start using options, they may want to define everything as options, though, for consistency and readability.",
      "commit_id" : "5a663b2a676ed7ec24d5d4b1690d2639aeebab86",
      "created_at" : "2022-02-17T19:06:29Z",
      "diff_hunk" : "@@ -1159,6 +1160,267 @@ RPCHelpMan send()\n     };\n }\n \n+RPCHelpMan sweep()\n+{\n+    return RPCHelpMan{\"sweep\",\n+        \"\\nEXPERIMENTAL warning: this call may be changed in future releases.\\n\"\n+        \"\\nSpend all confirmed UTXOs in the wallet to one or more recipients.\\n\"\n+        \"Unconfirmed inbound UTXOs and locked UTXOs will not be spent. Sweep will respect the wallet flag for avoid_reuse.\\n\",\n+        {\n+            {\"receivers\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"The destinations of the sweep, each address may only appear once.\\n\"\n+                \"Optionally some receivers can be specified with an amount, but at least one address must appear without a specified amount.\\n\",\n+                {\n+                    {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"A bitcoin address which receives an equal share of the unspecified amount.\"},\n+                    {\"\", RPCArg::Type::OBJ_USER_KEYS, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::DefaultHint{\"wallet -txconfirmtarget\"}, \"Confirmation target in blocks\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Default{\"unset\"}, std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"fee_rate\", RPCArg::Type::AMOUNT, RPCArg::DefaultHint{\"not set, fall back to wallet fee estimation\"}, \"Specify a fee rate in \" + CURRENCY_ATOM + \"/vB.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#discussion_r809377182",
      "id" : 809377182,
      "in_reply_to_id" : 790142312,
      "line" : null,
      "node_id" : "PRRC_kwDOABII584wPh2e",
      "original_commit_id" : "669c52287ddc9e760de90b99f1085d9b2016d1aa",
      "original_line" : 1188,
      "original_position" : 37,
      "original_start_line" : 1184,
      "path" : "src/wallet/rpc/spend.cpp",
      "position" : null,
      "pull_request_review_id" : 886423867,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24118",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809377182/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2022-02-17T19:06:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/809377182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Renamed RPC to `sendall`, after discussion with other contributors. All review comments should have been addressed. Please let me know if I have missed something.",
      "created_at" : "2022-02-17T20:43:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24118#issuecomment-1043411882",
      "id" : 1043411882,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/24118",
      "node_id" : "IC_kwDOABII584-MTOq",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043411882/reactions"
      },
      "updated_at" : "2022-02-17T20:54:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1043411882",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   }
]
