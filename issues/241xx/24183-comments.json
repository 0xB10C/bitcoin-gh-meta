[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794440465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794440465"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There is a whitespace here, you have to remove it to pass the linter.",
      "commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "created_at" : "2022-01-28T11:54:22Z",
      "diff_hunk" : "@@ -52,73 +48,49 @@ def transaction_graph_test(self, size, n_tx_to_mine=None, start_input_txid='', e\n             self.log.debug('Preparing transaction #{}...'.format(i))\n             # Prepare inputs.\n             if i == 0:\n-                inputs = [{'txid': start_input_txid, 'vout': 0}]\n-                inputs_value = self.nodes[0].gettxout(start_input_txid, 0)['value']\n+                parent_utxo = miniwallet.get_utxo()\n             else:\n-                inputs = []\n-                inputs_value = 0\n-                for j, tx in enumerate(tx_id[0:i]):\n-                    # Transaction tx[K] is a child of each of previous transactions tx[0]..tx[K-1] at their output K-1.\n-                    vout = i - j - 1\n-                    inputs.append({'txid': tx_id[j], 'vout': vout})\n-                    inputs_value += self.nodes[0].gettxout(tx, vout)['value']\n+                parent_utxo = miniwallet.get_utxo(txid=tx_id[i-1]['txid'])\n \n-            self.log.debug('inputs={}'.format(inputs))\n-            self.log.debug('inputs_value={}'.format(inputs_value))\n+            tx = miniwallet.send_self_transfer(from_node=node, utxo_to_spend=parent_utxo, sequence=SEQUENCE_FINAL)\n+            tx_id.append(tx)\n \n-            # Prepare outputs.\n-            tx_count = i + 1\n-            if tx_count < size:\n-                # Transaction tx[K] is an ancestor of each of subsequent transactions tx[K+1]..tx[N-1].\n-                n_outputs = size - tx_count\n-                output_value = ((inputs_value - fee) / Decimal(n_outputs)).quantize(Decimal('0.00000001'))\n-                outputs = {}\n-                for _ in range(n_outputs):\n-                    outputs[self.nodes[0].getnewaddress()] = output_value\n-            else:\n-                output_value = (inputs_value - fee).quantize(Decimal('0.00000001'))\n-                outputs = {end_address: output_value}\n-\n-            self.log.debug('output_value={}'.format(output_value))\n-            self.log.debug('outputs={}'.format(outputs))\n-\n-            # Create a new transaction.\n-            unsigned_raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            signed_raw_tx = self.nodes[0].signrawtransactionwithwallet(unsigned_raw_tx)\n-            tx_id.append(self.nodes[0].sendrawtransaction(signed_raw_tx['hex']))\n-            tx_size.append(self.nodes[0].getmempoolentry(tx_id[-1])['vsize'])\n+            vsize = node.getrawmempool(True)[tx['txid']]['vsize']\n+            tx_size.append(vsize)\n \n+            tx_count = i + 1\n             if tx_count in n_tx_to_mine:\n                 # The created transactions are mined into blocks by batches.\n-                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n-                block_hash = self.generate(self.nodes[0], 1)[0]\n+                self.log.info('The batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n+                block_hash = self.generate(node, 1)[0]\n                 if not first_block_hash:\n                     first_block_hash = block_hash\n-                assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+                assert_equal(len(node.getrawmempool()), 0)\n                 self.log.info('All of the transactions from the current batch have been mined into a block.')\n             elif tx_count == size:\n                 # At the end all of the mined blocks are invalidated, and all of the created\n                 # transactions should be re-added from disconnected blocks to the mempool.\n-                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(self.nodes[0].getrawmempool())))\n+                self.log.info('The last batch of {} transactions has been accepted into the mempool.'.format(len(node.getrawmempool())))\n                 start = time.time()\n-                self.nodes[0].invalidateblock(first_block_hash)\n+                node.invalidateblock(first_block_hash)\n                 end = time.time()\n-                assert_equal(len(self.nodes[0].getrawmempool()), size)\n+                assert_equal(len(node.getrawmempool()), size)\n                 self.log.info('All of the recently mined transactions have been re-added into the mempool in {} seconds.'.format(end - start))\n \n         self.log.info('Checking descendants/ancestors properties of all of the in-mempool transactions...')\n         for k, tx in enumerate(tx_id):\n             self.log.debug('Check transaction #{}.'.format(k))\n-            entry = self.nodes[0].getmempoolentry(tx)\n+            entry = node.getrawmempool(True)[tx['txid']]\n             assert_equal(entry['descendantcount'], size - k)\n             assert_equal(entry['descendantsize'], sum(tx_size[k:size]))\n             assert_equal(entry['ancestorcount'], k + 1)\n             assert_equal(entry['ancestorsize'], sum(tx_size[0:(k + 1)]))\n \n     def run_test(self):\n         # Use batch size limited by DEFAULT_ANCESTOR_LIMIT = 25 to not fire \"too many unconfirmed parents\" error.\n-        self.transaction_graph_test(size=100, n_tx_to_mine=[25, 50, 75])\n+        self.transaction_list_test(size=100, n_tx_to_mine=[25, 50, 75])\n \n \n if __name__ == '__main__':\n     MempoolUpdateFromBlockTest().main()\n+    ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/24183#discussion_r794440465",
      "id" : 794440465,
      "line" : 96,
      "node_id" : "PRRC_kwDOABII584vWjMR",
      "original_commit_id" : "f2d7c82abff5185b0f3883559ae9002e31b128bf",
      "original_line" : 96,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/mempool_updatefromblock.py",
      "position" : 138,
      "pull_request_review_id" : 866050227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/24183",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794440465/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2022-01-28T11:54:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/794440465",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   }
]
