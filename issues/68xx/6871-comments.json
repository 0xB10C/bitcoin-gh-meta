[
   {
      "body" : "Feedback I heard from wallet vendors previously was that FSS was burdensome (needed extra txins, and so less useful).",
      "created_at" : "2015-10-22T22:13:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150370804",
      "id" : 150370804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T22:13:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150370804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@gmaxwell Same feedback I've heard too.",
      "created_at" : "2015-10-22T22:16:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150371262",
      "id" : 150371262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T22:16:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150371262",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Concept ACK. ",
      "created_at" : "2015-10-22T22:48:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150377435",
      "id" : 150377435,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T22:48:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150377435",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7275704?v=3",
         "events_url" : "https://api.github.com/users/btcdrak/events{/privacy}",
         "followers_url" : "https://api.github.com/users/btcdrak/followers",
         "following_url" : "https://api.github.com/users/btcdrak/following{/other_user}",
         "gists_url" : "https://api.github.com/users/btcdrak/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/btcdrak",
         "id" : 7275704,
         "login" : "btcdrak",
         "organizations_url" : "https://api.github.com/users/btcdrak/orgs",
         "received_events_url" : "https://api.github.com/users/btcdrak/received_events",
         "repos_url" : "https://api.github.com/users/btcdrak/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/btcdrak/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/btcdrak"
      }
   },
   {
      "body" : "concept ACK",
      "created_at" : "2015-10-22T22:50:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150377726",
      "id" : 150377726,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150377726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "How does this work with CPFP, and descendent transactions (e.g a chained transaction that could have its based replaced?)",
      "created_at" : "2015-10-22T22:50:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150377871",
      "id" : 150377871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T22:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150377871",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "@dcousens What do you mean \"how does this work\" with CPFP? CPFP isn't implemented in Bitcoin Core, so there's nothing to affect.\r\n\r\nNow, when replacing a tx with children, the fees and size of all children are taken into account before deciding to replace or not.",
      "created_at" : "2015-10-22T22:59:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150379108",
      "id" : 150379108,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T22:59:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150379108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "> @dcousens What do you mean \"how does this work\" with CPFP? CPFP isn't implemented in Bitcoin Core, so there's nothing to affect.\r\n\r\nI meant conceptually, sorry.  CPFP is something that was on the roadmap AFAIK?\r\n\r\n> all children are taken into account before deciding to replace or not.\r\n\r\nBy taken into account, do you mean that you have to have a higher fee than all subsequent children to replace?",
      "created_at" : "2015-10-22T23:02:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150379560",
      "id" : 150379560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T23:04:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150379560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/413395?v=3",
         "events_url" : "https://api.github.com/users/dcousens/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dcousens/followers",
         "following_url" : "https://api.github.com/users/dcousens/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dcousens/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dcousens",
         "id" : 413395,
         "login" : "dcousens",
         "organizations_url" : "https://api.github.com/users/dcousens/orgs",
         "received_events_url" : "https://api.github.com/users/dcousens/received_events",
         "repos_url" : "https://api.github.com/users/dcousens/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dcousens/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dcousens"
      }
   },
   {
      "body" : "> By taken into account, do you mean that you have to have a higher fee than all subsequent children?\r\n\r\nYes.\r\n\r\nOnly extremely sophisticated CPFP that does relaying of whole packages of transactions based on fees paid by children is affected by RBF, and no-one has any plans to actually implement that yet.",
      "created_at" : "2015-10-22T23:05:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150379993",
      "id" : 150379993,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-22T23:05:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150379993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2015-10-23T06:51:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150491410",
      "id" : 150491410,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-23T06:51:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150491410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5269298?v=3",
         "events_url" : "https://api.github.com/users/greenaddress/events{/privacy}",
         "followers_url" : "https://api.github.com/users/greenaddress/followers",
         "following_url" : "https://api.github.com/users/greenaddress/following{/other_user}",
         "gists_url" : "https://api.github.com/users/greenaddress/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/greenaddress",
         "id" : 5269298,
         "login" : "greenaddress",
         "organizations_url" : "https://api.github.com/users/greenaddress/orgs",
         "received_events_url" : "https://api.github.com/users/greenaddress/received_events",
         "repos_url" : "https://api.github.com/users/greenaddress/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/greenaddress/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/greenaddress/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/greenaddress"
      }
   },
   {
      "body" : "concept ACK",
      "created_at" : "2015-10-23T09:24:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150526220",
      "id" : 150526220,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-23T09:24:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150526220",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/649160?v=3",
         "events_url" : "https://api.github.com/users/rubensayshi/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rubensayshi/followers",
         "following_url" : "https://api.github.com/users/rubensayshi/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rubensayshi/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rubensayshi",
         "id" : 649160,
         "login" : "rubensayshi",
         "organizations_url" : "https://api.github.com/users/rubensayshi/orgs",
         "received_events_url" : "https://api.github.com/users/rubensayshi/received_events",
         "repos_url" : "https://api.github.com/users/rubensayshi/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rubensayshi/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rubensayshi/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rubensayshi"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2015-10-23T11:28:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#issuecomment-150548182",
      "id" : 150548182,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6871",
      "updated_at" : "2015-10-23T11:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/150548182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6871#discussion_r42913338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6871"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42913338"
         }
      },
      "body" : "I'm not sure this comparison makes sense. The existence of a low-fee-rate descendant doesn't make a transaction worse for miners, but it would cause the feerate to look worse in this comparison.",
      "commit_id" : "b233451b00f5e58ea5cb380aebe0297d436bd1f5",
      "created_at" : "2015-10-23T20:55:39Z",
      "diff_hunk" : "@@ -932,6 +959,85 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n         }\n \n+        // A transaction that spends outputs that would be replaced by it is invalid. Now\n+        // that we have the set of all ancestors we can detect this\n+        // pathological case by making sure setConflicts and setAncestors don't\n+        // intersect.\n+        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors)\n+        {\n+            const uint256 hashAncestor = ancestorIt->GetTx().GetHash();\n+            if (setConflicts.count(hashAncestor))\n+            {\n+                return state.DoS(10, error(\"AcceptToMemoryPool: %s spends conflicting transaction %s\",\n+                                           hash.ToString(),\n+                                           hashAncestor.ToString()),\n+                                 REJECT_INVALID, \"bad-txns-spends-conflicting-tx\");\n+            }\n+        }\n+\n+        // Check if it's economically rational to mine this transaction rather\n+        // than the ones it replaces.\n+        CAmount nConflictingFees = 0;\n+        size_t nConflictingSize = 0;\n+        if (setConflicts.size())\n+        {\n+            LOCK(pool.cs);\n+\n+            // Check if it's economically rational to mine this transaction\n+            // rather than the ones it replaces. For efficiency we simply sum\n+            // up the pre-calculated fees/size-with-descendants values from the\n+            // mempool package tracking; this does mean the pathological case\n+            // of diamond tx graphs will be overcounted.\n+            BOOST_FOREACH(const uint256 hashConflicting, setConflicts)\n+            {\n+                CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n+                if (mi == pool.mapTx.end())\n+                    continue;\n+                nConflictingFees += mi->GetFeesWithDescendants();\n+                nConflictingSize += mi->GetSizeWithDescendants();\n+            }\n+\n+            // Replace?\n+            //\n+            // First of all we can't allow a replacement unless it pays greater\n+            // fees than the transactions it conflicts with - if we did the\n+            // bandwidth used by those conflicting transactions would not be\n+            // paid for\n+            if (nFees < nConflictingFees)\n+            {\n+                return state.DoS(0, error(\"AcceptToMemoryPool: rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                                          hash.ToString(), FormatMoney(nFees), FormatMoney(nConflictingFees)),\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            }\n+\n+            // Secondly in addition to paying more fees than the conflicts the\n+            // new transaction must additionally pay for its own bandwidth.\n+            CAmount nDeltaFees = nFees - nConflictingFees;\n+            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            {\n+                return state.DoS(0,\n+                        error(\"AcceptToMemoryPool: rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                              hash.ToString(),\n+                              FormatMoney(nDeltaFees),\n+                              FormatMoney(::minRelayTxFee.GetFee(nSize))),\n+                        REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            }\n+\n+            // Finally replace only if we end up with a larger fees-per-kb than\n+            // the replacements.\n+            CFeeRate oldFeeRate(nConflictingFees, nConflictingSize);\n+            CFeeRate newFeeRate(nFees, nSize);\n+            if (newFeeRate <= oldFeeRate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#discussion_r42913338",
      "id" : 42913338,
      "original_commit_id" : "b233451b00f5e58ea5cb380aebe0297d436bd1f5",
      "original_position" : 120,
      "path" : "src/main.cpp",
      "position" : 120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6871",
      "updated_at" : "2015-10-23T20:55:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42913338",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=3",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6871#discussion_r42923364"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6871"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42923364"
         }
      },
      "body" : "So, you mean the scenario where we have a high fee-rate transaction that is spent by one or more low fee-rate transactions? For instance suppose we have two transactions in our mempool: tx1a, 1KB w/ 1mBTC fee, which is spent by tx2, 10KB w/ 1mBTC fee. We get tx1b, 10KB w/ 2.1mBTC fee. Since the overall feerate of tx1b is higher than tx1a+tx2, it'll be accepted, even though a miner might have rather mined tx1a instead, ignoring tx2 (for now).\r\n\r\nI agree that's less than optimal. If we make the assumption that there's always more demand for blockchain space than supply, it might be reasonable for the replacement logic criteria to be whether or not we're increasing the fee-rate of any subset of the mempool. (while still paying more fees than the replaced transactions)\r\n\r\nWithout taking CPFP into account, you could simply use the same kind of priority heap logic as in CreateNewBlock() on the list of transactions that would be replaced by the new transaction. You'd iterate through the heap from highest priority to lowest, stopping once you had found as many bytes worth of transactions as the candidate replacement. If the fee-rate of the replacement is higher than the fee-rate of those transactions, accept the replacement into the mempool.\r\n\r\nTo take CPFP into account... Thinking about it more the mempool package tracking is probably backwards from what we want. Right now it tracks descendants, when really what we want to know is \"what's the total fee-rate if I mine this transaction, and all ancestors?\" If we kept track of \"packages\" that way, we'd be able to do the comparison by determining if the total fee-rate of the new package created by the replacement is higher than the fee-rates of all the packages invalidated by it. I actually did some work on something along these lines a few years ago, though didn't finish it - the implementation is a lot simpler now that we have strict ancestor limits. (when limiting, just throw away the tx associated with the lowest fee-rate package, which is guaranteed to have no descendants)\r\n\r\nFor now though I'd be inclined to merge this PR as-is, as all the above options are pretty complex. I also don't see any way this code could be used in an DoS attack.",
      "commit_id" : "b233451b00f5e58ea5cb380aebe0297d436bd1f5",
      "created_at" : "2015-10-23T23:03:07Z",
      "diff_hunk" : "@@ -932,6 +959,85 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"too-long-mempool-chain\", false, errString);\n         }\n \n+        // A transaction that spends outputs that would be replaced by it is invalid. Now\n+        // that we have the set of all ancestors we can detect this\n+        // pathological case by making sure setConflicts and setAncestors don't\n+        // intersect.\n+        BOOST_FOREACH(CTxMemPool::txiter ancestorIt, setAncestors)\n+        {\n+            const uint256 hashAncestor = ancestorIt->GetTx().GetHash();\n+            if (setConflicts.count(hashAncestor))\n+            {\n+                return state.DoS(10, error(\"AcceptToMemoryPool: %s spends conflicting transaction %s\",\n+                                           hash.ToString(),\n+                                           hashAncestor.ToString()),\n+                                 REJECT_INVALID, \"bad-txns-spends-conflicting-tx\");\n+            }\n+        }\n+\n+        // Check if it's economically rational to mine this transaction rather\n+        // than the ones it replaces.\n+        CAmount nConflictingFees = 0;\n+        size_t nConflictingSize = 0;\n+        if (setConflicts.size())\n+        {\n+            LOCK(pool.cs);\n+\n+            // Check if it's economically rational to mine this transaction\n+            // rather than the ones it replaces. For efficiency we simply sum\n+            // up the pre-calculated fees/size-with-descendants values from the\n+            // mempool package tracking; this does mean the pathological case\n+            // of diamond tx graphs will be overcounted.\n+            BOOST_FOREACH(const uint256 hashConflicting, setConflicts)\n+            {\n+                CTxMemPool::txiter mi = pool.mapTx.find(hashConflicting);\n+                if (mi == pool.mapTx.end())\n+                    continue;\n+                nConflictingFees += mi->GetFeesWithDescendants();\n+                nConflictingSize += mi->GetSizeWithDescendants();\n+            }\n+\n+            // Replace?\n+            //\n+            // First of all we can't allow a replacement unless it pays greater\n+            // fees than the transactions it conflicts with - if we did the\n+            // bandwidth used by those conflicting transactions would not be\n+            // paid for\n+            if (nFees < nConflictingFees)\n+            {\n+                return state.DoS(0, error(\"AcceptToMemoryPool: rejecting replacement %s, less fees than conflicting txs; %s < %s\",\n+                                          hash.ToString(), FormatMoney(nFees), FormatMoney(nConflictingFees)),\n+                                 REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            }\n+\n+            // Secondly in addition to paying more fees than the conflicts the\n+            // new transaction must additionally pay for its own bandwidth.\n+            CAmount nDeltaFees = nFees - nConflictingFees;\n+            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            {\n+                return state.DoS(0,\n+                        error(\"AcceptToMemoryPool: rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n+                              hash.ToString(),\n+                              FormatMoney(nDeltaFees),\n+                              FormatMoney(::minRelayTxFee.GetFee(nSize))),\n+                        REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            }\n+\n+            // Finally replace only if we end up with a larger fees-per-kb than\n+            // the replacements.\n+            CFeeRate oldFeeRate(nConflictingFees, nConflictingSize);\n+            CFeeRate newFeeRate(nFees, nSize);\n+            if (newFeeRate <= oldFeeRate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6871#discussion_r42923364",
      "id" : 42923364,
      "original_commit_id" : "b233451b00f5e58ea5cb380aebe0297d436bd1f5",
      "original_position" : 120,
      "path" : "src/main.cpp",
      "position" : 120,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6871",
      "updated_at" : "2015-10-23T23:03:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/42923364",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7042?v=3",
         "events_url" : "https://api.github.com/users/petertodd/events{/privacy}",
         "followers_url" : "https://api.github.com/users/petertodd/followers",
         "following_url" : "https://api.github.com/users/petertodd/following{/other_user}",
         "gists_url" : "https://api.github.com/users/petertodd/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/petertodd",
         "id" : 7042,
         "login" : "petertodd",
         "organizations_url" : "https://api.github.com/users/petertodd/orgs",
         "received_events_url" : "https://api.github.com/users/petertodd/received_events",
         "repos_url" : "https://api.github.com/users/petertodd/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/petertodd/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/petertodd"
      }
   }
]
