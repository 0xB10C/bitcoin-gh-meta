[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r617291541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617291541"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Consider doing the filtering (`grep`, `cut`) in Python instead to make the script easier to read and maintain. In the Python code a comment could be added that `:1:` is used to make sure only shebangs on the first line are considered.",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-21T08:01:38Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r617291541",
      "id" : 617291541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzI5MTU0MQ==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 640741290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617291541",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r617292317"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617292317"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: `file` is a Python builtin. Consider using `filename/filenames` instead of `file/files` :)",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-21T08:02:51Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for file in files:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r617292317",
      "id" : 617292317,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzI5MjMxNw==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 640741290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617292317",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r617297965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617297965"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This requirement holds for shebang files that expected to be executed directly.\r\n\r\nTo avoid this requirement for files that are not expected to be executed directly but still have shebangs consider adding exclusions for:\r\n* `*.py` files that do not contain `if __name__ == '__main__':` or `if __name__ == \"__main__\":`: these are typically modules that are not expected to be executed directly.\r\n* `*.bash` files: these are typically expected to be sourced and not executed directly.\r\n\r\nIt could be argued that shebangs should be removed from these types of files, but I think shebangs could still be useful to allow for language/dialect auto-detection in editors, `shellcheck`, etc.",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-21T08:10:48Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    files = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file) and not filename_exception_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions():\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_extension = os.path.splitext(file)[1].strip(\".\")\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(file, \"rb\").readline().strip()\n+\n+            # For any file with executable permissions the first line must contain a shebang\n+            if shebang[:2] != b\"#!\":\n+                print(\n+                    f\"\"\"File \"{file}\" has permission {ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" to make it non-executable.\"\"\"\n+                )\n+                exit_code = 1\n+\n+            # For certain file extensions that have been defined, we also check that the shebang conforms to a specific\n+            # allowable set of shebangs\n+            if file_extension in ALLOWED_EXECUTABLE_SHEBANG.keys():\n+                if shebang not in ALLOWED_EXECUTABLE_SHEBANG[file_extension]:\n+                    print(\n+                        f\"\"\"File \"{file}\" is missing expected shebang \"\"\"\n+                        + \" or \".join(\n+                            [x.decode(\"utf-8\") for x in ALLOWED_EXECUTABLE_SHEBANG[file_extension]]\n+                        )\n+                    )\n+\n+        elif file_perms == ALLOWED_PERMISSION_NON_EXECUTABLES:\n+            continue\n+        else:\n+            print(\n+                f\"\"\"File '{file}' has unexpected permission {file_perms}. Do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" (if non-executable) or \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (if executable).\"\"\"\n+            )\n+            exit_code = 1\n+\n+    return exit_code\n+\n+\n+def check_shebang_file_permissions():\n+    \"\"\"\n+    Checks every file that contains a shebang line to ensure it has an executable permission\n+    \"\"\"\n+    files = check_output(CMD_SHEBANG_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+        if file_perms != ALLOWED_PERMISSION_EXECUTABLES:\n+            print(\n+                f\"\"\"File \"{file}\" contains a shebang line, but has the file permission {file_perms} instead of the expected executable permission {ALLOWED_PERMISSION_EXECUTABLES}. Do \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (or remove the shebang line).\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r617297965",
      "id" : 617297965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzI5Nzk2NQ==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 640741290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617297965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21515 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-21T17:33:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#issuecomment-824235661",
      "id" : 824235661,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21740",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNDIzNTY2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-21T17:33:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/824235661",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618047414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618047414"
         }
      },
      "author_association" : "NONE",
      "body" : "updated to move the filtering into python :)",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T03:03:05Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618047414",
      "id" : 618047414,
      "in_reply_to_id" : 617291541,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODA0NzQxNA==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 641739593,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618047414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618047440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618047440"
         }
      },
      "author_association" : "NONE",
      "body" : "good call, updated",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T03:03:12Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for file in files:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618047440",
      "id" : 618047440,
      "in_reply_to_id" : 617292317,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODA0NzQ0MA==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 39,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 641739621,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618047440",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618048302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618048302"
         }
      },
      "author_association" : "NONE",
      "body" : "Updated. I wonder if some other file types should also be skipped along with `*bash`? I notice the test is failing for some files like `contrib/init/bitcoind.init`, `contrib/init/bitcoind.openrc`, `contrib/devtools/split-debug.sh.in` and I'm thinking they might fit into the same category of files which are sourced but not executed?\r\n\r\nThere is also quite a few `.sh` files in `ci/test/` like `ci/test/00_setup_env_android.sh` which fail the test, but I'm not sure if those really should be forced to be executable or not?\r\n\r\nThanks very much for the initial review and feedback :) ",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T03:06:12Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    files = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file) and not filename_exception_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions():\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_extension = os.path.splitext(file)[1].strip(\".\")\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(file, \"rb\").readline().strip()\n+\n+            # For any file with executable permissions the first line must contain a shebang\n+            if shebang[:2] != b\"#!\":\n+                print(\n+                    f\"\"\"File \"{file}\" has permission {ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" to make it non-executable.\"\"\"\n+                )\n+                exit_code = 1\n+\n+            # For certain file extensions that have been defined, we also check that the shebang conforms to a specific\n+            # allowable set of shebangs\n+            if file_extension in ALLOWED_EXECUTABLE_SHEBANG.keys():\n+                if shebang not in ALLOWED_EXECUTABLE_SHEBANG[file_extension]:\n+                    print(\n+                        f\"\"\"File \"{file}\" is missing expected shebang \"\"\"\n+                        + \" or \".join(\n+                            [x.decode(\"utf-8\") for x in ALLOWED_EXECUTABLE_SHEBANG[file_extension]]\n+                        )\n+                    )\n+\n+        elif file_perms == ALLOWED_PERMISSION_NON_EXECUTABLES:\n+            continue\n+        else:\n+            print(\n+                f\"\"\"File '{file}' has unexpected permission {file_perms}. Do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" (if non-executable) or \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (if executable).\"\"\"\n+            )\n+            exit_code = 1\n+\n+    return exit_code\n+\n+\n+def check_shebang_file_permissions():\n+    \"\"\"\n+    Checks every file that contains a shebang line to ensure it has an executable permission\n+    \"\"\"\n+    files = check_output(CMD_SHEBANG_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+        if file_perms != ALLOWED_PERMISSION_EXECUTABLES:\n+            print(\n+                f\"\"\"File \"{file}\" contains a shebang line, but has the file permission {file_perms} instead of the expected executable permission {ALLOWED_PERMISSION_EXECUTABLES}. Do \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (or remove the shebang line).\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618048302",
      "id" : 618048302,
      "in_reply_to_id" : 617297965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODA0ODMwMg==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 641740601,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618048302",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618483138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618483138"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I wonder is `\"\"\"` required here or would `\"` suffice?",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T15:00:47Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!'\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618483138",
      "id" : 618483138,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODQ4MzEzOA==",
      "original_commit_id" : "886315ff36730db6da1cf97b0af0fc66b11e0585",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642314272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618483138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618511312"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618511312"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Out of curiosity: Would it make sense to replace `strip()` with `rstrip()` (https://docs.python.org/3/library/stdtypes.html?highlight=rstrip#str.rstrip)?\r\n\r\nJust for fun: There is still one very specific case where this does not work (I hope I'm not missing something): You can add a file like this `git add test/util/zzz.py  ` (note the trailing whitespace) and `strip()` will make sure that `test/util/zzz.py` will be processed and not `test/util/zzz.py  `. I think your code is fine but if it can be improved wrt robustness I'm all in (possibly split first and remove trailing empty entries?)",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T15:34:14Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!'\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618511312",
      "id" : 618511312,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUxMTMxMg==",
      "original_commit_id" : "886315ff36730db6da1cf97b0af0fc66b11e0585",
      "original_line" : 55,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642353320,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618511312",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618527730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618527730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe the `strip()` here is not correct. I don't think that you can put whitespace before shebang. \r\n\r\nIt's a question whether one should allow whitespace after shebank AFAIK it's allowed but ... It may be for the best simply remove `.strip()`.\r\n\r\nJust for fun: https://unix.stackexchange.com/questions/276751/is-space-allowed-between-and-bin-bash-in-shebang",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T15:54:09Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!'\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename) and not filename_exception_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions():\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for filename in filenames:\n+        file_extension = os.path.splitext(filename)[1].strip(\".\")\n+        file_perms = int(oct(os.stat(filename).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(filename, \"rb\").readline().strip()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618527730",
      "id" : 618527730,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODUyNzczMA==",
      "original_commit_id" : "886315ff36730db6da1cf97b0af0fc66b11e0585",
      "original_line" : 81,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642375513,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618527730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618676151"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618676151"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Updated. I wonder if some other file types should also be skipped along with `*bash`? I notice the test is failing for some files like `contrib/init/bitcoind.init`, `contrib/init/bitcoind.openrc`, `contrib/devtools/split-debug.sh.in` and I'm thinking they might fit into the same category of files which are sourced but not executed?\r\n\r\nSounds reasonable. Skipping the requirement for `*.{init,openrc,sh.in}` should be fine.\r\n\r\n> There is also quite a few `.sh` files in `ci/test/` like `ci/test/00_setup_env_android.sh` which fail the test, but I'm not sure if those really should be forced to be executable or not?\r\n\r\nPerhaps we should simply make these executable to avoid the complexity of making the `+x` requirement depend also on directory (in addition to `#!` presence and suffix).",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T19:19:22Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    files = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file) and not filename_exception_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions():\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_extension = os.path.splitext(file)[1].strip(\".\")\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(file, \"rb\").readline().strip()\n+\n+            # For any file with executable permissions the first line must contain a shebang\n+            if shebang[:2] != b\"#!\":\n+                print(\n+                    f\"\"\"File \"{file}\" has permission {ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" to make it non-executable.\"\"\"\n+                )\n+                exit_code = 1\n+\n+            # For certain file extensions that have been defined, we also check that the shebang conforms to a specific\n+            # allowable set of shebangs\n+            if file_extension in ALLOWED_EXECUTABLE_SHEBANG.keys():\n+                if shebang not in ALLOWED_EXECUTABLE_SHEBANG[file_extension]:\n+                    print(\n+                        f\"\"\"File \"{file}\" is missing expected shebang \"\"\"\n+                        + \" or \".join(\n+                            [x.decode(\"utf-8\") for x in ALLOWED_EXECUTABLE_SHEBANG[file_extension]]\n+                        )\n+                    )\n+\n+        elif file_perms == ALLOWED_PERMISSION_NON_EXECUTABLES:\n+            continue\n+        else:\n+            print(\n+                f\"\"\"File '{file}' has unexpected permission {file_perms}. Do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" (if non-executable) or \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (if executable).\"\"\"\n+            )\n+            exit_code = 1\n+\n+    return exit_code\n+\n+\n+def check_shebang_file_permissions():\n+    \"\"\"\n+    Checks every file that contains a shebang line to ensure it has an executable permission\n+    \"\"\"\n+    files = check_output(CMD_SHEBANG_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+        if file_perms != ALLOWED_PERMISSION_EXECUTABLES:\n+            print(\n+                f\"\"\"File \"{file}\" contains a shebang line, but has the file permission {file_perms} instead of the expected executable permission {ALLOWED_PERMISSION_EXECUTABLES}. Do \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (or remove the shebang line).\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618676151",
      "id" : 618676151,
      "in_reply_to_id" : 617297965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NjE1MQ==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642585082,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618676151",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618815019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618815019"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks, updated :)",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T23:25:56Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!'\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618815019",
      "id" : 618815019,
      "in_reply_to_id" : 618483138,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxNTAxOQ==",
      "original_commit_id" : "886315ff36730db6da1cf97b0af0fc66b11e0585",
      "original_line" : 17,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642770020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618815019",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618817217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618817217"
         }
      },
      "author_association" : "NONE",
      "body" : "Great catch!\r\n\r\nI've updated the logic to not use a `strip()` at all, and instead split on the newlines and then remove the trailing empty element, as you suggested. I chose to do this using a list comprehension filtering for empty list elements, rather than a `.pop()` of the last element, as it seemed slightly more robust, but can change it to a `pop()` if I'm overthinking it.\r\n\r\nI tested that this does now catch files with trailing whitespace:\r\n```bash\r\nFile \"test/util/rpcauth-test.py \" does not not match the allowed filename regexp ('^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$').\r\n```",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T23:32:23Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!'\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618817217",
      "id" : 618817217,
      "in_reply_to_id" : 618511312,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxNzIxNw==",
      "original_commit_id" : "886315ff36730db6da1cf97b0af0fc66b11e0585",
      "original_line" : 55,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642772517,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618817217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618817864"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618817864"
         }
      },
      "author_association" : "NONE",
      "body" : "Great catch, thanks.\r\n\r\nI updated this to use `rstrip(b\"\\n\")` to remove only the trailing newline",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T23:34:23Z",
      "diff_hunk" : "@@ -0,0 +1,160 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!'\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename) and not filename_exception_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions():\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for filename in filenames:\n+        file_extension = os.path.splitext(filename)[1].strip(\".\")\n+        file_perms = int(oct(os.stat(filename).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(filename, \"rb\").readline().strip()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618817864",
      "id" : 618817864,
      "in_reply_to_id" : 618527730,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxNzg2NA==",
      "original_commit_id" : "886315ff36730db6da1cf97b0af0fc66b11e0585",
      "original_line" : 81,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642773308,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618817864",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618819108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618819108"
         }
      },
      "author_association" : "NONE",
      "body" : "Thanks! updated the condition to skip the requirement for `*.{init,openrc,sh.in}` files.\r\n\r\nFor the remaining [files failing the test](https://github.com/bitcoin/bitcoin/pull/21740/checks), what would be the correct way to go about updating those to comply with the test? Should it be a second commit on this PR?\r\n\r\nThanks again for the review and guidance.",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-22T23:37:57Z",
      "diff_hunk" : "@@ -0,0 +1,141 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"\"\"git grep --full-name --line-number -I '^#!' | grep :1: | cut -d \":\" -f 1\"\"\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def check_all_filenames():\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames():\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    files = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for file in files:\n+        if not filename_regex.match(file) and not filename_exception_regex.match(file):\n+            print(\n+                f\"\"\"File \"{file}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions():\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    files = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_extension = os.path.splitext(file)[1].strip(\".\")\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(file, \"rb\").readline().strip()\n+\n+            # For any file with executable permissions the first line must contain a shebang\n+            if shebang[:2] != b\"#!\":\n+                print(\n+                    f\"\"\"File \"{file}\" has permission {ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" to make it non-executable.\"\"\"\n+                )\n+                exit_code = 1\n+\n+            # For certain file extensions that have been defined, we also check that the shebang conforms to a specific\n+            # allowable set of shebangs\n+            if file_extension in ALLOWED_EXECUTABLE_SHEBANG.keys():\n+                if shebang not in ALLOWED_EXECUTABLE_SHEBANG[file_extension]:\n+                    print(\n+                        f\"\"\"File \"{file}\" is missing expected shebang \"\"\"\n+                        + \" or \".join(\n+                            [x.decode(\"utf-8\") for x in ALLOWED_EXECUTABLE_SHEBANG[file_extension]]\n+                        )\n+                    )\n+\n+        elif file_perms == ALLOWED_PERMISSION_NON_EXECUTABLES:\n+            continue\n+        else:\n+            print(\n+                f\"\"\"File '{file}' has unexpected permission {file_perms}. Do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {file}\" (if non-executable) or \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (if executable).\"\"\"\n+            )\n+            exit_code = 1\n+\n+    return exit_code\n+\n+\n+def check_shebang_file_permissions():\n+    \"\"\"\n+    Checks every file that contains a shebang line to ensure it has an executable permission\n+    \"\"\"\n+    files = check_output(CMD_SHEBANG_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for file in files:\n+        file_perms = int(oct(os.stat(file).st_mode)[-3:])\n+        if file_perms != ALLOWED_PERMISSION_EXECUTABLES:\n+            print(\n+                f\"\"\"File \"{file}\" contains a shebang line, but has the file permission {file_perms} instead of the expected executable permission {ALLOWED_PERMISSION_EXECUTABLES}. Do \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {file}\" (or remove the shebang line).\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r618819108",
      "id" : 618819108,
      "in_reply_to_id" : 617297965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODgxOTEwOA==",
      "original_commit_id" : "d0016b1be5b173e3fc70df37d027e5b40f718270",
      "original_line" : 122,
      "original_position" : 122,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : null,
      "pull_request_review_id" : 642774657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T00:13:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618819108",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Can you update the commit message to use the following format:\r\n```bash\r\nprefix: title\r\n\r\ncommit body\r\n```\r\n\r\ni.e:\r\n```bash\r\ntest: add new python linter to check file names and permissions\r\n\r\nexplain what is being done in this commit\r\nexplain some more etc\r\n```\r\n\r\nAlso, for this to me merged. Obviously all [linters](https://github.com/bitcoin/bitcoin/pull/21740/checks?check_run_id=2415315623) / CI need to be passing. So if changes to other files need to be made, they will have to be done either in preceding commits, or as part of the same change.",
      "created_at" : "2021-04-23T04:22:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#issuecomment-825375050",
      "id" : 825375050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21740",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTM3NTA1MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T04:23:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825375050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> Can you update the commit message to use the following format:\r\n> \r\nThanks @fanquake  - I've updated the commit messages to the standard format\r\n\r\n> Also, for this to me merged. Obviously all [linters](https://github.com/bitcoin/bitcoin/pull/21740/checks?check_run_id=2415315623) / CI need to be passing. So if changes to other files need to be made, they will have to be done either in preceding commits, or as part of the same change.\r\n\r\nDone - added a new commit before the main commit which updates the permissions on files which are failing the new test.\r\n\r\nWould appreciate any additional review and feedback :) \r\n",
      "created_at" : "2021-04-24T00:19:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#issuecomment-826002217",
      "id" : 826002217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21740",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNjAwMjIxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-24T00:19:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826002217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8359865?v=4",
         "events_url" : "https://api.github.com/users/windsok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/windsok/followers",
         "following_url" : "https://api.github.com/users/windsok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/windsok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/windsok",
         "id" : 8359865,
         "login" : "windsok",
         "node_id" : "MDQ6VXNlcjgzNTk4NjU=",
         "organizations_url" : "https://api.github.com/users/windsok/orgs",
         "received_events_url" : "https://api.github.com/users/windsok/received_events",
         "repos_url" : "https://api.github.com/users/windsok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/windsok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/windsok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/windsok"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "cr ACK 52c3fb3c9d4145819bd0fe839ba89482e73fce99: patch looks correct!\r\n\r\nNice first-time contribution @windsok. I hope to see more contributions from you in the future. Warm welcome as a contributor!",
      "created_at" : "2021-04-24T07:14:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#issuecomment-826048425",
      "id" : 826048425,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21740",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNjA0ODQyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-24T07:14:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826048425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@windsok This PR removes `test/lint/lint-shebang.sh` and `test/lint/lint-filenames.sh` and adds `test/lint/lint-filenames-permissions.sh` and adds `test/lint/lint-filenames-permissions.py`. \r\n\r\nThe new file names are confusing to me as they do something different than they hint. Would it make sense to you to rename them from \"lint-filenames-permissions.{py|sh}\" to \"lint-files.{py|sh}\" or something better?\r\n\r\n**Edit:**\r\n\r\n* This PR modifies `https://github.com/bitcoin/bitcoin/blob/master/contrib/gitian-descriptors/assign_DISTNAME` permissions but it may be actually correct to add `.sh` extension - I'm not sure. Just mentioning it here so that others double check correctness of the change.",
      "created_at" : "2021-04-24T07:56:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#issuecomment-826053441",
      "id" : 826053441,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21740",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNjA1MzQ0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-24T08:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826053441",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r619607936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619607936"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Given that `failed_tests` number is computed, one can probably print the number of failed tests too.",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-24T08:05:11Z",
      "diff_hunk" : "@@ -0,0 +1,182 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+from typing import Optional, NoReturn\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"git grep --full-name --line-number -I '^#!'\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def get_filename_extension(filename: str) -> Optional[str]:\n+    \"\"\"\n+    Returns the full file extension for a given filename string.\n+    eg:\n+    'ci/lint_run_all.sh' -> 'sh'\n+    'ci/retry/retry' -> None\n+    'contrib/devtools/split-debug.sh.in' -> 'sh.in'\n+    \"\"\"\n+    filename_parts = filename.split(os.extsep, 1)\n+    try:\n+        return filename_parts[1]\n+    except IndexError:\n+        return None\n+\n+\n+def check_all_filenames() -> int:\n+    \"\"\"\n+    Checks every file in the repository against an allowed regexp to make sure only lowercase or uppercase\n+    alphanumerics (a-zA-Z0-9), underscores (_), hyphens (-), at (@) and dots (.) are used in repository filenames.\n+    \"\"\"\n+    # We avoid using rstrip() to ensure we catch filenames which accidentally include trailing whitespace\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").split(\"\\n\")\n+    filenames = [filename for filename in filenames if filename != \"\"]  # removes the trailing empty list element\n+\n+    filename_regex = re.compile(ALLOWED_FILENAME_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed filename regexp ('{ALLOWED_FILENAME_REGEXP}').\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_source_filenames() -> int:\n+    \"\"\"\n+    Checks only source files (*.cpp, *.h, *.py, *.sh) against a stricter allowed regexp to make sure only lowercase\n+    alphanumerics (a-z0-9), underscores (_), hyphens (-) and dots (.) are used in source code filenames.\n+\n+    Additionally there is an exception regexp for directories or files which are excepted from matching this regexp.\n+    \"\"\"\n+    # We avoid using rstrip() to ensure we catch filenames which accidentally include trailing whitespace\n+    filenames = check_output(CMD_SOURCE_FILES, shell=True).decode(\"utf8\").split(\"\\n\")\n+    filenames = [filename for filename in filenames if filename != \"\"]  # removes the trailing empty list element\n+\n+    filename_regex = re.compile(ALLOWED_SOURCE_FILENAME_REGEXP)\n+    filename_exception_regex = re.compile(ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP)\n+    exit_code = 0\n+    for filename in filenames:\n+        if not filename_regex.match(filename) and not filename_exception_regex.match(filename):\n+            print(\n+                f\"\"\"File \"{filename}\" does not not match the allowed source filename regexp ('{ALLOWED_SOURCE_FILENAME_REGEXP}'), or the exception regexp ({ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP}).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def check_all_file_permissions() -> int:\n+    \"\"\"\n+    Checks all files in the repository match an allowed executable or non-executable file permission octal.\n+\n+    Additionally checks that for executable files, the file contains a shebang line\n+    \"\"\"\n+    filenames = check_output(CMD_ALL_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+    exit_code = 0\n+    for filename in filenames:\n+        file_extension = get_filename_extension(filename)\n+        file_perms = int(oct(os.stat(filename).st_mode)[-3:])\n+\n+        if file_perms == ALLOWED_PERMISSION_EXECUTABLES:\n+            shebang = open(filename, \"rb\").readline().rstrip(b\"\\n\")\n+\n+            # For any file with executable permissions the first line must contain a shebang\n+            if shebang[:2] != b\"#!\":\n+                print(\n+                    f\"\"\"File \"{filename}\" has permission {ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {filename}\" to make it non-executable.\"\"\"\n+                )\n+                exit_code = 1\n+\n+            # For certain file extensions that have been defined, we also check that the shebang conforms to a specific\n+            # allowable set of shebangs\n+            if file_extension in ALLOWED_EXECUTABLE_SHEBANG.keys():\n+                if shebang not in ALLOWED_EXECUTABLE_SHEBANG[file_extension]:\n+                    print(\n+                        f\"\"\"File \"{filename}\" is missing expected shebang \"\"\"\n+                        + \" or \".join(\n+                            [x.decode(\"utf-8\") for x in ALLOWED_EXECUTABLE_SHEBANG[file_extension]]\n+                        )\n+                    )\n+                    exit_code = 1\n+\n+        elif file_perms == ALLOWED_PERMISSION_NON_EXECUTABLES:\n+            continue\n+        else:\n+            print(\n+                f\"\"\"File \"{filename}\" has unexpected permission {file_perms}. Do \"chmod {ALLOWED_PERMISSION_NON_EXECUTABLES} {filename}\" (if non-executable) or \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {filename}\" (if executable).\"\"\"\n+            )\n+            exit_code = 1\n+\n+    return exit_code\n+\n+\n+def check_shebang_file_permissions() -> int:\n+    \"\"\"\n+    Checks every file that contains a shebang line to ensure it has an executable permission\n+    \"\"\"\n+    filenames = check_output(CMD_SHEBANG_FILES, shell=True).decode(\"utf8\").strip().split(\"\\n\")\n+\n+    # The git grep command we use returns files which contain a shebang on any line within the file\n+    # so we need to filter the list to only files with the shebang on the first line\n+    filenames = [filename.split(\":1:\")[0] for filename in filenames if \":1:\" in filename]\n+\n+    exit_code = 0\n+    for filename in filenames:\n+        file_extension = get_filename_extension(filename)\n+        file_perms = int(oct(os.stat(filename).st_mode)[-3:])\n+\n+        if file_perms != ALLOWED_PERMISSION_EXECUTABLES:\n+            # These file types are typically expected to be sourced and not executed directly\n+            if file_extension in [\"bash\", \"init\", \"openrc\", \"sh.in\"]:\n+                continue\n+\n+            # *.py files which don't contain an `if __name__ == '__main__'` are not expected to be executed directly\n+            if file_extension == \"py\":\n+                file_data = open(filename, \"r\", encoding=\"utf8\").read()\n+                if not re.search(\"\"\"if __name__ == ['\"]__main__['\"]:\"\"\", file_data):\n+                    continue\n+\n+            print(\n+                f\"\"\"File \"{filename}\" contains a shebang line, but has the file permission {file_perms} instead of the expected executable permission {ALLOWED_PERMISSION_EXECUTABLES}. Do \"chmod {ALLOWED_PERMISSION_EXECUTABLES} {filename}\" (or remove the shebang line).\"\"\"\n+            )\n+            exit_code = 1\n+    return exit_code\n+\n+\n+def main() -> NoReturn:\n+    failed_tests = 0\n+    failed_tests += check_all_filenames()\n+    failed_tests += check_source_filenames()\n+    failed_tests += check_all_file_permissions()\n+    failed_tests += check_shebang_file_permissions()\n+\n+    if failed_tests:\n+        sys.exit(1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r619607936",
      "id" : 619607936,
      "line" : 176,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTYwNzkzNg==",
      "original_commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "original_line" : 176,
      "original_position" : 176,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : 176,
      "pull_request_review_id" : 644006100,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T08:05:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619607936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r619611147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619611147"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think people mostly do something like this https://source.dot.net/#System.Private.CoreLib/Path.cs,467ebc0e33e0820c to find a file extension. That is to look for the first `os.extsep` but not from the beginning of the string (filename) but from the end of the filename.\r\n\r\nA counter-example can be `'contrib/devtools/split-debug.my.nice.helper.sh.in'` where you would return `my.nice.helper.sh.in`.\r\n\r\nYour code may be perfectly fine for what you want to achieve in this PR, yet I would be hesitant to use `get_filename_extension` name. \r\n\r\nI have no clear suggestion here, letting it up to you to decide. :)",
      "commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "created_at" : "2021-04-24T08:17:04Z",
      "diff_hunk" : "@@ -0,0 +1,182 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"\n+This checks that all files in the repository have correct filenames and permissions\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+from subprocess import check_output\n+from typing import Optional, NoReturn\n+\n+CMD_ALL_FILES = \"git ls-files --full-name\"\n+CMD_SOURCE_FILES = 'git ls-files --full-name -- \"*.[cC][pP][pP]\" \"*.[hH]\" \"*.[pP][yY]\" \"*.[sS][hH]\"'\n+CMD_SHEBANG_FILES = \"git grep --full-name --line-number -I '^#!'\"\n+ALLOWED_FILENAME_REGEXP = \"^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$\"\n+ALLOWED_SOURCE_FILENAME_REGEXP = \"^[a-z0-9_./-]+$\"\n+ALLOWED_SOURCE_FILENAME_EXCEPTION_REGEXP = (\n+    \"^src/(secp256k1/|univalue/|test/fuzz/FuzzedDataProvider.h)\"\n+)\n+ALLOWED_PERMISSION_NON_EXECUTABLES = 644\n+ALLOWED_PERMISSION_EXECUTABLES = 755\n+ALLOWED_EXECUTABLE_SHEBANG = {\n+    \"py\": [b\"#!/usr/bin/env python3\"],\n+    \"sh\": [b\"#!/usr/bin/env bash\", b\"#!/bin/sh\"],\n+}\n+\n+\n+def get_filename_extension(filename: str) -> Optional[str]:\n+    \"\"\"\n+    Returns the full file extension for a given filename string.\n+    eg:\n+    'ci/lint_run_all.sh' -> 'sh'\n+    'ci/retry/retry' -> None\n+    'contrib/devtools/split-debug.sh.in' -> 'sh.in'\n+    \"\"\"\n+    filename_parts = filename.split(os.extsep, 1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#discussion_r619611147",
      "id" : 619611147,
      "line" : 40,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxOTYxMTE0Nw==",
      "original_commit_id" : "52c3fb3c9d4145819bd0fe839ba89482e73fce99",
      "original_line" : 40,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "test/lint/lint-filenames-permissions.py",
      "position" : 40,
      "pull_request_review_id" : 644010999,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21740",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-24T08:17:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/619611147",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--a722867cd34abeea1fadc8d60700f111-->\n### Gitian builds\n\n| File | commit 66fd3b28e85c167f3955b5603496daf8d91abcad<br>(master) | commit b1736ee787f25161167bbf5c6157b12722db47e2<br>(master and this pull) |\n|--|--|--|\n| *-aarch64-linux-gnu-debug.tar.gz | [`80a2e22b5f69afc4...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-aarch64-linux-gnu-debug.tar.gz) | [`b512eab6a6d3af92...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-aarch64-linux-gnu-debug.tar.gz) |\n| *-aarch64-linux-gnu.tar.gz | [`117a227cc612557d...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-aarch64-linux-gnu.tar.gz) | [`6410cd868334b811...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-aarch64-linux-gnu.tar.gz) |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`6b15d0a30ff2e0b2...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-arm-linux-gnueabihf-debug.tar.gz) | [`e9e75200f314ed56...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-arm-linux-gnueabihf-debug.tar.gz) |\n| *-arm-linux-gnueabihf.tar.gz | [`b759783b6d2c6aa9...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-arm-linux-gnueabihf.tar.gz) | [`8a6bfed174221a9c...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-arm-linux-gnueabihf.tar.gz) |\n| *-osx-unsigned.dmg | [`6d1874234bf7bef6...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-osx-unsigned.dmg) | [`755d508fd8f16868...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-osx-unsigned.dmg) |\n| *-osx64.tar.gz | [`ac898902931a4d6f...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-osx64.tar.gz) | [`f950ed9d00e6e3be...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-osx64.tar.gz) |\n| *-powerpc64-linux-gnu-debug.tar.gz | [`d9e7d4b910d3f391...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-powerpc64-linux-gnu-debug.tar.gz) | [`73a675e01f87a506...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-powerpc64-linux-gnu-debug.tar.gz) |\n| *-powerpc64-linux-gnu.tar.gz | [`eba7f796f6912526...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-powerpc64-linux-gnu.tar.gz) | [`95cb810149a4fd6e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-powerpc64-linux-gnu.tar.gz) |\n| *-powerpc64le-linux-gnu-debug.tar.gz | [`2d34a44f6299c53b...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-powerpc64le-linux-gnu-debug.tar.gz) | [`b8bf0fce74d5e1fc...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-powerpc64le-linux-gnu-debug.tar.gz) |\n| *-powerpc64le-linux-gnu.tar.gz | [`2a9a14d2d59786d7...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-powerpc64le-linux-gnu.tar.gz) | [`1d9715062899f7f9...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-powerpc64le-linux-gnu.tar.gz) |\n| *-riscv64-linux-gnu-debug.tar.gz | [`b4f667f5cf77ce35...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-riscv64-linux-gnu-debug.tar.gz) | [`e8afaa8e8cba6b69...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-riscv64-linux-gnu-debug.tar.gz) |\n| *-riscv64-linux-gnu.tar.gz | [`83e0b92dd3ec0b78...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-riscv64-linux-gnu.tar.gz) | [`522132814b7b6924...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-riscv64-linux-gnu.tar.gz) |\n| *-win64-debug.zip | [`13dfbfd03ba6d45f...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-win64-debug.zip) | [`eb5ee4fd91379cf9...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-win64-debug.zip) |\n| *-win64-setup-unsigned.exe | [`a3ae0c4a5c947fde...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-win64-setup-unsigned.exe) | [`043dc206fdfe06c8...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-win64-setup-unsigned.exe) |\n| *-win64.zip | [`3e9384702a7c8c8f...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-win64.zip) | [`5c823d3854a1fac5...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-win64.zip) |\n| *-x86_64-linux-gnu-debug.tar.gz | [`bd15a51aa9182939...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-x86_64-linux-gnu-debug.tar.gz) | [`9749b2608e5ff431...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-x86_64-linux-gnu-debug.tar.gz) |\n| *-x86_64-linux-gnu.tar.gz | [`c5231c04a5f93086...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c-x86_64-linux-gnu.tar.gz) | [`215f312ca442dcf6...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2-x86_64-linux-gnu.tar.gz) |\n| *.tar.gz | [`cf4bdeb958523ffa...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-66fd3b28e85c.tar.gz) | [`6f1f3858b4f5cf33...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-b1736ee787f2.tar.gz) |\n| bitcoin-core-linux-22-res.yml | [`01197f31e3ed8757...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-core-linux-22-res.yml) | [`ce6c84f232e27191...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-core-linux-22-res.yml) |\n| bitcoin-core-osx-22-res.yml | [`131de68a5994943a...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-core-osx-22-res.yml) | [`e097ffa803d49042...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-core-osx-22-res.yml) |\n| bitcoin-core-win-22-res.yml | [`4781c48870a6432e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/bitcoin-core-win-22-res.yml) | [`5a2119cc06fe3ab3...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-core-win-22-res.yml) |\n| linux-build.log | [`ebbf6d8196cdf868...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/linux-build.log) | [`0d32ccfd1bc342a2...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/linux-build.log) |\n| osx-build.log | [`11949960c32a23f8...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/osx-build.log) | [`921621799f11d113...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/osx-build.log) |\n| win-build.log | [`c1a3698eb8e1adaf...`](https://drahtbot.space/gitian/bitcoin/bitcoin/66fd3b28e85c167f3955b5603496daf8d91abcad/win-build.log) | [`a1e7e47f9f63d20e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/win-build.log) |\n| bitcoin-core-linux-22-res.yml.diff |  | [`a0cb494d0e6cdd1d...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-core-linux-22-res.yml.diff) |\n| bitcoin-core-osx-22-res.yml.diff |  | [`18d6e46c06c8901e...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-core-osx-22-res.yml.diff) |\n| bitcoin-core-win-22-res.yml.diff |  | [`b73f13179a53c47a...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/bitcoin-core-win-22-res.yml.diff) |\n| linux-build.log.diff |  | [`1310d16ef82d4d09...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/linux-build.log.diff) |\n| osx-build.log.diff |  | [`0c91c358865322a9...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/osx-build.log.diff) |\n| win-build.log.diff |  | [`19a2839a59776650...`](https://drahtbot.space/gitian/bitcoin/bitcoin/b1736ee787f25161167bbf5c6157b12722db47e2/win-build.log.diff) |\n\n",
      "created_at" : "2021-04-25T13:51:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21740#issuecomment-826328181",
      "id" : 826328181,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21740",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNjMyODE4MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-25T13:51:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826328181",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   }
]
