[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Perhaps this can be used as a starting point.\r\n\r\nIt should most probably be ported to Python to become portable, maintainable and readable.\r\n\r\nTested under Linux. I don't think it will work under macOS (BSD `file` and `stat` differences), but I don't have any Mac to test on :)\r\n\r\n```bash\r\n#!/bin/bash\r\n\r\nexport LC_ALL=C\r\n\r\nALLOWED_PERMISSION_NON_EXECUTABLES=644\r\nALLOWED_PERMISSION_EXECUTABLES=755\r\nALLOWED_FILENAME_REGEXP='^[a-zA-Z0-9/_.@][a-zA-Z0-9/_.@-]*$'\r\n\r\nset -e\r\n\r\n# cd to root folder of git repo for git ls-files to work properly\r\ncd \"$(dirname $0)/../..\" || exit 1\r\n\r\nREPO_FILES=$(git ls-files)\r\n\r\nif grep -vE \"${ALLOWED_FILENAME_REGEXP}\" <<< \"${REPO_FILES}\"; then\r\n    echo \"^ There exists filenames in the repo which do not match the allowed filename regexp ${ALLOWED_FILENAME_REGEXP}. Failing.\"\r\n    exit 1\r\nfi\r\n\r\nEXIT_CODE=0\r\n\r\nNON_STANDARD_PERMISSION_FILENAME_PAIRS=$(find ${REPO_FILES} \\! -perm ${ALLOWED_PERMISSION_NON_EXECUTABLES} -printf \"%m:%p\\n\")\r\nfor PERMISSION_FILENAME_PAIR in ${NON_STANDARD_PERMISSION_FILENAME_PAIRS}; do\r\n    PERMISSION=$(cut -f1 -d: <<< \"${PERMISSION_FILENAME_PAIR}\")\r\n    FILENAME=$(cut -f2 -d: <<< \"${PERMISSION_FILENAME_PAIR}\")\r\n    if [[ ${PERMISSION} == \"${ALLOWED_PERMISSION_EXECUTABLES}\" ]]; then\r\n        SHEBANG=$(head -c2 \"${FILENAME}\")\r\n        if [[ ${SHEBANG} == \"#!\" ]]; then\r\n            continue\r\n        fi\r\n        echo \"Error: File ${FILENAME} has permission ${ALLOWED_PERMISSION_EXECUTABLES} (executable) and is thus expected to contain a shebang '#!'. Add shebang or do \\\"chmod ${ALLOWED_PERMISSION_NON_EXECUTABLES} ${FILENAME}\\\" to make it non-executable.\"\r\n        EXIT_CODE=1\r\n    else\r\n        echo \"Error: File ${FILENAME} has unexpected permission ${PERMISSION}. Do \\\"chmod ${ALLOWED_PERMISSION_NON_EXECUTABLES} ${FILENAME}\\\" (if non-executable) or \\\"chmod ${ALLOWED_PERMISSION_EXECUTABLES} ${FILENAME}\\\" (if executable).\"\r\n        EXIT_CODE=1\r\n    fi\r\ndone\r\n\r\nexit ${EXIT_CODE}\r\n```",
      "created_at" : "2021-04-19T13:48:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/21729#issuecomment-822480824",
      "id" : 822480824,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21729",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjQ4MDgyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-19T13:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822480824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
