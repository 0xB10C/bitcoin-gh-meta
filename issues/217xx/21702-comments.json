[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #13533 ([tests] Reduced number of validations in tx_validationcache_tests by lucash-dev)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-04-15T19:24:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-820676054",
      "id" : 820676054,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMDY3NjA1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T21:24:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820676054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "concept ACK.",
      "created_at" : "2021-04-19T15:54:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-822579606",
      "id" : 822579606,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyMjU3OTYwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-19T15:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822579606",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/13668451?v=4",
         "events_url" : "https://api.github.com/users/rn-g/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rn-g/followers",
         "following_url" : "https://api.github.com/users/rn-g/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rn-g/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rn-g",
         "id" : 13668451,
         "login" : "rn-g",
         "node_id" : "MDQ6VXNlcjEzNjY4NDUx",
         "organizations_url" : "https://api.github.com/users/rn-g/orgs",
         "received_events_url" : "https://api.github.com/users/rn-g/received_events",
         "repos_url" : "https://api.github.com/users/rn-g/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rn-g/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rn-g/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rn-g"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177"
         }
      },
      "author_association" : "NONE",
      "body" : "As the TODO says, should be improved",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T12:15:07Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625177",
      "id" : 616625177,
      "line" : 1517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNTE3Nw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1517,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 639871313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625177",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9665963?v=4",
         "events_url" : "https://api.github.com/users/pyskell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pyskell/followers",
         "following_url" : "https://api.github.com/users/pyskell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pyskell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pyskell",
         "id" : 9665963,
         "login" : "pyskell",
         "node_id" : "MDQ6VXNlcjk2NjU5NjM=",
         "organizations_url" : "https://api.github.com/users/pyskell/orgs",
         "received_events_url" : "https://api.github.com/users/pyskell/received_events",
         "repos_url" : "https://api.github.com/users/pyskell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pyskell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pyskell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350"
         }
      },
      "author_association" : "NONE",
      "body" : "Can this assert just be moved to the start of the function?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T12:15:19Z",
      "diff_hunk" : "@@ -1804,6 +1905,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616625350",
      "id" : 616625350,
      "line" : 1920,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNTM1MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1920,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 179,
      "pull_request_review_id" : 639871498,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616625350",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9665963?v=4",
         "events_url" : "https://api.github.com/users/pyskell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pyskell/followers",
         "following_url" : "https://api.github.com/users/pyskell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pyskell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pyskell",
         "id" : 9665963,
         "login" : "pyskell",
         "node_id" : "MDQ6VXNlcjk2NjU5NjM=",
         "organizations_url" : "https://api.github.com/users/pyskell/orgs",
         "received_events_url" : "https://api.github.com/users/pyskell/received_events",
         "repos_url" : "https://api.github.com/users/pyskell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pyskell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pyskell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150"
         }
      },
      "author_association" : "NONE",
      "body" : "Minor bike shedding but \"Basic Standard\" and \"Standard Template\" are somewhat confusing terms. Are there non-standard templates?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T12:17:36Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616627150",
      "id" : 616627150,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjYyNzE1MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 201,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 4,
      "pull_request_review_id" : 639873700,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616627150",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/9665963?v=4",
         "events_url" : "https://api.github.com/users/pyskell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pyskell/followers",
         "following_url" : "https://api.github.com/users/pyskell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pyskell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pyskell",
         "id" : 9665963,
         "login" : "pyskell",
         "node_id" : "MDQ6VXNlcjk2NjU5NjM=",
         "organizations_url" : "https://api.github.com/users/pyskell/orgs",
         "received_events_url" : "https://api.github.com/users/pyskell/received_events",
         "repos_url" : "https://api.github.com/users/pyskell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pyskell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pyskell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pyskell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yes; this became a TODO post taproot because we started doing much more aggressive/expensive heuristics, scanning to see if it's a taproot spend. We used to just IIRC always compute all caches.\r\n\r\n\r\nIt's not clear to me the performance benefit of scanning v.s. always computing the hashes @sipa. 50% of transactions are SegWit these days (https://charts.woobull.com/bitcoin-segwit-adoption/), and CTV only does extra non O(1) hashing in the event that it's a transaction that uses non segwit inputs.\r\n\r\nIt'd be also possible to just *never* cache CTV, if the extra work seems not worth it. Or to only cache for single input txns, only cache for txns with a bare script standard CTV, only cache for segwit or has bare CTV, etc. It's kinda hard to say what the optimal caching policy is and it's bikesheddable + non consensus, so I chose to just leave it for now as the extra work is not terrible, and more advanced policies open up the potential for quadratic hashing bugs (e.g., txn has a scriptSig on every input except the CTV one and the CTV one is <H> CTV CTV... and we don't cache).",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T16:34:06Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616853690",
      "id" : 616853690,
      "in_reply_to_id" : 616625177,
      "line" : 1517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg1MzY5MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1517,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 640183576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616853690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These asserts can technically just be deleted looking at the surrounded code, txTo will already be able to deref nullptr from many other functions.\r\n\r\nI put them close to where the deref's actually occur as I think that's best practice, but yes they could go at the start.\r\n\r\nI'd actually be more excited about changing the representation internally to a reference as follow up work so we get rid of all these unchecked derefs...",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T16:40:07Z",
      "diff_hunk" : "@@ -1804,6 +1905,30 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n     return true;\n }\n \n+template <class T>\n+bool GenericTransactionSignatureChecker<T>::CheckStandardTemplateHash(const std::vector<unsigned char>& hash) const\n+{\n+    // Should already be checked before calling...\n+    assert(hash.size() == 32);\n+    if (txdata && txdata->m_bip119_ctv_ready) {\n+        // if nIn == 0, then we've already cached this and can directly check\n+        if (nIn == 0) {\n+            return std::equal(txdata->m_standard_template_single_hash.begin(), txdata->m_standard_template_single_hash.end(), hash.data());\n+        } else {\n+            // otherwise we still have *most* of the hash cached,\n+            // so just re-compute the correct one and compare\n+            assert(txTo != nullptr);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616858194",
      "id" : 616858194,
      "in_reply_to_id" : 616625350,
      "line" : 1920,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg1ODE5NA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1920,
      "original_position" : 179,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 179,
      "pull_request_review_id" : 640192946,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616858194",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes... Perhaps \"standard\" and \"basic\" should be flipped terminology wise, but as is:\r\n\r\n- Standard is the 32 byte argument form interpreted as the StandardTemplateHash defined in this PR\r\n- Basic is the ScriptType that is just a script with a single <h:32> CTV. \r\n\r\nCTV as a NOP is extensible in the future to support different templates via having a different length arg + whatever rules around that you want.\r\n\r\nBasicStandardTemplate is just for enabling relaying of a single special cased barescript type (for congestion control uses). TBH it *could* be dropped from this PR and handled separately, although it makes testing more painful.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-20T16:45:13Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r616863828",
      "id" : 616863828,
      "in_reply_to_id" : 616627150,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjg2MzgyOA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 201,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 4,
      "pull_request_review_id" : 640201332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616863828",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "One last thing on caching: CTV was designed so that if you're expecting to operate the same CTV at diff input indexes, you can cache the sha256 midstate because index is the final field. However, I think that it's relatively rare you'd want CTV scripts at indexes other than 0.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-21T03:24:15Z",
      "diff_hunk" : "@@ -1433,6 +1513,9 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n     // Determine which precomputation-impacting features this transaction uses.\n     bool uses_bip143_segwit = false;\n     bool uses_bip341_taproot = false;\n+    // TODO: Improve this heuristic\n+    bool uses_bip119_ctv = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r617174074",
      "id" : 617174074,
      "in_reply_to_id" : 616625177,
      "line" : 1517,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzE3NDA3NA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 1517,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 111,
      "pull_request_review_id" : 640596808,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617174074",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please enumerate the exact permission flags needed. Whitelist is deprecated",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T18:31:04Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618645483",
      "id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NTQ4Mw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642545443,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618645483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know this is just the tests, but it would be nice to not use floating point",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T18:32:28Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618646394",
      "id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY0NjM5NA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642546676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618646394",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655"
         }
      },
      "author_association" : "MEMBER",
      "body" : "100e6 refers to the COIN constant?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T18:40:42Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618651655",
      "id" : 618651655,
      "in_reply_to_id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY1MTY1NQ==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642546676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618651655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "What's the replacement -- tbh don't know if this is even needed anymore?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:04:37Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618666993",
      "id" : 618666993,
      "in_reply_to_id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY2Njk5Mw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642573083,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618666993",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "yeah I think it kinda has to be floating point because the RPCs use BTC and we have sats... if I used a non float I would truncate?\r\n\r\nBut I can refactor it to be COIN? Or maybe preserve the values as sats for longer and only convert to BTC in one place?",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:06:56Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618668363",
      "id" : 618668363,
      "in_reply_to_id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY2ODM2Mw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642574885,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618668363",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048"
         }
      },
      "author_association" : "MEMBER",
      "body" : "For example `-whitelist=noban@ip`",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:17:45Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675048",
      "id" : 618675048,
      "in_reply_to_id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NTA0OA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642583770,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675048",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is decimal.Decimal",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-22T19:18:09Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing\n+        self.setup_clean_chain = True\n+        self.rpc_timeout = 120\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+    def get_block(self, txs):\n+        self.tip    = self.nodes[0].getbestblockhash()\n+        self.height = self.nodes[0].getblockcount()\n+        block = create_block(int(self.tip, 16), create_coinbase(self.height))\n+        block.vtx.extend(txs)\n+        add_witness_commitment(block)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.solve()\n+        return block.serialize(True).hex(), block.hash\n+    def add_block(self, txs):\n+        block, h = self.get_block(txs)\n+        self.nodes[0].submitblock(block)\n+        assert_equal(self.nodes[0].getbestblockhash(), h)\n+        return h\n+    def fail_block(self, txs, cause = CHECKTEMPLATEVERIFY_ERROR):\n+        block, h = self.get_block(txs)\n+        assert_equal(self.nodes[0].submitblock(block), cause)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.tip)\n+\n+    def run_test(self):\n+\n+        # The goal is to test a number of circumstances and combinations of parameters. Roughly:\n+        #\n+        #   - SegWit OP_CTV\n+        #   - Bare OP_CTV\n+        #   - OP_CTV at vin index 0\n+        #   - OP_CTV at vin index > 0\n+        #   - OP_CTV with scriptSigs set\n+        #   - OP_CTV without scriptSigs set\n+        #   - OP_CTV with multiple inputs\n+        #   - accepting correct parameters\n+        #   - rejecting incorrect parameters\n+        #   - OP_CTV in a tree\n+        #\n+        # A few tests may seem redundant, but it is because they are testing the cached computation of the hash\n+        # at vin index 0\n+\n+        self.nodes[0].add_p2p_connection(P2PInterface())\n+\n+        BLOCKS = 110\n+        self.log.info(\"Mining %d blocks for mature coinbases\", BLOCKS)\n+        self.coinbase_txids = [self.nodes[0].getblock(b)['tx'][0] for b in self.nodes[0].generate(BLOCKS)]\n+\n+        self.log.info(\"Creating setup transactions\")\n+        outputs, script = random_real_outputs_and_script(10)\n+        # Add some fee satoshis\n+        amount = (sum(out.nValue for out in outputs)+200*500) /100e6",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618675290",
      "id" : 618675290,
      "in_reply_to_id" : 618646394,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODY3NTI5MA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 126,
      "original_position" : 126,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642584071,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618675290",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I think CTV is interesting and will likely be a candidate for a future soft fork whether that be a standalone CTV soft fork or a soft fork with a bundle of features. But at least for me I feel it is premature to even look at this with Taproot not yet activated and zero discussion (mere speculation) on the form of the next soft fork after Taproot has (hopefully) activated. I guess there is no harm in opening this but personally I feel it is *extremely* early. I look forward to those discussions on the next soft fork and digging into this at some point in the future though.",
      "created_at" : "2021-04-22T21:49:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825207430",
      "id" : 825207430,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTIwNzQzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-22T21:49:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825207430",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "You're free to review or not review any PR you like whenever you like. No one is \"in charge\" of the roadmap for Bitcoin development. All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\r\n\r\nThis PR is for code review of BIP-119 OP_CTV's implementation. If you wish to discuss Bitcoin Project management please take it to an appropriate venue such as the mailing list.",
      "created_at" : "2021-04-23T01:06:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825312007",
      "id" : 825312007,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTMxMjAwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T01:06:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825312007",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I removed it and it still runs fine... presumably this is helpful during testing if we're trying to connect some sort of malicious peer, but I think I don't need it here.",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-04-23T02:02:09Z",
      "diff_hunk" : "@@ -0,0 +1,289 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test (CheckTemplateVerify)\n+\"\"\"\n+\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.messages import CTransaction, CTxOut, CTxIn, CTxInWitness, COutPoint, sha256\n+from test_framework.p2p import P2PInterface\n+from test_framework.script import CScript, OP_TRUE, OP_CHECKTEMPLATEVERIFY, OP_FALSE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+import random\n+from io import BytesIO\n+from test_framework.address import script_to_p2sh\n+\n+CHECKTEMPLATEVERIFY_ERROR = \"non-mandatory-script-verify-flag (Script failed an OP_CHECKTEMPLATEVERIFY operation)\"\n+def random_bytes(n):\n+    return bytes(random.getrandbits(8) for i in range(n))\n+def template_hash_for_outputs(outputs, nIn = 0, nVin=1, vin_override=None):\n+    c = CTransaction()\n+    c.nVersion = 2\n+    c.vin = vin_override\n+    if vin_override is None:\n+        c.vin = [CTxIn()]*nVin\n+    c.vout = outputs\n+    return c.get_standard_template_hash(nIn)\n+def random_p2sh():\n+    return CScript(bytes([0, 0x14]) + random_bytes(20))\n+def random_real_outputs_and_script(n, nIn=0, nVin=1, vin_override=None):\n+    outputs = [CTxOut((x+1)*1000, random_p2sh()) for x in range(n)]\n+    script  = CScript(bytes([0x20]) + template_hash_for_outputs(outputs, nIn, nVin, vin_override) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+    return outputs, script\n+\n+def random_secure_tree(depth):\n+    leaf_nodes = [CTxOut(100, CScript(bytes([0, 0x14]) + random_bytes(20))) for x in range(2**depth)]\n+    outputs_tree = [[CTxOut()]*(2**i) for i in range(depth)] + [leaf_nodes]\n+    for d in range(1, depth+2):\n+        idxs =zip(range(0, len(outputs_tree[-d]),2), range(1, len(outputs_tree[-d]), 2))\n+        for (idx, (a,b)) in enumerate([(outputs_tree[-d][i], outputs_tree[-d][j]) for (i,j) in idxs]):\n+            s = CScript(bytes([0x20]) + template_hash_for_outputs([a,b]) + bytes([OP_CHECKTEMPLATEVERIFY]))\n+            a = sum(o.nValue for o in [a,b])\n+            t = CTxOut(a+1000, s)\n+            outputs_tree[-d-1][idx] = t\n+    return outputs_tree\n+\n+def create_transaction_to_script(node, txid, script, *, amount):\n+    \"\"\" Return signed transaction spending the first output of the\n+        input txid. Note that the node must be able to sign for the\n+        output that is being spent, and the node must not be running\n+        multiple wallets.\n+    \"\"\"\n+    random_address = script_to_p2sh(CScript())\n+    rawtx = node.createrawtransaction(inputs=[{\"txid\": txid, \"vout\": 0}], outputs={random_address: amount})\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(rawtx)))\n+    # Replace with our script\n+    tx.vout[0].scriptPubKey = script\n+    # Sign\n+    signresult = node.signrawtransactionwithwallet(tx.serialize().hex())\n+    assert_equal(signresult[\"complete\"], True)\n+    raw_tx =  signresult['hex']\n+    tx = CTransaction()\n+    tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx)))\n+    return tx\n+\n+class CheckTemplateVerifyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact reject reason for testing",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r618888207",
      "id" : 618888207,
      "in_reply_to_id" : 618645483,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxODg4ODIwNw==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 74,
      "original_position" : 74,
      "original_start_line" : null,
      "path" : "test/functional/feature_checktemplateverify.py",
      "position" : null,
      "pull_request_review_id" : 642869537,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-04-23T17:47:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/618888207",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@JeremyRubin:\r\n\r\n> All changes -- soft forks or not -- proceed when they have rough consensus and the code is ready.\r\n\r\nOn this we are definitely in strong disagreement. A soft fork (or hard fork) requires overwhelming consensus not only in this repo but in the wider community. Taproot reached that bar (there was one NACK from a long term contributor due to quantum concerns I believe in this repo and overwhelming community support) and I expect the next soft fork, whatever it contains, to also reach that bar. To the extent that it appears you disagree with that worries me immensely. But indeed when Taproot has (hopefully) activated I will continue on the mailing list.\r\n\r\nThis has a hard Concept NACK from me until then. All long term contributors to this repository should have the chance to review this and there should be overwhelming consensus within this repo and in the wider community that this should be included in the next soft fork as is. In my opinion we are a long, long way away from that. And this is from someone who finds CTV extremely interesting and is looking forward (once Taproot has activated) to examining in greater detail the use cases of it (ie CTV and ANYPREVOUT's use in vaults).\r\n\r\n",
      "created_at" : "2021-04-23T10:17:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825557354",
      "id" : 825557354,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTU1NzM1NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T10:17:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825557354",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Please, again, take the metaphysics to the mailing list. This is a PR for people who *want to* review BIP-119 CTV.",
      "created_at" : "2021-04-23T12:17:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825618060",
      "id" : 825618060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTYxODA2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T12:17:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825618060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Apologies for the line noise -- I hit an issue with GH tracking the tip of my branch and had to use https://github.com/isaacs/github/issues/361#issuecomment-114300645 workaround.",
      "created_at" : "2021-04-23T17:48:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-825818936",
      "id" : 825818936,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgyNTgxODkzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-04-23T17:48:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/825818936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-05-03T09:32:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-831141697",
      "id" : 831141697,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMTE0MTY5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-03T09:32:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "concept ACK. Covenants would open up lots of exciting new use cases.\r\nWhat are the next steps? \r\n\r\n",
      "created_at" : "2021-05-05T02:52:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-832378018",
      "id" : 832378018,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMjM3ODAxOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-05T02:55:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/832378018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/12780394?v=4",
         "events_url" : "https://api.github.com/users/RobinLinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/RobinLinus/followers",
         "following_url" : "https://api.github.com/users/RobinLinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/RobinLinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/RobinLinus",
         "id" : 12780394,
         "login" : "RobinLinus",
         "node_id" : "MDQ6VXNlcjEyNzgwMzk0",
         "organizations_url" : "https://api.github.com/users/RobinLinus/orgs",
         "received_events_url" : "https://api.github.com/users/RobinLinus/received_events",
         "repos_url" : "https://api.github.com/users/RobinLinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/RobinLinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/RobinLinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/RobinLinus"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: unneeded spacing",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-06T21:07:55Z",
      "diff_hunk" : "@@ -1585,8 +1683,11 @@ bool SignatureHashSchnorr(uint256& hash_out, const ScriptExecutionData& execdata\n \n     hash_out = ss.GetSHA256();\n     return true;\n+\n }\n \n+\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r627765572",
      "id" : 627765572,
      "line" : 1690,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNzc2NTU3Mg==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1690,
      "original_position" : 159,
      "original_start_line" : 1685,
      "path" : "src/script/interpreter.cpp",
      "position" : 159,
      "pull_request_review_id" : 653897195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1685,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-06T21:07:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/627765572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "CR-ACK 491804c589c5f3e68dc17516377930e18986cb19\r\n\r\nbesides the nit on spacing\r\n\r\nStill need to look through tests",
      "created_at" : "2021-05-06T21:19:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#issuecomment-833874616",
      "id" : 833874616,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/21702",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDgzMzg3NDYxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-05-06T21:19:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/833874616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "discussion of this moved here https://github.com/bitcoin/bips/pull/1118",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-07T17:59:26Z",
      "diff_hunk" : "@@ -198,6 +198,13 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     return subscript.GetSigOpCount(true);\n }\n \n+bool CScript::IsPayToBasicStandardTemplate() const",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r628407410",
      "id" : 628407410,
      "in_reply_to_id" : 616627150,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyODQwNzQxMA==",
      "original_commit_id" : "3b07e2ff83e40692f10aa59a02b2f07e3e154cd2",
      "original_line" : 201,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/script/script.cpp",
      "position" : 4,
      "pull_request_review_id" : 654731943,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-07T17:59:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/628407410",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "piconit: 2 spaces after the `=` here",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:12:24Z",
      "diff_hunk" : "@@ -1416,9 +1453,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetStandardTemplateHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008499",
      "id" : 634008499,
      "line" : 1460,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwODQ5OQ==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1460,
      "original_position" : 61,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 61,
      "pull_request_review_id" : 661595892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-18T03:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008499",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "same here",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:12:31Z",
      "diff_hunk" : "@@ -1416,9 +1453,52 @@ uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n     return ss.GetSHA256();\n }\n \n+/* Not Exported, just convenience */\n+template<typename TxType>\n+uint256 GetStandardTemplateHashWithScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint256& scriptSig_hash, const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)\n+        << tx.nVersion\n+        << tx.nLockTime\n+        << scriptSig_hash\n+        << uint32_t(tx.vin.size())\n+        << sequences_hash\n+        << uint32_t(tx.vout.size())\n+        << outputs_hash\n+        << input_index;\n+    return h.GetSHA256();\n+}\n+\n+template<typename TxType>\n+uint256 GetStandardTemplateHashEmptyScript(const TxType& tx, const uint256& outputs_hash, const uint256& sequences_hash,\n+                                const uint32_t input_index) {\n+    auto h =  CHashWriter(SER_GETHASH, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634008538",
      "id" : 634008538,
      "line" : 1475,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAwODUzOA==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1475,
      "original_position" : 76,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 76,
      "pull_request_review_id" : 661595892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-05-18T03:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634008538",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be safer to set `input_index` here to `uint32_t`'s max value? That way if there is less of a chance that we miss in a test the handling of a changing `input_index` since most likely the tested `input_index` will be `0`",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:23:32Z",
      "diff_hunk" : "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634011655",
      "id" : 634011655,
      "line" : 1554,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxMTY1NQ==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1554,
      "original_position" : 137,
      "original_start_line" : 1551,
      "path" : "src/script/interpreter.cpp",
      "position" : 137,
      "pull_request_review_id" : 661595892,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1551,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-18T03:26:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634011655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We do lose the effiency of always having the `0`th input cached however",
      "commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "created_at" : "2021-05-18T03:27:09Z",
      "diff_hunk" : "@@ -1452,11 +1535,25 @@ void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut>&& spent\n         if (uses_bip341_taproot && uses_bip143_segwit) break; // No need to scan further if we already need all.\n     }\n \n-    if (uses_bip143_segwit || uses_bip341_taproot) {\n+    if (uses_bip143_segwit || uses_bip341_taproot || uses_bip119_ctv) {\n         // Computations shared between both sighash schemes.\n         m_prevouts_single_hash = GetPrevoutsSHA256(txTo);\n         m_sequences_single_hash = GetSequencesSHA256(txTo);\n         m_outputs_single_hash = GetOutputsSHA256(txTo);\n+\n+        bool skip_scriptSigs = std::find_if(txTo.vin.begin(), txTo.vin.end(),\n+                [](const CTxIn& c) { return c.scriptSig != CScript(); }) == txTo.vin.end();\n+        if (skip_scriptSigs) {\n+            // 0 hash used to signal if we should skip scriptSigs\n+            // when re-computing for different indexes.\n+            m_scriptSigs_single_hash = uint256{};\n+            // TODO: Cache midstate?\n+            m_standard_template_single_hash = GetStandardTemplateHashEmptyScript(txTo, m_outputs_single_hash, m_sequences_single_hash, 0);\n+        } else {\n+            m_scriptSigs_single_hash = GetScriptSigsSHA256(txTo);\n+            m_standard_template_single_hash = GetStandardTemplateHashWithScript(txTo, m_outputs_single_hash, m_sequences_single_hash, m_scriptSigs_single_hash, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/21702#discussion_r634012540",
      "id" : 634012540,
      "in_reply_to_id" : 634011655,
      "line" : 1554,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDAxMjU0MA==",
      "original_commit_id" : "39b0a505d5c0ba97439a82026ae6a0449f31896a",
      "original_line" : 1554,
      "original_position" : 137,
      "original_start_line" : 1551,
      "path" : "src/script/interpreter.cpp",
      "position" : 137,
      "pull_request_review_id" : 661600561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/21702",
      "side" : "RIGHT",
      "start_line" : 1551,
      "start_side" : "RIGHT",
      "updated_at" : "2021-05-18T03:27:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634012540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   }
]
