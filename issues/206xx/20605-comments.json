[
   {
      "author_association" : "MEMBER",
      "body" : "That's an amazing hack. I didn't know it was allowed to call system library functions from a signal handler, but apparently POSIX mandates that some functions are callable - including read() and write().",
      "created_at" : "2020-12-08T21:19:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741050023",
      "id" : 741050023,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTA1MDAyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-08T21:19:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741050023",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20487 (draft: Add syscall sandboxing using seccomp-bpf (Linux secure computing mode) by practicalswift)\n* #19160 (multiprocess: Add basic spawn and IPC support by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-12-09T06:49:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741571875",
      "id" : 741571875,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTU3MTg3NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T06:49:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741571875",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Nice!\r\nTested ACK f8585d59f1b0040765361eebd8a4544670de2f04 - (on macOS only)\r\n\r\nIs there a documentation what system function one can call in signal handler (to confirm with POSIX)?",
      "created_at" : "2020-12-09T08:09:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741607189",
      "id" : 741607189,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTYwNzE4OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T08:09:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741607189",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Is there a documentation what system function one can call in signal handler (to confirm with POSIX)?\r\n\r\nThis is a good question, I wasn't able to find any *definitive* reference. The \"self-pipe trick\" is an incredibly common pattern in UNIX daemons though. It certainly works across Linux, Macos, modern BSDsâ¦ Fairly sure everything that can run Bitcoin Core. If it would be broken in principle then a lot of software would break.\r\n\r\nFor example Python uses this too, calls it a 'wakeup fd'. See https://github.com/python/cpython/blob/master/Modules/signalmodule.c#L294",
      "created_at" : "2020-12-09T09:26:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741647538",
      "id" : 741647538,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTY0NzUzOA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T09:26:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741647538",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539232902"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539232902"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've tried locally to just `close()` and it also works (tested on macos only). Note that `WaitForShutdown` is called twice so just one `read` succeeds, see https://github.com/promag/bitcoin/commit/c44a33c5532247d74cdaaf06d43a104ae2e36aa1.",
      "commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "created_at" : "2020-12-09T11:36:21Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539232902",
      "id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIzMjkwMg==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548094769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-09T11:48:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539232902",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK eae384f8fa0215 on Debian 5.9.11-1 (2020-11-27) x86_64 GNU/Linux",
      "created_at" : "2020-12-09T11:53:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741723442",
      "id" : 741723442,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTcyMzQ0Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T11:53:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741723442",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539251402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539251402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you mean with \"WaitForShutdown is called twice\"? It isn't. It's called at the end of `AppInit` which itself is called once.",
      "commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "created_at" : "2020-12-09T12:06:06Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539251402",
      "id" : 539251402,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MTQwMg==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548116229,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-09T12:09:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539251402",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539252303"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539252303"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Or if you mean the call in `AbortShutdown`, sure, yes but that's on purpose to reset the shutdown condition so it can be used again.\r\nI'd really prefer to use `read`/`write` and not close a socket under someone waiting on it !",
      "commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "created_at" : "2020-12-09T12:07:36Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539252303",
      "id" : 539252303,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1MjMwMw==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548117266,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-09T12:07:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539252303",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539255824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539255824"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah right, the second call is In `AbortShutdown`. But that doesn't invalidate the point of just `close()` instead of `write()`, which looks enough to make `read()` return.",
      "commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "created_at" : "2020-12-09T12:13:28Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539255824",
      "id" : 539255824,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1NTgyNA==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548121371,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-09T12:13:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539255824",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539258627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539258627"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"looks enough\"\r\nYes, but we're dealing with a lot of possibilities in different OSes here, just because it works for you doesn't mean it's safe. This whole thing (try googling about signals and pipe tricks) is a controversial subject, so I prefer to mimic existing code instead of inventing our own.\r\nAlso, `close()` makes it more work to re-arm the condition in `AbortShutdown`.",
      "commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "created_at" : "2020-12-09T12:17:41Z",
      "diff_hunk" : "@@ -5,19 +5,108 @@\n \n #include <shutdown.h>\n \n+#include <config/bitcoin-config.h>\n+\n+#include <assert.h>\n #include <atomic>\n+#ifdef WIN32\n+#include <condition_variable>\n+#else\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+#endif\n \n static std::atomic<bool> fRequestShutdown(false);\n+#ifdef WIN32\n+/** On windows it is possible to simply use a condition variable. */\n+std::mutex g_shutdown_mutex;\n+std::condition_variable g_shutdown_cv;\n+#else\n+/** On UNIX-like operating systems use the self-pipe trick.\n+ * Index 0 will be the read end of the pipe, index 1 the write end.\n+ */\n+static int g_shutdown_pipe[2];\n+#endif\n+\n+bool InitShutdownState()\n+{\n+#ifndef WIN32\n+#if HAVE_O_CLOEXEC\n+    // If we can, make sure that the file descriptors are closed on exec()\n+    // to prevent interference.\n+    if (pipe2(g_shutdown_pipe, O_CLOEXEC) != 0) {\n+        return false;\n+    }\n+#else\n+    if (pipe(g_shutdown_pipe) != 0) {\n+        return false;\n+    }\n+#endif\n+#endif\n+    return true;\n+}\n \n void StartShutdown()\n {\n+#ifdef WIN32\n+    std::unique_lock<std::mutex> lk(g_shutdown_mutex);\n     fRequestShutdown = true;\n+    g_shutdown_cv.notify_one();\n+#else\n+    // This must be reentrant and safe for calling in a signal handler, so using a condition variable is not safe.\n+    // Make sure that the token is only written once even if multiple threads call this concurrently or in\n+    // case of a reentrant signal.\n+    if (!fRequestShutdown.exchange(true)) {\n+        // Write an arbitrary byte to the write end of the shutdown pipe.\n+        const char token = 'x';\n+        while (true) {\n+            int result = write(g_shutdown_pipe[1], &token, 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539258627",
      "id" : 539258627,
      "in_reply_to_id" : 539232902,
      "line" : 64,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI1ODYyNw==",
      "original_commit_id" : "eae384f8fa0215cfd63235b8cb22077a0c356ee0",
      "original_line" : 64,
      "original_position" : 60,
      "original_start_line" : null,
      "path" : "src/shutdown.cpp",
      "position" : 60,
      "pull_request_review_id" : 548124874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20605",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-12-09T12:17:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539258627",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK eae384f8fa0215cfd63235b8cb22077a0c356ee0 on macos 10.15.6, needs squash I guess.",
      "created_at" : "2020-12-09T12:20:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741735937",
      "id" : 741735937,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTczNTkzNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T12:20:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741735937",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Squashed f8585d59f1b0040765361eebd8a4544670de2f04..eae384f8fa0215cfd63235b8cb22077a0c356ee0 â f628398631bc2a5b7839aeab5b3d89cbbff1f3fa",
      "created_at" : "2020-12-09T12:25:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741738579",
      "id" : 741738579,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MTczODU3OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-09T12:25:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/741738579",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK â¤ï¸",
      "created_at" : "2020-12-10T06:39:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-742277014",
      "id" : 742277014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20605",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc0MjI3NzAxNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-12-10T06:39:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/742277014",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/60179867?v=4",
         "events_url" : "https://api.github.com/users/decryp2kanon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/decryp2kanon/followers",
         "following_url" : "https://api.github.com/users/decryp2kanon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/decryp2kanon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/decryp2kanon",
         "id" : 60179867,
         "login" : "decryp2kanon",
         "node_id" : "MDQ6VXNlcjYwMTc5ODY3",
         "organizations_url" : "https://api.github.com/users/decryp2kanon/orgs",
         "received_events_url" : "https://api.github.com/users/decryp2kanon/received_events",
         "repos_url" : "https://api.github.com/users/decryp2kanon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/decryp2kanon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/decryp2kanon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/decryp2kanon"
      }
   }
]
