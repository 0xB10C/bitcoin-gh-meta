[
   {
      "author_association" : "MEMBER",
      "body" : "> Furthermore, all of these \"new\" apparent references to g_chainman/::Chain(state|)Active() will be dealt with as we prune the call graph upward\r\n\r\nI can understand that mechanically using the global might reduce review burden and is \"trivially correct\", but if there is a class that simply depends on the chainstate or block tree (like `BaseIndex` or `PeerManager` or ...) it might be best to pass it a reference to the chainstatemanager as early as possible. Otherwise your diffs will look like `implicit global -> g_chainman -> m_chainman` instead of just a direct replacement `implicit global -> m_chainman`.",
      "created_at" : "2020-10-01T07:12:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20049#issuecomment-701937823",
      "id" : 701937823,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMTkzNzgyMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-01T07:12:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/701937823",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@MarcoFalke I found it much easier for reasoning and for rebases to have each commit focus on one function and do mechanical changes for its callers because:\r\n\r\n1. Say that the function in focus references `BlockManager`, we may think that the function's caller only needs `BlockManager` right now, but it may turn out that the caller calls another function which references `::ChainstateActive()` that we haven't pruned yet and we won't know what the caller actually needs until we've pruned _everything_ under the caller.\r\n1. Doing mechanical changes allows us to express more of the changeset as scripted-diffs. Which, for a large, mostly move-only project like this one, will make review and rebases a lot easier.\r\n    - A scripted-diff example of `implicit global -> g_chainman`: [`0e101a0` (#20050)](https://github.com/bitcoin/bitcoin/pull/20050/commits/0e101a01832f8f799326faba27ffc97d73f8b434)\r\n\t- A scripted-diff example of `g_chainman -> m_chainman`: This is unpublished but I do something similar to the below for `rest.cpp`, `rpc/`, `tests/`, `interfaces/node.cpp`, `interfaces/chain.cpp`, etc.\r\n\t```\r\n\t-BEGIN VERIFY SCRIPT-\r\n    sed -i -e 's/g_chainman/EnsureChainman(context)/g' -- src/rest.cpp\r\n    sed -i -e 's/::Chain\\(state\\|\\)Active()/EnsureChainman(context).ActiveChain\\1()/g' -- src/rest.cpp\r\n    -END VERIFY SCRIPT-\r\n\t```\r\n\tNote that each \"module\" (`rest`/`rpc`/`tests`/etc) in our codebase may reference `ChainstateManager`/`CChainState`/etc slightly differently. So even though doing the caller changes mechanically may look ugly in intermediary commits, they:\r\n\t1. Are easier to reason about w/re correctness\r\n\t2. Delay having to think about the \"module-specific\" way to reference objects until we've pruned up to said module, whereby they will 100% be cleaned up and in a lot of cases we can apply a \"module-specific\" `scripted-diff` like above.\r\n\r\nHaving said all that, the above is just my personal take on how to bring some sanity to this unruly call graph (~40 commits just to clean up `validation`). I do understand that at the end of the day, what matters is what is clearer for reviewers, so if the benefits I described above do not sound worthwhile, I'd be happy to go with whatever reviewers think is best! :relaxed: ",
      "created_at" : "2020-10-01T18:37:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20049#issuecomment-702323178",
      "id" : 702323178,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMjMyMzE3OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-01T18:37:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702323178",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3445290?v=4",
         "events_url" : "https://api.github.com/users/dongcarl/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dongcarl/followers",
         "following_url" : "https://api.github.com/users/dongcarl/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dongcarl/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dongcarl",
         "id" : 3445290,
         "login" : "dongcarl",
         "node_id" : "MDQ6VXNlcjM0NDUyOTA=",
         "organizations_url" : "https://api.github.com/users/dongcarl/orgs",
         "received_events_url" : "https://api.github.com/users/dongcarl/received_events",
         "repos_url" : "https://api.github.com/users/dongcarl/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dongcarl/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dongcarl"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> we may think that the function's caller only needs BlockManager \r\n\r\nIf this is a concern, the functions that implicitly rely on chainman (not just blockman) could be de-globalized first, and the blockmanager ones later. Though, if there already is a chainman reference in scope (like https://github.com/bitcoin/bitcoin/pull/20050#discussion_r498019133) it should be safe to assume that the chainman is actually required, no?  \r\n\r\n> allows us to express more of the changeset as scripted-diffs\r\n\r\nReplacing (an implicit) g_chainman in rpc code with `EnsureChainman(context)` is correct, but seems overly verbose code and maybe also confusing. I'd find an RPC easier to read if the requirements were listed in the first lines of the method. Similar how we get the wallet reference early on in wallet rpc, we should get a chainman reference early in chain rpcs. The remainder of the changes can still be done with a scripted diff.",
      "created_at" : "2020-10-02T07:47:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/20049#issuecomment-702581052",
      "id" : 702581052,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20049",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDcwMjU4MTA1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-10-02T07:47:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/702581052",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
