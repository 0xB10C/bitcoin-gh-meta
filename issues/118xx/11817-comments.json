[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r158133589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158133589"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Remove nested loops from bip68-112-113-p2p.py\"\r\n\r\nShould be able to avoid a lookup with [tx['tx'] for tx in txs.values()]\r\n\r\n",
      "commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2017-12-20T20:56:29Z",
      "diff_hunk" : "@@ -61,44 +62,28 @@\n     hex_str_to_bytes,\n )\n \n-base_relative_locktime = 10\n-seq_disable_flag = 1 << 31\n-seq_random_high_bit = 1 << 25\n-seq_type_flag = 1 << 22\n-seq_random_low_bit = 1 << 18\n-\n-# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n-# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n-relative_locktimes = []\n-for b31 in range(2):\n-    b25times = []\n-    for b25 in range(2):\n-        b22times = []\n-        for b22 in range(2):\n-            b18times = []\n-            for b18 in range(2):\n-                rlt = base_relative_locktime\n-                if (b31):\n-                    rlt = rlt | seq_disable_flag\n-                if (b25):\n-                    rlt = rlt | seq_random_high_bit\n-                if (b22):\n-                    rlt = rlt | seq_type_flag\n-                if (b18):\n-                    rlt = rlt | seq_random_low_bit\n-                b18times.append(rlt)\n-            b22times.append(b18times)\n-        b25times.append(b22times)\n-    relative_locktimes.append(b25times)\n-\n-def all_rlt_txs(txarray):\n-    txs = []\n-    for b31 in range(2):\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    txs.append(txarray[b31][b25][b22][b18])\n-    return txs\n+BASE_RELATIVE_LOCKTIME = 10\n+SEQ_DISABLE_FLAG = 1 << 31\n+SEQ_RANDOM_HIGH_BIT = 1 << 25\n+SEQ_TYPE_FLAG = 1 << 22\n+SEQ_RANDOM_LOW_BIT = 1 << 18\n+\n+def relative_locktime(sdf, srhb, stf, srlb):\n+    \"\"\"Returns a locktime with certain bits set.\"\"\"\n+\n+    locktime = BASE_RELATIVE_LOCKTIME\n+    if sdf:\n+        locktime |= SEQ_DISABLE_FLAG\n+    if srhb:\n+        locktime |= SEQ_RANDOM_HIGH_BIT\n+    if stf:\n+        locktime |= SEQ_TYPE_FLAG\n+    if srlb:\n+        locktime |= SEQ_RANDOM_LOW_BIT\n+    return locktime\n+\n+def all_rlt_txs(txs):\n+    return [txs[tx]['tx'] for tx in txs]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r158133589",
      "id" : 158133589,
      "original_commit_id" : "e78b600be47bf34c4271b217b616a77f8957e531",
      "original_position" : 71,
      "path" : "test/functional/bip68-112-113-p2p.py",
      "position" : null,
      "pull_request_review_id" : 84894748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817",
      "updated_at" : "2018-02-14T21:41:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158133589",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r158134976"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158134976"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Remove nested loops from bip68-112-113-p2p.py\"\r\n\r\nIt seems better to continue returning a list than a dictionary. A dictionary is just slower and introduces nondeterminism in the test for no reason.",
      "commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2017-12-20T21:03:43Z",
      "diff_hunk" : "@@ -152,24 +137,18 @@ def create_test_block(self, txs, version=536870912):\n         return block\n \n     def create_bip68txs(self, bip68inputs, txversion, locktime_delta=0):\n-        txs = []\n+        \"\"\"Returns a dictionary of bip68 transactions with different bits set.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r158134976",
      "id" : 158134976,
      "original_commit_id" : "e78b600be47bf34c4271b217b616a77f8957e531",
      "original_position" : 80,
      "path" : "test/functional/bip68-112-113-p2p.py",
      "position" : null,
      "pull_request_review_id" : 84894748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817",
      "updated_at" : "2018-02-14T21:41:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158134976",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased now that #11771 has been merged.\r\n\r\nedit: Just realised that I have't addressed Russ's comment here: https://github.com/bitcoin/bitcoin/pull/11817#discussion_r158134976. Will do that later",
      "created_at" : "2018-02-14T03:31:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#issuecomment-365485308",
      "id" : 365485308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11817",
      "updated_at" : "2018-02-14T03:32:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365485308",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168070132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168070132"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, that's better. Fixed",
      "commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2018-02-14T03:32:22Z",
      "diff_hunk" : "@@ -61,44 +62,28 @@\n     hex_str_to_bytes,\n )\n \n-base_relative_locktime = 10\n-seq_disable_flag = 1 << 31\n-seq_random_high_bit = 1 << 25\n-seq_type_flag = 1 << 22\n-seq_random_low_bit = 1 << 18\n-\n-# b31,b25,b22,b18 represent the 31st, 25th, 22nd and 18th bits respectively in the nSequence field\n-# relative_locktimes[b31][b25][b22][b18] is a base_relative_locktime with the indicated bits set if their indices are 1\n-relative_locktimes = []\n-for b31 in range(2):\n-    b25times = []\n-    for b25 in range(2):\n-        b22times = []\n-        for b22 in range(2):\n-            b18times = []\n-            for b18 in range(2):\n-                rlt = base_relative_locktime\n-                if (b31):\n-                    rlt = rlt | seq_disable_flag\n-                if (b25):\n-                    rlt = rlt | seq_random_high_bit\n-                if (b22):\n-                    rlt = rlt | seq_type_flag\n-                if (b18):\n-                    rlt = rlt | seq_random_low_bit\n-                b18times.append(rlt)\n-            b22times.append(b18times)\n-        b25times.append(b22times)\n-    relative_locktimes.append(b25times)\n-\n-def all_rlt_txs(txarray):\n-    txs = []\n-    for b31 in range(2):\n-        for b25 in range(2):\n-            for b22 in range(2):\n-                for b18 in range(2):\n-                    txs.append(txarray[b31][b25][b22][b18])\n-    return txs\n+BASE_RELATIVE_LOCKTIME = 10\n+SEQ_DISABLE_FLAG = 1 << 31\n+SEQ_RANDOM_HIGH_BIT = 1 << 25\n+SEQ_TYPE_FLAG = 1 << 22\n+SEQ_RANDOM_LOW_BIT = 1 << 18\n+\n+def relative_locktime(sdf, srhb, stf, srlb):\n+    \"\"\"Returns a locktime with certain bits set.\"\"\"\n+\n+    locktime = BASE_RELATIVE_LOCKTIME\n+    if sdf:\n+        locktime |= SEQ_DISABLE_FLAG\n+    if srhb:\n+        locktime |= SEQ_RANDOM_HIGH_BIT\n+    if stf:\n+        locktime |= SEQ_TYPE_FLAG\n+    if srlb:\n+        locktime |= SEQ_RANDOM_LOW_BIT\n+    return locktime\n+\n+def all_rlt_txs(txs):\n+    return [txs[tx]['tx'] for tx in txs]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168070132",
      "id" : 168070132,
      "in_reply_to_id" : 158133589,
      "original_commit_id" : "e78b600be47bf34c4271b217b616a77f8957e531",
      "original_position" : 71,
      "path" : "test/functional/bip68-112-113-p2p.py",
      "position" : null,
      "pull_request_review_id" : 96377318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817",
      "updated_at" : "2018-02-14T21:41:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168070132",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ok, properly rebased and Russ's comment addressed.",
      "created_at" : "2018-02-14T21:41:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#issuecomment-365754278",
      "id" : 365754278,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11817",
      "updated_at" : "2018-02-14T21:41:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365754278",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168318857"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168318857"
         }
      },
      "author_association" : "MEMBER",
      "body" : "yes - returning a list is much better. Changed. Thanks",
      "commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2018-02-14T21:42:10Z",
      "diff_hunk" : "@@ -152,24 +137,18 @@ def create_test_block(self, txs, version=536870912):\n         return block\n \n     def create_bip68txs(self, bip68inputs, txversion, locktime_delta=0):\n-        txs = []\n+        \"\"\"Returns a dictionary of bip68 transactions with different bits set.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168318857",
      "id" : 168318857,
      "in_reply_to_id" : 158134976,
      "original_commit_id" : "e78b600be47bf34c4271b217b616a77f8957e531",
      "original_position" : 80,
      "path" : "test/functional/bip68-112-113-p2p.py",
      "position" : null,
      "pull_request_review_id" : 96667498,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817",
      "updated_at" : "2018-02-14T21:42:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168318857",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168810760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168810760"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "To go along with @ryanofsky  earlier comments in related PRs. This can be simplified to `int(hash,16)` ",
      "commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2018-02-16T16:52:09Z",
      "diff_hunk" : "@@ -142,184 +175,148 @@ def create_test_block(self, txs, version = 536870912):\n         block.solve()\n         return block\n \n-    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n-        txs = []\n-        assert(len(bip68inputs) >= 16)\n-        i = 0\n-        for b31 in range(2):\n-            b25txs = []\n-            for b25 in range(2):\n-                b22txs = []\n-                for b22 in range(2):\n-                    b18txs = []\n-                    for b18 in range(2):\n-                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n-                        i += 1\n-                        tx.nVersion = txversion\n-                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n-                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n-                    b22txs.append(b18txs)\n-                b25txs.append(b22txs)\n-            txs.append(b25txs)\n-        return txs\n-\n-    def create_bip112special(self, input, txversion):\n-        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n-        tx.nVersion = txversion\n-        signtx = self.sign_transaction(self.nodes[0], tx)\n-        signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-        return signtx\n-\n-    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n-        txs = []\n-        assert(len(bip112inputs) >= 16)\n-        i = 0\n-        for b31 in range(2):\n-            b25txs = []\n-            for b25 in range(2):\n-                b22txs = []\n-                for b22 in range(2):\n-                    b18txs = []\n-                    for b18 in range(2):\n-                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n-                        i += 1\n-                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n-                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n-                        else: # vary nSequence instead, OP_CSV is fixed\n-                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n-                        tx.nVersion = txversion\n-                        signtx = self.sign_transaction(self.nodes[0], tx)\n-                        if (varyOP_CSV):\n-                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-                        else:\n-                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-                        b18txs.append(signtx)\n-                    b22txs.append(b18txs)\n-                b25txs.append(b22txs)\n-            txs.append(b25txs)\n-        return txs\n-\n-    def get_tests(self):\n-        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n-        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n-        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n-        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n-        self.tipheight = 82 # height of the next block to build\n+    def sync_blocks(self, blocks, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n+\n+        Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n+        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_code=reject_code, reject_reason=reject_reason, request_block=request_block)\n+\n+    def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        network_thread_start()\n+        self.nodes[0].p2p.wait_for_verack()\n+\n+        self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n+        long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100)  # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2 * 32 + 1)  # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0)  # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82  # height of the next block to build\n         self.last_block_time = long_past_time\n         self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168810760",
      "id" : 168810760,
      "original_commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "original_position" : 291,
      "path" : "test/functional/feature_csv_activation.py",
      "position" : 291,
      "pull_request_review_id" : 97244431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817",
      "updated_at" : "2018-02-16T16:52:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168810760",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168810885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168810885"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Same here. Can be `int(hash,16)`",
      "commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2018-02-16T16:52:36Z",
      "diff_hunk" : "@@ -142,184 +175,148 @@ def create_test_block(self, txs, version = 536870912):\n         block.solve()\n         return block\n \n-    def create_bip68txs(self, bip68inputs, txversion, locktime_delta = 0):\n-        txs = []\n-        assert(len(bip68inputs) >= 16)\n-        i = 0\n-        for b31 in range(2):\n-            b25txs = []\n-            for b25 in range(2):\n-                b22txs = []\n-                for b22 in range(2):\n-                    b18txs = []\n-                    for b18 in range(2):\n-                        tx =  self.create_transaction(self.nodes[0], bip68inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n-                        i += 1\n-                        tx.nVersion = txversion\n-                        tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n-                        b18txs.append(self.sign_transaction(self.nodes[0], tx))\n-                    b22txs.append(b18txs)\n-                b25txs.append(b22txs)\n-            txs.append(b25txs)\n-        return txs\n-\n-    def create_bip112special(self, input, txversion):\n-        tx = self.create_transaction(self.nodes[0], input, self.nodeaddress, Decimal(\"49.98\"))\n-        tx.nVersion = txversion\n-        signtx = self.sign_transaction(self.nodes[0], tx)\n-        signtx.vin[0].scriptSig = CScript([-1, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-        return signtx\n-\n-    def create_bip112txs(self, bip112inputs, varyOP_CSV, txversion, locktime_delta = 0):\n-        txs = []\n-        assert(len(bip112inputs) >= 16)\n-        i = 0\n-        for b31 in range(2):\n-            b25txs = []\n-            for b25 in range(2):\n-                b22txs = []\n-                for b22 in range(2):\n-                    b18txs = []\n-                    for b18 in range(2):\n-                        tx =  self.create_transaction(self.nodes[0], bip112inputs[i], self.nodeaddress, Decimal(\"49.98\"))\n-                        i += 1\n-                        if (varyOP_CSV): # if varying OP_CSV, nSequence is fixed\n-                            tx.vin[0].nSequence = base_relative_locktime + locktime_delta\n-                        else: # vary nSequence instead, OP_CSV is fixed\n-                            tx.vin[0].nSequence = relative_locktimes[b31][b25][b22][b18] + locktime_delta\n-                        tx.nVersion = txversion\n-                        signtx = self.sign_transaction(self.nodes[0], tx)\n-                        if (varyOP_CSV):\n-                            signtx.vin[0].scriptSig = CScript([relative_locktimes[b31][b25][b22][b18], OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-                        else:\n-                            signtx.vin[0].scriptSig = CScript([base_relative_locktime, OP_CHECKSEQUENCEVERIFY, OP_DROP] + list(CScript(signtx.vin[0].scriptSig)))\n-                        b18txs.append(signtx)\n-                    b22txs.append(b18txs)\n-                b25txs.append(b22txs)\n-            txs.append(b25txs)\n-        return txs\n-\n-    def get_tests(self):\n-        long_past_time = int(time.time()) - 600 * 1000 # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n-        self.nodes[0].setmocktime(long_past_time - 100) # enough so that the generated blocks will still all be before long_past_time\n-        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2*32 + 1) # 82 blocks generated for inputs\n-        self.nodes[0].setmocktime(0) # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n-        self.tipheight = 82 # height of the next block to build\n+    def sync_blocks(self, blocks, success=True, reject_code=None, reject_reason=None, request_block=True):\n+        \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n+\n+        Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n+        self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_code=reject_code, reject_reason=reject_reason, request_block=request_block)\n+\n+    def run_test(self):\n+        self.nodes[0].add_p2p_connection(P2PDataStore())\n+        network_thread_start()\n+        self.nodes[0].p2p.wait_for_verack()\n+\n+        self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n+        long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future\n+        self.nodes[0].setmocktime(long_past_time - 100)  # enough so that the generated blocks will still all be before long_past_time\n+        self.coinbase_blocks = self.nodes[0].generate(1 + 16 + 2 * 32 + 1)  # 82 blocks generated for inputs\n+        self.nodes[0].setmocktime(0)  # set time back to present so yielded blocks aren't in the future as we advance last_block_time\n+        self.tipheight = 82  # height of the next block to build\n         self.last_block_time = long_past_time\n         self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n \n+        self.log.info(\"Test that the csv softfork is DEFINED\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'defined')\n         test_blocks = self.generate_blocks(61, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 1\n-        # Advanced from DEFINED to STARTED, height = 143\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Advance from DEFINED to STARTED, height = 143\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n \n-        # Fail to achieve LOCKED_IN 100 out of 144 signal bit 0\n-        # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(50, 536870913) # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(24, 536936448, test_blocks) # 0x20010000 (signalling not)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 2\n-        # Failed to advance past STARTED, height = 287\n+        self.log.info(\"Fail to achieve LOCKED_IN\")\n+        # 100 out of 144 signal bit 0. Use a variety of bits to simulate multiple parallel softforks\n+\n+        test_blocks = self.generate_blocks(50, 536870913)  # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(20, 4, test_blocks)  # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(24, 536936448, test_blocks)  # 0x20010000 (signalling not)\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Failed to advance past STARTED, height = 287\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'started')\n \n+        self.log.info(\"Generate blocks to achieve LOCK-IN\")\n         # 108 out of 144 signal bit 0 to achieve lock-in\n         # using a variety of bits to simulate multiple parallel softforks\n-        test_blocks = self.generate_blocks(58, 536870913) # 0x20000001 (signalling ready)\n-        test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not)\n-        test_blocks = self.generate_blocks(50, 536871169, test_blocks) # 0x20000101 (signalling ready)\n-        test_blocks = self.generate_blocks(10, 536936448, test_blocks) # 0x20010000 (signalling not)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 3\n-        # Advanced from STARTED to LOCKED_IN, height = 431\n+        test_blocks = self.generate_blocks(58, 536870913)  # 0x20000001 (signalling ready)\n+        test_blocks = self.generate_blocks(26, 4, test_blocks)  # 0x00000004 (signalling not)\n+        test_blocks = self.generate_blocks(50, 536871169, test_blocks)  # 0x20000101 (signalling ready)\n+        test_blocks = self.generate_blocks(10, 536936448, test_blocks)  # 0x20010000 (signalling not)\n+        self.sync_blocks(test_blocks)\n+\n+        self.log.info(\"Advanced from STARTED to LOCKED_IN, height = 431\")\n         assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], 'locked_in')\n \n-        # 140 more version 4 blocks\n+        # Generate 140 more version 4 blocks\n         test_blocks = self.generate_blocks(140, 4)\n-        yield TestInstance(test_blocks, sync_every_block=False) # 4\n+        self.sync_blocks(test_blocks)\n \n-        ### Inputs at height = 572\n+        # Inputs at height = 572\n+        #\n         # Put inputs for all tests in the chain at height 572 (tip now = 571) (time increases by 600s per block)\n         # Note we reuse inputs for v1 and v2 txs so must test these separately\n         # 16 normal inputs\n         bip68inputs = []\n         for i in range(16):\n-            bip68inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+            bip68inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n+\n         # 2 sets of 16 inputs with 10 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112basicinputs = []\n         for j in range(2):\n             inputs = []\n             for i in range(16):\n-                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+                inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n             bip112basicinputs.append(inputs)\n+\n         # 2 sets of 16 varied inputs with (relative_lock_time) OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n         bip112diverseinputs = []\n         for j in range(2):\n             inputs = []\n             for i in range(16):\n-                inputs.append(self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks))\n+                inputs.append(send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress))\n             bip112diverseinputs.append(inputs)\n+\n         # 1 special input with -1 OP_CSV OP_DROP (actually will be prepended to spending scriptSig)\n-        bip112specialinput = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        bip112specialinput = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n+\n         # 1 normal input\n-        bip113input = self.send_generic_input_tx(self.nodes[0], self.coinbase_blocks)\n+        bip113input = send_generic_input_tx(self.nodes[0], self.coinbase_blocks, self.nodeaddress)\n \n         self.nodes[0].setmocktime(self.last_block_time + 600)\n-        inputblockhash = self.nodes[0].generate(1)[0] # 1 block generated for inputs to be in chain at height 572\n+        inputblockhash = self.nodes[0].generate(1)[0]  # 1 block generated for inputs to be in chain at height 572\n         self.nodes[0].setmocktime(0)\n         self.tip = int(\"0x\" + inputblockhash, 0)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#discussion_r168810885",
      "id" : 168810885,
      "original_commit_id" : "96b02a0f62a64819c0048357b9e8b9da91af195f",
      "original_position" : 389,
      "path" : "test/functional/feature_csv_activation.py",
      "position" : 389,
      "pull_request_review_id" : 97244576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11817",
      "updated_at" : "2018-02-16T16:52:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168810885",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Added small nits, but ACK. ",
      "created_at" : "2018-02-16T16:53:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#issuecomment-366292631",
      "id" : 366292631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11817",
      "updated_at" : "2018-02-16T16:53:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366292631",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/14220652?v=4",
         "events_url" : "https://api.github.com/users/conscott/events{/privacy}",
         "followers_url" : "https://api.github.com/users/conscott/followers",
         "following_url" : "https://api.github.com/users/conscott/following{/other_user}",
         "gists_url" : "https://api.github.com/users/conscott/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/conscott",
         "id" : 14220652,
         "login" : "conscott",
         "organizations_url" : "https://api.github.com/users/conscott/orgs",
         "received_events_url" : "https://api.github.com/users/conscott/received_events",
         "repos_url" : "https://api.github.com/users/conscott/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/conscott/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/conscott/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/conscott"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "utACK 96b02a0f62a64819c0048357b9e8b9da91af195f",
      "created_at" : "2018-02-16T16:55:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11817#issuecomment-366293238",
      "id" : 366293238,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11817",
      "updated_at" : "2018-02-16T16:55:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/366293238",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
