[
   {
      "author_association" : "MEMBER",
      "body" : "Ah you beat me to it, will take a look as soon as I can\r\n\r\nEarly note: as you mention, net-specific should take precedence over default, whereas explicit command line arguments should always take precedence over the config file, so following your example, if `-maxmempool=200` is specified as an argument it should use 200 even on regtest, whereas if it is not, the `regtest.maxmempool=100` should override the default 200. Then if `-regtest.maxmempool=100` is an explicit argument as well as `-maxmempool=200`, the explicit regtest one should take precedence IMO.\r\n\r\nThen following this logic, `-wallet` specified explicitly as an argument should be used on regtest and testnet as well, using `regtest.wallet` should only be necessary in the config file to save confusion",
      "created_at" : "2017-12-11T10:33:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350684883",
      "id" : 350684883,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-11T10:51:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350684883",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Great. Thanks for tackling this @ajtowns. A few high-level suggestions:\r\n\r\n- I agree with @MeshCollider that the order of precedence should be Command Line > Config File network-specific > Config File default.\r\n- I think there shouldn't be network-specific command-line options (that's almost an implication of the above). I agree with MeshCollider that the user should call `bitcoind` with `-wallet`, not `-regtest.wallet` (side-note - choosing a wallet from the wrong network is perhaps less of a problem than you might assume, since `-wallet` is already kind of network-specific as it refers to the name of the wallet in the particular network directory).\r\n- as well as `NETWORK_ONLY`, perhaps we want a `DEFAULT_ONLY` for options that shouldn't be overriden in the network-specific config. Namely those options would be `-regtest` and `-testnet`. For example don't want the following pathological config file to be valid:\r\n```\r\ntestnet\r\n[testnet]\r\nregtest\r\n[regtest]\r\nnotestnet\r\nnoregtest\r\n```\r\n- taking this further, perhaps we should deprecate the use of `testnet` and `regtest` in the config file entirely, so you can only select the network by using a command-line option?\r\n- I've avoided nitting your code at this early point, but I'd point you at the developer notes here: https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md, specifically symbol naming.  Your new `ArgsManager` members should be prefixed `m_` for example.",
      "created_at" : "2017-12-11T15:16:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350753811",
      "id" : 350753811,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-11T15:16:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350753811",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.\r\nNice work!\r\n\r\nAgree with @MeshCollider and @jnewbery (except the point of deprecating the use of testnet/regtest in config file).",
      "created_at" : "2017-12-11T18:56:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350821889",
      "id" : 350821889,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-11T18:56:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350821889",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, getting that behaviour requires marginally more invasive changes, but I think it's worth it (and they're not *that* invasive). New patch series accompanying this comment which:\r\n\r\n * has arg precedence being: command-line arguments, net-specific config file options, default config file options\r\n * will only use config file options for -addnode and -wallet if you're on mainnet or put them in the right [regtest] or [testnet] section or add a `regtest.` or `testnet.` prefix\r\n * only allows -testnet and -regtest to be specified in the default section or on the command line (ie, [regtest] testnet=1 silliness is silently ignored)\r\n * for single-value options, precedence is (a) last value specified on the command line, (b) first value specified in the network section of the config file, and finally (c) first value specified in the default section of the config file. the last vs first difference between cli and conf is weird, but matches current behaviour. the code would be slightly improved by making it consistent.\r\n\r\nI think that should behave pretty much as expected -- specifying things on the command line will always take effect, having a testnet specific config and just invoking \"bitcoind -conf=testnet.conf\" should work fine, having separate configs for mainnet, regtest and testnet in a single file with different options should work too.\r\n\r\nFrom the code side of things, I've made a bunch of changes:\r\n\r\n * I've dropped mapArgs, and split mapMultiArgs into mapOverrideArgs (for cli arguments are ForceSetArg) and mapConfigArgs (for config files)\r\n * I've listed the net-specific options explicitly in util.cpp rather than having each use of the options specify that they're net-specific; seems simpler and much more robust.\r\n * I've moved ChainNameFromCommandLine from chainparamsbase into util, so it can have more precise access to how -testnet/-regtest were specified\r\n * I've dropped the filename argument from ReadConfigFile and split most of the logic into ReadConfigStream, which makes it more unit-testable\r\n\r\nI've added some unit tests, but they're a bit basic; I haven't done a functional test either. (And it's still a bit early for detailed code style nits, though I've tried to make a token effort to avoid them :) )\r\n\r\nEdit: Oh, the previous pass is commit 907dd64994e945a30833200ce1131840b06c8ab7 at https://github.com/ajtowns/bitcoin/tree/netconf-sections-v1 on the off chance someone wants to look at it.",
      "created_at" : "2017-12-12T10:22:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-351008713",
      "id" : 351008713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2017-12-12T10:24:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351008713",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Okay, here's something for first pass reviews I think.\r\n\r\nThe first five commits do some refactoring on ChainNameFromCommandLine (moving it from chainparamsbase.cpp into util.cpp:ArgsManager) and ReadConfigFile, primarily to make it easier to add tests for both of them.\r\n\r\n    c5b5997e1 Move ChainNameFromCommandLine into ArgsManager\r\n    eedd60951 [tests] Add unit tests for ChainNameFromCommandLine\r\n    f1665f160 Separate out ReadConfigStream from ReadConfigFile\r\n    0e78382c3 [tests] Add unit tests for ReadConfigStream\r\n    d4367e1c6 [tests] Check ChainNameFromCommandLine works with config entries\r\n\r\nThe next commit switches from mapArgs and mapMultiArgs (for single and multi value options) to mapConfigArgs and mapOverrideArgs (for config file options and commandline/forceset options).\r\n\r\n    bdb0c2857 ArgsManager: keep command line and config file arguments separate\r\n\r\nThe next commit is the first one that should change behaviour, and does most of the work. Unit test, and update to functional test are in the following commits.\r\n\r\n    0e6679466 ArgManager: add support for config sections\r\n    7a51198d3 [tests] Unit tests for config file sections\r\n    359c78e2e [tests] Use regtest section in functional tests configs\r\n\r\nThe next commit changes the behaviour of the addnode, connect, port, bind, rpcport, rpcbind and wallet options: when they're specified in the config file they'll only apply to mainnet unless you use a [regtest] or [test] header (or a \"regtest.\" or \"test.\" prefix).\r\n\r\n    7be1ddd31 ArgsManager: limit some options to only apply on mainnet when in default section\r\n    c031709db [tests] Unit tests for section-specific config entries\r\n\r\nPenultimately, there's special handling for the -regtest and -testnet options, so that ChainNameFromCommandLine will ignore bogus entries like \"[regtest] testnet=1\" or \"[regtest] noregtest\" and won't return weird results if invoked after the initial call to Select(Base)Params() with a pathological config file like that. cf jnewbery's comments in https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350753811\r\n\r\n    2933f6016 ArgsManager: special handling for -regtest and -testnet\r\n    22da57f19 [tests] Unit tests for -testnet/-regtest in [test]/[regtest] sections\r\n\r\nAnd finally there's also an update for the release notes.\r\n\r\n    ee91028e7 Add config changes to release notes\r\n\r\nNotes:\r\n\r\nI've called the member variables things like \"m_mapConfigArgs\" rather than fully snake-case map_config_args or similar as a compromise between the coding style and what's already in use in the class.\r\n\r\nI needed a few helper functions with access to protected ArgsManager member variables; rather than add them to util.h directly, I made a friend class for them, ArgsManagerHelper. It's not crazy pretty but it seems alright. Maybe they should go in util_helper.h or similar though?\r\n\r\nI got the locks wrong for cs_args and csPathCached initially -- was tempted to add \"AssetLockNotHeld(gArgs.cs_args)\" to GetDataDir to help avoid this, but it runs into two problems: in some threads GetDataDir() is called before any locks are acquired leaving lockstack==nullptr and causing a segfault (which can easily be avoided by just adding the assert after LOCK(csPathCached)); and cs_args is protected so it would've required another ArgsManagerHelper functions.\r\n\r\nThe datadir option is a little tricky. Currently you have three options:\r\n\r\n  - don't specify -datadir anywhere, just use the default\r\n  - specify -datadir on the command line\r\n  - specify -datadir in the config file only (the config file may be located via the default datadir)\r\n\r\nWith these patches it would be possible to have a fourth option: specify datadir in the applicable network section of the configfile, allowing a single config file to specify different datadirs for regtest and testnet. At present the code locks datadir into place before selecting the network, so that hasn't been implemented in this PR.\r\n\r\nThe fact that -addnode, -connect, etc only apply to main net is specified in util.cpp rather than in the files that care about the options. This is something that can be cleaned up in the rework of argument handling that @MeshCollider has been working on.\r\n\r\nI think the approach makes sense at this point, so reviews appreciated and nits welcome I guess!",
      "created_at" : "2018-01-03T05:46:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-354941242",
      "id" : 354941242,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-01-03T05:46:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/354941242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Was already wondering why this was closed!\r\n\r\nEdit: overall looks ok to me! had some small comments in person, but nothing major. Will test this.",
      "created_at" : "2018-03-05T19:30:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-370535273",
      "id" : 370535273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11862",
      "updated_at" : "2018-03-05T19:54:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370535273",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172686778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172686778"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This `else` isn't required. You can just drop through after the `if` block. (in the commit 4f3766f7d you can remove the code unit from around the LOCK in `ReadConfigStream`. It was only there so the lock was released before the call to `ClearDatadirCache()`.",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-06T22:46:24Z",
      "diff_hunk" : "@@ -647,14 +763,15 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& streamConfig)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    AssertLockNotHeld(cs_args);\n \n-    {\n+    if (!streamConfig.good()) {\n+        return; // No bitcoin.conf file is OK\n+    } else {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172686778",
      "id" : 172686778,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 223,
      "path" : "src/util.cpp",
      "position" : 223,
      "pull_request_review_id" : 101747445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-06T23:27:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172686778",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172695532"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172695532"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: if clauses should either be on the same line as the if conditional, or with braces (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md)",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-06T23:26:22Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172695532",
      "id" : 172695532,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 9,
      "path" : "src/util.cpp",
      "position" : 9,
      "pull_request_review_id" : 101747445,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-06T23:27:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172695532",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854201"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854201"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is there any reason not to make this a namespace, rather than a class with a bunch of static functions?",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T14:16:23Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854201",
      "id" : 172854201,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 5,
      "path" : "src/util.cpp",
      "position" : 5,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854201",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854433"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854433"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style nit: new code should use snake_case for arguments and variables.",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T14:17:00Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854433",
      "id" : 172854433,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 7,
      "path" : "src/util.cpp",
      "position" : 7,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172854433",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172865874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172865874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can replace the `readlines()` with `read()` and the write below with `f.write(\"datadir=\" + new_data_dir + \"\\n\" + conf_file_contents)`. That's a bit more compact, but both are fine.",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T14:50:35Z",
      "diff_hunk" : "@@ -29,8 +29,14 @@ def run_test(self):\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n-        with open(conf_file, 'a', encoding='utf8') as f:\n+\n+        # datadir needs to be set before [regtest] section\n+        conf_file_contents = open(conf_file, encoding='utf8').readlines()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172865874",
      "id" : 172865874,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 7,
      "path" : "test/functional/feature_config_args.py",
      "position" : 7,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172865874",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172870069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172870069"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps add a comment for why we need this function (and another comment lower down next to `m_setSectionOnlyArgs` explaining why those particular arguments shouldn't be applied to non-mainnet configs by default).",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T15:02:47Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172870069",
      "id" : 172870069,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 7,
      "path" : "src/util.cpp",
      "position" : 7,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172870069",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172872217"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172872217"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does it makes more sense to have this as a file-level constant rather than a member of ArgsManager?",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T15:09:42Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, strArg))\n+                return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& strNetArg)\n+    {\n+        std::string v;\n+        if (!GetArgHelper(&v, am.m_mapOverrideArgs, strNetArg, true)) {\n+            if (!GetArgHelper(&v, am.m_mapConfigArgs, strNetArg, true)) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(v); // is set, so evaluate\n+    }\n+};\n+\n+ArgsManager::ArgsManager(void) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172872217",
      "id" : 172872217,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 94,
      "path" : "src/util.cpp",
      "position" : 94,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172872217",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172876541"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172876541"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This assert can be hit. Try running `feature_pruning.py` for example:\r\n\r\n```\r\nbitcoind: util.cpp:456: static std::__cxx11::string ArgsManagerHelper::SectionArg(const ArgsManager&, const string&): Assertion `strArg.length() > 1 && strArg[0] == '-'' failed.\r\n```",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T15:21:19Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172876541",
      "id" : 172876541,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 22,
      "path" : "src/util.cpp",
      "position" : 22,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172876541",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172879970"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172879970"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it possible to log when a default section config is not used? It could be confusing for users who specify `-addnode`, `-connect`, etc in the default section, expecting the config to be picked up.",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T15:30:26Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172879970",
      "id" : 172879970,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 71,
      "path" : "src/util.cpp",
      "position" : 71,
      "pull_request_review_id" : 101941911,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T15:31:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172879970",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923052"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923052"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe this is catching a legitimate bug in the caller; confirming at the minute.",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T17:35:07Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923052",
      "id" : 172923052,
      "in_reply_to_id" : 172876541,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 22,
      "path" : "src/util.cpp",
      "position" : 22,
      "pull_request_review_id" : 102025081,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T17:35:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923052",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923435"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923435"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As in \"Warning: you're running on testnet, so your -addnode setting didn't get applied\" ?",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T17:36:24Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923435",
      "id" : 172923435,
      "in_reply_to_id" : 172879970,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 71,
      "path" : "src/util.cpp",
      "position" : 71,
      "pull_request_review_id" : 102025503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T17:36:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172923435",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172924025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172924025"
         }
      },
      "author_association" : "OWNER",
      "body" : "Or \"Warning: Setting X specified outside configuration section is only applied on mainnet\"",
      "commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "created_at" : "2018-03-07T17:38:13Z",
      "diff_hunk" : "@@ -435,11 +435,116 @@ static void InterpretNegativeSetting(std::string& strKey, std::string& strValue)\n     }\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    inline static bool UseDefaultSection(const ArgsManager& am, const std::string& strArg)\n+    {\n+        if (am.m_strSection == CBaseChainParams::MAIN)\n+            return true;\n+        else if (am.m_setSectionOnlyArgs.count(strArg) == 0)\n+            return true;\n+        else\n+            return false;\n+    }\n+\n+    typedef std::map<std::string, std::vector<std::string>> map_args;\n+\n+    /** Convert regular argument into the section-specific setting */\n+    inline static std::string SectionArg(const ArgsManager& am, const std::string& strArg)\n+    {\n+        assert(strArg.length() > 1 && strArg[0] == '-');\n+        return \"-\" + am.m_strSection + \".\" + strArg.substr(1);\n+    }\n+\n+    /** Find arguments in a map and add them to a vector */\n+    inline static void AddArgs(std::vector<std::string>& vRes, const map_args& mapArgs, const std::string& strArg)\n+    {\n+        auto it = mapArgs.find(strArg);\n+        if (it != mapArgs.end()) {\n+            vRes.insert(vRes.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline bool GetArgHelper(std::string* result, const map_args& mapArgs, const std::string& strArg, bool getLast = false)\n+    {\n+        auto it = mapArgs.find(strArg);\n+\n+        if (it == mapArgs.end() || it->second.empty())\n+            return false;\n+\n+        if (result != nullptr) {\n+            if (getLast) {\n+                *result = it->second.back();\n+            } else {\n+                *result = it->second.front();\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /* Get the string value of an argument, returning true if found, or\n+     * false if not found.\n+     */\n+    static inline bool GetArg(const ArgsManager &am, std::string* result, const std::string& strArg)\n+    {\n+        LOCK(am.cs_args);\n+\n+        if (GetArgHelper(result, am.m_mapOverrideArgs, strArg, true))\n+            return true;\n+\n+        if (!am.m_strSection.empty()) {\n+            if (GetArgHelper(result, am.m_mapConfigArgs, SectionArg(am, strArg)))\n+                return true;\n+        }\n+\n+        if (UseDefaultSection(am, strArg)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172924025",
      "id" : 172924025,
      "in_reply_to_id" : 172879970,
      "original_commit_id" : "bcab6fa16afbd83f9e308db642f2a7f277bdf597",
      "original_position" : 71,
      "path" : "src/util.cpp",
      "position" : 71,
      "pull_request_review_id" : 102026150,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11862",
      "updated_at" : "2018-03-07T17:38:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172924025",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
