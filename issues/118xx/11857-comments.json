[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155908730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155908730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Instead of blocking, give 503?",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-09T01:32:57Z",
      "diff_hunk" : "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155908730",
      "id" : 155908730,
      "original_commit_id" : "ae276cead580e459d881db5b7439b618ec0854a6",
      "original_position" : 13,
      "path" : "src/rest.cpp",
      "position" : 13,
      "pull_request_review_id" : 82311538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155908730",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155915071"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155915071"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Comment incomplete or outdated?",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-09T06:51:20Z",
      "diff_hunk" : "@@ -1426,9 +1433,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (fRequestShutdown) break;\n \n-                // LoadBlockIndex will load fTxIndex from the db, or set it if\n+                // LoadBlockIndex will load fHavePruned if we've ever removed a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155915071",
      "id" : 155915071,
      "original_commit_id" : "ae276cead580e459d881db5b7439b618ec0854a6",
      "original_position" : 33,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 82318411,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155915071",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "High-Level Concept ACK. As for your two notes:\r\n\r\n> an alternative would be to split the txindex into a separate DB and do a data migration on upgrade.\r\n\r\nI'd vote strongly for this. Keeping them separate is good.\r\n\r\n> though it may be fine to just do the TxIndex write directly in the BlockConnected method.\r\n\r\nYes, I think you should just do this. I'd like to move the CValidationInterface semantics to no longer be a single thread run on the scheduler but instead multiple scheduler threads that process events and only guarantee order for individual clients instead of globally.",
      "created_at" : "2017-12-09T16:03:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-350481060",
      "id" : 350481060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2017-12-09T16:03:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/350481060",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155936523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155936523"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Move after Init?",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-10T01:58:23Z",
      "diff_hunk" : "@@ -0,0 +1,242 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(const std::shared_ptr<CBlockTreeDB>& db) :\n+    m_db(db), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadTxIndexBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (!best_block_hash.IsNull()) {\n+        auto it = mapBlockIndex.find(best_block_hash);\n+        if (it == mapBlockIndex.end()) {\n+            FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+            return false;\n+        }\n+\n+        const auto pindex = it->second;\n+        m_best_block_index = pindex;\n+\n+        auto chain_tip = chainActive.Tip();\n+        if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            m_synced = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    auto chain_tip = chainActive.Tip();\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    m_db->ReadFlag(\"txindex\", f_migrate_index);\n+    if (f_migrate_index) {\n+        m_best_block_index = chain_tip;\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        LogPrintf(\"Syncing txindex with block chain from height %d\\n\",\n+                  pindex ? pindex->nHeight + 1 : 0);\n+\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxIndex(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    {\n+        LOCK(cs_main);\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxIndex(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    RegisterValidationInterface(this);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r155936523",
      "id" : 155936523,
      "original_commit_id" : "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "original_position" : 226,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 82339759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/155936523",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239136"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239136"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "No, this has to be registered before `m_synced` is set to true in Init.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-12T00:11:43Z",
      "diff_hunk" : "@@ -0,0 +1,242 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(const std::shared_ptr<CBlockTreeDB>& db) :\n+    m_db(db), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadTxIndexBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (!best_block_hash.IsNull()) {\n+        auto it = mapBlockIndex.find(best_block_hash);\n+        if (it == mapBlockIndex.end()) {\n+            FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+            return false;\n+        }\n+\n+        const auto pindex = it->second;\n+        m_best_block_index = pindex;\n+\n+        auto chain_tip = chainActive.Tip();\n+        if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            m_synced = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    auto chain_tip = chainActive.Tip();\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    m_db->ReadFlag(\"txindex\", f_migrate_index);\n+    if (f_migrate_index) {\n+        m_best_block_index = chain_tip;\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        LogPrintf(\"Syncing txindex with block chain from height %d\\n\",\n+                  pindex ? pindex->nHeight + 1 : 0);\n+\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxIndex(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    {\n+        LOCK(cs_main);\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxIndex(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    RegisterValidationInterface(this);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239136",
      "id" : 156239136,
      "in_reply_to_id" : 155936523,
      "original_commit_id" : "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "original_position" : 226,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 82684125,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239136",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239250"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239250"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It's not really unavailable, just that the background process needs to catch up, which should happen quickly.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-12T00:12:34Z",
      "diff_hunk" : "@@ -350,6 +351,10 @@ static bool rest_tx(HTTPRequest* req, const std::string& strURIPart)\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n+    if (g_txindex) {\n+        g_txindex->BlockUntilSyncedToCurrentChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156239250",
      "id" : 156239250,
      "in_reply_to_id" : 155908730,
      "original_commit_id" : "ae276cead580e459d881db5b7439b618ec0854a6",
      "original_position" : 13,
      "path" : "src/rest.cpp",
      "position" : 13,
      "pull_request_review_id" : 82684252,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156239250",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156541766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156541766"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, fixed.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-13T01:14:22Z",
      "diff_hunk" : "@@ -1426,9 +1433,9 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 if (fRequestShutdown) break;\n \n-                // LoadBlockIndex will load fTxIndex from the db, or set it if\n+                // LoadBlockIndex will load fHavePruned if we've ever removed a",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156541766",
      "id" : 156541766,
      "in_reply_to_id" : 155915071,
      "original_commit_id" : "ae276cead580e459d881db5b7439b618ec0854a6",
      "original_position" : 33,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 83036066,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156541766",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Concept ACK\r\n\r\n> an alternative would be to split the txindex into a separate DB and do a data migration on upgrade.\r\n\r\nI agree that would be preferable (though not necessarily in this PR, I don't think the scope here should be extended further).  The transaction index has a completely different access pattern from the block index. This came up in #10922 and other places.\r\n\r\nAlso for safety and flexibility it would be good to have separate indexers, and to not have it integrated into consensus-critical block handling.",
      "created_at" : "2017-12-13T07:37:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351308356",
      "id" : 351308356,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2017-12-13T07:59:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351308356",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not actaully sure that its unrelated - currently txindex is required to be kept in-sync and be present in the block tree DB before the coins for a block are flushed to the utxodb. Moving it to the background without bending over backwards to keep things in-sync would result in \"corrupt\" (I assume just missing entries) tx index in some cases on downgrade. Its not a huge deal, but I think moving the txindex into a separate DB would be really nice to do before (or in the same PR) things are background-flushed.",
      "created_at" : "2017-12-13T16:58:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351453993",
      "id" : 351453993,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2017-12-13T16:58:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351453993",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@TheBlueMatt @laanwj I updated this PR to split the database and added a migration. The migration took ~103 min on an AWS m4.large with data on a gp2 EBS volume (non-local SSD). So that's kind of painful. I could change the migration to happen in the background thread, but the UX might be weird for people upgrading because the RPC endpoint would report that the txindex is catching up. Open to suggestions here.",
      "created_at" : "2017-12-13T17:42:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351467099",
      "id" : 351467099,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2017-12-13T17:44:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351467099",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems to be missing migration (forget to push?). Doing migration in the background after start seems fine, better to wait with most things working than it just hanging startup, just have to make sure it doesn't overwrite new entries or you'd end up pointing to a reorg'd-out block's copy (though I think thats probably not technically a problem, it seems strange).\r\n\r\nAs for threading, it would be really nice to have the flushing for new blocks happen directly in the scheduler/validation interface threading, with the upgrade either in the init thread at the end (it just hangs around for the entire program's execution waiting for shutdown to start, so as long as the migration is interruptible that'd be a fine place for it) or a new thread.",
      "created_at" : "2017-12-13T18:54:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351487094",
      "id" : 351487094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2017-12-13T18:54:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351487094",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@TheBlueMatt Migration is here: https://github.com/bitcoin/bitcoin/pull/11857/commits/a252d466ca0c44a455051d01c43e50e15643c423#diff-81e4f16a1b5d5b7ca25351a63d07cb80R446. Called from `Start()`, though it could be moved to `ThreadSync` (the dedicated thread for the txindex initial sync).\r\n\r\nI also changed the new block flushing to happen directly in the `BlockConnected` callback as you suggested.",
      "created_at" : "2017-12-13T20:10:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-351507915",
      "id" : 351507915,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2017-12-13T20:10:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/351507915",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156770888"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156770888"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Separating these if statements loses coherency - if we crash we may have a bogus txindex and no way to detect it. Should likely instead do if (batch_newdb.SizeEstimate() + batch_olddb.SizeEstimate() > batch_size)........",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-13T20:16:59Z",
      "diff_hunk" : "@@ -424,3 +425,129 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+        }\n+        if (batch_olddb.SizeEstimate() > batch_size) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156770888",
      "id" : 156770888,
      "original_commit_id" : "e95ed5ac89e1393f44c32a3ee5d026c1088477f1",
      "original_position" : 110,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 83303997,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156770888",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156804378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156804378"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2017-12-13T22:26:59Z",
      "diff_hunk" : "@@ -424,3 +425,129 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+        }\n+        if (batch_olddb.SizeEstimate() > batch_size) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r156804378",
      "id" : 156804378,
      "in_reply_to_id" : 156770888,
      "original_commit_id" : "e95ed5ac89e1393f44c32a3ee5d026c1088477f1",
      "original_position" : 110,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 83341524,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/156804378",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159895945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159895945"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[db] Create separate database for txindex.\"\r\n\r\nMaybe change to `const auto& tuple` to avoid a copy while iterating.\r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T15:01:03Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159895945",
      "id" : 159895945,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 17,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159895945",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897305"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897305"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[db] Create separate database for txindex.\"\r\n\r\nMaybe declare const and add comment (16MiB).",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T15:06:43Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897305",
      "id" : 159897305,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 37,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897305",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897839"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[db] Create separate database for txindex.\"\r\n\r\nMaybe log an error in this case. I don't think it would be expected for pcursor->Valid() to return true but pcursor->GetKey to fail.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T15:09:28Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159897839",
      "id" : 159897839,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 54,
      "path" : "src/txdb.cpp",
      "position" : 74,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159897839",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159900328"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[db] Create separate database for txindex.\"\r\n\r\nThis is duplicating code inside the for loop, and also skipping the last compact range on the old db. Maybe just flush and compact once at the top of the loop:\r\n\r\n```c++\r\nfor (pcursor->Seek(begin_key);; pcursor->Next()) {\r\n    if (!pcursor->Valid() || batch_newdb.SizeEstimate()...) {\r\n        ...flush and compact...\r\n    }\r\n    if (!pcursor->Valid()) break;\r\n    ...move entry at cursor...\r\n}\r\n```\r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T15:20:13Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159900328",
      "id" : 159900328,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 94,
      "path" : "src/txdb.cpp",
      "position" : 115,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159900328",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159901942"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159901942"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[db] Create separate database for txindex.\"\r\n\r\nUnclear why migration should be tied to txindex flag. At first glance, it would seem simpler to reason about possible states and also more robust if the code just always moved DB_TXINDEX entries from the old location to the new location independent of the flag. Maybe add a code comment here to clarify rationale.\r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T15:26:46Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159901942",
      "id" : 159901942,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 25,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159901942",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159904033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159904033"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[db] Methods on TxIndexDB to persist best block hash. \"\r\n\r\nIs this a mistake? Probably shouldn't be adding an unused parameter to an unrelated method in this commit.\r\n  \r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T15:34:31Z",
      "diff_hunk" : "@@ -142,9 +142,15 @@ class TxIndexDB : public CDBWrapper\n     /// Write a batch of transaction positions to the DB.\n     bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n \n+    /// Read the best block hash of the chain that the txindex is in sync with.\n+    bool ReadBestBlockHash(uint256& hash) const;\n+\n+    /// Write the best block hash of the chain that the txindex is in sync with.\n+    bool WriteBestBlockHash(const uint256& block_hash);\n+\n     /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n     /// been upgraded yet to the new database.\n-    bool MigrateData(CBlockTreeDB& block_tree_db);\n+    bool MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159904033",
      "id" : 159904033,
      "original_commit_id" : "0f77eab3cedfbf9e75ce8c15fc837da09a1cb952",
      "original_position" : 13,
      "path" : "src/txdb.h",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159904033",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159912603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159912603"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[index] Create new TxIndex class.\"\r\n\r\nMaybe restructure the code to get rid of this early successful return. It's a little confusing, and also not clear if it's 100% correct. For example I would think that if best_block_hash and chain_tip are both null, m_synced should still be set to true below.\r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T16:07:29Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159912603",
      "id" : 159912603,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 49,
      "path" : "src/index/txindex.cpp",
      "position" : 68,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159912603",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159913072"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159913072"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[index] Create new TxIndex class.\"\r\n\r\nCould `const auto&` to avoid a copy.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T16:09:29Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159913072",
      "id" : 159913072,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 73,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159913072",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915333"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[index] Create new TxIndex class.\"\r\n\r\nConsider moving WriteBestBlockHash call out to caller so the stored best block and m_best_block_index get updated together. It's a little unexpected to see one value written without the other. Might want to rename this method to `WriteBlockTxns` if you do this.\r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T16:19:07Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915333",
      "id" : 159915333,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 77,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915333",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915638"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[index] Create new TxIndex class.\"\r\n\r\n>No, this has to be registered before m_synced is set to true in Init.\r\n\r\nDefinitely worth noting this in a code comment. Also maybe m_synced should be called m_initialized or m_started to be clearer that it changes from false to true just once on startup, and isn't updated in an ongoing way.\r\n\r\n  \r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T16:20:16Z",
      "diff_hunk" : "@@ -0,0 +1,242 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <future>\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(const std::shared_ptr<CBlockTreeDB>& db) :\n+    m_db(db), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadTxIndexBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (!best_block_hash.IsNull()) {\n+        auto it = mapBlockIndex.find(best_block_hash);\n+        if (it == mapBlockIndex.end()) {\n+            FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+            return false;\n+        }\n+\n+        const auto pindex = it->second;\n+        m_best_block_index = pindex;\n+\n+        auto chain_tip = chainActive.Tip();\n+        if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            m_synced = true;\n+        }\n+\n+        return true;\n+    }\n+\n+    auto chain_tip = chainActive.Tip();\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index;\n+    m_db->ReadFlag(\"txindex\", f_migrate_index);\n+    if (f_migrate_index) {\n+        m_best_block_index = chain_tip;\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        LogPrintf(\"Syncing txindex with block chain from height %d\\n\",\n+                  pindex ? pindex->nHeight + 1 : 0);\n+\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxIndex(vPos, pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    {\n+        LOCK(cs_main);\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip()...\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    // ...otherwise put a callback in the validation interface queue and wait\n+    // for the queue to drain enough to execute it (indicating we are caught up\n+    // at least with the time we entered this function).\n+    std::promise<void> promise;\n+    CallFunctionInValidationInterfaceQueue([&promise] {\n+        promise.set_value();\n+    });\n+    promise.get_future().wait();\n+\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxIndex(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    RegisterValidationInterface(this);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159915638",
      "id" : 159915638,
      "in_reply_to_id" : 155936523,
      "original_commit_id" : "41022ec2770d328c55191f8b1bc36b750e46f9a0",
      "original_position" : 226,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159915638",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159917226"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159917226"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[index] Create new TxIndex class.\"\r\n\r\nWhy use a different code for DB_TXINDEX_BEST_BLOCK than DB_BEST_BLOCK? Why even define a new constant at all? It seems strange that the new txindex format would diverge unnecessarily from the old format here when it isn't doing do that in other places. Should add a code comment explaining if there is a reason.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T16:27:02Z",
      "diff_hunk" : "@@ -29,6 +29,7 @@ static const char DB_HEAD_BLOCKS = 'H';\n static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n+static const char DB_TXINDEX_BEST_BLOCK = 'T';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159917226",
      "id" : 159917226,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 4,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159917226",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159923255"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159923255"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[index] Create new TxIndex class.\"\r\n\r\nI'm not sure this case and the one above should be errors given that BlockConnected calls are queued up in the notification thread and may not be up to date with chainActive (which is what ThreadSync syncs toward). Seems like it would be right (and simpler) to just call WriteBlock unconditionally here.\r\n  \r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-05T16:50:18Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r159923255",
      "id" : 159923255,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 97,
      "path" : "src/index/txindex.cpp",
      "position" : 182,
      "pull_request_review_id" : 86924561,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/159923255",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286747"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, I moved the check for null `chain_tip` up to fix that case. However, I still think the early return here is necessary.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:50:25Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286747",
      "id" : 160286747,
      "in_reply_to_id" : 159912603,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 49,
      "path" : "src/index/txindex.cpp",
      "position" : 68,
      "pull_request_review_id" : 87376715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286747",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:50:32Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160286762",
      "id" : 160286762,
      "in_reply_to_id" : 159913072,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 73,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 87376736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160286762",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287005"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This isn't checking against chainActive, it is just asserting that BlockConnected gets called with blocks in order (even if chainActive is ahead). It's important to note that if the BlockConnected callbacks are running, then `m_synced` is true an `ThreadSync` has exited. I added more comments to these fields/methods in the header file to hopefully make that more clear.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:52:05Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287005",
      "id" : 160287005,
      "in_reply_to_id" : 159923255,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 97,
      "path" : "src/index/txindex.cpp",
      "position" : 182,
      "pull_request_review_id" : 87376999,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287005",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287130"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, that wasn't even used. Left over from a previous version where the database wasn't split out.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:52:59Z",
      "diff_hunk" : "@@ -29,6 +29,7 @@ static const char DB_HEAD_BLOCKS = 'H';\n static const char DB_FLAG = 'F';\n static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n+static const char DB_TXINDEX_BEST_BLOCK = 'T';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287130",
      "id" : 160287130,
      "in_reply_to_id" : 159917226,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 4,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 87377151,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287130",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287161"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:53:09Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287161",
      "id" : 160287161,
      "in_reply_to_id" : 159895945,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 17,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 87377189,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287161",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287269"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I elaborated on the comment. I think this is the best way to determine whether a migration is necessary. LMK if you think it needs further explanation.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:54:02Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287269",
      "id" : 160287269,
      "in_reply_to_id" : 159901942,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 25,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 87377320,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287269",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287498"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287498"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:55:47Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287498",
      "id" : 160287498,
      "in_reply_to_id" : 159897305,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 37,
      "path" : "src/txdb.cpp",
      "position" : null,
      "pull_request_review_id" : 87377606,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287498",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287605"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287605"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think you are right that this should never happen, so I opted to return an error instead of logging and completing the migration.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:56:38Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287605",
      "id" : 160287605,
      "in_reply_to_id" : 159897839,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 54,
      "path" : "src/txdb.cpp",
      "position" : 74,
      "pull_request_review_id" : 87377744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287605",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287986"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm, the logic gets kind of tricky since there's also the early break if the cursor is valid but iterates past the DB_TXINDEX range. Also the CompactRange after the loop compacts over the entire range, not just from the previous batch write point. What do you mean that it skips the last compact range on the old DB? It shouldn't.\r\n\r\nThis code was mostly copied from `CCoinsViewDB::Upgrade` if that wasn't clear.\r\n  ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-08T23:59:25Z",
      "diff_hunk" : "@@ -424,3 +424,107 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (auto tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    int report_done = 0;\n+    size_t batch_size = 1 << 24;\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            break;\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.\n+        if (++count % 256 == 0) {\n+            uint32_t high = 0x100 * *key.second.begin() + *(key.second.begin() + 1);\n+            int percentage_done = (int)(high * 100.0 / 65536.0 + 0.5);\n+            if (report_done < percentage_done/10) {\n+                LogPrintf(\"[%d%%]...\", percentage_done);\n+                report_done = percentage_done/10;\n+            }\n+        }\n+\n+        CDiskTxPos value;\n+        if (!pcursor->GetValue(value)) {\n+            return error(\"%s: cannot parse txindex record\", __func__);\n+        }\n+        batch_newdb.Write(key, value);\n+        batch_olddb.Erase(key);\n+\n+        if (batch_newdb.SizeEstimate() > batch_size || batch_olddb.SizeEstimate() > batch_size) {\n+            WriteBatch(batch_newdb);\n+            batch_newdb.Clear();\n+            CompactRange(prev_key_newdb, key);\n+            prev_key_newdb = key;\n+\n+            block_tree_db.WriteBatch(batch_olddb);\n+            batch_olddb.Clear();\n+            block_tree_db.CompactRange(prev_key_olddb, key);\n+            prev_key_olddb = key;\n+        }\n+    }\n+\n+    WriteBatch(batch_newdb);\n+    CompactRange(begin_key, key);\n+    block_tree_db.WriteBatch(batch_olddb);\n+    block_tree_db.CompactRange(begin_key, key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160287986",
      "id" : 160287986,
      "in_reply_to_id" : 159900328,
      "original_commit_id" : "1ae2904ea5e333c28a33af8c6ce6526d8554f9f6",
      "original_position" : 94,
      "path" : "src/txdb.cpp",
      "position" : 115,
      "pull_request_review_id" : 87378208,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160287986",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288280"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288280"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It does get used. The `MigrateData` implementation is modified to write the block hash in this commit before deleting the txindex flag from the old DB.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-09T00:01:43Z",
      "diff_hunk" : "@@ -142,9 +142,15 @@ class TxIndexDB : public CDBWrapper\n     /// Write a batch of transaction positions to the DB.\n     bool WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos);\n \n+    /// Read the best block hash of the chain that the txindex is in sync with.\n+    bool ReadBestBlockHash(uint256& hash) const;\n+\n+    /// Write the best block hash of the chain that the txindex is in sync with.\n+    bool WriteBestBlockHash(const uint256& block_hash);\n+\n     /// Migrate txindex data from the block tree DB, where it may be for older nodes that have not\n     /// been upgraded yet to the new database.\n-    bool MigrateData(CBlockTreeDB& block_tree_db);\n+    bool MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288280",
      "id" : 160288280,
      "in_reply_to_id" : 159904033,
      "original_commit_id" : "0f77eab3cedfbf9e75ce8c15fc837da09a1cb952",
      "original_position" : 13,
      "path" : "src/txdb.h",
      "position" : null,
      "pull_request_review_id" : 87378587,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288280",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288890"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288890"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I kind of prefer to keep the DB writes together. I'd hoped that the access pattern would make it clear:\r\n\r\n```c++\r\nif (WriteBlock(*block, pindex)) {\r\n    m_best_block_index = pindex;\r\n}\r\n```",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-01-09T00:06:21Z",
      "diff_hunk" : "@@ -0,0 +1,129 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (!chain_tip || pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (auto tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r160288890",
      "id" : 160288890,
      "in_reply_to_id" : 159915333,
      "original_commit_id" : "669d39e0df5b74fcac11a5055567eefd2f46ce8c",
      "original_position" : 77,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 87379326,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/160288890",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Needs rebase (probably a simple one, only init.cpp conflicted).",
      "created_at" : "2018-02-08T18:50:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364211135",
      "id" : 364211135,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-02-08T18:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364211135",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167242419"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167242419"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should this have a distinct error code, rather than `RPC_INVALID_ADDRESS_OR_KEY`? If I understand correctly, an RPC consumer should wait a little and try again if this happens. ",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-02-09T14:35:04Z",
      "diff_hunk" : "@@ -177,10 +183,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167242419",
      "id" : 167242419,
      "original_commit_id" : "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "original_position" : 45,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 45,
      "pull_request_review_id" : 95437789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167242419",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167244773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167244773"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If it really takes 103 minutes on a fast EC2 instance, maybe make it 1%? Or once a minute? QT already shows 1% intervals during the upgrade.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-02-09T14:43:16Z",
      "diff_hunk" : "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167244773",
      "id" : 167244773,
      "original_commit_id" : "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "original_position" : 81,
      "path" : "src/txdb.cpp",
      "position" : 81,
      "pull_request_review_id" : 95437789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167244773",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I also noticed that `indexes` isn't emptied if you set `txindex=0`. That's probably a good thing, e.g. perhaps someone doesn't want to read / update them for a while, but should be documented.\r\n\r\nI was able to reproduce the \"Error opening block database\" QT error (on master) after a fresh reindex (on this branch). No need to use bitcoind to make it go away, simply launch with `-reindex`. That shouldn't be necessary. \r\n\r\nThis also seems to happens on master so might be unrelated:\r\n\r\n```\r\n2018-02-09 16:23:44 init message: Loading block index...\r\n2018-02-09 16:23:44 Wiping LevelDB in /Users/bitcoin/Library/Application Support/Bitcoin/testnet3/blocks/index\r\n2018-02-09 16:23:44 IO error: lock /Users/bitcoin/Library/Application Support/Bitcoin/testnet3/blocks/index/LOCK: already held by process\r\n2018-02-09 16:23:44 Database I/O error\r\n```",
      "created_at" : "2018-02-09T16:15:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364479759",
      "id" : 364479759,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-02-09T16:31:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364479759",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I was comparing the wrong directory sizes above. `chainstate` is for the UTXO set, `txindex` is in `blocks/index` (on master).\r\n\r\nAlso the error I was seeing was unrelated, and hopefully fixed in #12401  ",
      "created_at" : "2018-02-09T19:01:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364527179",
      "id" : 364527179,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-02-09T19:01:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364527179",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167342688"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167342688"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, that's right, an RPC consumer should wait until the index is built. Using the `RPC_INVALID_ADDRESS_OR_KEY` error code for the `\"No such mempool transaction. Use -txindex to enable blockchain transaction queries\"` clause also seems odd to me.\r\n\r\nPerhaps the `RPC_IN_WARMUP` makes sense here, or perhaps a new `RPC_INDEX_UNAVAILABLE` error code.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-02-09T20:50:19Z",
      "diff_hunk" : "@@ -177,10 +183,12 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Block not available\");\n             }\n             errmsg = \"No such transaction found in the provided block\";\n+        } else if (!g_txindex) {\n+            errmsg = \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\";\n+        } else if (!f_txindex_ready) {\n+            errmsg = \"No such mempool transaction. Blockchain transactions are still in the process of being indexed\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167342688",
      "id" : 167342688,
      "in_reply_to_id" : 167242419,
      "original_commit_id" : "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "original_position" : 45,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 45,
      "pull_request_review_id" : 95558369,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167342688",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167346079"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167346079"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The percentage shown in the UI is updated with every percent, it's just the log line that shows increments of 10, as it appends to the same line: `[0%]...[10%]...[20%...]`. Alternatively, it could log progress on a separate line every 30 seconds or something like: \"Upgrading txindex database: n% complete\\n\". I kind of prefer that approach, but I copied how it was done for CCoinsViewDB upgrade.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-02-09T21:07:28Z",
      "diff_hunk" : "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r167346079",
      "id" : 167346079,
      "in_reply_to_id" : 167244773,
      "original_commit_id" : "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "original_position" : 81,
      "path" : "src/txdb.cpp",
      "position" : 81,
      "pull_request_review_id" : 95562771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167346079",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors Thanks for the review!\r\n\r\nI added f1b8b8d to log the txindex build status periodically while it is catching up.\r\n\r\nI agree functional tests would be nice, but I'm having trouble figuring out how to exercise the case where the txindex is catchup up in the test harness. Could maybe sync a node with a few blocks, stop it, delete the txindex database files, restart and then hit the RPC, but it is going to be racey no matter what. Let me know if you have suggestions.\r\n\r\nI'm curious what other people think, but having the block index database elsewhere doesn't bother me too much, because it is special and required. I am imagining that `indexes/` will be for optional indexes that can be built and synced in the background. Also, it doesn't seem worth it to make a migration just to move around the block index directory path.",
      "created_at" : "2018-02-09T21:49:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364578968",
      "id" : 364578968,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-02-09T21:49:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364578968",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery: any thoughts on how to tackle functional tests?",
      "created_at" : "2018-02-10T10:43:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-364642544",
      "id" : 364642544,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-02-10T10:43:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364642544",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322571"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322571"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a lot of moves, since you already move TxIndex::TxIndex. Can you change to create the unique_ptr in the constructor call, e.g.:\r\n\r\n```\r\ng_txindex.reset(new TxIndex(MakeUnique<...>(....));\r\n```\r\n\r\nOr even better, use argument forwarding.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-05T20:45:48Z",
      "diff_hunk" : "@@ -1568,6 +1574,12 @@ bool AppInitMain()\n                 return InitError(strLoadError);\n             }\n         }\n+\n+        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+            auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReset);\n+            g_txindex.reset(new TxIndex(std::move(txindex_db)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322571",
      "id" : 172322571,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 85,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 101320521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322571",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322782"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322782"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Can you make this forwardable?\r\n\r\n```\r\nTxIndex(std::unique_ptr<TxIndexDB> &&db);\r\n```\r\n\r\nOr just create the unique_ptr here, see my other comment regarding g_txindex.reset()",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-05T20:46:40Z",
      "diff_hunk" : "@@ -0,0 +1,74 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172322782",
      "id" : 172322782,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 54,
      "path" : "src/index/txindex.h",
      "position" : 54,
      "pull_request_review_id" : 101320521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172322782",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172323530"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323530"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think it makes sense to add a logging statement in the path here where the method actually blocks.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-05T20:49:33Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172323530",
      "id" : 172323530,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 217,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 101320521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172323530",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172324778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172324778"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Doesn't std::bind already return the right type here?",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-05T20:54:10Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxPos(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {\n+        return;\n+    }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, \"txindex\",\n+                                std::function<void()>(std::bind(&TxIndex::ThreadSync, this)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172324778",
      "id" : 172324778,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 241,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 101320521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172324778",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172325383"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172325383"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe you can do `{DB_TXINDEX, txid}` in C++11.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-05T20:56:15Z",
      "diff_hunk" : "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172325383",
      "id" : 172325383,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 11,
      "path" : "src/txdb.cpp",
      "position" : 11,
      "pull_request_review_id" : 101320521,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172325383",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/2734?v=4",
         "events_url" : "https://api.github.com/users/eklitzke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/eklitzke/followers",
         "following_url" : "https://api.github.com/users/eklitzke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/eklitzke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/eklitzke",
         "id" : 2734,
         "login" : "eklitzke",
         "organizations_url" : "https://api.github.com/users/eklitzke/orgs",
         "received_events_url" : "https://api.github.com/users/eklitzke/received_events",
         "repos_url" : "https://api.github.com/users/eklitzke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/eklitzke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/eklitzke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538666"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Good catch. This came from a copy-paste.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-06T14:47:27Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();\n+    return true;\n+}\n+\n+bool TxIndex::FindTx(const uint256& txid, CDiskTxPos& pos) const\n+{\n+    return m_db->ReadTxPos(txid, pos);\n+}\n+\n+void TxIndex::Interrupt()\n+{\n+    m_interrupt();\n+}\n+\n+void TxIndex::Start()\n+{\n+    // Need to register this ValidationInterface before running Init(), so that\n+    // callbacks are not missed if Init sets m_synced to true.\n+    RegisterValidationInterface(this);\n+    if (!Init()) {\n+        return;\n+    }\n+\n+    m_thread_sync = std::thread(&TraceThread<std::function<void()>>, \"txindex\",\n+                                std::function<void()>(std::bind(&TxIndex::ThreadSync, this)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538666",
      "id" : 172538666,
      "in_reply_to_id" : 172324778,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 241,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 101570901,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538847"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538847"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "That doesn't seem to work because `Read` is templated and can't infer that the initializer list should be cast to a `std::pair`.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-06T14:48:02Z",
      "diff_hunk" : "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172538847",
      "id" : 172538847,
      "in_reply_to_id" : 172325383,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 11,
      "path" : "src/txdb.cpp",
      "position" : 11,
      "pull_request_review_id" : 101571131,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172538847",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552215"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd rather have them on separate lines because I think otherwise there is too much happening on one line (and it would get pretty long).\r\n\r\nRegarding argument forwarding, even if `TxIndex` takes an rvalue-ref, the `std::move` is necessary.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-06T15:25:28Z",
      "diff_hunk" : "@@ -1568,6 +1574,12 @@ bool AppInitMain()\n                 return InitError(strLoadError);\n             }\n         }\n+\n+        if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+            auto txindex_db = MakeUnique<TxIndexDB>(nTxIndexCache, false, fReset);\n+            g_txindex.reset(new TxIndex(std::move(txindex_db)));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552215",
      "id" : 172552215,
      "in_reply_to_id" : 172322571,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 85,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 101587488,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552215",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552923"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552923"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I find it clearer to pass by value here, as is recommended by [this StackOverflow post](https://stackoverflow.com/a/8114913). Is there a big benefit to changing the parameter to an rvalue-ref?",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-06T15:27:27Z",
      "diff_hunk" : "@@ -0,0 +1,74 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_TXINDEX_H\n+#define BITCOIN_INDEX_TXINDEX_H\n+\n+#include <threadinterrupt.h>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <validationinterface.h>\n+\n+class CBlockIndex;\n+\n+/**\n+ * TxIndex is used to look up transactions included in the blockchain by hash.\n+ * The index is written to a keyspace in the block index database and records\n+ * the filesystem location of each transaction by transaction hash.\n+ */\n+class TxIndex final : public CValidationInterface\n+{\n+private:\n+    const std::unique_ptr<TxIndexDB> m_db;\n+\n+    /// Whether the index is in sync with the main chain. The flag is flipped\n+    /// from false to true once, after which point this starts processing\n+    /// ValidationInterface notifications to stay in sync.\n+    std::atomic<bool> m_synced;\n+\n+    /// The last block in the chain that the TxIndex is in sync with.\n+    std::atomic<const CBlockIndex*> m_best_block_index;\n+\n+    std::thread m_thread_sync;\n+    CThreadInterrupt m_interrupt;\n+\n+    /// Initialize internal state from the database and block index.\n+    bool Init();\n+\n+    /// Sync the tx index with the block index starting from the current best\n+    /// block. Intended to be run in its own thread, m_thread_sync, and can be\n+    /// interrupted with m_interrupt. Once the txindex gets in sync, the\n+    /// m_synced flag is set and the BlockConnected ValidationInterface callback\n+    /// takes over and the sync thread exits.\n+    void ThreadSync();\n+\n+    /// Write update index entries for a newly connected block.\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                        const std::vector<CTransactionRef>& txn_conflicted) override;\n+\n+public:\n+    explicit TxIndex(std::unique_ptr<TxIndexDB> db);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552923",
      "id" : 172552923,
      "in_reply_to_id" : 172322782,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 54,
      "path" : "src/index/txindex.h",
      "position" : 54,
      "pull_request_review_id" : 101588357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552923",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552991"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552991"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-06T15:27:38Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/txindex.h>\n+#include <init.h>\n+#include <tinyformat.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <warnings.h>\n+\n+static constexpr int64_t SYNC_LOG_INTERVAL = 30; // seconds\n+\n+std::unique_ptr<TxIndex> g_txindex;\n+\n+template<typename... Args>\n+static void FatalError(const char* fmt, const Args&... args)\n+{\n+    std::string strMessage = tfm::format(fmt, args...);\n+    SetMiscWarning(strMessage);\n+    LogPrintf(\"*** %s\\n\", strMessage);\n+    uiInterface.ThreadSafeMessageBox(\n+        \"Error: A fatal internal error occurred, see debug.log for details\",\n+        \"\", CClientUIInterface::MSG_ERROR);\n+    StartShutdown();\n+}\n+\n+TxIndex::TxIndex(std::unique_ptr<TxIndexDB> db) :\n+    m_db(std::move(db)), m_synced(false), m_best_block_index(nullptr)\n+{}\n+\n+TxIndex::~TxIndex()\n+{\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool TxIndex::Init()\n+{\n+    LOCK(cs_main);\n+\n+    auto chain_tip = chainActive.Tip();\n+    uint256 tip_hash;\n+    if (chain_tip) {\n+        tip_hash = chain_tip->GetBlockHash();\n+    }\n+\n+    // Attempt to migrate txindex from the old database to the new one. Even if\n+    // chain_tip is null, the node could be reindexing and we still want to\n+    // delete txindex records the old database.\n+    if (!m_db->MigrateData(*pblocktree, tip_hash)) {\n+        return false;\n+    }\n+\n+    if (!chain_tip) {\n+        m_synced = true;\n+        return true;\n+    }\n+\n+    uint256 best_block_hash;\n+    if (!m_db->ReadBestBlockHash(best_block_hash)) {\n+        FatalError(\"%s: Failed to read from tx index database\", __func__);\n+        return false;\n+    }\n+\n+    if (best_block_hash.IsNull()) {\n+        return true;\n+    }\n+\n+    auto it = mapBlockIndex.find(best_block_hash);\n+    if (it == mapBlockIndex.end()) {\n+        FatalError(\"%s: Last block synced by txindex is unknown\", __func__);\n+        return false;\n+    }\n+\n+    const auto pindex = it->second;\n+    m_best_block_index = pindex;\n+    if (pindex->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+        m_synced = true;\n+    }\n+\n+    return true;\n+}\n+\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    if (!pindex_prev) {\n+        return chainActive.Genesis();\n+    }\n+\n+    auto pindex = chainActive.Next(pindex_prev);\n+    if (pindex) {\n+        return pindex;\n+    }\n+\n+    return chainActive.Next(chainActive.FindFork(pindex_prev));\n+}\n+\n+void TxIndex::ThreadSync()\n+{\n+    auto pindex = m_best_block_index.load();\n+    if (!m_synced) {\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        int64_t last_log_time = 0;\n+        while (true) {\n+            if (m_interrupt) {\n+                return;\n+            }\n+\n+            {\n+                LOCK(cs_main);\n+                auto pindex_next = NextSyncBlock(pindex);\n+                if (!pindex_next) {\n+                    m_best_block_index = pindex;\n+                    m_synced = true;\n+                    break;\n+                }\n+                pindex = pindex_next;\n+            }\n+\n+            int64_t current_time = GetTime();\n+            if (last_log_time + SYNC_LOG_INTERVAL < current_time) {\n+                LogPrintf(\"Syncing txindex with block chain from height %d\\n\", pindex->nHeight);\n+                last_log_time = current_time;\n+            }\n+\n+            CBlock block;\n+            if (!ReadBlockFromDisk(block, pindex, consensus_params)) {\n+                FatalError(\"%s: Failed to read block %s from disk\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+            if (!WriteBlock(block, pindex)) {\n+                FatalError(\"%s: Failed to write block %s to tx index database\",\n+                           __func__, pindex->GetBlockHash().ToString());\n+                return;\n+            }\n+        }\n+    }\n+\n+    if (pindex) {\n+        LogPrintf(\"txindex is enabled at height %d\\n\", pindex->nHeight);\n+    } else {\n+        LogPrintf(\"txindex is enabled\\n\", pindex->nHeight);\n+    }\n+}\n+\n+bool TxIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint256, CDiskTxPos>> vPos;\n+    vPos.reserve(block.vtx.size());\n+    for (const auto& tx : block.vtx) {\n+        vPos.push_back(std::make_pair(tx->GetHash(), pos));\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+    return m_db->WriteTxns(vPos) && m_db->WriteBestBlockHash(pindex->GetBlockHash());\n+}\n+\n+void TxIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n+                    const std::vector<CTransactionRef>& txn_conflicted)\n+{\n+    if (!m_synced) {\n+        return;\n+    }\n+\n+    // Ensure block connects to an ancestor of the current best block.\n+    auto best_block_index = m_best_block_index.load();\n+    if (!best_block_index) {\n+        if (pindex->nHeight != 0) {\n+            FatalError(\"%s: First block connected is not the genesis block (height=%d)\",\n+                       __func__, pindex->nHeight);\n+            return;\n+        }\n+    } else {\n+        if (best_block_index->GetAncestor(pindex->nHeight - 1) != pindex->pprev) {\n+            FatalError(\"%s: Block %s does not connect to an ancestor of known best chain (tip=%s)\",\n+                       __func__, pindex->GetBlockHash().ToString(),\n+                       best_block_index->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    if (WriteBlock(*block, pindex)) {\n+        m_best_block_index = pindex;\n+    } else {\n+        FatalError(\"%s: Failed to write block %s to txindex\",\n+                   __func__, pindex->GetBlockHash().ToString());\n+        return;\n+    }\n+}\n+\n+bool TxIndex::BlockUntilSyncedToCurrentChain()\n+{\n+    AssertLockNotHeld(cs_main);\n+\n+    if (!m_synced) {\n+        return false;\n+    }\n+\n+    {\n+        // Skip the queue-draining stuff if we know we're caught up with\n+        // chainActive.Tip().\n+        LOCK(cs_main);\n+        auto chain_tip = chainActive.Tip();\n+        auto best_block_index = m_best_block_index.load();\n+        if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n+            return true;\n+        }\n+    }\n+\n+    SyncWithValidationInterfaceQueue();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r172552991",
      "id" : 172552991,
      "in_reply_to_id" : 172323530,
      "original_commit_id" : "f1b8b8d676c72d9a9d544804262f2471d3ce5bf8",
      "original_position" : 217,
      "path" : "src/index/txindex.cpp",
      "position" : null,
      "pull_request_review_id" : 101588441,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/172552991",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Concept ACK.\r\n\r\nHaving the transaction index as a modular, optional, separate database that gets updated in the background is a major improvement over how things work now.\r\n\r\nIt's also the approach that similar optional indexes or redundant data can take; for example a rolling UTXO set hash or a per-scriptPubKey UTXO index (see #9806) could follow the same approach.",
      "created_at" : "2018-03-06T18:50:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-370887085",
      "id" : 370887085,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-03-06T18:50:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/370887085",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Tested adding an index in Bitcoin-QT and it seems to work. I didn't try upgrading an existing index.\r\n\r\nIt doesn't delete the index when you set `txindex=0`. That might actually be better than the current behavior to prevent accidents, but should be explained in the release notes and such.",
      "created_at" : "2018-03-07T15:15:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371170887",
      "id" : 371170887,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-03-07T15:15:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371170887",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors Thanks for testing. I fixed the issue switching from pruned to unpruned w/o txindex with an amend to 33ebb98. You raise an interesting point about dropping the txindex database. Not sure what the right behavior should be. One approach might be to add a `-dropindex=txindex` flag or to add an RPC and `bitcoin-cli` command that errors if the txindex is active. I like the CLI approach personally, but the downside is it requires the RPC server to be running.",
      "created_at" : "2018-03-08T18:31:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371579644",
      "id" : 371579644,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-03-08T18:31:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371579644",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173250283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173250283"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I opted to log every 30s.",
      "commit_id" : "1f9c92d5f7a8d271bc55232614b6fceba8e5ff14",
      "created_at" : "2018-03-08T18:37:00Z",
      "diff_hunk" : "@@ -424,3 +424,132 @@ bool CCoinsViewDB::Upgrade() {\n     LogPrintf(\"[%s].\\n\", ShutdownRequested() ? \"CANCELLED\" : \"DONE\");\n     return !ShutdownRequested();\n }\n+\n+TxIndexDB::TxIndexDB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    CDBWrapper(GetDataDir() / \"indexes\" / \"txindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+bool TxIndexDB::ReadTxPos(const uint256 &txid, CDiskTxPos& pos) const\n+{\n+    return Read(std::make_pair(DB_TXINDEX, txid), pos);\n+}\n+\n+bool TxIndexDB::WriteTxns(const std::vector<std::pair<uint256, CDiskTxPos>>& v_pos)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& tuple : v_pos) {\n+        batch.Write(std::make_pair(DB_TXINDEX, tuple.first), tuple.second);\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+bool TxIndexDB::ReadBestBlockHash(uint256& hash) const {\n+    if (Read(DB_BEST_BLOCK, hash)) {\n+        return true;\n+    }\n+\n+    // Read might have failed either because key does not exist or due to an error.\n+    // If the former, return value should still be true.\n+    if (!Exists(DB_BEST_BLOCK)) {\n+        hash.SetNull();\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool TxIndexDB::WriteBestBlockHash(const uint256& hash) {\n+    return Write(DB_BEST_BLOCK, hash);\n+}\n+\n+bool TxIndexDB::MigrateData(CBlockTreeDB& block_tree_db, const uint256& block_hash)\n+{\n+    // The prior implementation of txindex was always in sync with block index\n+    // and presence was indicated with a boolean DB flag. If the flag is not\n+    // set, txindex did not exist or was already migrated.\n+    bool f_migrate_index = false;\n+    block_tree_db.ReadFlag(\"txindex\", f_migrate_index);\n+    if (!f_migrate_index) {\n+        return true;\n+    }\n+\n+    int64_t count = 0;\n+    LogPrintf(\"Upgrading txindex database...\\n\");\n+    LogPrintf(\"[0%%]...\");\n+    uiInterface.ShowProgress(_(\"Upgrading txindex database\"), 0, true);\n+    int report_done = 0;\n+    const size_t batch_size = 1 << 24; // 16 MiB\n+\n+    CDBBatch batch_newdb(*this);\n+    CDBBatch batch_olddb(block_tree_db);\n+\n+    std::pair<unsigned char, uint256> key;\n+    std::pair<unsigned char, uint256> begin_key{DB_TXINDEX, uint256()};\n+    std::pair<unsigned char, uint256> prev_key_newdb = begin_key;\n+    std::pair<unsigned char, uint256> prev_key_olddb = begin_key;\n+\n+    std::unique_ptr<CDBIterator> pcursor(block_tree_db.NewIterator());\n+    for (pcursor->Seek(begin_key); pcursor->Valid(); pcursor->Next()) {\n+        boost::this_thread::interruption_point();\n+        if (ShutdownRequested()) {\n+            break;\n+        }\n+\n+        if (!pcursor->GetKey(key)) {\n+            return error(\"%s: cannot get key from valid cursor\", __func__);\n+        }\n+        if (key.first != DB_TXINDEX) {\n+            break;\n+        }\n+\n+        // Log progress every 10%.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#discussion_r173250283",
      "id" : 173250283,
      "in_reply_to_id" : 167244773,
      "original_commit_id" : "c4401fc41422daa17df46e5945c35a55c1e0e8bd",
      "original_position" : 81,
      "path" : "src/txdb.cpp",
      "position" : 81,
      "pull_request_review_id" : 102409576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11857",
      "updated_at" : "2018-03-08T18:58:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/173250283",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think your release note is fine. Deleting a directory doesn't seem worth the complexity of another RPC command / command line flag. I don't think it's too much to ask.",
      "created_at" : "2018-03-08T19:08:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371590826",
      "id" : 371590826,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-03-08T19:08:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371590826",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK!\r\n- Is there a reason for the extensive use of the c++11 `auto` specifier (for things like `CBlockIndex*`)?\r\n- Maybe a stupid question, but why blocking the thread / RPC / REST during txindex generation? I just had the thought why not building the txindex reserve (from tip to genesis) and allow access anytime while eventually add a txindex status report call `txindexstatus` (if this makes sense, then probably not in this PR).",
      "created_at" : "2018-03-09T01:11:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371679779",
      "id" : 371679779,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-03-09T01:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371679779",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jonasschnelli I wrote this before the discussion on #12120. Happy to go through the commits and reduce the usage.\r\n\r\nAs for the RPC behavior, it actually works similar to how you suggest. `BlockUntilSyncedToCurrentChain` only blocks if the txindex is caught up and just waits for the ValidationInterface queue to clear. If the txindex is syncing from genesis, `BlockUntilSyncedToCurrentChain` immediately returns false. The `getrawtransaction` behavior, however, is to optimistically query the index and only if it can't find the tx does it return a not found error saying the index is catching up. Basically, the index has an initial sync phase, then a staying in sync phase, where RPC calls might block for a short amount of time just for consistency with other RPC responses.",
      "created_at" : "2018-03-09T01:23:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11857#issuecomment-371681871",
      "id" : 371681871,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11857",
      "updated_at" : "2018-03-09T01:35:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371681871",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   }
]
