[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16333](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16333.html) (test: Set BIP34Height = 2 for regtest by MarcoFalke)\n* [#16279](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16279.html) (Return the AcceptBlock CValidationState directly in ProcessNewBlock by TheBlueMatt)\n* [#16202](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16202.html) (Refactor network message deserialization by jonasschnelli)\n* [#16194](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16194.html) (refactor: share blockmetadata with BlockManager by jamesob)\n* [#15505](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15505.html) ([p2p] Request NOTFOUND transactions immediately from other outbound peers, when possible by sdaftuar)\n* [#15437](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15437.html) (p2p: Remove BIP61 reject messages by MarcoFalke)\n* [#15206](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15206.html) (Immediately disconnect on invalid net message checksum by jonasschnelli)\n* [#14046](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14046.html) (net: Refactor message parsing (CNetMessage), adds flexibility by jonasschnelli)\n* [#9849](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/9849.html) (Qt: Network Watch tool by luke-jr)\n* [#8994](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/8994.html) (Testchains: Introduce custom chain whose constructor... by jtimon)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-02T16:38:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#issuecomment-507754452",
      "id" : 507754452,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNzc1NDQ1Mg==",
      "updated_at" : "2019-07-12T21:24:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/507754452",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16323#discussion_r301990980"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301990980"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can `PeerState(pfrom->GetId())` return `nullptr` here?",
      "commit_id" : "5517e78efa0c8490a6771d756472f93a8687a039",
      "created_at" : "2019-07-10T10:19:52Z",
      "diff_hunk" : "@@ -3236,9 +3310,46 @@ bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_\n     return false;\n }\n \n+bool IsPendingBlockValidation(CNode* pfrom, CPeerState* peerstate) EXCLUSIVE_LOCKS_REQUIRED(cs_peerstate)\n+{\n+    if (peerstate->pending_block_processing.valid()) {\n+        if (peerstate->pending_block_processing.wait_for(std::chrono::duration<int>::zero()) == std::future_status::ready) {\n+            bool fNewBlock = peerstate->pending_block_processing.get();\n+            if (fNewBlock) {\n+                pfrom->nLastBlockTime = GetTime();\n+            } else {\n+                LOCK(cs_main);\n+                mapBlockSource.erase(peerstate->pending_block_hash);\n+            }\n+            peerstate->pending_block_processing = std::future<bool>();\n+            peerstate->pending_block_hash = uint256();\n+\n+            // We need to wait for BlockChecked to fire, so we don't re-enable\n+            // this peer until the current pending validationinterface callbacks\n+            // drain. This ensures bans and reject messages happen in order, as\n+            // expected by some of our functional tests.\n+            peerstate->pending_event_wait = true;\n+            NodeId node_id = pfrom->GetId();\n+            CallFunctionInValidationInterfaceQueue([node_id] {\n+                LOCK(cs_peerstate);\n+                CPeerState* peerstate = PeerState(node_id);\n+                if (peerstate != nullptr) {\n+                    peerstate->pending_event_wait = false;\n+                    g_connman->WakeMessageHandler();\n+                }\n+            });\n+            return true;\n+        } else { return true; }\n+    } else {\n+        return peerstate->pending_event_wait;\n+    }\n+}\n+\n bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n+    LOCK(cs_peerstate);\n+    CPeerState* peerstate = PeerState(pfrom->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#discussion_r301990980",
      "id" : 301990980,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTk5MDk4MA==",
      "original_commit_id" : "5517e78efa0c8490a6771d756472f93a8687a039",
      "original_position" : 362,
      "path" : "src/net_processing.cpp",
      "position" : 362,
      "pull_request_review_id" : 260000510,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16323",
      "updated_at" : "2019-07-10T10:19:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301990980",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16323#discussion_r301991073"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301991073"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can `PeerState(pfrom->GetId())` return `nullptr` here?",
      "commit_id" : "5517e78efa0c8490a6771d756472f93a8687a039",
      "created_at" : "2019-07-10T10:20:06Z",
      "diff_hunk" : "@@ -3531,6 +3653,13 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // If we get here, the outgoing message serialization version is set and can't change.\n         const CNetMsgMaker msgMaker(pto->GetSendVersion());\n \n+        LOCK(cs_peerstate);\n+        CPeerState* peerstate = PeerState(pto->GetId());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#discussion_r301991073",
      "id" : 301991073,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTk5MTA3Mw==",
      "original_commit_id" : "5517e78efa0c8490a6771d756472f93a8687a039",
      "original_position" : 398,
      "path" : "src/net_processing.cpp",
      "position" : 398,
      "pull_request_review_id" : 260000618,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16323",
      "updated_at" : "2019-07-10T10:20:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301991073",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16323#discussion_r301991337"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16323"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301991337"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be \"completes\" :-)",
      "commit_id" : "5517e78efa0c8490a6771d756472f93a8687a039",
      "created_at" : "2019-07-10T10:20:48Z",
      "diff_hunk" : "@@ -199,22 +200,34 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n  *\n- * If you want to *possibly* get feedback on whether pblock is valid, you must\n- * install a CValidationInterface (see validationinterface.h) - this will have\n- * its BlockChecked method called whenever *any* block completes validation.\n+ * Performs initial sanity checks using the provided CValidationState before\n+ * connecting any block(s). If you want to *possibly* get feedback on whether\n+ * pblock is valid beyond just cursory mutation/DoS checks, you must install\n+ * a CValidationInterface (see validationinterface.h) - this will have its\n+ * BlockChecked method called whenever *any* block completes validation (note\n+ * that any invalidity returned via state will *not* also be provided via\n+ * BlockChecked). There is, of course, no guarantee that any given block which\n+ * is not a part of the eventual best chain will ever be checked.\n  *\n- * Note that we guarantee that either the proof-of-work is valid on pblock, or\n- * (and possibly also) BlockChecked will have been called.\n+ * If pblock connects, and has been mutation, state is guaranteed to be some\n+ * non-IsValid() state.\n  *\n- * May not be called in a\n- * validationinterface callback.\n+ * If fForceProcessing is set (or the future returns true), barring pruning and\n+ * a desire to re-download a pruned block, if state.IsValid(), there should\n+ * never be any reason to re-ProcessNewBlock any block with the same hash.\n+ *\n+ * May not be called in a validationinterface callback.\n+ *\n+ * Do NOT block on the returned future waiting for it to resolve as this may\n+ * introduce deadlocks (in the case you are holding any mutexes which are\n+ * also taken in validationinterface callbacks).\n  *\n  * @param[in]   pblock  The block we want to process.\n+ * @param[out] state This may be set to an Error state if any error occurred processing them\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n- * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n- * @return True if state.IsValid()\n+ * @return      A future which complets with a boolean which is set to indicate if the block was first received via this call",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#discussion_r301991337",
      "id" : 301991337,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMTk5MTMzNw==",
      "original_commit_id" : "5517e78efa0c8490a6771d756472f93a8687a039",
      "original_position" : 46,
      "path" : "src/validation.h",
      "position" : 46,
      "pull_request_review_id" : 260000935,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16323",
      "updated_at" : "2019-07-10T10:21:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/301991337",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This is a huge structural change. Please, let's discuss concepts and concept ACK here first before jumping to small nits on the current implementation.",
      "created_at" : "2019-07-10T10:39:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#issuecomment-510009240",
      "id" : 510009240,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDAwOTI0MA==",
      "updated_at" : "2019-07-10T10:39:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510009240",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-07-16T17:17:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#issuecomment-511907009",
      "id" : 511907009,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMTkwNzAwOQ==",
      "updated_at" : "2019-07-16T17:17:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/511907009",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Working on a big structural cleanup, will reopen something new once I have a new PR series.",
      "created_at" : "2019-07-18T21:19:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16323#issuecomment-512992006",
      "id" : 512992006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16323",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMjk5MjAwNg==",
      "updated_at" : "2019-07-18T21:19:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512992006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "node_id" : "MDQ6VXNlcjY0OTI0Ng==",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   }
]
