[
   {
      "author_association" : "MEMBER",
      "body" : "In the coming days I will try to squash together some of these commits so there aren't so many of them. I just wanted to get this open now for people to begin reviewing the changes.",
      "created_at" : "2019-07-05T03:01:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508614075",
      "id" : 508614075,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwODYxNDA3NQ==",
      "updated_at" : "2019-07-05T03:01:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508614075",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16440](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16440.html) (BIP-322: Generic signed message format by kallewoof)\n* [#16224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16224.html) (gui: Bilingual GUI error messages by hebasto)\n* [#16037](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16037.html) (rpc: Enable wallet import on pruned nodes by promag)\n* [#15294](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15294.html) ([moveonly] wallet: Extract RipeMd160 by Empact)\n* [#14942](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14942.html) (wallet: Make scan / abort status private to CWallet by Empact)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Fire TransactionRemovedFromMempool callbacks from mempool by l2a5b1)\n* [#14144](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14144.html) (Refactoring: Clarify code using encrypted_batch in CWallet by domob1812)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-05T04:41:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508627166",
      "id" : 508627166,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwODYyNzE2Ng==",
      "updated_at" : "2019-09-10T13:13:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508627166",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812193"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812193"
         }
      },
      "author_association" : "NONE",
      "body" : "I'm very suspect at this line. We are assigning a dereference pointer. \r\nI think we should prefer `is_mine = &m_wallet->IsMine(dest);`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-05T23:55:04Z",
      "diff_hunk" : "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812193",
      "id" : 300812193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjE5Mw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 85,
      "path" : "src/interfaces/wallet.cpp",
      "position" : 50,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812193",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812273"
         }
      },
      "author_association" : "NONE",
      "body" : "This name doesn't indicate a boolean return value. ð¤ Why not isPubKey()?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-05T23:56:39Z",
      "diff_hunk" : "@@ -78,14 +78,14 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812273",
      "id" : 300812273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjI3Mw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 11,
      "path" : "src/interfaces/wallet.h",
      "position" : 5,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812273",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812837"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812837"
         }
      },
      "author_association" : "NONE",
      "body" : "Include `redeemScript.size()` size in the logging so we can debug easier ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T00:08:28Z",
      "diff_hunk" : "@@ -83,23 +137,23 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return false;\n }\n \n-bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n+bool FillableSigningProvider::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"FillableSigningProvider::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812837",
      "id" : 300812837,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjgzNw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 144,
      "path" : "src/script/signingprovider.cpp",
      "position" : null,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812837",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812883"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812883"
         }
      },
      "author_association" : "NONE",
      "body" : "Can we use BYTE to be more informative of the type",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T00:09:19Z",
      "diff_hunk" : "@@ -0,0 +1,37 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_KEYORIGIN_H\n+#define BITCOIN_SCRIPT_KEYORIGIN_H\n+\n+#include <serialize.h>\n+#include <streams.h>\n+#include <vector>\n+\n+struct KeyOriginInfo\n+{\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300812883",
      "id" : 300812883,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMjg4Mw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 14,
      "path" : "src/script/keyorigin.h",
      "position" : null,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300812883",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813241"
         }
      },
      "author_association" : "NONE",
      "body" : "`provider` should be checked before dereferencing ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T00:17:04Z",
      "diff_hunk" : "@@ -3083,7 +3097,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            auto descriptor = InferDescriptor(scriptPubKey, *provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813241",
      "id" : 300813241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMzI0MQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 320,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813241",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813882"
         }
      },
      "author_association" : "NONE",
      "body" : "Please add space around operators ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T00:31:41Z",
      "diff_hunk" : "@@ -1661,71 +1311,48 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t time)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, time);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n {\n+    auto spk_man =GetLegacyScriptPubKeyMan();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300813882",
      "id" : 300813882,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxMzg4Mg==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 695,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300813882",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818049"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818049"
         }
      },
      "author_association" : "NONE",
      "body" : "Could be void since we always return true.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T03:02:04Z",
      "diff_hunk" : "@@ -32,37 +92,31 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     }\n }\n \n-bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+bool FillableSigningProvider::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818049",
      "id" : 300818049,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODA0OQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 106,
      "path" : "src/script/signingprovider.cpp",
      "position" : null,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818049",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818112"
         }
      },
      "author_association" : "NONE",
      "body" : "Looks like we could remove error and use empty string `\"\"`  below. ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T03:05:57Z",
      "diff_hunk" : "@@ -140,14 +140,37 @@ class WalletImpl : public Wallet\n     void abortRescan() override { m_wallet->AbortRescan(); }\n     bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet->GetName(); }\n-    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n-        return m_wallet->GetKeyFromPool(pub_key, internal);\n+        LOCK(m_wallet->cs_wallet);\n+        std::string error;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818112",
      "id" : 300818112,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODExMg==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 45,
      "path" : "src/interfaces/wallet.cpp",
      "position" : 10,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818112",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818241"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818241"
         }
      },
      "author_association" : "NONE",
      "body" : "Is this done as an optimization? I'd prefer:\r\n```\r\nvoid CWallet::SetCrypted()\r\n{ \r\n    LOCK(cs_wallet);\r\n    fUseCrypto = true;\r\n}\r\n```",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T03:14:11Z",
      "diff_hunk" : "@@ -4560,31 +3942,141 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+bool CWallet::SetCrypted()\n {\n-    CKeyMetadata meta;\n+    LOCK(cs_wallet);\n+    if (fUseCrypto)\n+        return true;\n+    fUseCrypto = true;\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818241",
      "id" : 300818241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODI0MQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 1491,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1494,
      "pull_request_review_id" : 258567976,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818241",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/1562849?v=4",
         "events_url" : "https://api.github.com/users/fqlx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fqlx/followers",
         "following_url" : "https://api.github.com/users/fqlx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fqlx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fqlx",
         "id" : 1562849,
         "login" : "fqlx",
         "node_id" : "MDQ6VXNlcjE1NjI4NDk=",
         "organizations_url" : "https://api.github.com/users/fqlx/orgs",
         "received_events_url" : "https://api.github.com/users/fqlx/received_events",
         "repos_url" : "https://api.github.com/users/fqlx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fqlx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fqlx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fqlx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818321"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please try to understand the code you're commenting on.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T03:18:57Z",
      "diff_hunk" : "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818321",
      "id" : 300818321,
      "in_reply_to_id" : 300812193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODMyMQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 85,
      "path" : "src/interfaces/wallet.cpp",
      "position" : 50,
      "pull_request_review_id" : 258575305,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818321",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818335"
         }
      },
      "author_association" : "MEMBER",
      "body" : "C++11 does not have such a type.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T03:19:45Z",
      "diff_hunk" : "@@ -0,0 +1,37 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_KEYORIGIN_H\n+#define BITCOIN_SCRIPT_KEYORIGIN_H\n+\n+#include <serialize.h>\n+#include <streams.h>\n+#include <vector>\n+\n+struct KeyOriginInfo\n+{\n+    unsigned char fingerprint[4]; //!< First 32 bits of the Hash160 of the public key at the root of the path",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300818335",
      "id" : 300818335,
      "in_reply_to_id" : 300812883,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxODMzNQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 14,
      "path" : "src/script/keyorigin.h",
      "position" : null,
      "pull_request_review_id" : 258575318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300818335",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819296"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819296"
         }
      },
      "author_association" : "NONE",
      "body" : "@sipa: Clarifying what you're referring to would be both constructive and polite :)",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:12:08Z",
      "diff_hunk" : "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819296",
      "id" : 300819296,
      "in_reply_to_id" : 300812193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTI5Ng==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 85,
      "path" : "src/interfaces/wallet.cpp",
      "position" : 50,
      "pull_request_review_id" : 258576343,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819296",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/33569?v=4",
         "events_url" : "https://api.github.com/users/dandv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dandv/followers",
         "following_url" : "https://api.github.com/users/dandv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dandv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dandv",
         "id" : 33569,
         "login" : "dandv",
         "node_id" : "MDQ6VXNlcjMzNTY5",
         "organizations_url" : "https://api.github.com/users/dandv/orgs",
         "received_events_url" : "https://api.github.com/users/dandv/received_events",
         "repos_url" : "https://api.github.com/users/dandv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dandv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dandv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dandv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819341"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819341"
         }
      },
      "author_association" : "NONE",
      "body" : "The old `get...Key` returning `bool` smells: either the pubKey is a boolean, or `getPubKey` has a side effect of getting the key somewhere else instead of as a result. Could this PR fix that by renaming it to `isPubKey()`?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:14:54Z",
      "diff_hunk" : "@@ -78,14 +78,14 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819341",
      "id" : 300819341,
      "in_reply_to_id" : 300812273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTM0MQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 11,
      "path" : "src/interfaces/wallet.h",
      "position" : 5,
      "pull_request_review_id" : 258576394,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819341",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/33569?v=4",
         "events_url" : "https://api.github.com/users/dandv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dandv/followers",
         "following_url" : "https://api.github.com/users/dandv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dandv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dandv",
         "id" : 33569,
         "login" : "dandv",
         "node_id" : "MDQ6VXNlcjMzNTY5",
         "organizations_url" : "https://api.github.com/users/dandv/orgs",
         "received_events_url" : "https://api.github.com/users/dandv/received_events",
         "repos_url" : "https://api.github.com/users/dandv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dandv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dandv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dandv"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819367"
         }
      },
      "author_association" : "NONE",
      "body" : "Such key code would certainly benefit from linting.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:16:24Z",
      "diff_hunk" : "@@ -1661,71 +1311,48 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t time)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, time);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n {\n+    auto spk_man =GetLegacyScriptPubKeyMan();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819367",
      "id" : 300819367,
      "in_reply_to_id" : 300813882,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTM2Nw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 695,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 258576422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819367",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/33569?v=4",
         "events_url" : "https://api.github.com/users/dandv/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dandv/followers",
         "following_url" : "https://api.github.com/users/dandv/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dandv/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dandv",
         "id" : 33569,
         "login" : "dandv",
         "node_id" : "MDQ6VXNlcjMzNTY5",
         "organizations_url" : "https://api.github.com/users/dandv/orgs",
         "received_events_url" : "https://api.github.com/users/dandv/received_events",
         "repos_url" : "https://api.github.com/users/dandv/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dandv/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dandv/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dandv"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Everyone commenting here, note that this PR is a work in progress, and is built on top of multiple open PRs.\r\n\r\nFor now we should try and keep the discussion here at a Concept ACK/NACK & design level, rather than individual nit-picks and code review.\r\n\r\nIf you would like to review the code, please do so in the open base PRs. That will not only save the concept level discussion here from being drowned out in inline comments, but will also prevent duplicate review. i.e What you're commenting on here might have already been addressed/pointed out in the base PRs.",
      "created_at" : "2019-07-06T04:28:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508896117",
      "id" : 508896117,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwODg5NjExNw==",
      "updated_at" : "2019-07-06T04:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508896117",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819626"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This line is merely changing how `IsMine` is called. In order to avoid difficulties for reviewers, the existing code (the assignment itself) is not being changed.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:31:00Z",
      "diff_hunk" : "@@ -170,7 +193,7 @@ class WalletImpl : public Wallet\n             *name = it->second.name;\n         }\n         if (is_mine) {\n-            *is_mine = IsMine(*m_wallet, dest);\n+            *is_mine = m_wallet->IsMine(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819626",
      "id" : 300819626,
      "in_reply_to_id" : 300812193,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTYyNg==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 85,
      "path" : "src/interfaces/wallet.cpp",
      "position" : 50,
      "pull_request_review_id" : 258576720,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819626",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819651"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I am trying to avoid changing existing code as much as possible in order to avoid additional review burden. Feel free to change this later, but changing it here is out of scope for this PR.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:32:32Z",
      "diff_hunk" : "@@ -78,14 +78,14 @@ class Wallet\n     //! Get wallet name.\n     virtual std::string getWalletName() = 0;\n \n-    // Get key from pool.\n-    virtual bool getKeyFromPool(bool internal, CPubKey& pub_key) = 0;\n+    // Get a new address.\n+    virtual bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) = 0;\n \n     //! Get public key.\n-    virtual bool getPubKey(const CKeyID& address, CPubKey& pub_key) = 0;\n+    virtual bool getPubKey(const CScript& script, const CKeyID& address, CPubKey& pub_key) = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819651",
      "id" : 300819651,
      "in_reply_to_id" : 300812273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTY1MQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 11,
      "path" : "src/interfaces/wallet.h",
      "position" : 5,
      "pull_request_review_id" : 258576752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819651",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819681"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is part of a scripted diff. Such a change would both not part of the script and be unrelated to this PR.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:33:40Z",
      "diff_hunk" : "@@ -83,23 +137,23 @@ bool CBasicKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n     return false;\n }\n \n-bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n+bool FillableSigningProvider::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"FillableSigningProvider::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819681",
      "id" : 300819681,
      "in_reply_to_id" : 300812837,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTY4MQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 144,
      "path" : "src/script/signingprovider.cpp",
      "position" : null,
      "pull_request_review_id" : 258576788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819681",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819703"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819703"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is existing code and is merely a rename. Changing what it returns is out of scope for this PR.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:34:53Z",
      "diff_hunk" : "@@ -32,37 +92,31 @@ void CBasicKeyStore::ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey)\n     }\n }\n \n-bool CBasicKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n+bool FillableSigningProvider::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key)) {\n-        LOCK(cs_KeyStore);\n-        WatchKeyMap::const_iterator it = mapWatchKeys.find(address);\n-        if (it != mapWatchKeys.end()) {\n-            vchPubKeyOut = it->second;\n-            return true;\n-        }\n         return false;\n     }\n     vchPubKeyOut = key.GetPubKey();\n     return true;\n }\n \n-bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+bool FillableSigningProvider::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819703",
      "id" : 300819703,
      "in_reply_to_id" : 300818049,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTcwMw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 106,
      "path" : "src/script/signingprovider.cpp",
      "position" : null,
      "pull_request_review_id" : 258576815,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819703",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819762"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is moved code and I will not be changing it in order to avoid overburdening reviewers with ensuring that behavior hasn't changed.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:36:06Z",
      "diff_hunk" : "@@ -4560,31 +3942,141 @@ std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outpu\n     return groups;\n }\n \n-bool CWallet::GetKeyOrigin(const CKeyID& keyID, KeyOriginInfo& info) const\n+bool CWallet::SetCrypted()\n {\n-    CKeyMetadata meta;\n+    LOCK(cs_wallet);\n+    if (fUseCrypto)\n+        return true;\n+    fUseCrypto = true;\n+    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819762",
      "id" : 300819762,
      "in_reply_to_id" : 300818241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTc2Mg==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 1491,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1494,
      "pull_request_review_id" : 258576853,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819762",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819836"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819836"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, `GetNewAddress` takes a reference which `\"\"` is not.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:39:57Z",
      "diff_hunk" : "@@ -140,14 +140,37 @@ class WalletImpl : public Wallet\n     void abortRescan() override { m_wallet->AbortRescan(); }\n     bool backupWallet(const std::string& filename) override { return m_wallet->BackupWallet(filename); }\n     std::string getWalletName() override { return m_wallet->GetName(); }\n-    bool getKeyFromPool(bool internal, CPubKey& pub_key) override\n+    bool getNewAddress(const OutputType type, const std::string label, CTxDestination& dest) override\n     {\n-        return m_wallet->GetKeyFromPool(pub_key, internal);\n+        LOCK(m_wallet->cs_wallet);\n+        std::string error;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300819836",
      "id" : 300819836,
      "in_reply_to_id" : 300818112,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgxOTgzNg==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 45,
      "path" : "src/interfaces/wallet.cpp",
      "position" : 10,
      "pull_request_review_id" : 258576934,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300819836",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:59:53Z",
      "diff_hunk" : "@@ -3083,7 +3097,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);\n         if (out.fSolvable) {\n-            auto descriptor = InferDescriptor(scriptPubKey, *pwallet);\n+            const SigningProvider* provider = pwallet->GetSigningProvider(scriptPubKey);\n+            auto descriptor = InferDescriptor(scriptPubKey, *provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820287",
      "id" : 300820287,
      "in_reply_to_id" : 300813241,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDI4Nw==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 320,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 258577357,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820287",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820289"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820289"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-07-06T04:59:59Z",
      "diff_hunk" : "@@ -1661,71 +1311,48 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts)\n+bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t time)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        if (!HaveCScript(CScriptID(entry)) && !AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, time);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!HaveKey(id) && !AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (!GetPubKey(id, temp) && !AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man =GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool internal, const int64_t timestamp)\n {\n+    auto spk_man =GetLegacyScriptPubKeyMan();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r300820289",
      "id" : 300820289,
      "in_reply_to_id" : 300813882,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMDgyMDI4OQ==",
      "original_commit_id" : "1404f8ca2888592ee5072a343e77acba2b3809ed",
      "original_position" : 695,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 258577359,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/300820289",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, this abstraction is definitely the right path for the wallet to take IMO as we work toward descriptor wallets.",
      "created_at" : "2019-07-07T03:03:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-508967793",
      "id" : 508967793,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwODk2Nzc5Mw==",
      "updated_at" : "2019-07-07T03:03:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/508967793",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Approach ACK.\r\n\r\nTo make some of the commits easier to review, instead of having one commit that adds a function to `LegacyScriptPubKeyMan` (e.g. `LegacyScriptPubKeyMan::LoadKey`), one commit that deletes it from CWallet (`Remove unused functions and switch CWallet to use ScriptPubKeyMan`) and one commit that moves the call over (`Implement actually loading everything into LegacyScriptPubKeyMan`), try to combine those. That lets you get rid of the CI Skip commits, and makes it easier to verify move-only parts with `--color-moved=dimmed-zebra`.\r\n\r\nIn other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\r\n\r\nAre you sure you want to move `WalletFeature` and `WalletFlags` into `LegacyScriptPubKeyMan`? I would prefer to keep these settings global to the wallet. It does make sense for each `ScriptPubKeyMan` to have its own `IsLocked()` state, so that brings up the question what to do if a single one fails to unlock. But I'd rather not add RPC methods to unlock specific `PubKeyMan`s in a given wallet.\r\n\r\nI brainstormed how to apply this to hardware wallets: https://github.com/bitcoin/bitcoin/pull/14912#issuecomment-510520757. The unsollicited keypool topup in `GetReservedDestination` is annoying in that context. Can `ScriptPubKeyMan` have a flag to opt out of that? ",
      "created_at" : "2019-07-11T14:56:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510521262",
      "id" : 510521262,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDUyMTI2Mg==",
      "updated_at" : "2019-07-11T15:12:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510521262",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> To make some of the commits easier to review, instead of having one commit that adds a function to `LegacyScriptPubKeyMan` (e.g. `LegacyScriptPubKeyMan::LoadKey`), one commit that deletes it from CWallet (`Remove unused functions and switch CWallet to use ScriptPubKeyMan`) and one commit that moves the call over (`Implement actually loading everything into LegacyScriptPubKeyMan`), try to combine those. That lets you get rid of the CI Skip commits, and makes it easier to verify move-only parts with `--color-moved=dimmed-zebra`.\r\n> \r\n> In other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\r\n\r\nDoing that will cause the entirety of the PR to fail all tests (so all need ci skip) except for the very last commit. If other reviewers want that, I could reorganize it.\r\n\r\n> Are you sure you want to move `WalletFeature` and `WalletFlags` into `LegacyScriptPubKeyMan`? I would prefer to keep these settings global to the wallet.\r\n\r\nThey are global to the wallet. They are moved to `walletutil.h`. Both `LegacyScriptPubKeyMan` and `CWallet` require access to both of these enums, but having `scriptpubkeyman` including `wallet.h` would be a circular dependency, so I moved it to `walletutil.h`.\r\n\r\n> It does make sense for each `ScriptPubKeyMan` to have its own `IsLocked()` state, so that brings up the question what to do if a single one fails to unlock.\r\n\r\nI guess it should fail to unlock everything? That would indicate some corruption has occurred.\r\n\r\n> But I'd rather not add RPC methods to unlock specific `PubKeyMan`s in a given wallet.\r\n\r\nAgreed.\r\n\r\n> The unsollicited keypool topup in `GetReservedDestination` is annoying in that context. Can `ScriptPubKeyMan` have a flag to opt out of that?\\\r\n\r\nI suppose it should actually be in `LegacyScriptPubKeyMan::GetReservedDestination` rather than `CWallet`'s. However, `TopUp` can just do nothing and that won't effect this behavior. Every `ScriptPubKeyMan` needs to implement `TopUp` anyways.\r\n\r\n",
      "created_at" : "2019-07-11T17:57:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510589619",
      "id" : 510589619,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDU4OTYxOQ==",
      "updated_at" : "2019-07-11T17:57:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510589619",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : ">> In other words, start with empty `(Legacy)ScriptPubKeyMan` and then migrate one function per commit into it.\r\n\r\n> Doing that will cause the entirety of the PR to fail all tests (so all need ci skip) except for the very last commit. If other reviewers want that, I could reorganize it.\r\n\r\nWhy would any of the test fail if `ScriptPubKeyMan` is just an empty shell, and/or a bunch of NOOP functions?\r\n\r\n>> The unsollicited keypool topup in GetReservedDestination is annoying in that context. Can ScriptPubKeyMan have a flag to opt out of that?\r\n\r\n> I suppose it should actually be in `LegacyScriptPubKeyMan::GetReservedDestination` rather than `CWallet`'s. However, `TopUp` can just do nothing and that won't effect this behavior. Every `ScriptPubKeyMan` needs to implement `TopUp` anyways.\r\n\r\nIn the context of a hardware wallet I want `TopUp` to fetch keys from the device. But it should only try that if the user explicitly calls `topupkeypool` (and the UI equivalent). Problem is that `TopUp` doesn't know where it's called from.",
      "created_at" : "2019-07-12T14:18:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-510903836",
      "id" : 510903836,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDkwMzgzNg==",
      "updated_at" : "2019-07-12T14:18:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510903836",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The PRs this depended on have been merged. I don't foresee making large changes to this anymore, so this is no longer WIP.\r\n\r\nPlease review!",
      "created_at" : "2019-07-26T19:51:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-515578355",
      "id" : 515578355,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNTU3ODM1NQ==",
      "updated_at" : "2019-07-26T19:51:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/515578355",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-07-30T05:11:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-516264429",
      "id" : 516264429,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNjI2NDQyOQ==",
      "updated_at" : "2019-07-30T05:11:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516264429",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-07-31T08:03:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-516743076",
      "id" : 516743076,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNjc0MzA3Ng==",
      "updated_at" : "2019-07-31T08:03:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516743076",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-01T04:41:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-517116473",
      "id" : 517116473,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNzExNjQ3Mw==",
      "updated_at" : "2019-08-01T04:41:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517116473",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-02T13:20:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-517698146",
      "id" : 517698146,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNzY5ODE0Ng==",
      "updated_at" : "2019-08-02T13:20:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517698146",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310624791"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310624791"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The nice thing about the way it was done before is that if this expr returns false it would get short circuited and `CreateSig` wouldn't be called too.\r\n\r\nNow it's the opposite. which I think makes less sense when we know that CreateSig is more work than that simple expr, so it might do CreateSig just to fail that if afterwards.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T14:12:17Z",
      "diff_hunk" : "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310624791",
      "id" : 310624791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDYyNDc5MQ==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 7,
      "path" : "src/script/sign.cpp",
      "position" : 10,
      "pull_request_review_id" : 270793127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310624791",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310639109"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310639109"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "shouldn't this be `return sh;`?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T14:40:35Z",
      "diff_hunk" : "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n-    case OutputType::LEGACY:\n-        return ScriptHash(script);\n+    case OutputType::LEGACY: {\n+        keystore.AddCScript(GetScriptForDestination(sh));\n+        return sh;\n+    }\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n+        if (!IsSolvable(keystore, witprog)) {\n+            keystore.AddCScript(GetScriptForDestination(sh));\n+            return ScriptHash(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310639109",
      "id" : 310639109,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDYzOTEwOQ==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 21,
      "path" : "src/outputtype.cpp",
      "position" : null,
      "pull_request_review_id" : 270811579,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310639109",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310643788"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310643788"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is necessary for `LegacyScriptPubKeyMan::CanProvide` to pass. That uses the `DUMMY_SIGNATURE_CREATOR` which creates dummy signatures without checking whether the `SigningProvider` has the private keys (as it should). However, in `CanProvide`, we want to make sure that we do actually have the private keys, and if the dummy signing returns us dummy signatures that correspond to keys that we don't have, `CanProvide` will fail. So we need it to give us all of the signatures (by putting them in the `sigdata`) so that `CanProvide` can check for whether it actually could sign.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T14:49:58Z",
      "diff_hunk" : "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310643788",
      "id" : 310643788,
      "in_reply_to_id" : 310624791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY0Mzc4OA==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 7,
      "path" : "src/script/sign.cpp",
      "position" : 10,
      "pull_request_review_id" : 270817769,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310643788",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310651218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310651218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes, done.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:05:06Z",
      "diff_hunk" : "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);\n     // Note that scripts over 520 bytes are not yet supported.\n     switch (type) {\n-    case OutputType::LEGACY:\n-        return ScriptHash(script);\n+    case OutputType::LEGACY: {\n+        keystore.AddCScript(GetScriptForDestination(sh));\n+        return sh;\n+    }\n     case OutputType::P2SH_SEGWIT:\n     case OutputType::BECH32: {\n         CTxDestination witdest = WitnessV0ScriptHash(script);\n         CScript witprog = GetScriptForDestination(witdest);\n         // Check if the resulting program is solvable (i.e. doesn't use an uncompressed key)\n-        if (!IsSolvable(keystore, witprog)) return ScriptHash(script);\n+        if (!IsSolvable(keystore, witprog)) {\n+            keystore.AddCScript(GetScriptForDestination(sh));\n+            return ScriptHash(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310651218",
      "id" : 310651218,
      "in_reply_to_id" : 310639109,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1MTIxOA==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 21,
      "path" : "src/outputtype.cpp",
      "position" : null,
      "pull_request_review_id" : 270827605,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310651218",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310653358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310653358"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "is checking that `spk_man` isn't null needed here assuming you already call `spk_man->cs_KeyStore` which is a deference?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:09:34Z",
      "diff_hunk" : "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310653358",
      "id" : 310653358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1MzM1OA==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 31,
      "path" : "src/wallet/wallettool.cpp",
      "position" : null,
      "pull_request_review_id" : 270830418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310653358",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310656799"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310656799"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit. snake case for the function arguments?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:16:25Z",
      "diff_hunk" : "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310656799",
      "id" : 310656799,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1Njc5OQ==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 5,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 270834809,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310656799",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310658586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310658586"
         }
      },
      "author_association" : "MEMBER",
      "body" : "&& short-circuits; it doesn't evaluate its right hand is the left hand was false.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:20:12Z",
      "diff_hunk" : "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310658586",
      "id" : 310658586,
      "in_reply_to_id" : 310653358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY1ODU4Ng==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 31,
      "path" : "src/wallet/wallettool.cpp",
      "position" : null,
      "pull_request_review_id" : 270837156,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310658586",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310660927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310660927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes. My point was that he deferences it a few lines above when he acquires a lock. ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:24:55Z",
      "diff_hunk" : "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310660927",
      "id" : 310660927,
      "in_reply_to_id" : 310653358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY2MDkyNw==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 31,
      "path" : "src/wallet/wallettool.cpp",
      "position" : null,
      "pull_request_review_id" : 270840064,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310660927",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2167860?v=4",
         "events_url" : "https://api.github.com/users/elichai/events{/privacy}",
         "followers_url" : "https://api.github.com/users/elichai/followers",
         "following_url" : "https://api.github.com/users/elichai/following{/other_user}",
         "gists_url" : "https://api.github.com/users/elichai/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/elichai",
         "id" : 2167860,
         "login" : "elichai",
         "node_id" : "MDQ6VXNlcjIxNjc4NjA=",
         "organizations_url" : "https://api.github.com/users/elichai/orgs",
         "received_events_url" : "https://api.github.com/users/elichai/received_events",
         "repos_url" : "https://api.github.com/users/elichai/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/elichai/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/elichai/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/elichai"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310663427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310663427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "wallettool looks to be broken when there are other `ScriptPubKeyMan` classes. I'll investigate in the Descriptor wallets PR.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:30:06Z",
      "diff_hunk" : "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310663427",
      "id" : 310663427,
      "in_reply_to_id" : 310653358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY2MzQyNw==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 31,
      "path" : "src/wallet/wallettool.cpp",
      "position" : null,
      "pull_request_review_id" : 270843247,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310663427",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310674086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310674086"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This change to using `spk_man` here is not actually needed. I've changed it to use `CWallet::IsHDEnabled`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-05T15:53:31Z",
      "diff_hunk" : "@@ -90,11 +92,12 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n \n static void WalletShowInfo(CWallet* wallet_instance)\n {\n-    LOCK(wallet_instance->cs_wallet);\n+    auto spk_man = wallet_instance->GetLegacyScriptPubKeyMan();\n+    LOCK2(wallet_instance->cs_wallet, spk_man->cs_KeyStore);\n \n     tfm::format(std::cout, \"Wallet info\\n===========\\n\");\n     tfm::format(std::cout, \"Encrypted: %s\\n\", wallet_instance->IsCrypted() ? \"yes\" : \"no\");\n-    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", wallet_instance->GetHDChain().seed_id.IsNull() ? \"no\" : \"yes\");\n+    tfm::format(std::cout, \"HD (hd seed available): %s\\n\", (spk_man && spk_man->GetHDChain().seed_id.IsNull()) ? \"no\" : \"yes\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r310674086",
      "id" : 310674086,
      "in_reply_to_id" : 310653358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDY3NDA4Ng==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 31,
      "path" : "src/wallet/wallettool.cpp",
      "position" : null,
      "pull_request_review_id" : 270856879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310674086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Found a bug (try in QT):\r\n1. create a wallet `blank` wallet with private keys disabled\r\n2. see that new address button in receive screen is disabled, as it should\r\n3. close QT and start again, load the wallet\r\n4. see that new address button is enabled *and creates addresses* (panic)\r\n\r\nMaybe `Always try to sign for all pubkeys in multisig` can be its own PR?\r\n\r\nI didn't pay precise attention to which methods are private / public / etc, because that's easy to change later as required.\r\n\r\nShameless plug for #12134 so we can test for accidental breakage of serialization. The existing test passes on top of this PR, but it only checks that a default \"master\" wallet can still be opened in earlier versions).",
      "created_at" : "2019-08-13T13:03:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-520825537",
      "id" : 520825537,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMDgyNTUzNw==",
      "updated_at" : "2019-08-13T13:03:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520825537",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316826832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316826832"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Always try to sign for all pubkeys in multisig\" (d0b41dc26a74e158bd22259aed50869c9676e3fd)\r\n\r\nI'm not deeply familiar with this code, and I found the explanation a little hard to follow, but in case it helps anyone else, the key seems to be that calling CreateSig unconditionally is needed to fill sigdata. I can confirm that `rpc_psbt.py` test fails without this change.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-22T18:33:32Z",
      "diff_hunk" : "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316826832",
      "id" : 316826832,
      "in_reply_to_id" : 310624791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjgyNjgzMg==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 7,
      "path" : "src/script/sign.cpp",
      "position" : 10,
      "pull_request_review_id" : 278610269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316826832",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316833572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316833572"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add function callbacks for wallet flags and versions and wallet database\" (bae5b518ec507d071a54ce4810dd24b016bcfe12)\r\n\r\nThis could just say `using ScriptPubKeyMan::ScriptPubKeyMan` to inherit the parent constructor instead of repeating it all. Even at the end of this PR, this constructor is empty except for some member initializations which would be better to do at the points of declaration.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-22T18:49:53Z",
      "diff_hunk" : "@@ -85,7 +116,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n public:\n-    LegacyScriptPubKeyMan() {}\n+    LegacyScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r316833572",
      "id" : 316833572,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNjgzMzU3Mg==",
      "original_commit_id" : "bae5b518ec507d071a54ce4810dd24b016bcfe12",
      "original_position" : 51,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 278610269,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/316833572",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318143710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318143710"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I also found this explanation difficult. Is there any way to succinctly say the desired effect, and put it in a comment in the code?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:21:32Z",
      "diff_hunk" : "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318143710",
      "id" : 318143710,
      "in_reply_to_id" : 310624791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE0MzcxMA==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 7,
      "path" : "src/script/sign.cpp",
      "position" : 10,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318143710",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318147258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318147258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please add a short comment on what this is in charge of and what it's not.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:27:30Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class ScriptPubKeyMan",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318147258",
      "id" : 318147258,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE0NzI1OA==",
      "original_commit_id" : "e892a72f22c3359a12085f0e93d519acaa711bcd",
      "original_position" : 18,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 134,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318147258",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318149544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318149544"
         }
      },
      "author_association" : "MEMBER",
      "body" : "s/output_types/OUTPUT_TYPES/",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:31:34Z",
      "diff_hunk" : "@@ -27,6 +28,8 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n+const std::array<OutputType, 3> output_types = {OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318149544",
      "id" : 318149544,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE0OTU0NA==",
      "original_commit_id" : "8a8e141fe93bf887630df9681daa9cd8b2500f55",
      "original_position" : 12,
      "path" : "src/outputtype.h",
      "position" : null,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318149544",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318153110"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318153110"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Comment on how these are indexed?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:38:14Z",
      "diff_hunk" : "@@ -833,6 +834,11 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n \n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_external_spk_managers;\n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_internal_spk_managers;\n+\n+    std::map<uint256, std::shared_ptr<ScriptPubKeyMan>> m_spk_managers;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318153110",
      "id" : 318153110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1MzExMA==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 15,
      "path" : "src/wallet/wallet.h",
      "position" : 293,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318153110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318155569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318155569"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> m_internal_spk_managers[OutputType::LEGACY]\r\n\r\nPlease leave a comment noting that any output type is the same in this context.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:42:52Z",
      "diff_hunk" : "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318155569",
      "id" : 318155569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1NTU2OQ==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 8,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1709,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318155569",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318158886"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318158886"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we have the list of output types, let's just iterate through them here to build this",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:49:15Z",
      "diff_hunk" : "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318158886",
      "id" : 318158886,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1ODg4Ng==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 15,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318158886",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318159265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318159265"
         }
      },
      "author_association" : "MEMBER",
      "body" : "we have the list of output types, let's just iterate through them here to assert these",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T15:49:58Z",
      "diff_hunk" : "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_internal_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_internal_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_external_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_external_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_external_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_spk_managers[spk_manager->GetID()] = spk_manager;\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    std::shared_ptr<ScriptPubKeyMan> spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    assert(m_internal_spk_managers.at(OutputType::P2SH_SEGWIT) == spk_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318159265",
      "id" : 318159265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE1OTI2NQ==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 26,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 280277366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318159265",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318190081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318190081"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Refactor rawtransaction_util's SignTransaction to have previous tx parsing be separate\" (b49bbb939be92a67ff77c3f7bca5bb94dd141906)\r\n\r\n> nit. snake case for the function arguments?\r\n\r\nBetter in a separate PR, this PR is huge already and the change would make this commit a lot harder to follow.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T16:55:37Z",
      "diff_hunk" : "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318190081",
      "id" : 318190081,
      "in_reply_to_id" : 310656799,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE5MDA4MQ==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 5,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 280336299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318190081",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318192477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318192477"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement GetSigningProvider in LegacyScriptPubKeyMan\" (a31374df794d709cf8acfbafc7d5b57f74b1d75a)\r\n\r\nNot important, but this should never be null so a reference makes more sense than a pointer in this class",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T17:01:11Z",
      "diff_hunk" : "@@ -167,4 +167,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     uint256 GetID() const override;\n };\n \n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+class LegacySigningProvider : public SigningProvider\n+{\n+private:\n+    const LegacyScriptPubKeyMan* spk_man;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318192477",
      "id" : 318192477,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE5MjQ3Nw==",
      "original_commit_id" : "a31374df794d709cf8acfbafc7d5b57f74b1d75a",
      "original_position" : 8,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 280336299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318192477",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318193983"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318193983"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement function to connect ScriptPubKeyMan's NotifyCanGetAddessesChanged and NotifyWatchOnlyChanged to CWallet's\" (7b57deac879499e4b0ee99f1efc320600907bc59)\r\n\r\n`const auto&` instead of `auto` would avoid copying and incrementing / decrementing shared_ptr atomic reference counts, would also make it clear that the std::pair is not changing",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-27T17:04:49Z",
      "diff_hunk" : "@@ -5032,3 +5033,11 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     assert(m_external_spk_managers.at(OutputType::BECH32) == spk_man);\n     assert(m_spk_managers.size() == 1);\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (auto spk_man_pair : m_spk_managers) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r318193983",
      "id" : 318193983,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxODE5Mzk4Mw==",
      "original_commit_id" : "7b57deac879499e4b0ee99f1efc320600907bc59",
      "original_position" : 15,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 280336299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/318193983",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-30T01:40:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526421707",
      "id" : 526421707,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjQyMTcwNw==",
      "updated_at" : "2019-08-30T01:40:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526421707",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319628054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319628054"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Implement GetKeyOrigin in LegacyScriptPubKeyMan\" (b893f0d053f1b5be1229d4fb77ced46b222f9993)\r\n\r\nIt's unclear why this change is in this commit. Is it supposed to be part of the next one\r\n93322bf756fd8991fb445e327c878e2695fe9ca9?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T18:24:52Z",
      "diff_hunk" : "@@ -123,6 +123,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319628054",
      "id" : 319628054,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTYyODA1NA==",
      "original_commit_id" : "b893f0d053f1b5be1229d4fb77ced46b222f9993",
      "original_position" : 4,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 282184583,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319628054",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Suggestion just to see what others think: Split up this PR into a couple PRs, first of which is the non-test-breaking changes, the 2nd all the breaking changes+test fixes at the end?",
      "created_at" : "2019-08-30T18:43:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526707694",
      "id" : 526707694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjcwNzY5NA==",
      "updated_at" : "2019-08-30T18:43:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526707694",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Suggestion just to see what others think: Split up this PR into a couple PRs, first of which is the non-test-breaking changes, the 2nd all the breaking changes+test fixes at the end?\r\n\r\nI definitely would not want this because it would temporarily add a huge amount of duplicate code to the wallet. If this needs to be broken up to be reviewed (and I don't think it does), I'd either go with sjors approach moving things gradually, or just have one giant move-only commit followed by the actual code changes.",
      "created_at" : "2019-08-30T18:48:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526709057",
      "id" : 526709057,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjcwOTA1Nw==",
      "updated_at" : "2019-08-30T18:49:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526709057",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Or, in case I misunderstood, if you are just talking about splitting the first 9 commits into their own PR (the commits before the \"Implement...\" commits and the \"ci skip\" commits), that seems perfectly fine and would help a little.",
      "created_at" : "2019-08-30T18:52:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526710335",
      "id" : 526710335,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjcxMDMzNQ==",
      "updated_at" : "2019-08-30T18:52:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526710335",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653872"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653872"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I added a comment.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:13Z",
      "diff_hunk" : "@@ -144,8 +144,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n-            if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n-                ret.push_back(std::move(sig));\n+            if (CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n+                if (ret.size() < required + 1) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653872",
      "id" : 319653872,
      "in_reply_to_id" : 310624791,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1Mzg3Mg==",
      "original_commit_id" : "ca02ac2532ce106d372d420dd2b94ad15e730971",
      "original_position" : 7,
      "path" : "src/script/sign.cpp",
      "position" : 10,
      "pull_request_review_id" : 282218618,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653872",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653909"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653909"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:21Z",
      "diff_hunk" : "@@ -85,7 +116,9 @@ class ScriptPubKeyMan\n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n public:\n-    LegacyScriptPubKeyMan() {}\n+    LegacyScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653909",
      "id" : 319653909,
      "in_reply_to_id" : 316833572,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1MzkwOQ==",
      "original_commit_id" : "bae5b518ec507d071a54ce4810dd24b016bcfe12",
      "original_position" : 51,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 282218681,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653909",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:28Z",
      "diff_hunk" : "@@ -167,4 +167,20 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     uint256 GetID() const override;\n };\n \n+/** Wraps a LegacyScriptPubKeyMan so that it can be returned in a new unique_ptr */\n+class LegacySigningProvider : public SigningProvider\n+{\n+private:\n+    const LegacyScriptPubKeyMan* spk_man;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653940",
      "id" : 319653940,
      "in_reply_to_id" : 318192477,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1Mzk0MA==",
      "original_commit_id" : "a31374df794d709cf8acfbafc7d5b57f74b1d75a",
      "original_position" : 8,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 282218727,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653940",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed all of these iterations to `const auto&`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:38Z",
      "diff_hunk" : "@@ -5032,3 +5033,11 @@ void CWallet::SetupLegacyScriptPubKeyMan()\n     assert(m_external_spk_managers.at(OutputType::BECH32) == spk_man);\n     assert(m_spk_managers.size() == 1);\n }\n+\n+void CWallet::ConnectScriptPubKeyManNotifiers()\n+{\n+    for (auto spk_man_pair : m_spk_managers) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319653992",
      "id" : 319653992,
      "in_reply_to_id" : 318193983,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1Mzk5Mg==",
      "original_commit_id" : "7b57deac879499e4b0ee99f1efc320600907bc59",
      "original_position" : 15,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 282218794,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319653992",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654014"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:43Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+class ScriptPubKeyMan",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654014",
      "id" : 319654014,
      "in_reply_to_id" : 318147258,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDAxNA==",
      "original_commit_id" : "e892a72f22c3359a12085f0e93d519acaa711bcd",
      "original_position" : 18,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 134,
      "pull_request_review_id" : 282218827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654014",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654040"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:48Z",
      "diff_hunk" : "@@ -27,6 +28,8 @@ enum class OutputType {\n     CHANGE_AUTO,\n };\n \n+const std::array<OutputType, 3> output_types = {OutputType::LEGACY, OutputType::P2SH_SEGWIT, OutputType::BECH32};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654040",
      "id" : 319654040,
      "in_reply_to_id" : 318149544,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDA0MA==",
      "original_commit_id" : "8a8e141fe93bf887630df9681daa9cd8b2500f55",
      "original_position" : 12,
      "path" : "src/outputtype.h",
      "position" : null,
      "pull_request_review_id" : 282218863,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654069"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654069"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:55Z",
      "diff_hunk" : "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654069",
      "id" : 319654069,
      "in_reply_to_id" : 318155569,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDA2OQ==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 8,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1709,
      "pull_request_review_id" : 282218902,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654069",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654084"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654084"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:49:58Z",
      "diff_hunk" : "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654084",
      "id" : 319654084,
      "in_reply_to_id" : 318158886,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDA4NA==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 15,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 282218928,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654084",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:50:31Z",
      "diff_hunk" : "@@ -4935,3 +4935,32 @@ bool CWallet::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<uns\n     ImplicitlyLearnRelatedKeyScripts(vchPubKey);\n     return true;\n }\n+\n+std::shared_ptr<LegacyScriptPubKeyMan> CWallet::GetLegacyScriptPubKeyMan()\n+{\n+    SetupLegacyScriptPubKeyMan();\n+    return std::dynamic_pointer_cast<LegacyScriptPubKeyMan>(m_internal_spk_managers[OutputType::LEGACY]);\n+}\n+\n+void CWallet::SetupLegacyScriptPubKeyMan()\n+{\n+    if (m_internal_spk_managers.empty() && m_external_spk_managers.empty() && m_spk_managers.empty()) {\n+        auto spk_manager = std::shared_ptr<ScriptPubKeyMan>(new LegacyScriptPubKeyMan());\n+        m_internal_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_internal_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_internal_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_external_spk_managers[OutputType::LEGACY] = spk_manager;\n+        m_external_spk_managers[OutputType::P2SH_SEGWIT] = spk_manager;\n+        m_external_spk_managers[OutputType::BECH32] = spk_manager;\n+        m_spk_managers[spk_manager->GetID()] = spk_manager;\n+    }\n+    // These all need to exist and be the same\n+    assert(m_internal_spk_managers.count(OutputType::LEGACY) > 0);\n+    std::shared_ptr<ScriptPubKeyMan> spk_man = m_internal_spk_managers.at(OutputType::LEGACY);\n+    assert(m_internal_spk_managers.at(OutputType::P2SH_SEGWIT) == spk_man);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654232",
      "id" : 319654232,
      "in_reply_to_id" : 318159265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDIzMg==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 26,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 282219135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654232",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654309"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah. Moved it",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:50:42Z",
      "diff_hunk" : "@@ -123,6 +123,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n \n     LOCK(testWallet.cs_wallet);\n+    testWallet.SetupLegacyScriptPubKeyMan();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319654309",
      "id" : 319654309,
      "in_reply_to_id" : 319628054,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NDMwOQ==",
      "original_commit_id" : "b893f0d053f1b5be1229d4fb77ced46b222f9993",
      "original_position" : 4,
      "path" : "src/wallet/test/coinselector_tests.cpp",
      "position" : 4,
      "pull_request_review_id" : 282219206,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319654309",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319655153"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319655153"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-30T19:53:49Z",
      "diff_hunk" : "@@ -833,6 +834,11 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     //! Fetches a key from the keypool\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n \n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_external_spk_managers;\n+    std::map<OutputType, std::shared_ptr<ScriptPubKeyMan>> m_internal_spk_managers;\n+\n+    std::map<uint256, std::shared_ptr<ScriptPubKeyMan>> m_spk_managers;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319655153",
      "id" : 319655153,
      "in_reply_to_id" : 318153110,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTY1NTE1Mw==",
      "original_commit_id" : "7a27857f91ad585f82bb784faf092e8fe7e30946",
      "original_position" : 15,
      "path" : "src/wallet/wallet.h",
      "position" : 293,
      "pull_request_review_id" : 282220349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319655153",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and addressed comments.\r\n\r\nWill look at the bug @Sjors reported next.",
      "created_at" : "2019-08-30T20:12:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526733789",
      "id" : 526733789,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjczMzc4OQ==",
      "updated_at" : "2019-08-30T20:12:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526733789",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "The bug @Sjors found should be fixed now.",
      "created_at" : "2019-08-30T20:52:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-526746214",
      "id" : 526746214,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNjc0NjIxNA==",
      "updated_at" : "2019-08-30T20:52:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/526746214",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319716775"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319716775"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this commit deserves its own PR anyway; as does any refactor that's a prequisite for the main PR.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-08-31T08:43:57Z",
      "diff_hunk" : "@@ -147,9 +147,8 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins, bool is_temp_keystore, const UniValue& hashType)\n+void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r319716775",
      "id" : 319716775,
      "in_reply_to_id" : 310656799,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxOTcxNjc3NQ==",
      "original_commit_id" : "12a411b8a7f77753ec35241d73697f6bbcc77ec1",
      "original_position" : 5,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : null,
      "pull_request_review_id" : 282298536,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/319716775",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I split cce926c into #16798\r\n\r\nI'm unsure about splitting the other two \"unrelated\" commits since they don't actually do anything useful outside of this PR.\r\n\r\nd2d43ab is purely to avoid a circular dependency, and d9ea846 is only to fix a side effect of this PR.\r\n\r\nAlso reordered the first several commits so the \"unrelated\" commits come first.",
      "created_at" : "2019-09-03T19:54:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-527613139",
      "id" : 527613139,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNzYxMzEzOQ==",
      "updated_at" : "2019-09-03T20:11:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/527613139",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321891057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321891057"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this function doesn't create one, just returns null",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:06:03Z",
      "diff_hunk" : "@@ -1319,6 +1319,16 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    std::set<std::shared_ptr<ScriptPubKeyMan>> GetActiveScriptPubKeyMans() const;\n+\n+    //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain. If it doesn't exist, instantiate one",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321891057",
      "id" : 321891057,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5MTA1Nw==",
      "original_commit_id" : "c4cbc90efe10c43417f4cb8d1a13ebfb4107f9c2",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321891057",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321892466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321892466"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know this is from CWallet but I'd rather avoid hungarian notation for new variables: `m_use_crypto`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:10:35Z",
      "diff_hunk" : "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321892466",
      "id" : 321892466,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5MjQ2Ng==",
      "original_commit_id" : "f504e8a5372263dd1621bf19395360149e84f98d",
      "original_position" : 7,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 237,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321892466",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321893577"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321893577"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know there's no documentation where you got this from but could there be an explanation of this field?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:13:58Z",
      "diff_hunk" : "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321893577",
      "id" : 321893577,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5MzU3Nw==",
      "original_commit_id" : "f504e8a5372263dd1621bf19395360149e84f98d",
      "original_position" : 11,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 246,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321893577",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894091"
         }
      },
      "author_association" : "MEMBER",
      "body" : "for reviewers: this whole commit is cloned from CWallet's implementation",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:15:33Z",
      "diff_hunk" : "@@ -16,12 +16,27 @@ isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool LegacyScriptPubKeyMan::IsCrypted() const\n {\n-    return false;\n+    return fUseCrypto;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894091",
      "id" : 321894091,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5NDA5MQ==",
      "original_commit_id" : "f504e8a5372263dd1621bf19395360149e84f98d",
      "original_position" : 5,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 210,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894091",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894821"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I know this is cloning but `std::make_pair` like everywhere else",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:17:53Z",
      "diff_hunk" : "@@ -148,3 +148,38 @@ uint256 LegacyScriptPubKeyMan::GetID() const\n {\n     return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n }\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321894821",
      "id" : 321894821,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5NDgyMQ==",
      "original_commit_id" : "d5bec330bd64e39b3cd324a9df1ec65c2afe076c",
      "original_position" : 17,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321894821",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321898519"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321898519"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please change all these \"store\" references to pubkeyman references",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:28:54Z",
      "diff_hunk" : "@@ -161,6 +162,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    //! Adds a key to the store, and saves it to disk.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321898519",
      "id" : 321898519,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTg5ODUxOQ==",
      "original_commit_id" : "aba2ac2b7e7d3d61b2aee0c484926682d1858098",
      "original_position" : 12,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 278,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321898519",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321905454"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321905454"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this seems to add the optional params for no reason vs master. remove them, or at least annotate what they mean.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:50:29Z",
      "diff_hunk" : "@@ -459,3 +459,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY, nullptr, false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321905454",
      "id" : 321905454,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkwNTQ1NA==",
      "original_commit_id" : "4d53fa7f1c98792cd2d599ccde7a5a37bdade007",
      "original_position" : 27,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321905454",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321907947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321907947"
         }
      },
      "author_association" : "MEMBER",
      "body" : "renamed to `GetTotalKeypoolSize` to make it clear it counts both?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T20:58:33Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    unsigned int GetKeypoolSize() const override;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321907947",
      "id" : 321907947,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkwNzk0Nw==",
      "original_commit_id" : "c43d7572a2cf0363f7df763e8c0d6437e3cb87ff",
      "original_position" : 129,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 360,
      "pull_request_review_id" : 285073862,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321907947",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321909406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321909406"
         }
      },
      "author_association" : "MEMBER",
      "body" : "on second thought, nevermind. for now straight copy is good.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T21:03:28Z",
      "diff_hunk" : "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321909406",
      "id" : 321909406,
      "in_reply_to_id" : 321892466,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkwOTQwNg==",
      "original_commit_id" : "f504e8a5372263dd1621bf19395360149e84f98d",
      "original_position" : 7,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 237,
      "pull_request_review_id" : 285098599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321909406",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937412"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937412"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's always counted both, and I would prefer to keep this consistent with `CWallet::GetKeypoolSize`.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T23:10:07Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+class ScriptPubKeyMan\n+{\n+public:\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }\n+\n+    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n+\n+    virtual uint256 GetID() const { return uint256(); }\n+\n+    /** Watch-only address added */\n+    boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Keypool has new keys */\n+    boost::signals2::signal<void ()> NotifyCanGetAddressesChanged;\n+};\n+\n+class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool IsCrypted() const override;\n+    bool IsLocked() const override;\n+    bool Lock() override;\n+\n+    bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) override;\n+    bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void KeepDestination(int64_t index) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    void UpgradeKeyMetadata() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool SetupGeneration(bool force = false) override;\n+\n+    bool Upgrade(int prev_version, int new_version, std::string& error) override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    void RewriteDB() override;\n+\n+    int64_t GetOldestKeyPoolTime() override;\n+    size_t KeypoolCountExternalKeys() override EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    unsigned int GetKeypoolSize() const override;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937412",
      "id" : 321937412,
      "in_reply_to_id" : 321907947,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzNzQxMg==",
      "original_commit_id" : "c43d7572a2cf0363f7df763e8c0d6437e3cb87ff",
      "original_position" : 129,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 360,
      "pull_request_review_id" : 285134547,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937412",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937683"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937683"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think it's necessary to change all of these.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T23:11:43Z",
      "diff_hunk" : "@@ -161,6 +162,9 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     //! Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnlyWithDB(WalletBatch &batch, const CScript& dest, int64_t create_time) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n+    //! Adds a key to the store, and saves it to disk.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321937683",
      "id" : 321937683,
      "in_reply_to_id" : 321898519,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzNzY4Mw==",
      "original_commit_id" : "aba2ac2b7e7d3d61b2aee0c484926682d1858098",
      "original_position" : 12,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 278,
      "pull_request_review_id" : 285134818,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321937683",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938576"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938576"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Edited comment.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T23:17:59Z",
      "diff_hunk" : "@@ -1319,6 +1319,16 @@ class CWallet final : public FillableSigningProvider, private interfaces::Chain:\n     /** Implement lookup of key origin information through wallet key metadata. */\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n \n+    std::set<std::shared_ptr<ScriptPubKeyMan>> GetActiveScriptPubKeyMans() const;\n+\n+    //! Get the ScriptPubKeyMan for the given OutputType and internal/external chain. If it doesn't exist, instantiate one",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938576",
      "id" : 321938576,
      "in_reply_to_id" : 321891057,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODU3Ng==",
      "original_commit_id" : "c4cbc90efe10c43417f4cb8d1a13ebfb4107f9c2",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 285135945,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938576",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T23:18:05Z",
      "diff_hunk" : "@@ -123,6 +123,15 @@ class ScriptPubKeyMan\n \n class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProvider\n {\n+private:\n+    //! if fUseCrypto is true, mapKeys must be empty\n+    //! if fUseCrypto is false, vMasterKey must be empty\n+    std::atomic<bool> fUseCrypto{false};\n+\n+    bool SetCrypted();\n+\n+    CKeyingMaterial vMasterKey GUARDED_BY(cs_KeyStore);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938597",
      "id" : 321938597,
      "in_reply_to_id" : 321893577,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODU5Nw==",
      "original_commit_id" : "f504e8a5372263dd1621bf19395360149e84f98d",
      "original_position" : 11,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 246,
      "pull_request_review_id" : 285135971,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938597",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938626"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T23:18:15Z",
      "diff_hunk" : "@@ -148,3 +148,38 @@ uint256 LegacyScriptPubKeyMan::GetID() const\n {\n     return uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\");\n }\n+\n+bool LegacyScriptPubKeyMan::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    return AddCryptedKeyInner(vchPubKey, vchCryptedSecret);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCryptedKeyInner(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+{\n+    LOCK(cs_KeyStore);\n+    if (!SetCrypted()) {\n+        return false;\n+    }\n+\n+    mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938626",
      "id" : 321938626,
      "in_reply_to_id" : 321894821,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODYyNg==",
      "original_commit_id" : "d5bec330bd64e39b3cd324a9df1ec65c2afe076c",
      "original_position" : 17,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 285136007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938626",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the optional params. They still need to be specified in when binding the function though.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-06T23:18:50Z",
      "diff_hunk" : "@@ -459,3 +459,97 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     // Check for watch-only pubkeys\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n+\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+{\n+    assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+    assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n+    AssertLockHeld(cs_KeyStore);\n+    bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n+\n+    CKey secret;\n+\n+    // Create new metadata\n+    int64_t nCreationTime = GetTime();\n+    CKeyMetadata metadata(nCreationTime);\n+\n+    // use HD key derivation if HD was enabled during wallet creation and a seed is present\n+    if (IsHDEnabled()) {\n+        DeriveNewChildKey(batch, metadata, secret, (CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+    } else {\n+        secret.MakeNewKey(fCompressed);\n+    }\n+\n+    // Compressed public keys were introduced in version 0.6.0\n+    if (fCompressed) {\n+        SetMinVersion(FEATURE_COMPRPUBKEY, nullptr, false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r321938694",
      "id" : 321938694,
      "in_reply_to_id" : 321905454,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMTkzODY5NA==",
      "original_commit_id" : "4d53fa7f1c98792cd2d599ccde7a5a37bdade007",
      "original_position" : 27,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 285136101,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/321938694",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-09-07T01:12:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529058316",
      "id" : 529058316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTA1ODMxNg==",
      "updated_at" : "2019-09-07T01:12:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529058316",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "only changes through \"Implement CanGetAddresses, CanGenerateKeys, and HavePrivateKeys in LegacyScriptPubKeyMan\" were the suggested ones in above review.",
      "created_at" : "2019-09-09T14:42:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529509066",
      "id" : 529509066,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTUwOTA2Ng==",
      "updated_at" : "2019-09-09T14:42:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529509066",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322299705"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322299705"
         }
      },
      "author_association" : "MEMBER",
      "body" : "missing `error.clear()` that CWallet has?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:14:00Z",
      "diff_hunk" : "@@ -3,11 +3,22 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    TopUpKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322299705",
      "id" : 322299705,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjI5OTcwNQ==",
      "original_commit_id" : "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "original_position" : 10,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 16,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322299705",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322301283"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322301283"
         }
      },
      "author_association" : "MEMBER",
      "body" : "realized this doesn't exist in master, please put explanation in comment on what it's used for",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:16:57Z",
      "diff_hunk" : "@@ -284,6 +284,25 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::map<int64_t, CKeyID> m_reserved_key_to_index;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322301283",
      "id" : 322301283,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMwMTI4Mw==",
      "original_commit_id" : "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "original_position" : 2,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 301,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322301283",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322310615"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322310615"
         }
      },
      "author_association" : "MEMBER",
      "body" : "there's no flag being set here anymore. If intentional, I'd like an explanation and fixup of this comment",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:33:59Z",
      "diff_hunk" : "@@ -118,11 +120,51 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322310615",
      "id" : 322310615,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxMDYxNQ==",
      "original_commit_id" : "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "original_position" : 44,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322310615",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322312299"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322312299"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please elaborate on stuff :P \r\n\r\nit's important for spotting missing functionality since I don't think there's an equiv block in old wallet code",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:37:05Z",
      "diff_hunk" : "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322312299",
      "id" : 322312299,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxMjI5OQ==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 181,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322312299",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322313000"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322313000"
         }
      },
      "author_association" : "MEMBER",
      "body" : "seems a bit of a misnomer even based on my reading",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:38:26Z",
      "diff_hunk" : "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322313000",
      "id" : 322313000,
      "in_reply_to_id" : 322312299,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxMzAwMA==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 181,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322313000",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322314647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322314647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "any reason you're not actually referencing `VERSION_HD_CHAIN_SPLIT` directly?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:41:33Z",
      "diff_hunk" : "@@ -149,7 +191,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322314647",
      "id" : 322314647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxNDY0Nw==",
      "original_commit_id" : "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "original_position" : 80,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 381,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322314647",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322315266"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322315266"
         }
      },
      "author_association" : "MEMBER",
      "body" : "and why the logic change here? master doesn't have this version check",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:42:39Z",
      "diff_hunk" : "@@ -149,7 +191,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322315266",
      "id" : 322315266,
      "in_reply_to_id" : 322314647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxNTI2Ng==",
      "original_commit_id" : "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "original_position" : 80,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 381,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322315266",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322316694"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322316694"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this has nothing to do with the DB, other than it's called right after `database->Rewrite(\"\\x04pool\")` by the caller.\r\n\r\nPlease rename it to something sensible e.g., `ClearKeypool`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:45:26Z",
      "diff_hunk" : "@@ -0,0 +1,1462 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::IsCrypted() const\n+{\n+    return fUseCrypto;\n+}\n+\n+bool LegacyScriptPubKeyMan::SetCrypted()\n+{\n+    LOCK(cs_KeyStore);\n+    if (fUseCrypto)\n+        return true;\n+    if (!mapKeys.empty())\n+        return false;\n+    fUseCrypto = true;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsLocked() const\n+{\n+    if (!IsCrypted()) {\n+        return false;\n+    }\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            return false;\n+        }\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return !hdChain.seed_id.IsNull();\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n+{\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322316694",
      "id" : 322316694,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxNjY5NA==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 405,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 406,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322316694",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322319993"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322319993"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can you explain the diff in code from master with the batch pointer being set in this function, when it's set to null, etc?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:52:10Z",
      "diff_hunk" : "@@ -429,6 +427,36 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pu\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322319993",
      "id" : 322319993,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMxOTk5Mw==",
      "original_commit_id" : "b5cb8f59ca2a501aa1f50f78b65fb029eff07d80",
      "original_position" : 32,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 634,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322319993",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322323465"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322323465"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Can you explain where the `SetAddressBookWithDB` call went for reviewers? ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T15:58:58Z",
      "diff_hunk" : "@@ -1122,3 +1123,122 @@ void LegacyScriptPubKeyMan::MarkPreSplitKeys()\n         it = setExternalKeyPool.erase(it);\n     }\n }\n+\n+bool LegacyScriptPubKeyMan::AddCScript(const CScript& redeemScript)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddCScriptWithDB(batch, redeemScript);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n+{\n+    if (!FillableSigningProvider::AddCScript(redeemScript))\n+        return false;\n+    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_KeyStore);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : scripts) {\n+        CScriptID id(entry);\n+        if (HaveCScript(id)) {\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n+            continue;\n+        }\n+        if (!AddCScriptWithDB(batch, entry)) {\n+            return false;\n+        }\n+\n+        if (timestamp > 0) {\n+            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n+        }\n+    }\n+    if (timestamp > 0) {\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : privkey_map) {\n+        const CKey& key = entry.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        const CKeyID& id = entry.first;\n+        assert(key.VerifyPubKey(pubkey));\n+        // Skip if we already have the key\n+        if (HaveKey(id)) {\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n+            continue;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+        // If the private key is not present in the wallet, insert it.\n+        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n+            return false;\n+        }\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : key_origins) {\n+        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+    }\n+    for (const CKeyID& id : ordered_pubkeys) {\n+        auto entry = pubkey_map.find(id);\n+        if (entry == pubkey_map.end()) {\n+            continue;\n+        }\n+        const CPubKey& pubkey = entry->second;\n+        CPubKey temp;\n+        if (GetPubKey(id, temp)) {\n+            // Already have pubkey, skipping\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n+            continue;\n+        }\n+        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n+            return false;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+        // Add to keypool only works with pubkeys\n+        if (add_keypool) {\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            NotifyCanGetAddressesChanged();\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const CScript& script : script_pub_keys) {\n+        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n+                return false;\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322323465",
      "id" : 322323465,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMyMzQ2NQ==",
      "original_commit_id" : "c02e6daf1842ba1589802c612a2228744b43d7c3",
      "original_position" : 127,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 1460,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322323465",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322325223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322325223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Brief comment on what this does? (I don't think similar existed before in CWallet)",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T16:02:36Z",
      "diff_hunk" : "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322325223",
      "id" : 322325223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMyNTIyMw==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 208,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 208,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322325223",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322326671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322326671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why this move? is this preparatory? ",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T16:05:35Z",
      "diff_hunk" : "@@ -74,6 +72,8 @@ class FillableSigningProvider : public SigningProvider\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n+    mutable CCriticalSection cs_KeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322326671",
      "id" : 322326671,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMyNjY3MQ==",
      "original_commit_id" : "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "original_position" : 13,
      "path" : "src/script/signingprovider.h",
      "position" : 13,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322326671",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322336189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322336189"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe leave a comment in this block that the pubkeyman has no use for this key, it's just an encryption key. I was tripped up on this. Bad naming! bad!",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T16:26:22Z",
      "diff_hunk" : "@@ -310,6 +312,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n                 return false;\n             }\n+            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+                return false;\n+            }\n         } else if (strType == DBKeys::MASTER_KEY) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322336189",
      "id" : 322336189,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMzNjE4OQ==",
      "original_commit_id" : "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "original_position" : 21,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 23,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322336189",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337263"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337263"
         }
      },
      "author_association" : "MEMBER",
      "body" : "please explain in header what it `CanProvide`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T16:28:42Z",
      "diff_hunk" : "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337263",
      "id" : 322337263,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMzNzI2Mw==",
      "original_commit_id" : "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "original_position" : 2,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 472,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337263",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337866"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T16:30:09Z",
      "diff_hunk" : "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        return true;\n+    } else {\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have the private key",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322337866",
      "id" : 322337866,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjMzNzg2Ng==",
      "original_commit_id" : "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "original_position" : 12,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 481,
      "pull_request_review_id" : 285582874,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322337866",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322356879"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322356879"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: annotate the bool arg, or make it an enum",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:14:36Z",
      "diff_hunk" : "@@ -3709,28 +3709,23 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n {\n     LOCK(cs_wallet);\n     error.clear();\n-\n-    TopUpKeyPool();\n-\n-    // Generate a new key that is added to wallet\n-    CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n-        return false;\n+    bool result = false;\n+    auto spk_man = GetScriptPubKeyMan(type, false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322356879",
      "id" : 322356879,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM1Njg3OQ==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 13,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322356879",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358340"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358340"
         }
      },
      "author_association" : "MEMBER",
      "body" : "no need to gate here, `TopUp` already checks for this in `TopUpKeyPool`",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:18:01Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358340",
      "id" : 322358340,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM1ODM0MA==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 48,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358340",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358957"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358957"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`LegacyScriptPubKeyMan::GetReservedDestination` does this check as well",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:19:25Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322358957",
      "id" : 322358957,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM1ODk1Nw==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 52,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322358957",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322360258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322360258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It remains in wallet.cpp since the address book isn't part of `ScriptPubKeyMan`.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:22:34Z",
      "diff_hunk" : "@@ -1122,3 +1123,122 @@ void LegacyScriptPubKeyMan::MarkPreSplitKeys()\n         it = setExternalKeyPool.erase(it);\n     }\n }\n+\n+bool LegacyScriptPubKeyMan::AddCScript(const CScript& redeemScript)\n+{\n+    WalletBatch batch(*m_database);\n+    return AddCScriptWithDB(batch, redeemScript);\n+}\n+\n+bool LegacyScriptPubKeyMan::AddCScriptWithDB(WalletBatch& batch, const CScript& redeemScript)\n+{\n+    if (!FillableSigningProvider::AddCScript(redeemScript))\n+        return false;\n+    if (batch.WriteCScript(Hash160(redeemScript), redeemScript)) {\n+        UnsetWalletFlagWithDB(batch, WALLET_FLAG_BLANK_WALLET);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info)\n+{\n+    LOCK(cs_KeyStore);\n+    std::copy(info.fingerprint, info.fingerprint + 4, mapKeyMetadata[pubkey.GetID()].key_origin.fingerprint);\n+    mapKeyMetadata[pubkey.GetID()].key_origin.path = info.path;\n+    mapKeyMetadata[pubkey.GetID()].has_key_origin = true;\n+    mapKeyMetadata[pubkey.GetID()].hdKeypath = WriteHDKeypath(info.path);\n+    return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : scripts) {\n+        CScriptID id(entry);\n+        if (HaveCScript(id)) {\n+            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n+            continue;\n+        }\n+        if (!AddCScriptWithDB(batch, entry)) {\n+            return false;\n+        }\n+\n+        if (timestamp > 0) {\n+            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n+        }\n+    }\n+    if (timestamp > 0) {\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : privkey_map) {\n+        const CKey& key = entry.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        const CKeyID& id = entry.first;\n+        assert(key.VerifyPubKey(pubkey));\n+        // Skip if we already have the key\n+        if (HaveKey(id)) {\n+            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n+            continue;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+        // If the private key is not present in the wallet, insert it.\n+        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n+            return false;\n+        }\n+        UpdateTimeFirstKey(timestamp);\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const auto& entry : key_origins) {\n+        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n+    }\n+    for (const CKeyID& id : ordered_pubkeys) {\n+        auto entry = pubkey_map.find(id);\n+        if (entry == pubkey_map.end()) {\n+            continue;\n+        }\n+        const CPubKey& pubkey = entry->second;\n+        CPubKey temp;\n+        if (GetPubKey(id, temp)) {\n+            // Already have pubkey, skipping\n+            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n+            continue;\n+        }\n+        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n+            return false;\n+        }\n+        mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+        // Add to keypool only works with pubkeys\n+        if (add_keypool) {\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+            NotifyCanGetAddressesChanged();\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp)\n+{\n+    WalletBatch batch(*m_database);\n+    for (const CScript& script : script_pub_keys) {\n+        if (!have_solving_data || !IsMine(script)) { // Always call AddWatchOnly for non-solvable watch-only, so that watch timestamp gets updated\n+            if (!AddWatchOnlyWithDB(batch, script, timestamp)) {\n+                return false;\n+            }\n+        }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322360258",
      "id" : 322360258,
      "in_reply_to_id" : 322323465,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2MDI1OA==",
      "original_commit_id" : "c02e6daf1842ba1589802c612a2228744b43d7c3",
      "original_position" : 127,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 1460,
      "pull_request_review_id" : 285661221,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322360258",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322361186"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322361186"
         }
      },
      "author_association" : "MEMBER",
      "body" : "not immediately obvious to me how this gets accomplished in new flow? `GetNewDestination` case is covered, just not this one?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:24:38Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322361186",
      "id" : 322361186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2MTE4Ng==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 67,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1223,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322361186",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322362131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322362131"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It could be watch only (as DUMMY_SIGNATURE_CREATOR works for watch only things), which then causes issues elsewhere when a private key is assumed to exist but doesn't for watch only things. So this prevents those code paths being taken for watch only things.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:26:36Z",
      "diff_hunk" : "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    if (IsMine(script) != ISMINE_NO) {\n+        return true;\n+    } else if (HaveCScript(CScriptID(script))) {\n+        return true;\n+    } else {\n+        ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, script, sigdata);\n+        if (!sigdata.signatures.empty()) {\n+            // If we could make signatures, make sure we have the private key",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322362131",
      "id" : 322362131,
      "in_reply_to_id" : 322337866,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2MjEzMQ==",
      "original_commit_id" : "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "original_position" : 12,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 481,
      "pull_request_review_id" : 285663578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322362131",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322366919"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322366919"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The equivalent blocks in old wallet code are the various `SetHDSeed(GenerateNewSeed())` lines scattered around in a bunch of places.\r\n\r\nHow is it a misnomer?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:37:14Z",
      "diff_hunk" : "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322366919",
      "id" : 322366919,
      "in_reply_to_id" : 322312299,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NjkxOQ==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 181,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 285669744,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322366919",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367040"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367040"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just use `spk_man` here (if you cannot, please annotate why in comments)",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:37:35Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367040",
      "id" : 322367040,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NzA0MA==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 28,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367040",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367377"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367377"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just use spk_man here (if you cannot, please annotate why in comments)",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:38:23Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367377",
      "id" : 322367377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NzM3Nw==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 56,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367377",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367622"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367622"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just use spk_man here (if you cannot, please annotate why in comments)",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:38:54Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367622",
      "id" : 322367622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2NzYyMg==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 93,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367622",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367743"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367743"
         }
      },
      "author_association" : "MEMBER",
      "body" : "just use spk_man here (if you cannot, please annotate why in comments)",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:39:11Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp)\n {\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n+    }\n+    LOCK(spk_man->cs_KeyStore);\n+    if (!GetLegacyScriptPubKeyMan()->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322367743",
      "id" : 322367743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM2Nzc0Mw==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 103,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322367743",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370108"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370108"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Referencing `VERSION_HD_CHAIN_SPLIT` directly requires including walletdb.h which is a circular dependency.\r\n\r\nThe logic is slightly different here because without it, it would end up marking the newly generated keys as pre-split on later runs on the same LegacyScriptPubKeyMan. This is an issue because for a LegacyScriptPubKeyMan, Upgrade() will be called 6 times (once for each address type and internalness). If you were to run `-upgradewallet` multiple times on master, you would see the same problem.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:44:47Z",
      "diff_hunk" : "@@ -149,7 +191,36 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n \n bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n {\n-    return false;\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370108",
      "id" : 322370108,
      "in_reply_to_id" : 322314647,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3MDEwOA==",
      "original_commit_id" : "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "original_position" : 80,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 381,
      "pull_request_review_id" : 285673931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370108",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370677"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370677"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's supposed to be post-processing that is done by ScriptPubKeyMan when the db had to be rewritten, hence the name. Other ScriptPubKeyMans may do something different.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:46:10Z",
      "diff_hunk" : "@@ -0,0 +1,1462 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+#include <outputtype.h>\n+#include <script/descriptor.h>\n+#include <util/bip32.h>\n+#include <util/strencodings.h>\n+#include <util/translation.h>\n+#include <wallet/scriptpubkeyman.h>\n+\n+bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    TopUpKeyPool();\n+\n+    // Generate a new key that is added to wallet\n+    CPubKey new_key;\n+    if (!GetKeyFromPool(new_key)) {\n+        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        return false;\n+    }\n+    LearnRelatedScripts(new_key, type);\n+    dest = GetDestinationForKey(new_key, type);\n+    return true;\n+}\n+\n+typedef std::vector<unsigned char> valtype;\n+\n+namespace {\n+\n+/**\n+ * This is an enum that tracks the execution context of a script, similar to\n+ * SigVersion in script/interpreter. It is separate however because we want to\n+ * distinguish between top-level scriptPubKey execution and P2SH redeemScript\n+ * execution (a distinction that has no impact on consensus rules).\n+ */\n+enum class IsMineSigVersion\n+{\n+    TOP = 0,        //!< scriptPubKey execution\n+    P2SH = 1,       //!< P2SH redeemScript\n+    WITNESS_V0 = 2, //!< P2WSH witness script execution\n+};\n+\n+/**\n+ * This is an internal representation of isminetype + invalidity.\n+ * Its order is significant, as we return the max of all explored\n+ * possibilities.\n+ */\n+enum class IsMineResult\n+{\n+    NO = 0,         //!< Not ours\n+    WATCH_ONLY = 1, //!< Included in watch-only balance\n+    SPENDABLE = 2,  //!< Included in all balances\n+    INVALID = 3,    //!< Not spendable by anyone (uncompressed pubkey in segwit, P2SH inside P2SH or witness, witness inside witness)\n+};\n+\n+bool PermitsUncompressed(IsMineSigVersion sigversion)\n+{\n+    return sigversion == IsMineSigVersion::TOP || sigversion == IsMineSigVersion::P2SH;\n+}\n+\n+bool HaveKeys(const std::vector<valtype>& pubkeys, const LegacyScriptPubKeyMan& keystore)\n+{\n+    for (const valtype& pubkey : pubkeys) {\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (!keystore.HaveKey(keyID)) return false;\n+    }\n+    return true;\n+}\n+\n+IsMineResult IsMineInner(const LegacyScriptPubKeyMan& keystore, const CScript& scriptPubKey, IsMineSigVersion sigversion)\n+{\n+    IsMineResult ret = IsMineResult::NO;\n+\n+    std::vector<valtype> vSolutions;\n+    txnouttype whichType = Solver(scriptPubKey, vSolutions);\n+\n+    CKeyID keyID;\n+    switch (whichType)\n+    {\n+    case TX_NONSTANDARD:\n+    case TX_NULL_DATA:\n+    case TX_WITNESS_UNKNOWN:\n+        break;\n+    case TX_PUBKEY:\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        if (!PermitsUncompressed(sigversion) && vSolutions[0].size() != 33) {\n+            return IsMineResult::INVALID;\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WPKH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        ret = std::max(ret, IsMineInner(keystore, GetScriptForDestination(PKHash(uint160(vSolutions[0]))), IsMineSigVersion::WITNESS_V0));\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n+    {\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        CPubKey pubkey;\n+        if (keystore.GetPubKey(keyID, pubkey)) {\n+            if (!PermitsUncompressed(sigversion) && !pubkey.IsCompressed()) {\n+                return IsMineResult::INVALID;\n+            } else {\n+                ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+            }\n+        }\n+        if (keystore.HaveKey(keyID)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    case TX_SCRIPTHASH:\n+    {\n+        if (sigversion != IsMineSigVersion::TOP) {\n+            // P2SH inside P2WSH or P2SH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::P2SH));\n+        }\n+        break;\n+    }\n+    case TX_WITNESS_V0_SCRIPTHASH:\n+    {\n+        if (sigversion == IsMineSigVersion::WITNESS_V0) {\n+            // P2WSH inside P2WSH is invalid.\n+            return IsMineResult::INVALID;\n+        }\n+        if (sigversion == IsMineSigVersion::TOP && !keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n+        uint160 hash;\n+        CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n+        CScriptID scriptID = CScriptID(hash);\n+        CScript subscript;\n+        if (keystore.GetCScript(scriptID, subscript)) {\n+            ret = std::max(ret, IsMineInner(keystore, subscript, IsMineSigVersion::WITNESS_V0));\n+        }\n+        break;\n+    }\n+\n+    case TX_MULTISIG:\n+    {\n+        // Never treat bare multisig outputs as ours (they can still be made watchonly-though)\n+        if (sigversion == IsMineSigVersion::TOP) {\n+            break;\n+        }\n+\n+        // Only consider transactions \"mine\" if we own ALL the\n+        // keys involved. Multi-signature transactions that are\n+        // partially owned (somebody else has a key that can spend\n+        // them) enable spend-out-from-under-you attacks, especially\n+        // in shared-wallet situations.\n+        std::vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (!PermitsUncompressed(sigversion)) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    return IsMineResult::INVALID;\n+                }\n+            }\n+        }\n+        if (HaveKeys(keys, keystore)) {\n+            ret = std::max(ret, IsMineResult::SPENDABLE);\n+        }\n+        break;\n+    }\n+    }\n+\n+    if (ret == IsMineResult::NO && keystore.HaveWatchOnly(scriptPubKey)) {\n+        ret = std::max(ret, IsMineResult::WATCH_ONLY);\n+    }\n+    return ret;\n+}\n+\n+} // namespace\n+\n+isminetype LegacyScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    switch (IsMineInner(*this, script, IsMineSigVersion::TOP)) {\n+    case IsMineResult::INVALID:\n+    case IsMineResult::NO:\n+        return ISMINE_NO;\n+    case IsMineResult::WATCH_ONLY:\n+        return ISMINE_WATCH_ONLY;\n+    case IsMineResult::SPENDABLE:\n+        return ISMINE_SPENDABLE;\n+    }\n+    assert(false);\n+}\n+\n+bool LegacyScriptPubKeyMan::IsCrypted() const\n+{\n+    return fUseCrypto;\n+}\n+\n+bool LegacyScriptPubKeyMan::SetCrypted()\n+{\n+    LOCK(cs_KeyStore);\n+    if (fUseCrypto)\n+        return true;\n+    if (!mapKeys.empty())\n+        return false;\n+    fUseCrypto = true;\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsLocked() const\n+{\n+    if (!IsCrypted()) {\n+        return false;\n+    }\n+    LOCK(cs_KeyStore);\n+    return vMasterKey.empty();\n+}\n+\n+bool LegacyScriptPubKeyMan::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    if (!CanGetAddresses(internal)) {\n+        return false;\n+    }\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        if (!ReserveKeyFromKeyPool(index, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            return false;\n+        }\n+        address = GetDestinationForKey(keypool.vchPubKey, type);\n+    }\n+    return true;\n+}\n+\n+void LegacyScriptPubKeyMan::KeepDestination(int64_t index)\n+{\n+    KeepKey(index);\n+}\n+\n+void LegacyScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+    ReturnKey(index, internal, m_reserved_key_to_index[index]);\n+    m_reserved_key_to_index.erase(index);\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return TopUpKeyPool(size);\n+}\n+\n+void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+    // extract addresses and check if they match with an unused keypool key\n+    for (const auto& keyid : GetAffectedKeys(script, *this)) {\n+        std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+        if (mi != m_pool_key_to_index.end()) {\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            MarkReserveKeysAsUsed(mi->second);\n+\n+            if (!TopUpKeyPool()) {\n+                WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+            }\n+        }\n+    }\n+}\n+\n+void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n+{\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag\n+}\n+\n+bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n+{\n+    if ((CanGenerateKeys() && !force) || IsLocked()) {\n+        return false;\n+    }\n+\n+    SetHDSeed(GenerateNewSeed());\n+    if (!NewKeyPool()) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return !hdChain.seed_id.IsNull();\n+}\n+\n+bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+    // Check if the keypool has keys\n+    bool keypool_has_keys;\n+    if (internal && CanSupportFeature(FEATURE_HD_SPLIT)) {\n+        keypool_has_keys = setInternalKeyPool.size() > 0;\n+    } else {\n+        keypool_has_keys = KeypoolCountExternalKeys() > 0;\n+    }\n+    // If the keypool doesn't have keys, check if we can generate them\n+    if (!keypool_has_keys) {\n+        return CanGenerateKeys();\n+    }\n+    return keypool_has_keys;\n+}\n+\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, int new_version, std::string& error)\n+{\n+    LOCK(cs_KeyStore);\n+    error = \"\";\n+    bool hd_upgrade = false;\n+    bool split_upgrade = false;\n+    if (CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n+        WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n+        SetMinVersion(FEATURE_HD);\n+\n+        // generate a new master key\n+        SetHDSeed(GenerateNewSeed());\n+        hd_upgrade = true;\n+    }\n+    // Upgrade to HD chain split if necessary\n+    if (CanSupportFeature(FEATURE_HD_SPLIT) && hdChain.nVersion < 2 /* VERSION_HD_CHAIN_SPLIT */) {\n+        WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n+        SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n+        split_upgrade = FEATURE_HD_SPLIT > prev_version;\n+    }\n+    // Mark all keys currently in the keypool as pre-split\n+    if (split_upgrade) {\n+        MarkPreSplitKeys();\n+    }\n+    // Regenerate the keypool if upgraded to HD\n+    if (hd_upgrade) {\n+        if (!TopUpKeyPool()) {\n+            error = _(\"Unable to generate keys\").translated;\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    LOCK(cs_KeyStore);\n+    return !mapKeys.empty() || !mapCryptedKeys.empty();\n+}\n+\n+void LegacyScriptPubKeyMan::RewriteDB()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322370677",
      "id" : 322370677,
      "in_reply_to_id" : 322316694,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3MDY3Nw==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 405,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 406,
      "pull_request_review_id" : 285674735,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322370677",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322372539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322372539"
         }
      },
      "author_association" : "MEMBER",
      "body" : "encrypted_batch used to be set from within `EncryptWallet` before `EncryptKeys` was called. Since `EncryptKeys` is now `ScriptPubKeyMan::Encrypt`, it doesn't have access to CWallet's encrypted_batch, so we need to pass it in and set it when the `ScriptPubKeyMan` is encrypting.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:50:26Z",
      "diff_hunk" : "@@ -429,6 +427,36 @@ bool LegacyScriptPubKeyMan::AddKeyPubKeyInner(const CKey& key, const CPubKey &pu\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch)\n+{\n+    LOCK(cs_KeyStore);\n+    encrypted_batch = batch;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322372539",
      "id" : 322372539,
      "in_reply_to_id" : 322319993,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3MjUzOQ==",
      "original_commit_id" : "b5cb8f59ca2a501aa1f50f78b65fb029eff07d80",
      "original_position" : 32,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 634,
      "pull_request_review_id" : 285677165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322372539",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322373793"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322373793"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It just returns a `CKeyMetadata` as the function name suggests.\r\n\r\nIt is needed so that getting metadata no longer requires direct access to `mapKeyMetadata` which no longer exists in CWallet and is not guaranteed to exist in other ScriptPubKeyMans (e.g. it is generated on the fly in native descriptor wallets).",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:53:17Z",
      "diff_hunk" : "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.\n+      * Returns false if already setup or setup fails, true if setup is successful\n+      * Set force=true to make it re-setup if already setup, used for upgrades\n+      */\n+    virtual bool SetupGeneration(bool force = false) { return false; }\n+\n+    /* Returns true if HD is enabled */\n+    virtual bool IsHDEnabled() const { return false; }\n+\n+    /* Returns true if the wallet can give out new addresses. This means it has keys in the keypool or can generate new keys */\n+    virtual bool CanGetAddresses(bool internal = false) { return false; }\n+\n+    /** Upgrades the wallet to the specified version */\n+    virtual bool Upgrade(int prev_version, int new_version, std::string& error) { return false; }\n+\n+    virtual bool HavePrivateKeys() const { return false; }\n+\n+    //! The action to do when the DB needs rewrite\n+    virtual void RewriteDB() {}\n+\n+    virtual int64_t GetOldestKeyPoolTime() { return GetTime(); }\n+\n+    virtual size_t KeypoolCountExternalKeys() { return 0; }\n+    virtual unsigned int GetKeypoolSize() const { return 0; }\n+\n+    virtual int64_t GetTimeFirstKey() const { return 0; }\n+\n+    virtual const CKeyMetadata* GetMetadata(uint160 id) const { return nullptr; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322373793",
      "id" : 322373793,
      "in_reply_to_id" : 322325223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3Mzc5Mw==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 208,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 208,
      "pull_request_review_id" : 285678804,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322373793",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322374333"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322374333"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes. `cs_KeyStore` sometimes needs to be locked by the caller.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T17:54:23Z",
      "diff_hunk" : "@@ -74,6 +72,8 @@ class FillableSigningProvider : public SigningProvider\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n+    mutable CCriticalSection cs_KeyStore;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322374333",
      "id" : 322374333,
      "in_reply_to_id" : 322326671,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NDMzMw==",
      "original_commit_id" : "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "original_position" : 13,
      "path" : "src/script/signingprovider.h",
      "position" : 13,
      "pull_request_review_id" : 285679409,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322374333",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377020"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:00:18Z",
      "diff_hunk" : "@@ -3,11 +3,22 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key_io.h>\n+#include <outputtype.h>\n #include <wallet/scriptpubkeyman.h>\n \n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    TopUpKeyPool();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377020",
      "id" : 322377020,
      "in_reply_to_id" : 322299705,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzAyMA==",
      "original_commit_id" : "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "original_position" : 10,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 16,
      "pull_request_review_id" : 285682850,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377020",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377086"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:00:29Z",
      "diff_hunk" : "@@ -284,6 +284,25 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::map<int64_t, CKeyID> m_reserved_key_to_index;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377086",
      "id" : 322377086,
      "in_reply_to_id" : 322301283,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzA4Ng==",
      "original_commit_id" : "a007c8ac72118d871d38115a88dd64cb76a3c465",
      "original_position" : 2,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 301,
      "pull_request_review_id" : 285682955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377163"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the comment.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:00:38Z",
      "diff_hunk" : "@@ -118,11 +120,51 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void LegacyScriptPubKeyMan::UpgradeKeyMetadata()\n {\n+    LOCK(cs_KeyStore);\n+    if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n+        return;\n+    }\n+\n+    std::unique_ptr<WalletBatch> batch = MakeUnique<WalletBatch>(*m_database);\n+    for (auto& meta_pair : mapKeyMetadata) {\n+        CKeyMetadata& meta = meta_pair.second;\n+        if (!meta.hd_seed_id.IsNull() && !meta.has_key_origin && meta.hdKeypath != \"s\") { // If the hdKeypath is \"s\", that's the seed and it doesn't have a key origin\n+            CKey key;\n+            GetKey(meta.hd_seed_id, key);\n+            CExtKey masterKey;\n+            masterKey.SetSeed(key.begin(), key.size());\n+            // Add to map\n+            CKeyID master_id = masterKey.key.GetPubKey().GetID();\n+            std::copy(master_id.begin(), master_id.begin() + 4, meta.key_origin.fingerprint);\n+            if (!ParseHDKeypath(meta.hdKeypath, meta.key_origin.path)) {\n+                throw std::runtime_error(\"Invalid stored hdKeypath\");\n+            }\n+            meta.has_key_origin = true;\n+            if (meta.nVersion < CKeyMetadata::VERSION_WITH_KEY_ORIGIN) {\n+                meta.nVersion = CKeyMetadata::VERSION_WITH_KEY_ORIGIN;\n+            }\n+\n+            // Write meta to wallet\n+            CPubKey pubkey;\n+            if (GetPubKey(meta_pair.first, pubkey)) {\n+                batch->WriteKeyMetadata(meta, pubkey, true);\n+            }\n+        }\n+    }\n+    batch.reset(); //write before setting the flag",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377163",
      "id" : 322377163,
      "in_reply_to_id" : 322310615,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzE2Mw==",
      "original_commit_id" : "c83bb3c7ad9a5c01e6b0de750fe95b90e1cc1d9a",
      "original_position" : 44,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 285683057,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377163",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377247"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I updated the comment.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:00:51Z",
      "diff_hunk" : "@@ -0,0 +1,479 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n+\n+#include <script/signingprovider.h>\n+#include <script/standard.h>\n+#include <wallet/crypter.h>\n+#include <wallet/ismine.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <functional>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+enum class OutputType;\n+\n+//! Default for -keypool\n+static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n+\n+std::vector<CKeyID> GetAffectedKeys(const CScript& spk, const SigningProvider& provider);\n+\n+/** A key from a CWallet's keypool\n+ *\n+ * The wallet holds one (for pre HD-split wallets) or several keypools. These\n+ * are sets of keys that have not yet been used to provide addresses or receive\n+ * change.\n+ *\n+ * The Bitcoin Core wallet was originally a collection of unrelated private\n+ * keys with their associated addresses. If a non-HD wallet generated a\n+ * key/address, gave that address out and then restored a backup from before\n+ * that key's generation, then any funds sent to that address would be\n+ * lost definitively.\n+ *\n+ * The keypool was implemented to avoid this scenario (commit: 10384941). The\n+ * wallet would generate a set of keys (100 by default). When a new public key\n+ * was required, either to give out as an address or to use in a change output,\n+ * it would be drawn from the keypool. The keypool would then be topped up to\n+ * maintain 100 keys. This ensured that as long as the wallet hadn't used more\n+ * than 100 keys since the previous backup, all funds would be safe, since a\n+ * restored wallet would be able to scan for all owned addresses.\n+ *\n+ * A keypool also allowed encrypted wallets to give out addresses without\n+ * having to be decrypted to generate a new private key.\n+ *\n+ * With the introduction of HD wallets (commit: f1902510), the keypool\n+ * essentially became an address look-ahead pool. Restoring old backups can no\n+ * longer definitively lose funds as long as the addresses used were from the\n+ * wallet's HD seed (since all private keys can be rederived from the seed).\n+ * However, if many addresses were used since the backup, then the wallet may\n+ * not know how far ahead in the HD chain to look for its addresses. The\n+ * keypool is used to implement a 'gap limit'. The keypool maintains a set of\n+ * keys (by default 1000) ahead of the last used key and scans for the\n+ * addresses of those keys.  This avoids the risk of not seeing transactions\n+ * involving the wallet's addresses, or of re-using the same address.\n+ *\n+ * The HD-split wallet feature added a second keypool (commit: 02592f4c). There\n+ * is an external keypool (for addresses to hand out) and an internal keypool\n+ * (for change addresses).\n+ *\n+ * Keypool keys are stored in the wallet/keystore's keymap. The keypool data is\n+ * stored as sets of indexes in the wallet (setInternalKeyPool,\n+ * setExternalKeyPool and set_pre_split_keypool), and a map from the key to the\n+ * index (m_pool_key_to_index). The CKeyPool object is used to\n+ * serialize/deserialize the pool data to/from the database.\n+ */\n+class CKeyPool\n+{\n+public:\n+    //! The time at which the key was generated. Set in AddKeypoolPubKeyWithDB\n+    int64_t nTime;\n+    //! The public key\n+    CPubKey vchPubKey;\n+    //! Whether this keypool entry is in the internal keypool (for change outputs)\n+    bool fInternal;\n+    //! Whether this key was generated for a keypool before the wallet was upgraded to HD-split\n+    bool m_pre_split;\n+\n+    CKeyPool();\n+    CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        int nVersion = s.GetVersion();\n+        if (!(s.GetType() & SER_GETHASH))\n+            READWRITE(nVersion);\n+        READWRITE(nTime);\n+        READWRITE(vchPubKey);\n+        if (ser_action.ForRead()) {\n+            try {\n+                READWRITE(fInternal);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as external address if we can't read the internal boolean\n+                   (this will be the case for any wallet before the HD chain split version) */\n+                fInternal = false;\n+            }\n+            try {\n+                READWRITE(m_pre_split);\n+            }\n+            catch (std::ios_base::failure&) {\n+                /* flag as postsplit address if we can't read the m_pre_split boolean\n+                   (this will be the case for any wallet that upgrades to HD chain split)*/\n+                m_pre_split = false;\n+            }\n+        }\n+        else {\n+            READWRITE(fInternal);\n+            READWRITE(m_pre_split);\n+        }\n+    }\n+};\n+\n+typedef std::function<void(uint64_t)> FlagFunc;\n+typedef std::function<void(WalletBatch&, uint64_t)> FlagFuncWithDB;\n+typedef std::function<bool(uint64_t)> FlagSetFunc;\n+typedef std::function<bool(enum WalletFeature)> VersionFunc;\n+typedef std::function<std::string()> NameFunc;\n+typedef std::function<void(enum WalletFeature)> SetVersionFunc;\n+\n+/*\n+ * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n+ * It contains the scripts and keys related to the scriptPubKeys it manages.\n+ * A ScriptPubKeyMan will be able to give out scriptPubKeys to be used, as well as marking\n+ * when a scriptPubKey has been used. It also handles when and how to store a scriptPubKey\n+ * and it's related scripts and keys, including encryption.\n+ */\n+\n+class ScriptPubKeyMan\n+{\n+protected:\n+    FlagSetFunc IsWalletFlagSet; // Function pointer to function that determines if a wallet flag is set\n+    FlagFunc SetWalletFlag; // Function pointer to function to set wallet flags\n+    FlagFuncWithDB UnsetWalletFlagWithDB; // Function pointer to function to unset wallet flags\n+    VersionFunc CanSupportFeature; // Function pointer to function that indicates whether the feature is supported\n+    NameFunc GetDisplayName; // Function pointer to GetDisplayName to get the name of a wallet for WalletLogPrintf\n+    SetVersionFunc SetMinVersion; // Function pointer to SetMinVersion in the wallet\n+\n+    /** Internal database handle. */\n+    std::shared_ptr<WalletDatabase> m_database;\n+\n+public:\n+    ScriptPubKeyMan(FlagSetFunc is_set_func, FlagFunc set_flag_func, FlagFuncWithDB unset_flag_func, VersionFunc feature_sup_func, NameFunc wallet_name_func, SetVersionFunc set_version_func, std::shared_ptr<WalletDatabase> database)\n+        :   IsWalletFlagSet(is_set_func),\n+            SetWalletFlag(set_flag_func),\n+            UnsetWalletFlagWithDB(unset_flag_func),\n+            CanSupportFeature(feature_sup_func),\n+            GetDisplayName(wallet_name_func),\n+            SetMinVersion(set_version_func),\n+            m_database(database)\n+        {}\n+\n+    virtual ~ScriptPubKeyMan() {};\n+    virtual bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) { return false; }\n+    virtual isminetype IsMine(const CScript& script) const { return ISMINE_NO; }\n+\n+    virtual bool IsCrypted() const { return false; }\n+    virtual bool IsLocked() const { return false; }\n+    virtual bool Lock() { return false; }\n+\n+    virtual bool Unlock(const CKeyingMaterial& vMasterKeyIn, bool accept_no_keys = false) { return false; }\n+    virtual bool Encrypt(CKeyingMaterial& vMasterKeyIn, WalletBatch* batch) { return false; }\n+\n+    virtual bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) { return false; }\n+    virtual void KeepDestination(int64_t index) {}\n+    virtual void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) {}\n+\n+    virtual bool TopUp(unsigned int size = 0) { return false; }\n+\n+    //! Mark unused addresses as being used\n+    virtual void MarkUnusedAddresses(const CScript& script) {}\n+\n+    //! Upgrade stored CKeyMetadata objects to store key origin info as KeyOriginInfo\n+    virtual void UpgradeKeyMetadata() {}\n+\n+    /** Sets up the key generation stuff.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377247",
      "id" : 322377247,
      "in_reply_to_id" : 322312299,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3NzI0Nw==",
      "original_commit_id" : "365879e9bdba93a84bd2ef4a39816a5eb8fd31b0",
      "original_position" : 181,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 285683187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377247",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377747"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:02:00Z",
      "diff_hunk" : "@@ -310,6 +312,11 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: LoadKey failed\";\n                 return false;\n             }\n+            if (!pwallet->GetLegacyScriptPubKeyMan()->LoadKey(key, vchPubKey))\n+            {\n+                strErr = \"Error reading wallet database: LegacyScriptPubKeyMan::LoadKey failed\";\n+                return false;\n+            }\n         } else if (strType == DBKeys::MASTER_KEY) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377747",
      "id" : 322377747,
      "in_reply_to_id" : 322336189,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3Nzc0Nw==",
      "original_commit_id" : "6806ad09a18e4800e3eb1cdcd483b7fe8907d684",
      "original_position" : 21,
      "path" : "src/wallet/walletdb.cpp",
      "position" : 23,
      "pull_request_review_id" : 285683848,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377747",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377790"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:02:06Z",
      "diff_hunk" : "@@ -296,7 +296,22 @@ std::unique_ptr<SigningProvider> LegacyScriptPubKeyMan::GetSigningProvider(const\n \n bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322377790",
      "id" : 322377790,
      "in_reply_to_id" : 322337263,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3Nzc5MA==",
      "original_commit_id" : "6c7c36276e26539edc8b281129bb30f1cd4a4fb8",
      "original_position" : 2,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 472,
      "pull_request_review_id" : 285683903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322377790",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322378586"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322378586"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why not just iterate over `GetActiveScriptPubKeyMans` result, should be more complete and less brittle to updates?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:03:51Z",
      "diff_hunk" : "@@ -3509,48 +3509,20 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (!CanGenerateKeys()) {\n+    LOCK(cs_wallet);\n+    if (IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         return false;\n     }\n-    {\n-        LOCK(cs_wallet);\n-\n-        if (IsLocked()) return false;\n-\n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n-\n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n-\n-        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        }\n-        bool internal = false;\n-        WalletBatch batch(*database);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n+    bool res = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322378586",
      "id" : 322378586,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM3ODU4Ng==",
      "original_commit_id" : "f4ff4c5f1a9d9da212ff3843f314557011baaa43",
      "original_position" : 37,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1115,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322378586",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322380725"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322380725"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`GetActiveScriptPubKeyMans`?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:08:44Z",
      "diff_hunk" : "@@ -4262,32 +4262,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        bool hd_upgrade = false;\n-        bool split_upgrade = false;\n-        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-\n-            // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-            walletInstance->SetHDSeed(masterPubKey);\n-            hd_upgrade = true;\n-        }\n-        // Upgrade to HD chain split if necessary\n-        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n-            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n-        }\n-        // Mark all keys currently in the keypool as pre-split\n-        if (split_upgrade) {\n-            walletInstance->MarkPreSplitKeys();\n-        }\n-        // Regenerate the keypool if upgraded to HD\n-        if (hd_upgrade) {\n-            if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n-                return nullptr;\n+\n+        for (bool internal : {false, true}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322380725",
      "id" : 322380725,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4MDcyNQ==",
      "original_commit_id" : "3e6cd81d3da4b1d96d9162756f2909660e1efc54",
      "original_position" : 31,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322380725",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322381977"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322381977"
         }
      },
      "author_association" : "MEMBER",
      "body" : "GetActiveScriptPubKeyMans?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:11:35Z",
      "diff_hunk" : "@@ -4449,8 +4449,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (bool internal : {false, true}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322381977",
      "id" : 322381977,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4MTk3Nw==",
      "original_commit_id" : "e3b5a71ae09c71c46381b6d2c254a51a085c6b4d",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322381977",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322383899"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322383899"
         }
      },
      "author_association" : "MEMBER",
      "body" : "GetActiveScriptPubKeyMans?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:16:02Z",
      "diff_hunk" : "@@ -214,9 +214,17 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             }\n \n             // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n+            {\n+                LOCK(wallet->cs_wallet);\n+                for (bool internal : {false, true}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322383899",
      "id" : 322383899,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4Mzg5OQ==",
      "original_commit_id" : "595fb6723821a40b4158d60ed3dbdf9c4ff88870",
      "original_position" : 9,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322383899",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322385026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322385026"
         }
      },
      "author_association" : "MEMBER",
      "body" : "comment for this whole commit: why is this here? I don't see direct connection with anything. Could this be moved earlier in PR or split out?",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T18:18:40Z",
      "diff_hunk" : "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322385026",
      "id" : 322385026,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjM4NTAyNg==",
      "original_commit_id" : "592177c771ee120472b11036ccf6e3aad0bba8af",
      "original_position" : 4,
      "path" : "src/outputtype.cpp",
      "position" : 4,
      "pull_request_review_id" : 285656678,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322385026",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322495058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322495058"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's handled internally by `spk_man` in the same way that `GetNewDestination` does.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:24:51Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322495058",
      "id" : 322495058,
      "in_reply_to_id" : 322361186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NTA1OA==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 67,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1223,
      "pull_request_review_id" : 285835591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322495058",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497261"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497261"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:34:53Z",
      "diff_hunk" : "@@ -3709,28 +3709,23 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n {\n     LOCK(cs_wallet);\n     error.clear();\n-\n-    TopUpKeyPool();\n-\n-    // Generate a new key that is added to wallet\n-    CPubKey new_key;\n-    if (!GetKeyFromPool(new_key)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n-        return false;\n+    bool result = false;\n+    auto spk_man = GetScriptPubKeyMan(type, false);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497261",
      "id" : 322497261,
      "in_reply_to_id" : 322356879,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzI2MQ==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 13,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497261",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497279"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:34:57Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497279",
      "id" : 322497279,
      "in_reply_to_id" : 322358340,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzI3OQ==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 48,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838342,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497279",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497293"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497293"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:01Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497293",
      "id" : 322497293,
      "in_reply_to_id" : 322358957,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzI5Mw==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 52,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838351,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497293",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497315"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:06Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497315",
      "id" : 322497315,
      "in_reply_to_id" : 322367040,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzMxNQ==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 28,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497315",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497330"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:09Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497330",
      "id" : 322497330,
      "in_reply_to_id" : 322367377,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzMzMA==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 56,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838399,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497330",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:13Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497338",
      "id" : 322497338,
      "in_reply_to_id" : 322367622,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzMzOA==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 93,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838411,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497338",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497348"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497348"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:16Z",
      "diff_hunk" : "@@ -1744,92 +1744,46 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n \n bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : scripts) {\n-        CScriptID id(entry);\n-        if (HaveCScript(id)) {\n-            WalletLogPrintf(\"Already have script %s, skipping\\n\", HexStr(entry));\n-            continue;\n-        }\n-        if (!AddCScriptWithDB(batch, entry)) {\n-            return false;\n-        }\n-\n-        if (timestamp > 0) {\n-            m_script_metadata[CScriptID(entry)].nCreateTime = timestamp;\n-        }\n-    }\n-    if (timestamp > 0) {\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportScripts(scripts, timestamp);\n }\n \n bool CWallet::ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : privkey_map) {\n-        const CKey& key = entry.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        const CKeyID& id = entry.first;\n-        assert(key.VerifyPubKey(pubkey));\n-        // Skip if we already have the key\n-        if (HaveKey(id)) {\n-            WalletLogPrintf(\"Already have key with pubkey %s, skipping\\n\", HexStr(pubkey));\n-            continue;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-        // If the private key is not present in the wallet, insert it.\n-        if (!AddKeyPubKeyWithDB(batch, key, pubkey)) {\n-            return false;\n-        }\n-        UpdateTimeFirstKey(timestamp);\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPrivKeys(privkey_map, timestamp);\n }\n \n bool CWallet::ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp)\n {\n-    WalletBatch batch(*database);\n-    for (const auto& entry : key_origins) {\n-        AddKeyOriginWithDB(batch, entry.second.first, entry.second.second);\n-    }\n-    for (const CKeyID& id : ordered_pubkeys) {\n-        auto entry = pubkey_map.find(id);\n-        if (entry == pubkey_map.end()) {\n-            continue;\n-        }\n-        const CPubKey& pubkey = entry->second;\n-        CPubKey temp;\n-        if (GetPubKey(id, temp)) {\n-            // Already have pubkey, skipping\n-            WalletLogPrintf(\"Already have pubkey %s, skipping\\n\", HexStr(temp));\n-            continue;\n-        }\n-        if (!AddWatchOnlyWithDB(batch, GetScriptForRawPubKey(pubkey), timestamp)) {\n-            return false;\n-        }\n-        mapKeyMetadata[id].nCreateTime = timestamp;\n-\n-        // Add to keypool only works with pubkeys\n-        if (add_keypool) {\n-            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n-            NotifyCanGetAddressesChanged();\n-        }\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n     }\n-    return true;\n+    LOCK(spk_man->cs_KeyStore);\n+    return GetLegacyScriptPubKeyMan()->ImportPubKeys(ordered_pubkeys, pubkey_map, key_origins, add_keypool, internal, timestamp);\n }\n \n bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp)\n {\n+    auto spk_man = GetLegacyScriptPubKeyMan();\n+    if (!spk_man) {\n+        return false;\n+    }\n+    LOCK(spk_man->cs_KeyStore);\n+    if (!GetLegacyScriptPubKeyMan()->ImportScriptPubKeys(script_pub_keys, have_solving_data, timestamp)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497348",
      "id" : 322497348,
      "in_reply_to_id" : 322367743,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM0OA==",
      "original_commit_id" : "c78b003846eb5989f12b6d532c0a8d6ae2dd3029",
      "original_position" : 103,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497348",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497368"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:20Z",
      "diff_hunk" : "@@ -3509,48 +3509,20 @@ void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n \n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n-    if (!CanGenerateKeys()) {\n+    LOCK(cs_wallet);\n+    if (IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         return false;\n     }\n-    {\n-        LOCK(cs_wallet);\n-\n-        if (IsLocked()) return false;\n-\n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n-\n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n-\n-        if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n-        }\n-        bool internal = false;\n-        WalletBatch batch(*database);\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n+    bool res = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497368",
      "id" : 322497368,
      "in_reply_to_id" : 322378586,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM2OA==",
      "original_commit_id" : "f4ff4c5f1a9d9da212ff3843f314557011baaa43",
      "original_position" : 37,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1115,
      "pull_request_review_id" : 285838451,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497368",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497381"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497381"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:23Z",
      "diff_hunk" : "@@ -4262,32 +4262,15 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             return nullptr;\n         }\n \n-        bool hd_upgrade = false;\n-        bool split_upgrade = false;\n-        if (walletInstance->CanSupportFeature(FEATURE_HD) && !walletInstance->IsHDEnabled()) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to HD\\n\");\n-            walletInstance->SetMinVersion(FEATURE_HD);\n-\n-            // generate a new master key\n-            CPubKey masterPubKey = walletInstance->GenerateNewSeed();\n-            walletInstance->SetHDSeed(masterPubKey);\n-            hd_upgrade = true;\n-        }\n-        // Upgrade to HD chain split if necessary\n-        if (walletInstance->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-            walletInstance->WalletLogPrintf(\"Upgrading wallet to use HD chain split\\n\");\n-            walletInstance->SetMinVersion(FEATURE_PRE_SPLIT_KEYPOOL);\n-            split_upgrade = FEATURE_HD_SPLIT > prev_version;\n-        }\n-        // Mark all keys currently in the keypool as pre-split\n-        if (split_upgrade) {\n-            walletInstance->MarkPreSplitKeys();\n-        }\n-        // Regenerate the keypool if upgraded to HD\n-        if (hd_upgrade) {\n-            if (!walletInstance->TopUpKeyPool()) {\n-                chain.initError(_(\"Unable to generate keys\").translated);\n-                return nullptr;\n+\n+        for (bool internal : {false, true}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497381",
      "id" : 322497381,
      "in_reply_to_id" : 322380725,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM4MQ==",
      "original_commit_id" : "3e6cd81d3da4b1d96d9162756f2909660e1efc54",
      "original_position" : 31,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838469,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497399"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497399"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:27Z",
      "diff_hunk" : "@@ -4449,8 +4449,17 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         // No need to read and scan block if block was created before\n         // our wallet birthday (as adjusted for block time variability)\n-        if (walletInstance->nTimeFirstKey) {\n-            if (Optional<int> first_block = locked_chain->findFirstBlockWithTimeAndHeight(walletInstance->nTimeFirstKey - TIMESTAMP_WINDOW, rescan_height, nullptr)) {\n+        int64_t time_first_key = std::numeric_limits<int64_t>::max();\n+        for (bool internal : {false, true}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497399",
      "id" : 322497399,
      "in_reply_to_id" : 322381977,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzM5OQ==",
      "original_commit_id" : "e3b5a71ae09c71c46381b6d2c254a51a085c6b4d",
      "original_position" : 7,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497399",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497409"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497409"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:35:30Z",
      "diff_hunk" : "@@ -214,9 +214,17 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             }\n \n             // Set a seed for the wallet\n-            CPubKey master_pub_key = wallet->GenerateNewSeed();\n-            wallet->SetHDSeed(master_pub_key);\n-            wallet->NewKeyPool();\n+            {\n+                LOCK(wallet->cs_wallet);\n+                for (bool internal : {false, true}) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322497409",
      "id" : 322497409,
      "in_reply_to_id" : 322383899,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjQ5NzQwOQ==",
      "original_commit_id" : "595fb6723821a40b4158d60ed3dbdf9c4ff88870",
      "original_position" : 9,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 285838503,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:39:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322497409",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322502117"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322502117"
         }
      },
      "author_association" : "MEMBER",
      "body" : "it was needed for some tests to pass. I've moved it up near the front of the PR.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-09T23:56:43Z",
      "diff_hunk" : "@@ -78,22 +78,30 @@ CTxDestination AddAndGetDestinationForScript(FillableSigningProvider& keystore,\n {\n     // Add script to keystore\n     keystore.AddCScript(script);\n+    ScriptHash sh = ScriptHash(script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322502117",
      "id" : 322502117,
      "in_reply_to_id" : 322385026,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjUwMjExNw==",
      "original_commit_id" : "592177c771ee120472b11036ccf6e3aad0bba8af",
      "original_position" : 4,
      "path" : "src/outputtype.cpp",
      "position" : 4,
      "pull_request_review_id" : 285844020,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-09T23:56:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322502117",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322739005"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322739005"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please be specific. `GetNewDestination` literally has the call to `LearnRelatedScripts`, I can't find the corresponding one for this.",
      "commit_id" : "47fbb8fca88673260d8c6c4afe0cca1a063c8098",
      "created_at" : "2019-09-10T13:22:33Z",
      "diff_hunk" : "@@ -3922,42 +3917,44 @@ std::set<CTxDestination> CWallet::GetLabelAddresses(const std::string& label) co\n \n bool ReserveDestination::GetReservedDestination(const OutputType type, CTxDestination& dest, bool internal)\n {\n-    if (!pwallet->CanGetAddresses(internal)) {\n+    spk_man = pwallet->GetScriptPubKeyMan(type, internal);\n+    if (!spk_man) {\n+        return false;\n+    }\n+\n+    if (!spk_man->IsLocked()) {\n+        spk_man->TopUp();\n+    }\n+\n+    if (!spk_man->CanGetAddresses(internal)) {\n         return false;\n     }\n \n     if (nIndex == -1)\n     {\n         CKeyPool keypool;\n-        if (!pwallet->ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!spk_man->GetReservedDestination(type, internal, dest, nIndex, keypool)) {\n             return false;\n         }\n-        vchPubKey = keypool.vchPubKey;\n         fInternal = keypool.fInternal;\n     }\n-    assert(vchPubKey.IsValid());\n-    pwallet->LearnRelatedScripts(vchPubKey, type);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#discussion_r322739005",
      "id" : 322739005,
      "in_reply_to_id" : 322361186,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjczOTAwNQ==",
      "original_commit_id" : "6a9164679039976dbb291b581dfe4f632a107f46",
      "original_position" : 67,
      "path" : "src/wallet/wallet.cpp",
      "position" : 1223,
      "pull_request_review_id" : 286146219,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16341",
      "updated_at" : "2019-09-10T13:22:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322739005",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "tentative utACK https://github.com/bitcoin/bitcoin/pull/16341/commits/1ccf487912fd6abb2a289f4933eebd06ad4e5116  if https://github.com/bitcoin/bitcoin/pull/16341/files#r322739005 is answered\r\n\r\nThe RPC-based changes seem correct as well. Any import/dump type functionality is locked in to legacy box, and as new boxes are created we can either activate those, or make new RPC calls. For more general info-gathering-on-keys based queries, any box will do, which is what the implementation does.",
      "created_at" : "2019-09-10T13:51:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-529944785",
      "id" : 529944785,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16341",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTk0NDc4NQ==",
      "updated_at" : "2019-09-10T13:51:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529944785",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
