[
   {
      "author_association" : "MEMBER",
      "body" : "I've put together an AppleScript that can reproduce this issue fairly easily. \r\nIt only requires a syncing Bitcoin-Core and creating a wallet named \"test\".\r\n\r\n```applescript\r\ntell application \"System Events\" to tell process \"Bitcoin Core\"\r\n\t-- sane window location and size\r\n\tset position of window 1 to {0, 20}\r\n\tset size of window 1 to {500, 500}\r\n\tset frontmost to true\r\n\t\r\n\trepeat\r\n\t\tclick menu item \"Close Wallet...\" of menu \"File\" of menu bar 1\r\n\t\tclick button \"Yes\" of group 1 of window 1\r\n\t\tdelay 0.2\r\n\t\tclick menu item \"Close Wallet...\" of menu \"File\" of menu bar 1\r\n\t\tclick button \"Yes\" of group 1 of window 1\r\n\t\tdelay 0.2\r\n\t\tclick menu item \"[default wallet]\" of menu \"Open Wallet\" of menu item \"Open Wallet\" of menu \"File\" of menu bar 1\r\n\t\tdelay 0.2\r\n\t\tclick menu item \"test\" of menu \"Open Wallet\" of menu item \"Open Wallet\" of menu \"File\" of menu bar 1\r\n\t\tdelay 0.2\r\n\tend repeat\r\nend tell\r\n```\r\n\r\ncc @promag.",
      "created_at" : "2019-08-08T04:15:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-519355809",
      "id" : 519355809,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxOTM1NTgwOQ==",
      "updated_at" : "2019-08-08T04:15:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/519355809",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "From what I can tell, I've tracked down the cause of this crash. \r\n\r\nA call to `CWallet::BlockConnected` while we are in `wallet->Flush()` phase of `ReleaseWallet` gives the scheduler the `cs_wallet` lock. We then loop calling `SyncTransaction` -> `AddToWalletIfInvolvingMe` which also calls `AssertLockHeld(cs_wallet);`. At some point we'll be done flushing, and call `delete wallet`, which blows up as we are trying to delete `cs_wallet` which is still being held in the scheduler thread.\r\n\r\nYou can cause this crash running `src/bitcoind` and a Python script that is essentially:\r\n```python\r\nwhile 1:\r\n    rpc.unloadwallet('test')\r\n    rpc.unloadwallet('test2')\r\n    rpc.loadwallet('test')\r\n    rpc.loadwallet('test2')\r\n```\r\n\r\n#### debug.log\r\n\r\n```bash\r\n2020-02-21T06:47:47.281600Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.281738Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.281919Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.289817Z [httpworker.3] BerkeleyEnvironment::Flush: wallet.dat closed\r\n2020-02-21T06:47:47.289912Z [msghand] received: inv (541 bytes) peer=4\r\n2020-02-21T06:47:47.290027Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\n2020-02-21T06:47:47.290102Z [httpworker.3] BerkeleyEnvironment::Flush: Flush(false) took              43ms\r\n2020-02-21T06:47:47.290204Z [scheduler] [test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\r\nAssertion failed: (e == 0), function ~recursive_mutex, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/libcxx/libcxx-400.9.4/src/mutex.cpp, line 64.\r\nProcess 72347 stopped\r\n* thread #2, name = 'b-httpworker.3', stop reason = signal SIGABRT\r\n    frame #0: 0x00007fff5c4182c2 libsystem_kernel.dylib`__pthread_kill + 10\r\nlibsystem_kernel.dylib`__pthread_kill:\r\n->  0x7fff5c4182c2 <+10>: jae    0x7fff5c4182cc            ; <+20>\r\n    0x7fff5c4182c4 <+12>: movq   %rax, %rdi\r\n    0x7fff5c4182c7 <+15>: jmp    0x7fff5c412453            ; cerror_nocancel\r\n    0x7fff5c4182cc <+20>: retq   \r\nTarget 0: (bitcoind) stopped.\r\n```\r\n\r\n #### httpworker (unloadwallet) thread\r\n \r\n ```bash\r\n \r\n (AnnotatedMixin<std::__1::recursive_mutex> *) this = 0x000000015b7ccf98\r\n \r\n (lldb) frame select 6\r\nframe #6: 0x00000001000aa6f3 bitcoind`AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin(this=0x000000015b7ccf98) at sync.h:82:23\r\n   79  \tclass LOCKABLE AnnotatedMixin : public PARENT\r\n   80  \t{\r\n   81  \tpublic:\r\n-> 82  \t    ~AnnotatedMixin() {\r\n   83  \t        DeleteLock((void*)this);\r\n   84  \t    }\r\n   85  \t\r\n\r\n (lldb) frame select 7\r\nframe #7: 0x00000001007d9ea0 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:758:5\r\n   755 \t    {\r\n   756 \t        // Should not have slots connected at this point.\r\n   757 \t        assert(NotifyUnload.empty());\r\n-> 758 \t    }\r\n   759 \t\r\n   760 \t    bool IsCrypted() const;\r\n   761 \t    bool IsLocked() const override;\r\n (lldb) frame select 8\r\nframe #8: 0x00000001007c4373 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:755:5\r\n   752 \t    }\r\n   753 \t\r\n   754 \t    ~CWallet()\r\n-> 755 \t    {\r\n   756 \t        // Should not have slots connected at this point.\r\n   757 \t        assert(NotifyUnload.empty());\r\n   758 \t    }\r\n ```\r\n \r\n #### scheduler thread (10)\r\n \r\n ```bash\r\n \r\n // in frame 14\r\n frame variable criticalblock27\r\n(DebugLock<decltype(this->cs_wallet)>) criticalblock27 = {\r\n  std::__1::unique_lock<std::__1::recursive_mutex> = {\r\n    __m_ = 0x000000015b7ccf98\r\n    __owns_ = true\r\n  }\r\n}\r\n\r\n \r\n \r\n(lldb) frame select 12\r\nframe #12: 0x00000001007a76b3 bitcoind`CWallet::AddToWalletIfInvolvingMe(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ab70, fUpdate=true) at wallet.cpp:914:9\r\n   911 \t{\r\n   912 \t    const CTransaction& tx = *ptx;\r\n   913 \t    {\r\n-> 914 \t        WalletLogPrintf(\"SCHED: %s\\n\", __PRETTY_FUNCTION__);\r\n   915 \t        // This assertion fails?\r\n   916 \t        AssertLockHeld(cs_wallet);\r\n   917\r\n(lldb) frame select 13\r\nframe #13: 0x00000001007a91ca bitcoind`CWallet::SyncTransaction(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ac10, update_tx=true) at wallet.cpp:1089:10\r\n   1086\tvoid CWallet::SyncTransaction(const CTransactionRef& ptx, CWalletTx::Confirmation confirm, bool update_tx)\r\n   1087\t{\r\n   1088\t    //WalletLogPrintf(\"SCHED: %s\\n\", __PRETTY_FUNCTION__);\r\n-> 1089\t    if (!AddToWalletIfInvolvingMe(ptx, confirm, update_tx))\r\n   1090\t        return; // Not one of ours\r\n   1091\t\r\n   1092\t    // If a transaction changes 'conflicted' state, that changes the balance\r\n(lldb) frame variable cs_wallet\r\n(RecursiveMutex) cs_wallet = {\r\n  std::__1::recursive_mutex = {\r\n    __m_ = (__sig = 1297437784, __opaque = \"\")\r\n  }\r\n}\r\n(lldb) frame select 14\r\nframe #14: 0x00000001007a99f2 bitcoind`CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:1129:9\r\n   1126\t    m_last_block_processed = block_hash;\r\n   1127\t    for (size_t index = 0; index < block.vtx.size(); index++) {\r\n   1128\t        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, block_hash, index);\r\n-> 1129\t        SyncTransaction(block.vtx[index], confirm);\r\n   1130\t        TransactionRemovedFromMempool(block.vtx[index]);\r\n   1131\t    }\r\n   1132\t    for (const CTransactionRef& ptx : vtxConflicted) {\r\n(lldb) frame variable cs_wallet\r\n(RecursiveMutex) cs_wallet = {\r\n  std::__1::recursive_mutex = {\r\n    __m_ = (__sig = 1297437784, __opaque = \"\")\r\n  }\r\n}\r\n(lldb) frame select 15\r\nframe #15: 0x00000001007a9bb2 bitcoind`non-virtual thunk to CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:0\r\n   1   \t// Copyright (c) 2009-2010 Satoshi Nakamoto\r\n   2   \t// Copyright (c) 2009-2020 The Bitcoin Core developers\r\n   3   \t// Distributed under the MIT software license, see the accompanying\r\n   4   \t// file COPYING or http://www.opensource.org/licenses/mit-license.php.\r\n   5   \t\r\n   6   \t#include <wallet/wallet.h>\r\n   7   \t\r\n(lldb) frame variable cs_wallet\r\nerror: no variable named 'cs_wallet' found in this frame\r\n ```\r\n\r\n#### httpworker (unloadwallet) bt\r\n```bash\r\n* thread #2, name = 'b-httpworker.3', stop reason = signal SIGABRT\r\n    frame #0: 0x00007fff5c4182c2 libsystem_kernel.dylib`__pthread_kill + 10\r\n    frame #1: 0x00007fff5c4d3bf1 libsystem_pthread.dylib`pthread_kill + 284\r\n    frame #2: 0x00007fff5c3826a6 libsystem_c.dylib`abort + 127\r\n    frame #3: 0x00007fff5c34b20d libsystem_c.dylib`__assert_rtn + 324\r\n    frame #4: 0x00007fff59543092 libc++.1.dylib`std::__1::recursive_mutex::~recursive_mutex() + 46\r\n    frame #5: 0x00000001000f1edb bitcoind`AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin(this=0x000000015b7ccf98) at sync.h:84:5\r\n  * frame #6: 0x00000001000aa6f3 bitcoind`AnnotatedMixin<std::__1::recursive_mutex>::~AnnotatedMixin(this=0x000000015b7ccf98) at sync.h:82:23\r\n    frame #7: 0x00000001007d9ea0 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:758:5\r\n    frame #8: 0x00000001007c4373 bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:755:5\r\n    frame #9: 0x00000001007c703a bitcoind`CWallet::~CWallet(this=0x000000015b7cce20) at wallet.h:755:5\r\n    frame #10: 0x00000001007c4691 bitcoind`ReleaseWallet(wallet=0x000000015b7cce20) at wallet.cpp:117:5\r\n    frame #11: 0x000000010083115e bitcoind`std::__1::__shared_ptr_pointer<CWallet*, void (*)(CWallet*), std::__1::allocator<CWallet> >::__on_zero_shared(this=0x00000001577e76c0) at memory:3511:5\r\n    frame #12: 0x00000001000ebd1b bitcoind`std::__1::__shared_count::__release_shared(this=0x00000001577e76c0) at memory:3415:9\r\n    frame #13: 0x00000001000ebc8d bitcoind`std::__1::__shared_weak_count::__release_shared(this=0x00000001577e76c0) at memory:3457:27\r\n    frame #14: 0x000000010065a49a bitcoind`std::__1::shared_ptr<CWallet>::~shared_ptr(this=0x0000700007fb9738) at memory:4393:19\r\n    frame #15: 0x000000010065a3f3 bitcoind`std::__1::shared_ptr<CWallet>::~shared_ptr(this=0x0000700007fb9738) at memory:4391:1\r\n    frame #16: 0x0000000100797521 bitcoind`std::__1::shared_ptr<CWallet>::reset(this=0x0000700007fb9938) at memory:4528:5\r\n    frame #17: 0x000000010079740e bitcoind`UnloadWallet(wallet=nullptr) at wallet.cpp:143:12\r\n    frame #18: 0x000000010074f1e2 bitcoind`unloadwallet(request=0x0000700007fba990) at rpcwallet.cpp:2779:5\r\n```\r\n\r\n#### scheduler thread bt\r\n```bash\r\n* thread #10, name = 'b-scheduler'\r\n    frame #0: 0x00007fff5c489799 libsystem_malloc.dylib`tiny_malloc_should_clear + 1176\r\n    frame #1: 0x00007fff5c48920f libsystem_malloc.dylib`szone_malloc_should_clear + 66\r\n    frame #2: 0x00007fff5c487c99 libsystem_malloc.dylib`malloc_zone_malloc + 103\r\n    frame #3: 0x00007fff5c487c15 libsystem_malloc.dylib`malloc + 24\r\n    frame #4: 0x00007fff5955b378 libc++abi.dylib`operator new(unsigned long) + 40\r\n    frame #5: 0x00007fff59509521 libc++.1.dylib`std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__grow_by(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long) + 141\r\n    frame #6: 0x00007fff5950a3d7 libc++.1.dylib`std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::push_back(char) + 85\r\n    frame #7: 0x0000000100a29562 bitcoind`std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator+=(this=\"[test] SCHED: bool CWa\", __c='l') at string:992:84\r\n    frame #8: 0x000000010099eccc bitcoind`BCLog::LogEscapeMessage(str=\"[test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\\n\") at logging.cpp:253:21\r\n    frame #9: 0x000000010099eef1 bitcoind`BCLog::Logger::LogPrintStr(this=0x0000000103300000, str=\"[test] SCHED: bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\\n\") at logging.cpp:265:32\r\n    frame #10: 0x00000001007f7c86 bitcoind`void LogPrintf<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, char const*>(fmt=\"%s SCHED: %s\\n\", args=\"[test]\", args=0x0000700007d2a790) at logging.h:173:23\r\n    frame #11: 0x00000001007a7e5e bitcoind`void CWallet::WalletLogPrintf<char const*>(this=0x000000015b7cce20, fmt=\"SCHED: %s\\n\", parameters=\"bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef &, CWalletTx::Confirmation, bool)\") const at wallet.h:1139:9\r\n  * frame #12: 0x00000001007a76b3 bitcoind`CWallet::AddToWalletIfInvolvingMe(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ab70, fUpdate=true) at wallet.cpp:914:9\r\n    frame #13: 0x00000001007a91ca bitcoind`CWallet::SyncTransaction(this=0x000000015b7cce20, ptx=std::__1::shared_ptr<const CTransaction>::element_type @ 0x000000015c6c3908 strong=1 weak=1, confirm=Confirmation @ 0x0000700007d2ac10, update_tx=true) at wallet.cpp:1089:10\r\n    frame #14: 0x00000001007a99f2 bitcoind`CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:1129:9\r\n    frame #15: 0x00000001007a9bb2 bitcoind`non-virtual thunk to CWallet::BlockConnected(this=0x000000015b7cce20, block=0x000000015c765d28, vtxConflicted=size=0, height=351323) at wallet.cpp:0\r\n    frame #16: 0x00000001000a1e2e bitcoind`interfaces::(anonymous namespace)::NotificationsHandlerImpl::BlockConnected(this=0x00000001190f2ec0, block=std::__1::shared_ptr<const CBlock>::element_type @ 0x000000015c765d28 strong=2 weak=1, index=0x000000011309fd20, tx_conflicted=size=0) at chain.cpp:179:26\r\n    frame #17: 0x00000001000a2114 bitcoind`non-virtual thunk to interfaces::(anonymous namespace)::NotificationsHandlerImpl::BlockConnected(this=0x00000001190f2ec8, block=std::__1::shared_ptr<const CBlock>::element_type @ 0x000000015c765d28 strong=2 weak=1, index=0x000000011309fd20, tx_conflicted=size=0) at chain.cpp:0\r\n```",
      "created_at" : "2020-02-21T08:00:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-589542229",
      "id" : 589542229,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTU0MjIyOQ==",
      "updated_at" : "2020-02-21T08:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589542229",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Or as a bash script:\r\n\r\n```sh\r\n#!/bin/bash\r\nwhile [ 1 ]\r\ndo\r\n\tsrc/bitcoin-cli -testnet unloadwallet test\r\n\tsrc/bitcoin-cli -testnet unloadwallet test2\r\n\tsrc/bitcoin-cli -testnet loadwallet test\r\n\tsrc/bitcoin-cli -testnet loadwallet test2\r\ndone\r\n```\r\n\r\nAfter an hour or so, on macOS Catalina:\r\n\r\n```\r\nEXCEPTION: NSt3__112system_errorE       \r\nrecursive_mutex lock failed: Invalid argument       \r\nbitcoin in scheduler       \r\n\r\nlibc++abi.dylib: terminating with uncaught exception of type std::__1::system_error: recursive_mutex lock failed: Invalid argument\r\n```",
      "created_at" : "2020-02-21T10:47:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-589601500",
      "id" : 589601500,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTYwMTUwMA==",
      "updated_at" : "2020-02-21T11:43:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589601500",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe the wallet needs to unregister from notifications before flushing (reset `m_chain_notifications_handler` before calling `Flush()` instead of after):\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/ab9de435880c9d77e4137b65050591ef2d14f809/src/wallet/wallet.cpp#L114-L115",
      "created_at" : "2020-02-24T15:45:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/16307#issuecomment-590393308",
      "id" : 590393308,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16307",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MDM5MzMwOA==",
      "updated_at" : "2020-02-24T15:45:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590393308",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
