[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303001240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303001240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "as noted in my other PR, I think `broadcast` is the wrong word here. It's moreso that we do not commit it to the wallet, which also broadcasts it",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-07-12T14:15:37Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303001240",
      "id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAwMTI0MA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 261283429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303001240",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303007096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303007096"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm open to other terms, maybe `commit`? But that seems less clear.\r\n\r\nThe background motivation here is that an RPC consumer may need certainty about whether the transaction failed or succeeded. For example this should even work if the RPC connection gets cut before the call returns.\r\n\r\nJust retrying is unsafe. So right now the only option is to check if the wallet contains transactions to the expected destination(s). With this flag, the RPC consumer gets full control and can for example commit the full transaction to some redundant database before broadcasting it.\r\n\r\n(and maybe in future we support wallet-less spend based on just a descriptor with private keys, where there's no way to know if a previous attempt failed, since you can't rely on the local mempool for that)",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-07-12T14:28:18Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303007096",
      "id" : 303007096,
      "in_reply_to_id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAwNzA5Ng==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 261291199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303007096",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303016671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303016671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"broadcast\" already has meaning to users unfortunately e.g., `walletbroadcast` startup arg",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-07-12T14:49:10Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303016671",
      "id" : 303016671,
      "in_reply_to_id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAxNjY3MQ==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 261303922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303016671",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18788 (tests: Update more tests to work with descriptor wallets by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-12T16:18:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-510946416",
      "id" : 510946416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDk0NjQxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-21T02:26:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510946416",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303209033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303209033"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's a rather scary startup option imo; forget it once and everything gets broadcast?",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-07-13T15:25:27Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303209033",
      "id" : 303209033,
      "in_reply_to_id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzIwOTAzMw==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 261545538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303209033",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309679500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309679500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> That's a rather scary startup option imo; forget it once and everything gets broadcast?\r\n\r\nThis is definitely an option, like the proxy configuration, one'd want to have in the `bitcoin.conf` and not on the command line!\r\n\r\nBut also, not necessarily: the idea is that when you have it enabled, you broadcast wallet transactions manually (e.g. by pasting them into the transaction broadcast of a  block explorer, or a script such as `bitcoin-submittx` over tor) so they end up in the mempool or block chain through some other route. There's no reason for the wallet to broadcast them then.",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-08-01T12:51:53Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309679500",
      "id" : 309679500,
      "in_reply_to_id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTY3OTUwMA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 269595979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309679500",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309802778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309802778"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The option I introduce here doesn't even add the transaction to the wallet; it only returns the hex. So it goes beyond `walletbroadcast=0` afaik.",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-08-01T17:04:50Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309802778",
      "id" : 309802778,
      "in_reply_to_id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTgwMjc3OA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 269756507,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309802778",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-02T13:20:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-517698107",
      "id" : 517698107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNzY5ODEwNw==",
      "updated_at" : "2019-08-02T13:20:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517698107",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r310209218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310209218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I renamed `broadcast` to `add_to_wallet` and explained it a bit better in the docs. ",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2019-08-02T16:34:34Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r310209218",
      "id" : 310209218,
      "in_reply_to_id" : 303001240,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDIwOTIxOA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_line" : 4345,
      "original_position" : 84,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 270280098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310209218",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Suggest moving \"inputs\" to a field on \"options\", and removing PSBT output from `send` (there is already a RPC for it, as you note).",
      "created_at" : "2019-08-20T00:05:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-522799652",
      "id" : 522799652,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMjc5OTY1Mg==",
      "updated_at" : "2019-08-20T00:05:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522799652",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@luke-jr agree about moving the inputs. That also makes it easier to rebase on #11413 (explicit fee rate) and have a syntax like `send 0.001 BTC bc1... 1 sat/B`.\r\n\r\nThe reason I added PSBT output is to make multisig easier. When used with a descriptor wallet #15764 you simply call `send` and it will sign its own part and give you a PSBT to give to the other party (haven't tested this yet though). With the existing psbt methods that's more tedious.",
      "created_at" : "2019-08-21T08:56:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-523364668",
      "id" : 523364668,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMzM2NDY2OA==",
      "updated_at" : "2019-08-21T08:56:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/523364668",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Closing in favor of tweaking `sendmany` / `sendtoaddress`:\r\n* #11413 adds fee rate support (`1 sat/b`) without the need for an options JSON\r\n* @luke-jr suggested moving coin selection into an options JSON (it's a more advanced feature than fee selection, so that's fine by me)\r\n* PSBT output can be added when we need it, same for the option to avoid committing transaction to wallet",
      "created_at" : "2019-08-26T10:34:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-524810407",
      "id" : 524810407,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyNDgxMDQwNw==",
      "updated_at" : "2019-08-26T10:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/524810407",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "And we're back! I tried to make the simplest use case, sending coins to a single address with a manual fee in satoshi per byte, easy for `bitcoin-cli` users. This means you can set `conf_target` and `estimate_mode` either in the options dictionary or as a positional argument.\r\n\r\n```\r\nbitcoin-cli -regtest send '{\"ADDRESS\": 0.1}' 1 sat/b\r\n```\r\n\r\nIdeally I'd also get rid of the JSON encoding, but at least this RPC example is easy enough for a new `bitcoin-cli` user to copy-paste and tweak. And meanwhile GUI PSBT support has made enough progress.\r\n\r\nThis needs some cleanup, but I suggest focussing initial review on:\r\n1. the dependencies: #16377 and #11413 (I'll have to adjust some things depending on those)\r\n2. concept ACKs and/or suggestions for the RPC interface\r\n\r\n@luke-jr suggested:\r\n\r\n> Suggest moving \"inputs\" to a field on \"options\"\r\n\r\nDone",
      "created_at" : "2020-02-24T21:28:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-590557710",
      "id" : 590557710,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MDU1NzcxMA==",
      "updated_at" : "2020-02-24T21:30:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590557710",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This now has enough test coverage that I consider it review worthy, but note that it depends on 3 other pull requests.",
      "created_at" : "2020-03-02T17:37:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-593523577",
      "id" : 593523577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MzUyMzU3Nw==",
      "updated_at" : "2020-03-02T17:37:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/593523577",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).",
      "created_at" : "2020-03-07T01:02:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-596024921",
      "id" : 596024921,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5NjAyNDkyMQ==",
      "updated_at" : "2020-03-07T01:02:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/596024921",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2020-03-15T15:07:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-599222476",
      "id" : 599222476,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5OTIyMjQ3Ng==",
      "updated_at" : "2020-03-15T15:07:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/599222476",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased after #16377 and #11413, it should be easier to review now. ",
      "created_at" : "2020-06-25T19:01:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-649761160",
      "id" : 649761160,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY0OTc2MTE2MA==",
      "updated_at" : "2020-06-25T19:01:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/649761160",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased and tests should pass now. Some things that I think are worth discussing:\r\n\r\n1. `CommitTransaction()` happily accepts transactions with `nLockTime` in the future. It's not clear to me if those eventually get broadcast; in the functional test I had to re-submit it manually. This could be tackled in another PR though.\r\n2. We return a transaction hash or a PSBT, in part depending on magic. You can opt out of this magic by setting the `psbt` option to `true` (which implies `add_to_wallet=false`, but in addition to the serialised hex it returns a PSBT even for a fully signed transaction)\r\n3. A hex serialized transaction is only returned when setting `add_to_wallet` to `false`, so there's no magic there. But depending on how (1) is handled, this could change, e.g. it could return a hex for transaction with (far) future `nLockTime` (not my preference though).",
      "created_at" : "2020-08-07T15:37:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-670577529",
      "id" : 670577529,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY3MDU3NzUyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-07T15:37:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/670577529",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470590536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590536"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Might use the non-deprecated constructor. E.g. #19528  ",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-08-14T12:21:36Z",
      "diff_hunk" : "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470590536",
      "id" : 470590536,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MDUzNg==",
      "original_commit_id" : "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "original_line" : 3836,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 467531019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590536",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470590770"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590770"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\r\n```\r\n\r\nNo need for the whitespace",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-08-14T12:22:09Z",
      "diff_hunk" : "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470590770",
      "id" : 470590770,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MDc3MA==",
      "original_commit_id" : "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "original_line" : 3884,
      "original_position" : 151,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 467531019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470590770",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470591098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470591098"
         }
      },
      "author_association" : "MEMBER",
      "body" : "As the previous line already checks for nullptr, this can be a reference.\r\n```suggestion\r\n    CWallet& wallet = pwallet.get();\r\n```",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-08-14T12:22:53Z",
      "diff_hunk" : "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                                                       \"the number of addresses.\\n\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        }\n+    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VSTR,\n+        UniValue::VOBJ\n+        }, true\n+    );\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r470591098",
      "id" : 470591098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MTA5OA==",
      "original_commit_id" : "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "original_line" : 3924,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 467531019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/470591098",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r479398807"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479398807"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you mean `const CWallet& pwallet = wallet.get();` ? This creates a `const` mess when calling `FundTransaction` (which I'd rather not refactor in this PR).",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-08-28T16:06:00Z",
      "diff_hunk" : "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                                                       \"the number of addresses.\\n\"},\n+                    {RPCResult::Type::STR_HEX, \"hex\", \"If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\"},\n+                    {RPCResult::Type::STR, \"psbt\", \"If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\"}\n+                }\n+        },\n+        RPCExamples{\"\"\n+        \"\\nSend with a fee rate of 1 satoshi per byte\\n\"\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 sat/b\\n\" +\n+            \"\\nCreate a transaction that should confirm the next block, with a specific input, and return result without adding to wallet or broadcasting to the network\\n\")\n+        + HelpExampleCli(\"send\", \"'{\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\": 0.1}' 1 economical '{\\\"add_to_wallet\\\": false, \\\"inputs\\\": [{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]}'\")\n+        }\n+    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VNUM,\n+        UniValue::VSTR,\n+        UniValue::VOBJ\n+        }, true\n+    );\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r479398807",
      "id" : 479398807,
      "in_reply_to_id" : 470591098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM5ODgwNw==",
      "original_commit_id" : "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "original_line" : 3924,
      "original_position" : 191,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 477851275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479398807",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r479406129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479406129"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I switched to the fancy new thing.",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-08-28T16:19:33Z",
      "diff_hunk" : "@@ -3818,6 +3833,186 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+UniValue send(const JSONRPCRequest& request)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r479406129",
      "id" : 479406129,
      "in_reply_to_id" : 470590536,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwNjEyOQ==",
      "original_commit_id" : "15ba29aafe9a448c4cbf5f1550fa633e3ebd998a",
      "original_line" : 3836,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 477860841,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-08-31T11:56:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479406129",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased after #18244 landed.",
      "created_at" : "2020-08-31T11:56:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-683733694",
      "id" : 683733694,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY4MzczMzY5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-08-31T11:56:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683733694",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484135309"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135309"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Because these are Optional::OMITTED, the \"default\" is actually the description string, so the only output is:\r\n```\r\n2. conf_target                           (numeric) wallet default\r\n3. estimate_mode                         (string) unset\r\n```",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-09-07T00:33:53Z",
      "diff_hunk" : "@@ -3885,6 +3890,188 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484135309",
      "id" : 484135309,
      "line" : 3915,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEzNTMwOQ==",
      "original_commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "original_line" : 3915,
      "original_position" : 56,
      "original_start_line" : 3914,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 117,
      "pull_request_review_id" : 483188381,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : 3914,
      "start_side" : "RIGHT",
      "updated_at" : "2020-09-07T00:52:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135309",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484135676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135676"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: unnecessary newline",
      "commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "created_at" : "2020-09-07T00:36:46Z",
      "diff_hunk" : "@@ -3885,6 +3890,188 @@ static UniValue listlabels(const JSONRPCRequest& request)\n     return ret;\n }\n \n+static RPCHelpMan send()\n+{\n+    return RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"conf_target\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+            {\"estimate_mode\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+                        \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"change_address\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"change_position\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if change_address is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks), or fee rate (for \" + CURRENCY_UNIT + \"/kB or \" + CURRENCY_ATOM + \"/B estimate modes)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+            \"       \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n+                    {\"include_watching\", RPCArg::Type::BOOL, /* default */ \"true for watch-only wallets, otherwise false\", \"Also select inputs which are watch only.\\n\"\n+                                          \"Only solvable inputs can be used. Watch-only destinations are solvable if the public key and/or output script was imported,\\n\"\n+                                          \"e.g. with 'importpubkey' or 'importmulti' with the 'pubkeys' or 'desc' field.\"},\n+                    {\"inputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"Specify inputs instead of adding them automatically. A json array of json objects\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lock_unspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"psbt\", RPCArg::Type::BOOL,  /* default */ \"automatic\", \"Always return a PSBT, implies add_to_wallet=false.\"},\n+                    {\"subtract_fee_from_outputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+                {\n+                    {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                    {RPCResult::Type::STR_HEX, \"txid\", \"The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                                                       \"the number of addresses.\\n\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r484135676",
      "id" : 484135676,
      "line" : 3958,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEzNTY3Ng==",
      "original_commit_id" : "27c07f08662a8044c729d0adead0511984c40cef",
      "original_line" : 3958,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 160,
      "pull_request_review_id" : 483188381,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-07T00:52:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/484135676",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/meshcollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/meshcollider/followers",
         "following_url" : "https://api.github.com/users/meshcollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/meshcollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/meshcollider",
         "id" : 3211283,
         "login" : "meshcollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/meshcollider/orgs",
         "received_events_url" : "https://api.github.com/users/meshcollider/received_events",
         "repos_url" : "https://api.github.com/users/meshcollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/meshcollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/meshcollider"
      }
   }
]
