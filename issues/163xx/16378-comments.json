[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303001240"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303001240"
         }
      },
      "author_association" : "MEMBER",
      "body" : "as noted in my other PR, I think `broadcast` is the wrong word here. It's moreso that we do not commit it to the wallet, which also broadcasts it",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-07-12T14:15:37Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303001240",
      "id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAwMTI0MA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 261283429,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303001240",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303007096"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303007096"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm open to other terms, maybe `commit`? But that seems less clear.\r\n\r\nThe background motivation here is that an RPC consumer may need certainty about whether the transaction failed or succeeded. For example this should even work if the RPC connection gets cut before the call returns.\r\n\r\nJust retrying is unsafe. So right now the only option is to check if the wallet contains transactions to the expected destination(s). With this flag, the RPC consumer gets full control and can for example commit the full transaction to some redundant database before broadcasting it.\r\n\r\n(and maybe in future we support wallet-less spend based on just a descriptor with private keys, where there's no way to know if a previous attempt failed, since you can't rely on the local mempool for that)",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-07-12T14:28:18Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303007096",
      "id" : 303007096,
      "in_reply_to_id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAwNzA5Ng==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 261291199,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303007096",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303016671"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303016671"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"broadcast\" already has meaning to users unfortunately e.g., `walletbroadcast` startup arg",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-07-12T14:49:10Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303016671",
      "id" : 303016671,
      "in_reply_to_id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzAxNjY3MQ==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 261303922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303016671",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n* [#16377](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16377.html) ([rpc] don't automatically append inputs in walletcreatefundedpsbt & fundrawtransaction by Sjors)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#15911](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15911.html) (Use wallet RBF default for walletcreatefundedpsbt by Sjors)\n* [#15761](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15761.html) (Replace -upgradewallet startup option with upgradewallet RPC by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-07-12T16:18:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-510946416",
      "id" : 510946416,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMDk0NjQxNg==",
      "updated_at" : "2019-08-02T12:02:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/510946416",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303209033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303209033"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That's a rather scary startup option imo; forget it once and everything gets broadcast?",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-07-13T15:25:27Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r303209033",
      "id" : 303209033,
      "in_reply_to_id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwMzIwOTAzMw==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 261545538,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/303209033",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309679500"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309679500"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> That's a rather scary startup option imo; forget it once and everything gets broadcast?\r\n\r\nThis is definitely an option, like the proxy configuration, one'd want to have in the `bitcoin.conf` and not on the command line!\r\n\r\nBut also, not necessarily: the idea is that when you have it enabled, you broadcast wallet transactions manually (e.g. by pasting them into the transaction broadcast of a  block explorer, or a script such as `bitcoin-submittx` over tor) so they end up in the mempool or block chain through some other route. There's no reason for the wallet to broadcast them then.",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-08-01T12:51:53Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309679500",
      "id" : 309679500,
      "in_reply_to_id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTY3OTUwMA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 269595979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309679500",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309802778"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309802778"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The option I introduce here doesn't even add the transaction to the wallet; it only returns the hex. So it goes beyond `walletbroadcast=0` afaik.",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-08-01T17:04:50Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r309802778",
      "id" : 309802778,
      "in_reply_to_id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMwOTgwMjc3OA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 269756507,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/309802778",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-02T13:20:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#issuecomment-517698107",
      "id" : 517698107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16378",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNzY5ODEwNw==",
      "updated_at" : "2019-08-02T13:20:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517698107",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r310209218"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310209218"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I renamed `broadcast` to `add_to_wallet` and explained it a bit better in the docs. ",
      "commit_id" : "2ca53d13951b24f5a5372ed0a2078258a821e4f7",
      "created_at" : "2019-08-02T16:34:34Z",
      "diff_hunk" : "@@ -4122,6 +4123,153 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                        },\n+                        },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"addInputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"broadcast\", RPCArg::Type::BOOL, /* default */ \"true\", \"Broadcast to the Bitcoin network or submit manually\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16378#discussion_r310209218",
      "id" : 310209218,
      "in_reply_to_id" : 303001240,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDIwOTIxOA==",
      "original_commit_id" : "5136b7316e995bdf6100e95be4e372e2f51d7b1f",
      "original_position" : 84,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 158,
      "pull_request_review_id" : 270280098,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16378",
      "updated_at" : "2019-08-02T16:34:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310209218",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
