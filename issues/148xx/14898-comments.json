[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240008984"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240008984"
         }
      },
      "author_association" : "NONE",
      "body" : "There are more categories than just `send` and `receive`. See https://github.com/bitcoin/bitcoin/pull/14653",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-08T16:14:40Z",
      "diff_hunk" : "@@ -1500,6 +1500,267 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/**\n+ * List transactions version two based on the given criteria.\n+ *\n+ * @param  locked_chain\n+ * @param  pwallet        The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n+ * @param  afterOutPoint Start adding after this coin\n+ * @param  pRemaining    Adds new entries until this is zero\n+ *\n+ * Searches for afterOutPoint, When found, sets afterOutPoint to null\n+ * So after its found, starts adding remaining coins until pRemaining == 0\n+ * Returns true only if all elements has processed\n+ */\n+static bool ListTransactions2(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label, COutPoint& afterOutPoint, int* pRemaining)\n+{\n+    CAmount nFee;\n+    std::list<COutputEntry> listReceived;\n+    std::list<COutputEntry> listSent;\n+\n+    wtx.GetAmounts(listReceived, listSent, nFee, filter_ismine);\n+\n+    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n+    bool searchAfterOutPoint = !afterOutPoint.IsNull();\n+    bool afterHashEqual = searchAfterOutPoint && afterOutPoint.hash == wtx.GetHash();\n+    \n+    // Sent\n+    if (!filter_label)\n+    {\n+        for (const COutputEntry& s : listSent)\n+        {\n+            UniValue entry(UniValue::VOBJ);\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == s.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, s.destination);\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n+            if (pwallet->mapAddressBook.count(s.destination)) {\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n+            }\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    // Received\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n+    {\n+        for (const COutputEntry& r : listReceived)\n+        {\n+            std::string label;\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                label = pwallet->mapAddressBook[r.destination].name;\n+            }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == r.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n+            {\n+                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wtx.IsImmatureCoinBase(locked_chain))\n+                    entry.pushKV(\"category\", \"immature\");\n+                else\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                entry.pushKV(\"label\", label);\n+            }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+UniValue listtransactions2(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    std::string help_text =\n+      \"listtransactions2 (label count nextpagepointer include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions from tip of entries or nextpagepointer (exclusive).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n+            \"2. count             (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. nextpagepointer         (string, optional, default=null) Continue the existing listing by passing last known txid:vout.\\n\"\n+            \"5. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\", (string) The transaction category.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240008984",
      "id" : 240008984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAwODk4NA==",
      "original_commit_id" : "0796ebfdf9982129bcefa72aa00b3a492ae40697",
      "original_position" : 149,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 182948632,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T13:31:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240008984",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/237213?v=4",
         "events_url" : "https://api.github.com/users/andrewtoth/events{/privacy}",
         "followers_url" : "https://api.github.com/users/andrewtoth/followers",
         "following_url" : "https://api.github.com/users/andrewtoth/following{/other_user}",
         "gists_url" : "https://api.github.com/users/andrewtoth/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/andrewtoth",
         "id" : 237213,
         "login" : "andrewtoth",
         "node_id" : "MDQ6VXNlcjIzNzIxMw==",
         "organizations_url" : "https://api.github.com/users/andrewtoth/orgs",
         "received_events_url" : "https://api.github.com/users/andrewtoth/received_events",
         "repos_url" : "https://api.github.com/users/andrewtoth/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/andrewtoth/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/andrewtoth/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/andrewtoth"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240011264"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240011264"
         }
      },
      "author_association" : "NONE",
      "body" : "I was using branch 0.17 , and when i upgraded to master. help file was from the old one. will fix",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-08T17:36:51Z",
      "diff_hunk" : "@@ -1500,6 +1500,267 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/**\n+ * List transactions version two based on the given criteria.\n+ *\n+ * @param  locked_chain\n+ * @param  pwallet        The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n+ * @param  afterOutPoint Start adding after this coin\n+ * @param  pRemaining    Adds new entries until this is zero\n+ *\n+ * Searches for afterOutPoint, When found, sets afterOutPoint to null\n+ * So after its found, starts adding remaining coins until pRemaining == 0\n+ * Returns true only if all elements has processed\n+ */\n+static bool ListTransactions2(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label, COutPoint& afterOutPoint, int* pRemaining)\n+{\n+    CAmount nFee;\n+    std::list<COutputEntry> listReceived;\n+    std::list<COutputEntry> listSent;\n+\n+    wtx.GetAmounts(listReceived, listSent, nFee, filter_ismine);\n+\n+    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n+    bool searchAfterOutPoint = !afterOutPoint.IsNull();\n+    bool afterHashEqual = searchAfterOutPoint && afterOutPoint.hash == wtx.GetHash();\n+    \n+    // Sent\n+    if (!filter_label)\n+    {\n+        for (const COutputEntry& s : listSent)\n+        {\n+            UniValue entry(UniValue::VOBJ);\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == s.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, s.destination);\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n+            if (pwallet->mapAddressBook.count(s.destination)) {\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n+            }\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    // Received\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n+    {\n+        for (const COutputEntry& r : listReceived)\n+        {\n+            std::string label;\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                label = pwallet->mapAddressBook[r.destination].name;\n+            }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == r.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n+            {\n+                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wtx.IsImmatureCoinBase(locked_chain))\n+                    entry.pushKV(\"category\", \"immature\");\n+                else\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                entry.pushKV(\"label\", label);\n+            }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+UniValue listtransactions2(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    std::string help_text =\n+      \"listtransactions2 (label count nextpagepointer include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions from tip of entries or nextpagepointer (exclusive).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n+            \"2. count             (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. nextpagepointer         (string, optional, default=null) Continue the existing listing by passing last known txid:vout.\\n\"\n+            \"5. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\", (string) The transaction category.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240011264",
      "id" : 240011264,
      "in_reply_to_id" : 240008984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAxMTI2NA==",
      "original_commit_id" : "0796ebfdf9982129bcefa72aa00b3a492ae40697",
      "original_position" : 149,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 182951235,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T13:31:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240011264",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240011431"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240011431"
         }
      },
      "author_association" : "NONE",
      "body" : "I see original `lsittransactions` only contains `send|receive`. @andrewtoth Please inform me. What are the other values. I guess there's `internal`.",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-08T17:42:35Z",
      "diff_hunk" : "@@ -1500,6 +1500,267 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/**\n+ * List transactions version two based on the given criteria.\n+ *\n+ * @param  locked_chain\n+ * @param  pwallet        The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n+ * @param  afterOutPoint Start adding after this coin\n+ * @param  pRemaining    Adds new entries until this is zero\n+ *\n+ * Searches for afterOutPoint, When found, sets afterOutPoint to null\n+ * So after its found, starts adding remaining coins until pRemaining == 0\n+ * Returns true only if all elements has processed\n+ */\n+static bool ListTransactions2(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label, COutPoint& afterOutPoint, int* pRemaining)\n+{\n+    CAmount nFee;\n+    std::list<COutputEntry> listReceived;\n+    std::list<COutputEntry> listSent;\n+\n+    wtx.GetAmounts(listReceived, listSent, nFee, filter_ismine);\n+\n+    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n+    bool searchAfterOutPoint = !afterOutPoint.IsNull();\n+    bool afterHashEqual = searchAfterOutPoint && afterOutPoint.hash == wtx.GetHash();\n+    \n+    // Sent\n+    if (!filter_label)\n+    {\n+        for (const COutputEntry& s : listSent)\n+        {\n+            UniValue entry(UniValue::VOBJ);\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == s.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, s.destination);\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n+            if (pwallet->mapAddressBook.count(s.destination)) {\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n+            }\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    // Received\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n+    {\n+        for (const COutputEntry& r : listReceived)\n+        {\n+            std::string label;\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                label = pwallet->mapAddressBook[r.destination].name;\n+            }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == r.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n+            {\n+                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wtx.IsImmatureCoinBase(locked_chain))\n+                    entry.pushKV(\"category\", \"immature\");\n+                else\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                entry.pushKV(\"label\", label);\n+            }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+UniValue listtransactions2(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    std::string help_text =\n+      \"listtransactions2 (label count nextpagepointer include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions from tip of entries or nextpagepointer (exclusive).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n+            \"2. count             (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. nextpagepointer         (string, optional, default=null) Continue the existing listing by passing last known txid:vout.\\n\"\n+            \"5. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\", (string) The transaction category.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240011431",
      "id" : 240011431,
      "in_reply_to_id" : 240008984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAxMTQzMQ==",
      "original_commit_id" : "0796ebfdf9982129bcefa72aa00b3a492ae40697",
      "original_position" : 149,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 182951419,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T13:31:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240011431",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240014661"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240014661"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The other 3 are generate, immature and orphan.",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-08T19:53:31Z",
      "diff_hunk" : "@@ -1500,6 +1500,267 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/**\n+ * List transactions version two based on the given criteria.\n+ *\n+ * @param  locked_chain\n+ * @param  pwallet        The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n+ * @param  afterOutPoint Start adding after this coin\n+ * @param  pRemaining    Adds new entries until this is zero\n+ *\n+ * Searches for afterOutPoint, When found, sets afterOutPoint to null\n+ * So after its found, starts adding remaining coins until pRemaining == 0\n+ * Returns true only if all elements has processed\n+ */\n+static bool ListTransactions2(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label, COutPoint& afterOutPoint, int* pRemaining)\n+{\n+    CAmount nFee;\n+    std::list<COutputEntry> listReceived;\n+    std::list<COutputEntry> listSent;\n+\n+    wtx.GetAmounts(listReceived, listSent, nFee, filter_ismine);\n+\n+    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n+    bool searchAfterOutPoint = !afterOutPoint.IsNull();\n+    bool afterHashEqual = searchAfterOutPoint && afterOutPoint.hash == wtx.GetHash();\n+    \n+    // Sent\n+    if (!filter_label)\n+    {\n+        for (const COutputEntry& s : listSent)\n+        {\n+            UniValue entry(UniValue::VOBJ);\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == s.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, s.destination);\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n+            if (pwallet->mapAddressBook.count(s.destination)) {\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n+            }\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    // Received\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n+    {\n+        for (const COutputEntry& r : listReceived)\n+        {\n+            std::string label;\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                label = pwallet->mapAddressBook[r.destination].name;\n+            }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == r.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n+            {\n+                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wtx.IsImmatureCoinBase(locked_chain))\n+                    entry.pushKV(\"category\", \"immature\");\n+                else\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                entry.pushKV(\"label\", label);\n+            }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+UniValue listtransactions2(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    std::string help_text =\n+      \"listtransactions2 (label count nextpagepointer include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions from tip of entries or nextpagepointer (exclusive).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n+            \"2. count             (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. nextpagepointer         (string, optional, default=null) Continue the existing listing by passing last known txid:vout.\\n\"\n+            \"5. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\", (string) The transaction category.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240014661",
      "id" : 240014661,
      "in_reply_to_id" : 240008984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAxNDY2MQ==",
      "original_commit_id" : "0796ebfdf9982129bcefa72aa00b3a492ae40697",
      "original_position" : 149,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 182955031,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T13:31:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240014661",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240015884"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240015884"
         }
      },
      "author_association" : "NONE",
      "body" : "okay. I have made the change. i will add it after review.",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-08T20:37:16Z",
      "diff_hunk" : "@@ -1500,6 +1500,267 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/**\n+ * List transactions version two based on the given criteria.\n+ *\n+ * @param  locked_chain\n+ * @param  pwallet        The wallet.\n+ * @param  wtx            The wallet transaction.\n+ * @param  nMinDepth      The minimum confirmation depth.\n+ * @param  fLong          Whether to include the JSON version of the transaction.\n+ * @param  ret            The UniValue into which the result is stored.\n+ * @param  filter_ismine  The \"is mine\" filter flags.\n+ * @param  filter_label   Optional label string to filter incoming transactions.\n+ * @param  afterOutPoint Start adding after this coin\n+ * @param  pRemaining    Adds new entries until this is zero\n+ *\n+ * Searches for afterOutPoint, When found, sets afterOutPoint to null\n+ * So after its found, starts adding remaining coins until pRemaining == 0\n+ * Returns true only if all elements has processed\n+ */\n+static bool ListTransactions2(interfaces::Chain::Lock& locked_chain, CWallet* const pwallet, const CWalletTx& wtx, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter_ismine, const std::string* filter_label, COutPoint& afterOutPoint, int* pRemaining)\n+{\n+    CAmount nFee;\n+    std::list<COutputEntry> listReceived;\n+    std::list<COutputEntry> listSent;\n+\n+    wtx.GetAmounts(listReceived, listSent, nFee, filter_ismine);\n+\n+    bool involvesWatchonly = wtx.IsFromMe(ISMINE_WATCH_ONLY);\n+    bool searchAfterOutPoint = !afterOutPoint.IsNull();\n+    bool afterHashEqual = searchAfterOutPoint && afterOutPoint.hash == wtx.GetHash();\n+    \n+    // Sent\n+    if (!filter_label)\n+    {\n+        for (const COutputEntry& s : listSent)\n+        {\n+            UniValue entry(UniValue::VOBJ);\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == s.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, s.destination);\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n+            if (pwallet->mapAddressBook.count(s.destination)) {\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n+            }\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    // Received\n+    if (listReceived.size() > 0 && wtx.GetDepthInMainChain(locked_chain) >= nMinDepth)\n+    {\n+        for (const COutputEntry& r : listReceived)\n+        {\n+            std::string label;\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                label = pwallet->mapAddressBook[r.destination].name;\n+            }\n+            if (filter_label && label != *filter_label) {\n+                continue;\n+            }\n+            if (searchAfterOutPoint) {\n+                if (afterHashEqual && (int)afterOutPoint.n == r.vout) {\n+                    afterOutPoint.SetNull();\n+                    searchAfterOutPoint = false;\n+                }\n+                continue;\n+            }\n+            // check for remaining when new entry exists\n+            if ((*pRemaining) == 0) {\n+                return false;\n+            }\n+            (*pRemaining)--;\n+            UniValue entry(UniValue::VOBJ);\n+            if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n+                entry.pushKV(\"involvesWatchonly\", true);\n+            }\n+            MaybePushAddress(entry, r.destination);\n+            if (wtx.IsCoinBase())\n+            {\n+                if (wtx.GetDepthInMainChain(locked_chain) < 1)\n+                    entry.pushKV(\"category\", \"orphan\");\n+                else if (wtx.IsImmatureCoinBase(locked_chain))\n+                    entry.pushKV(\"category\", \"immature\");\n+                else\n+                    entry.pushKV(\"category\", \"generate\");\n+            }\n+            else\n+            {\n+                entry.pushKV(\"category\", \"receive\");\n+            }\n+            entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n+                entry.pushKV(\"label\", label);\n+            }\n+            entry.pushKV(\"vout\", r.vout);\n+            if (fLong)\n+                WalletTxToJSON(pwallet->chain(), locked_chain, wtx, entry);\n+            ret.push_back(entry);\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+UniValue listtransactions2(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    std::string help_text =\n+      \"listtransactions2 (label count nextpagepointer include_watchonly)\\n\"\n+            \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n+            \"\\nReturns up to 'count' most recent transactions from tip of entries or nextpagepointer (exclusive).\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"    (string, optional) If set, should be a valid label name to return only incoming transactions\\n\"\n+            \"              with the specified label, or \\\"*\\\" to disable filtering and return all transactions.\\n\"\n+            \"2. count             (numeric, optional, default=10) The number of transactions to return\\n\"\n+            \"3. nextpagepointer         (string, optional, default=null) Continue the existing listing by passing last known txid:vout.\\n\"\n+            \"5. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\":\\\"send|receive\\\", (string) The transaction category.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240015884",
      "id" : 240015884,
      "in_reply_to_id" : 240008984,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDAxNTg4NA==",
      "original_commit_id" : "0796ebfdf9982129bcefa72aa00b3a492ae40697",
      "original_position" : 149,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : null,
      "pull_request_review_id" : 182956283,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T13:31:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240015884",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is there a strong reason to not improve existing `listtransactions` without being a breaking change?",
      "created_at" : "2018-12-09T18:27:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445559908",
      "id" : 445559908,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU1OTkwOA==",
      "updated_at" : "2018-12-09T18:27:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445559908",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@promag `listtransactions` has been used in many tests. I don't know what will happen. If change number one gets added to it.\r\n\r\n> 1. Return transactions is ordered by most recent transactions. Though the original rpc does reverse the order after transactions are fetched and clipped.\r\n\r\nThere's an odd reverse call at `listtransactions` which is not in this one.\r\nhttps://github.com/bitcoin/bitcoin/blob/fc1710fbf3ce840f0b647913be8b821089b00f5e/src/wallet/rpcwallet.cpp#L1494\r\n\r\nOther than that adding `nextpagepointer` will break compatibility with `listtransactions` params. Only if one accepts it as interger and string and keeps the behaviour the same.\r\n",
      "created_at" : "2018-12-09T20:51:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445570548",
      "id" : 445570548,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3MDU0OA==",
      "updated_at" : "2018-12-09T20:51:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445570548",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I general I like the idea of a pointer (seems more reliable) and the sort.\r\nNot sure about cloning the call.",
      "created_at" : "2018-12-09T20:56:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445570966",
      "id" : 445570966,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3MDk2Ng==",
      "updated_at" : "2018-12-09T20:56:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445570966",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> @promag `listtransactions` has been used in many tests. I don't know what will happen. If change number one gets added to it.\r\n\r\nI would not worry about tests, you should anyway run the functional tests yourself if you change something in RPC. Sort order could be added as an additional optional boolean parameter IMO. As well as other changes.",
      "created_at" : "2018-12-09T21:04:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445571523",
      "id" : 445571523,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3MTUyMw==",
      "updated_at" : "2018-12-09T21:04:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445571523",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Who thinks this line should get removed from `listtransactions`?\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/fc1710fbf3ce840f0b647913be8b821089b00f5e/src/wallet/rpcwallet.cpp#L1494",
      "created_at" : "2018-12-09T21:09:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445571934",
      "id" : 445571934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3MTkzNA==",
      "updated_at" : "2018-12-09T21:09:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445571934",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@hosseinamin Well we can't remove that line; there are likely end users who rely on its behavior, even if it is suboptimal. We can make it optional by adding an extra flag, though.",
      "created_at" : "2018-12-09T22:12:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445576752",
      "id" : 445576752,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3Njc1Mg==",
      "updated_at" : "2018-12-09T22:12:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445576752",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Breaking userspace is bad, so changing default behaviour of any RPC should be avoided.",
      "created_at" : "2018-12-09T22:22:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445577463",
      "id" : 445577463,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3NzQ2Mw==",
      "updated_at" : "2018-12-09T22:22:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445577463",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "That's why i did cloned the rpc call. This is how new functionality can come in without messing with userspace.",
      "created_at" : "2018-12-09T22:47:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445579248",
      "id" : 445579248,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3OTI0OA==",
      "updated_at" : "2018-12-09T22:47:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445579248",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> That's why i did cloned the rpc call. This is how new functionality can come in without messing with userspace.\r\n\r\nCloning is one way, backward compatible parameterising would be another (see how the account system was removed).",
      "created_at" : "2018-12-09T22:53:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445579679",
      "id" : 445579679,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3OTY3OQ==",
      "updated_at" : "2018-12-09T22:53:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445579679",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "Okay. How's this?\r\n\r\n1. `skip` param can morph to `nextpagepointer` when string is given.\r\n2. adding `nonlegacy` parameter at the end to avoid messing with userspace.\r\n",
      "created_at" : "2018-12-09T22:56:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445579931",
      "id" : 445579931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU3OTkzMQ==",
      "updated_at" : "2018-12-09T22:56:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445579931",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I think `skip` accepts string as input. It will convert to integer. A bit more work is needed to detect between the two.",
      "created_at" : "2018-12-09T22:59:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445580176",
      "id" : 445580176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU4MDE3Ng==",
      "updated_at" : "2018-12-09T22:59:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445580176",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "It's also seems like changes on `ListTransactions2` is trivial. `ListTransactions` with no change works.",
      "created_at" : "2018-12-10T00:22:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445593772",
      "id" : 445593772,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTU5Mzc3Mg==",
      "updated_at" : "2018-12-10T00:22:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445593772",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@jonasschnelli Removed listransactions2, And did parametrize it.\r\nI will try later to write some tests for it.",
      "created_at" : "2018-12-10T04:08:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445667771",
      "id" : 445667771,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTY2Nzc3MQ==",
      "updated_at" : "2018-12-10T04:08:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445667771",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/21030850?v=4",
         "events_url" : "https://api.github.com/users/hosseinamin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hosseinamin/followers",
         "following_url" : "https://api.github.com/users/hosseinamin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hosseinamin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hosseinamin",
         "id" : 21030850,
         "login" : "hosseinamin",
         "node_id" : "MDQ6VXNlcjIxMDMwODUw",
         "organizations_url" : "https://api.github.com/users/hosseinamin/orgs",
         "received_events_url" : "https://api.github.com/users/hosseinamin/received_events",
         "repos_url" : "https://api.github.com/users/hosseinamin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hosseinamin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hosseinamin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hosseinamin"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240342997"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240342997"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Drop `&e`? Applies to the three cases below as well :-)",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-10T19:13:32Z",
      "diff_hunk" : "@@ -1444,16 +1478,122 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     int nCount = 10;\n     if (!request.params[1].isNull())\n         nCount = request.params[1].get_int();\n-    int nFrom = 0;\n-    if (!request.params[2].isNull())\n-        nFrom = request.params[2].get_int();\n+    if (nCount < 0)\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+\n     isminefilter filter = ISMINE_SPENDABLE;\n     if(!request.params[3].isNull())\n         if(request.params[3].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n-    if (nCount < 0)\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Negative count\");\n+    bool newversion = false;\n+    if (!request.params[4].isNull())\n+        newversion = request.params[4].get_bool();\n+    \n+    if (newversion) {\n+        uint256 nextHash;\n+        int nextVOut = -1;\n+        bool nextIsSend = false;\n+        if (!request.params[2].isNull()) {\n+            std::stringstream ss(request.params[2].get_str());\n+            std::string s;\n+            int i = 0;\n+            while (std::getline(ss, s, ':')) {\n+                if (i == 0) {\n+                    if (!IsHex(s)) {\n+                        break;\n+                    }\n+                    nextHash = uint256S(s);\n+                } else if (i == 1) {\n+                    try {\n+                        nextVOut = std::stoul(s);\n+                    } catch (std::invalid_argument &e) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240342997",
      "id" : 240342997,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM0Mjk5Nw==",
      "original_commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "original_position" : 126,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 126,
      "pull_request_review_id" : 183351955,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T19:14:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240342997",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure a single parameter that changes multiple things is a right way to go. Wouln't be better to be able to specify sorting order and paging behaviour independently? Besides I don't like \"old behaviour vs new behaviour\" boolean also because in future there could be a different one \"new new behaviour\".",
      "created_at" : "2018-12-10T21:16:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#issuecomment-445976453",
      "id" : 445976453,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14898",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NTk3NjQ1Mw==",
      "updated_at" : "2018-12-10T21:16:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445976453",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/4500994?v=4",
         "events_url" : "https://api.github.com/users/kristapsk/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kristapsk/followers",
         "following_url" : "https://api.github.com/users/kristapsk/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kristapsk/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kristapsk",
         "id" : 4500994,
         "login" : "kristapsk",
         "node_id" : "MDQ6VXNlcjQ1MDA5OTQ=",
         "organizations_url" : "https://api.github.com/users/kristapsk/orgs",
         "received_events_url" : "https://api.github.com/users/kristapsk/received_events",
         "repos_url" : "https://api.github.com/users/kristapsk/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kristapsk/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kristapsk/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kristapsk"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240386940"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240386940"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: Isn't this typically called an index rather than a pointer?",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-10T21:27:59Z",
      "diff_hunk" : "@@ -57,7 +57,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"waitfornewblock\", 0, \"timeout\" },\n     { \"listtransactions\", 1, \"count\" },\n     { \"listtransactions\", 2, \"skip\" },\n+    { \"listtransactions\", 2, \"nextpagepointer\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240386940",
      "id" : 240386940,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM4Njk0MA==",
      "original_commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "original_position" : 4,
      "path" : "src/rpc/client.cpp",
      "position" : 4,
      "pull_request_review_id" : 183406974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T21:28:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240386940",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240387174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240387174"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: The `newversion` won't be new forever :-)   Can you come up with a time independent name?",
      "commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "created_at" : "2018-12-10T21:28:42Z",
      "diff_hunk" : "@@ -57,7 +57,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"waitfornewblock\", 0, \"timeout\" },\n     { \"listtransactions\", 1, \"count\" },\n     { \"listtransactions\", 2, \"skip\" },\n+    { \"listtransactions\", 2, \"nextpagepointer\" },\n     { \"listtransactions\", 3, \"include_watchonly\" },\n+    { \"listtransactions\", 4, \"newversion\" },",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14898#discussion_r240387174",
      "id" : 240387174,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDM4NzE3NA==",
      "original_commit_id" : "d788aae9c5a9d3adb6bcf967058e127fd90c6827",
      "original_position" : 6,
      "path" : "src/rpc/client.cpp",
      "position" : 6,
      "pull_request_review_id" : 183407280,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14898",
      "updated_at" : "2018-12-10T21:28:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240387174",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
