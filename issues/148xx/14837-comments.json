[
   {
      "author_association" : "MEMBER",
      "body" : " The argument that the CVE fix was a performance regression is based on a misunderstand of the system's current operation: Block validation is only very rarely on the critical path for block propagation.  This wasn't the case when the duplicate checking skipping was added, but it is the case now. I can't imagine that the PR to skip the \"redundant\" duplicate check would have gone through if it wasn't on the block propagation critical path then, so I can't see a change that is 10x+ more complicated being adopted now that its off the critical path.\r\n\r\nThis adds hundreds of lines of code and a homebrew cryptographic hash that AFAICT isn't particularly cryptographic but if broken turns into a DOS attack (and no, XORing a seed is does not obviously produce pairwise independence, which some approximation of is required to achieve the claimed property that a bad input for one user would be okay for others),  -- and it looks like doesn't actually result in an observable benefit except on microbenchmarks.  \r\n\r\nNAK.",
      "created_at" : "2018-11-29T08:42:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442751314",
      "id" : 442751314,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mjc1MTMxNA==",
      "updated_at" : "2018-11-29T08:42:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442751314",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/858454?v=4",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "node_id" : "MDQ6VXNlcjg1ODQ1NA==",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "The main benefit I'm emphasizing here is that it checks more strict properties.\r\n\r\nAs noted. the stricter check need not introduce a 'DoS attack' -- it can revert to the existing runtime easily. In any case, our goal isn't really to validate a maliciously created block quickly, it is to validate an honestly created block as quickly as possible and a maliciously created block in tolerable time -- I figured that they O(N / log(N)) speedup to switch back to the set algorithm upon collision wasn't worth the added complexity there, but it can certainly be done.  \r\n\r\nThe PCG I am using is not homebrew (except in implementation). If you prefer, we could add a dependency to the standard PCG library which contains a similar function. Thus the unstudied portion is mostly limited to the inputs to the function. My understanding of PCG is such that the xor'd seed should produce pairwise independence, although I grant you that it may be better to use two different seeds k1_1 and k1_2.  Perhaps there are other efficiently computable prfs which have pairwise independence that would be suited for this purpose -- I previously used SIPHASH for this.",
      "created_at" : "2018-11-29T09:05:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442757835",
      "id" : 442757835,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mjc1NzgzNQ==",
      "updated_at" : "2018-11-29T09:05:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442757835",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/886523?v=4",
         "events_url" : "https://api.github.com/users/JeremyRubin/events{/privacy}",
         "followers_url" : "https://api.github.com/users/JeremyRubin/followers",
         "following_url" : "https://api.github.com/users/JeremyRubin/following{/other_user}",
         "gists_url" : "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/JeremyRubin",
         "id" : 886523,
         "login" : "JeremyRubin",
         "node_id" : "MDQ6VXNlcjg4NjUyMw==",
         "organizations_url" : "https://api.github.com/users/JeremyRubin/orgs",
         "received_events_url" : "https://api.github.com/users/JeremyRubin/received_events",
         "repos_url" : "https://api.github.com/users/JeremyRubin/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/JeremyRubin/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/JeremyRubin"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14696](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14696.html) (qa: Add explicit references to related CVE's in p2p_invalid_block test. by lucash-dev)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-11-29T09:31:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442766164",
      "id" : 442766164,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mjc2NjE2NA==",
      "updated_at" : "2018-11-29T09:31:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442766164",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Stricter Invariants This PR checks stricter properties. Before this PR, a block might pass checkblock with duplicate inputs spent across transactions and invalid longchain order.\r\n\r\n> The main benefit I'm emphasizing here is that it checks more strict properties.\r\n\r\nWhat's the list of properties that this PR checks for? \"Invalid longchain order\" seems to mean that \"outputs being created by this transaction being have not been spent by an earlier transaction.\" Are there other checks, too?\r\n",
      "created_at" : "2018-11-29T15:44:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442881137",
      "id" : 442881137,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mjg4MTEzNw==",
      "updated_at" : "2018-11-29T15:44:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442881137",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> What's the list of properties that this PR checks for?\r\n\r\nFound the list here:\r\n\r\nhttps://github.com/JeremyRubin/bitcoin/blob/0425c6409000aeb3270ba8f9c30d2746c5c5b784/src/validation.cpp#L3078-L3086\r\n\r\nThe actual implementation of this is change is short, clean and not hard to understand. This change doesn't add \"hundreds of lines of code\", though it does add a lot of comments and analysis.\r\n\r\nIf it's true that \"Block validation is only very rarely on the critical path for block propagation\" then making this change by itself try to help with performance and complexity is probably not worth the risks. But I am curious about:\r\n\r\n> Enforcing stricter invariants in CheckBlock helps us guard against potential errors in later sections of the code and opens up the door to new optimizations, parallelizations, or simplifications in the application of transactions in a block. For instance, we could create all new UTXOS in parallel and then spend all inputs in parallel.\r\n\r\nThis is an interesting idea, even though it seems like it would require a lock-free CCoinsViewCache to improve performance. It does seem conceptually like adding an \"Invalid longchain order\" invariant could make future optimizations possible, so maybe this is worth thinking about more.",
      "created_at" : "2018-11-29T16:27:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14837#issuecomment-442898663",
      "id" : 442898663,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14837",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0Mjg5ODY2Mw==",
      "updated_at" : "2018-11-29T16:27:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442898663",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
