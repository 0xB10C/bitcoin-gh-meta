[
   {
      "body" : "is there are way i can get bitcoin for free",
      "created_at" : "2016-10-12T11:02:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-253183461",
      "id" : 253183461,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "updated_at" : "2016-10-12T11:02:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253183461",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22790928?v=3",
         "events_url" : "https://api.github.com/users/okeowosunday01/events{/privacy}",
         "followers_url" : "https://api.github.com/users/okeowosunday01/followers",
         "following_url" : "https://api.github.com/users/okeowosunday01/following{/other_user}",
         "gists_url" : "https://api.github.com/users/okeowosunday01/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/okeowosunday01",
         "id" : 22790928,
         "login" : "okeowosunday01",
         "organizations_url" : "https://api.github.com/users/okeowosunday01/orgs",
         "received_events_url" : "https://api.github.com/users/okeowosunday01/received_events",
         "repos_url" : "https://api.github.com/users/okeowosunday01/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/okeowosunday01/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/okeowosunday01/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/okeowosunday01"
      }
   },
   {
      "body" : "I managed to install a newer version of gdb (just `pkg install gdb` really), which valiantly generates a stack trace...\r\n```\r\n#0  0x000000000103d710 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*) (__parent=<optimized out>, __child=<optimized out>, \r\n    __new_node=<optimized out>, this=<optimized out>, __parent=<optimized out>, __child=<optimized out>, __new_node=<optimized out>) at /usr/include/c++/v1/__tree:1715\r\n#1  std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__node_insert_unique(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, void*>*) (\r\n    this=<optimized out>, this=<optimized out>, __nd=<optimized out>) at /usr/include/c++/v1/__tree:1928\r\n#2  std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_unique<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > >(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >&&) (this=0x130a358 <benchmark::BenchRunner::benchmarks>, __v=<optimized out>)\r\n    at /usr/include/c++/v1/__tree:1805\r\n#3  0x000000000103c149 in benchmark::BenchRunner::BenchRunner (this=<optimized out>, name=..., func=...) at /usr/local/include/boost/function/function_template.hpp:909\r\n#4  0x000000000103f287 in global constructors keyed to a ()\r\n#5  0x00000000010d5752 in __do_global_ctors_aux ()\r\n#6  0x000000000103b1d6 in _init ()\r\n```\r\nI have the feeling is is as useless as it is intimidating, though. Will get one without optimization.\r\n",
      "created_at" : "2016-10-13T06:36:37Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-253426785",
      "id" : 253426785,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "updated_at" : "2016-10-13T06:36:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253426785",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "```\r\n#0  0x0000000001042096 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_node_at(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*&, std::__1::__tree_node_base<void*>*) (this=0x13ac378 <benchmark::BenchRunner::benchmarks>, \r\n    __parent=0x13ac380 <benchmark::BenchRunner::benchmarks+8>, __child=@0x13ac380: 0x804431080, __new_node=0x804431080) at /usr/include/c++/v1/__tree:1715\r\n#1  0x0000000001040ea4 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__node_insert_unique(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, void*>*) (this=0x13ac378 <benchmark::BenchRunner::benchmarks>, __nd=0x804431080) at /usr/include/c++/v1/__tree:1928\r\n#2  0x000000000104009c in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > > >::__insert_unique<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> > >(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, boost::function<void (benchmark::State&)> >&&) (this=0x13ac378 <benchmark::BenchRunner::benchmarks>, \r\n    __v=<unknown type in /usr/home/user/bitcoin/src/bench/bench_bitcoin, CU 0x3857, DIE 0xc501>) at /usr/include/c++/v1/__tree:1805\r\n#3  0x000000000103cfa8 in benchmark::BenchRunner::BenchRunner (this=0x13ac3d8 <bench_54Base58Encode>, name=..., func=...) at /usr/include/c++/v1/utility:308\r\n```\r\nThat didn't really help, except that we can see that at least the *this* pointers aren't 0.\r\n\r\nAdding an \"upstream\" tag. It's becoming clear at least that this is an upstream bug. Whether in the compiler or boost is not apparent to me.",
      "created_at" : "2016-10-13T06:51:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/8910#issuecomment-253429014",
      "id" : 253429014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/8910",
      "updated_at" : "2016-10-13T06:51:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/253429014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
