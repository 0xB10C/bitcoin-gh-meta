[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145863477"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145863477"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What do you think about bypassing this logic in the event that pindexPrev is VALID_SCRIPTS?  I'm slightly concerned about some kind of weird scenario where g_failed_blocks grows (hopefully slowly!) over time, slowing down block processing the longer a node has been up.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-20T01:52:32Z",
      "diff_hunk" : "@@ -3066,6 +3086,19 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        for (const CBlockIndex* failedit : g_failed_blocks) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145863477",
      "id" : 145863477,
      "original_commit_id" : "98fa1df5918c9a7fcf8ee1141eea8fbedd0eb27b",
      "original_position" : 79,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 70727482,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145863477",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145911947"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145911947"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be nice to specifically test for `bad-prevblk` being thrown, perhaps using the mechanism in #11220. I'm not sure how to do that in the python tests though.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-20T09:03:14Z",
      "diff_hunk" : "@@ -3066,6 +3086,19 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        for (const CBlockIndex* failedit : g_failed_blocks) {\n+            if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                CBlockIndex* invalid_walk = pindexPrev;\n+                while (invalid_walk != failedit) {\n+                    invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                    setDirtyBlockIndex.insert(invalid_walk);\n+                    invalid_walk = invalid_walk->pprev;\n+                }\n+                return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145911947",
      "id" : 145911947,
      "original_commit_id" : "9bbd66a9a258cf1d3acc8f8723a46d1cce49f17f",
      "original_position" : 88,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 70781953,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145911947",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145918843"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145918843"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Another place to test this would be to add a test for [ProcessNewBlockHeaders](https://github.com/bitcoin/bitcoin/blob/v0.15.0.1/src/validation.cpp#L3067-L3084). I can take a stab at it, but I'm not sure which file that test should be added too, or which test would be a good example to base it on.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-20T09:36:15Z",
      "diff_hunk" : "@@ -3066,6 +3086,19 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        for (const CBlockIndex* failedit : g_failed_blocks) {\n+            if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                CBlockIndex* invalid_walk = pindexPrev;\n+                while (invalid_walk != failedit) {\n+                    invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                    setDirtyBlockIndex.insert(invalid_walk);\n+                    invalid_walk = invalid_walk->pprev;\n+                }\n+                return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r145918843",
      "id" : 145918843,
      "in_reply_to_id" : 145911947,
      "original_commit_id" : "9bbd66a9a258cf1d3acc8f8723a46d1cce49f17f",
      "original_position" : 88,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 70790128,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145918843",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r146049681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146049681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-20T19:35:34Z",
      "diff_hunk" : "@@ -3066,6 +3086,19 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        for (const CBlockIndex* failedit : g_failed_blocks) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r146049681",
      "id" : 146049681,
      "in_reply_to_id" : 145863477,
      "original_commit_id" : "98fa1df5918c9a7fcf8ee1141eea8fbedd0eb27b",
      "original_position" : 79,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 70945401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/146049681",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I think this needs a 0.15.0.2 tag",
      "created_at" : "2017-10-25T04:11:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-339208800",
      "id" : 339208800,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-25T04:11:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339208800",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK up until ffedf48b218b50b8187cbabf2969e519315c98a6, which has nuances that I'm not comfortable ACKing before taking some rabbit-hole dives.\r\n\r\nSide-note: This is a really well-done patch set that is (other than the last commit which is the meat of it) very straightforward and easy to review. Though the changes are mostly one-liners, breaking them up functionally is a big help. Nice work :)",
      "created_at" : "2017-10-27T07:33:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-339896149",
      "id" : 339896149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-27T07:33:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/339896149",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147472429"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147472429"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Reject headers building on invalid chains by tracking invalidity\"\r\n\r\nMaybe assert `chainActive.Contains(pindex)` here. Otherwise it isn't clear that the `while (invalid_walk_tip != pindex)` loop below will work.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T17:39:36Z",
      "diff_hunk" : "@@ -2533,17 +2542,14 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147472429",
      "id" : 147472429,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 25,
      "path" : "src/validation.cpp",
      "position" : 26,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147472429",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147473727"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147473727"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Reject headers building on invalid chains by tracking invalidity\"\r\n\r\nMaybe add `// Mark descendants of the block invalid` comment for consistency and easier skimming",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T17:45:10Z",
      "diff_hunk" : "@@ -2554,6 +2560,19 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         }\n     }\n \n+    while (invalid_walk_tip != pindex) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147473727",
      "id" : 147473727,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 50,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147473727",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147475839"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147475839"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Reject headers building on invalid chains by tracking invalidity\"\r\n\r\nMaybe move this comment above the setBlockIndexCandidates.erase() call so it is clearer what this is referring to.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T17:53:45Z",
      "diff_hunk" : "@@ -2533,17 +2542,14 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+    // We first disconnect backwards and then mark the blocks as invalid.\n+    // This prevents a case where pruned nodes may fail to invalidateblock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147475839",
      "id" : 147475839,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 32,
      "path" : "src/validation.cpp",
      "position" : 33,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147475839",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147477166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147477166"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Reject headers building on invalid chains by tracking invalidity\"\r\n\r\nWhy isn't setBlockIndexCandidates.erase() needed here?",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T17:59:13Z",
      "diff_hunk" : "@@ -3066,6 +3086,21 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            for (const CBlockIndex* failedit : g_failed_blocks) {\n+                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                    assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                    CBlockIndex* invalid_walk = pindexPrev;\n+                    while (invalid_walk != failedit) {\n+                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                        setDirtyBlockIndex.insert(invalid_walk);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147477166",
      "id" : 147477166,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 86,
      "path" : "src/validation.cpp",
      "position" : 93,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147477166",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased on master with no changes.",
      "created_at" : "2017-10-27T18:00:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340042552",
      "id" : 340042552,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-27T18:00:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340042552",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147478331"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147478331"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Reject headers building on invalid chains by tracking invalidity\"\r\n\r\nShould the first condition be `pindex->nStatus & BLOCK_FAILED_CHILD` instead of FAILED_MASK?\r\n\r\nOtherwise if it is intentional to avoid setting FAILED_CHILD here when FAILED_VALID is set, it might be good to have a comment, because the |= FAILED_CHILD code in AcceptBlockHeader and InvalidateBlock isn't checking this.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T18:04:10Z",
      "diff_hunk" : "@@ -3492,6 +3527,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n                 pindex->nChainTx = pindex->nTx;\n             }\n         }\n+        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147478331",
      "id" : 147478331,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 100,
      "path" : "src/validation.cpp",
      "position" : 129,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147478331",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147480738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147480738"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Reject headers building on invalid chains by tracking invalidity\"\r\n\r\nWould be good if the comment said what the relationship to the BLOCK_FAILED_VALID flag is. For example if all the FAILED_VALID blocks will be in this set, or only some of them.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T18:13:50Z",
      "diff_hunk" : "@@ -156,6 +156,14 @@ namespace {\n     /** chainwork for the last block that preciousblock has been applied to. */\n     arith_uint256 nLastPreciousChainwork = 0;\n \n+    /** In order to effeciently track invalidity of headers, we keep the set of\n+      * blocks which we tried to connect and found to be invalid here. We can\n+      * then walk this set and check if a new header is a descendant of\n+      * something in this set, preventing us from having to walk mapBlockIndex\n+      * when we try to connect a bad block and fail.\n+      */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147480738",
      "id" : 147480738,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 9,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147480738",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147484247"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147484247"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Rewrite p2p-acceptblock in preparation for slight behavior changes\"\r\n\r\nThis sounds reversed and doesn't actually describe the connections. Maye write \"We have one NodeConn connection to node0 called test_node, and one to node1 called min_work_node.\"",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T18:27:28Z",
      "diff_hunk" : "@@ -4,42 +4,30 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n-low-work unrequested blocks.\n-\n-We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n-respectively.\n+We have one NodeConn connection to test_node, and one to min_work_node.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147484247",
      "id" : 147484247,
      "original_commit_id" : "594b7d9c6d7f2a05bf1ea5e8e95cbad3f2212d2f",
      "original_position" : 17,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147484247",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147484780"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147484780"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Rewrite p2p-acceptblock in preparation for slight behavior changes\"\r\n\r\nClearer before with \"on each node\"",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T18:29:48Z",
      "diff_hunk" : "@@ -4,42 +4,30 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n-low-work unrequested blocks.\n-\n-We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n-respectively.\n+We have one NodeConn connection to test_node, and one to min_work_node.\n \n The test:\n-1. Generate one block on each node, to leave IBD.\n+1. Generate one block, to leave IBD.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147484780",
      "id" : 147484780,
      "original_commit_id" : "594b7d9c6d7f2a05bf1ea5e8e95cbad3f2212d2f",
      "original_position" : 21,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147484780",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147492178"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147492178"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Rewrite p2p-acceptblock in preparation for slight behavior changes\"\r\n\r\nMaybe drop \"from non-whitelisted peer\"",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T19:01:41Z",
      "diff_hunk" : "@@ -84,132 +72,147 @@ def setup_network(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n-        white_node = NodeConnCB()  # connects to node1 (whitelisted)\n-        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n+        test_node = NodeConnCB()   # connects to node0\n+        min_work_node = NodeConnCB()  # connects to node1\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], min_work_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n-        min_work_node.add_connection(connections[2])\n+        min_work_node.add_connection(connections[1])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n         min_work_node.wait_for_verack()\n \n-        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n+        # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted by nodes 1/2\n+        # This should be accepted by node0\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(3):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n-        white_node.send_message(msg_block(blocks_h2[1]))\n-        min_work_node.send_message(msg_block(blocks_h2[2]))\n+        min_work_node.send_message(msg_block(blocks_h2[1]))\n \n-        for x in [test_node, white_node, min_work_node]:\n+        for x in [test_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 2)\n-        assert_equal(self.nodes[2].getblockcount(), 1)\n-        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n+        assert_equal(self.nodes[1].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n \n-        # 3. Send another block that builds on the original tip.\n-        blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in range(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n-            blocks_h2f[i].solve()\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n-        white_node.send_message(msg_block(blocks_h2f[1]))\n+        # 3. Send another block that builds on genesis.\n+        block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n+        block_time += 1\n+        block_h1f.solve()\n+        test_node.send_message(msg_block(block_h1f))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h2f[0].hash:\n+            if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        # 4. Send another two block that build on the fork.\n+        block_h2f = create_block(block_h1f.sha256, create_coinbase(2), block_time)\n+        block_time += 1\n+        block_h2f.solve()\n+        test_node.send_message(msg_block(block_h2f))\n \n-        for x in self.nodes[1].getchaintips():\n-            if x['hash'] == blocks_h2f[1].hash:\n-                assert_equal(x['status'], \"valid-headers\")\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n+        # can't be fully validated.\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_h2f.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n \n-        self.log.info(\"Second height 2 block accepted only from whitelisted peer\")\n+        # But this block should be accepted by node since it has equal work.\n+        # TODO: We currently drop this block but likely shouldn't\n+        #self.nodes[0].getblock(block_h2f.hash)\n+        self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n-        # 4. Now send another block that builds on the forking chain.\n-        blocks_h3 = []\n-        for i in range(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n-            blocks_h3[i].solve()\n-        test_node.send_message(msg_block(blocks_h3[0]))\n-        white_node.send_message(msg_block(blocks_h3[1]))\n+        # 4b. Now send another block that builds on the forking chain.\n+        block_h3 = create_block(block_h2f.sha256, create_coinbase(3), block_h2f.nTime+1)\n+        block_h3.solve()\n+        test_node.send_message(msg_block(block_h3))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n-        # Since the earlier block was not processed by node0, the new block\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h3[0].hash:\n+            if x['hash'] == block_h3.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n \n-        # But this block should be accepted by node0 since it has more work.\n-        self.nodes[0].getblock(blocks_h3[0].hash)\n+        # But this block should be accepted by node since it has more work.\n+        self.nodes[0].getblock(block_h3.hash)\n         self.log.info(\"Unrequested more-work block accepted from non-whitelisted peer\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147492178",
      "id" : 147492178,
      "original_commit_id" : "594b7d9c6d7f2a05bf1ea5e8e95cbad3f2212d2f",
      "original_position" : 213,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147492178",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147495467"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147495467"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Rewrite p2p-acceptblock in preparation for slight behavior changes\"\r\n\r\nUnclear what 288 refers to. Maybe define MIN_BLOCKS_TO_KEEP constant in python and use that in the test.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T19:17:57Z",
      "diff_hunk" : "@@ -4,42 +4,30 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n-low-work unrequested blocks.\n-\n-We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n-respectively.\n+We have one NodeConn connection to test_node, and one to min_work_node.\n \n The test:\n-1. Generate one block on each node, to leave IBD.\n+1. Generate one block, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance for node0 and node1, but node2 should skip processing\n-   due to nMinimumChainWork.\n+   The tip should advance for node0, but node1 should skip processing due to\n+   nMinimumChainWork.\n \n-Node2 is unused in tests 3-7:\n+Node1 is unused in tests 3-7:\n \n-3. Mine a block that forks the previous block, and deliver to each node from\n-   corresponding peer.\n-   Node0 should not process this block (just accept the header), because it is\n-   unrequested and doesn't have more work than the tip.\n-   Node1 should process because this is coming from a whitelisted peer.\n+3. Mine a block that forks from the genesis block, and deliver to test_node.\n+   Node0 should not process this block (just accept the header), because it\n+   is unrequested and doesn't have more or equal work to the tip.\n \n-4. Send another block that builds on the forking block.\n-   Node0 should process this block but be stuck on the shorter chain, because\n-   it's missing an intermediate block.\n-   Node1 should reorg to this longer chain.\n+4. Send another two blocks that builds on the forking block.\n+   Node0 should process the second block but be stuck on the shorter chain,\n+   because it's missing an intermediate block.\n \n-4b.Send 288 more blocks on the longer chain.\n+4c.Send 288 more blocks on the longer chain.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147495467",
      "id" : 147495467,
      "original_commit_id" : "594b7d9c6d7f2a05bf1ea5e8e95cbad3f2212d2f",
      "original_position" : 50,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147495467",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147501714"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147501714"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Rewrite p2p-acceptblock in preparation for slight behavior changes\"\r\n\r\nMaybe check for \"Block not found on disk\" here to verify the block wasn't processed.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T19:49:55Z",
      "diff_hunk" : "@@ -84,132 +72,147 @@ def setup_network(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n-        white_node = NodeConnCB()  # connects to node1 (whitelisted)\n-        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n+        test_node = NodeConnCB()   # connects to node0\n+        min_work_node = NodeConnCB()  # connects to node1\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], min_work_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n-        min_work_node.add_connection(connections[2])\n+        min_work_node.add_connection(connections[1])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n         min_work_node.wait_for_verack()\n \n-        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n+        # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted by nodes 1/2\n+        # This should be accepted by node0\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(3):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n-        white_node.send_message(msg_block(blocks_h2[1]))\n-        min_work_node.send_message(msg_block(blocks_h2[2]))\n+        min_work_node.send_message(msg_block(blocks_h2[1]))\n \n-        for x in [test_node, white_node, min_work_node]:\n+        for x in [test_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 2)\n-        assert_equal(self.nodes[2].getblockcount(), 1)\n-        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n+        assert_equal(self.nodes[1].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n \n-        # 3. Send another block that builds on the original tip.\n-        blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in range(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n-            blocks_h2f[i].solve()\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n-        white_node.send_message(msg_block(blocks_h2f[1]))\n+        # 3. Send another block that builds on genesis.\n+        block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n+        block_time += 1\n+        block_h1f.solve()\n+        test_node.send_message(msg_block(block_h1f))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h2f[0].hash:\n+            if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147501714",
      "id" : 147501714,
      "original_commit_id" : "594b7d9c6d7f2a05bf1ea5e8e95cbad3f2212d2f",
      "original_position" : 156,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : 172,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147501714",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147506626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147506626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Stop always storing blocks from whitelisted peers\"\r\n\r\nIs this change related to the \"new headers are not a descendant of an invalid block\" check or is it only part of this PR because it simplifies the p2p-acceptblock test? Seems like good cleanup regardless, but would like to understand.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T20:13:32Z",
      "diff_hunk" : "@@ -2484,7 +2484,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n-        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        bool forceProcessing = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147506626",
      "id" : 147506626,
      "original_commit_id" : "d90b329a504b50ae71d55c9ae36e94518020e52c",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147506626",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147507620"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147507620"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Accept unrequested blocks with work equal to our tip\"\r\n\r\nSame question again: Is this change related to the \"new headers are not a descendant of an invalid block\" check or is it only part of this PR because it simplifies the p2p-acceptblock test? Again it seems fine, just asking to understand.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T20:18:49Z",
      "diff_hunk" : "@@ -3115,7 +3115,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    bool fHasMoreOrSameWork = (chainActive.Tip() ? pindex->nChainWork >= chainActive.Tip()->nChainWork : true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147507620",
      "id" : 147507620,
      "original_commit_id" : "051ff2432d84185ccd878cf652582c1ba509bcc3",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : 108,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147507620",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147511090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147511090"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[qa] test that invalid blocks on an invalid chain get a disconnect\"\r\n\r\nCould you add a comment to explain why the timeout is required? Is this assuming that if disconnect happens, it will happen within 1 second? Why not just do a normal sync_with_ping with the default timeout?",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T20:36:11Z",
      "diff_hunk" : "@@ -236,9 +240,78 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            test_node.sync_with_ping(timeout=1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147511090",
      "id" : 147511090,
      "original_commit_id" : "9df01d2f2cb9eed5af395424e702fa5d7e441207",
      "original_position" : 76,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147511090",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147512503"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147512503"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[qa] test that invalid blocks on an invalid chain get a disconnect\"\r\n\r\nCould you add a comment explaining AssertionError? Is this catching the disconnect or the timeout or both?",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T20:43:20Z",
      "diff_hunk" : "@@ -236,9 +240,78 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147512503",
      "id" : 147512503,
      "original_commit_id" : "9df01d2f2cb9eed5af395424e702fa5d7e441207",
      "original_position" : 77,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147512503",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147513402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147513402"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[qa] test that invalid blocks on an invalid chain get a disconnect\"\r\n\r\nThis seems to waiting 1 second for a ping response, and if that fails, then wait 60 seconds for disconnection before reconnecting? Does sync_with_ping not raise an error on disconnect?",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T20:47:31Z",
      "diff_hunk" : "@@ -236,9 +240,78 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:\n+            test_node.wait_for_disconnect()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147513402",
      "id" : 147513402,
      "original_commit_id" : "9df01d2f2cb9eed5af395424e702fa5d7e441207",
      "original_position" : 78,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147513402",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147514618"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147514618"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"[qa] test that invalid blocks on an invalid chain get a disconnect\"\r\n\r\nCan you expand comment to say why it's not desirable to make an assumption. Is there some kind of nondeterminism or complexity in knowing what the node is going to do? ",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T20:53:16Z",
      "diff_hunk" : "@@ -236,9 +240,78 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147514618",
      "id" : 147514618,
      "original_commit_id" : "9df01d2f2cb9eed5af395424e702fa5d7e441207",
      "original_position" : 74,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : 393,
      "pull_request_review_id" : 72578386,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147514618",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529066"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The second. Mostly because it started as a \"cleanup p2p-acceptblock test\" pr and then I didn't want to rewrite the p2p-acceptblock test again to not care about this.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:25:17Z",
      "diff_hunk" : "@@ -2484,7 +2484,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // unless we're still syncing with the network.\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n-        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        bool forceProcessing = false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529066",
      "id" : 147529066,
      "in_reply_to_id" : 147506626,
      "original_commit_id" : "d90b329a504b50ae71d55c9ae36e94518020e52c",
      "original_position" : 5,
      "path" : "src/net_processing.cpp",
      "position" : 5,
      "pull_request_review_id" : 72644338,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529066",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529068"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The second. Mostly because it started as a \"cleanup p2p-acceptblock test\" pr and then I didn't want to rewrite the p2p-acceptblock test again to not care about this.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:25:20Z",
      "diff_hunk" : "@@ -3115,7 +3115,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    bool fHasMoreOrSameWork = (chainActive.Tip() ? pindex->nChainWork >= chainActive.Tip()->nChainWork : true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529068",
      "id" : 147529068,
      "in_reply_to_id" : 147507620,
      "original_commit_id" : "051ff2432d84185ccd878cf652582c1ba509bcc3",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : 108,
      "pull_request_review_id" : 72644341,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529068",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529674"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nah, thats just a bug, fixing.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:30:16Z",
      "diff_hunk" : "@@ -2533,17 +2542,14 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529674",
      "id" : 147529674,
      "in_reply_to_id" : 147472429,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 25,
      "path" : "src/validation.cpp",
      "position" : 26,
      "pull_request_review_id" : 72645033,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529674",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529900"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Its actually not related to setBlockIndexCandidates (which is not persistent) - its related to the nStatus flags, I'll clarify comment.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:31:54Z",
      "diff_hunk" : "@@ -2533,17 +2542,14 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+    // We first disconnect backwards and then mark the blocks as invalid.\n+    // This prevents a case where pruned nodes may fail to invalidateblock",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147529900",
      "id" : 147529900,
      "in_reply_to_id" : 147475839,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 32,
      "path" : "src/validation.cpp",
      "position" : 33,
      "pull_request_review_id" : 72645301,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147529900",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530323"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147530323"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "None of those objects can be in our setBlockIndexCandidates - if they were we sould have tried to connect towards them, found them to be invalid, and then marked them as such (at least enough to get them out of our setBlockIndexCandidates).",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:35:19Z",
      "diff_hunk" : "@@ -3066,6 +3086,21 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            for (const CBlockIndex* failedit : g_failed_blocks) {\n+                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                    assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                    CBlockIndex* invalid_walk = pindexPrev;\n+                    while (invalid_walk != failedit) {\n+                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                        setDirtyBlockIndex.insert(invalid_walk);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530323",
      "id" : 147530323,
      "in_reply_to_id" : 147477166,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 86,
      "path" : "src/validation.cpp",
      "position" : 93,
      "pull_request_review_id" : 72645780,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147530323",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147530584"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It shouldn't matter - really this is an indication of corruption - you can't be both FAILED_CHILD and FAILED_VALID, you also cannot be FAILED_VALID if you have a FAILED_MASK parent. At the risk of overcomplicating things for a (currently) harmless error, I'll skip adding a check, unless you object.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:37:13Z",
      "diff_hunk" : "@@ -3492,6 +3527,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n                 pindex->nChainTx = pindex->nTx;\n             }\n         }\n+        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530584",
      "id" : 147530584,
      "in_reply_to_id" : 147478331,
      "original_commit_id" : "ffedf48b218b50b8187cbabf2969e519315c98a6",
      "original_position" : 100,
      "path" : "src/validation.cpp",
      "position" : 129,
      "pull_request_review_id" : 72646063,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147530584",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147530962"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Standard testing practice - we've sent something for which a reasonable node may very well decide to DoS us, disconnect us or whathave you, dont test that the node not do a thing that its perfectly reasonable for it to do. I'd say thats implied here, but happy to clarify more (or put something in some dev-notes doc).",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:40:25Z",
      "diff_hunk" : "@@ -236,9 +240,78 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147530962",
      "id" : 147530962,
      "in_reply_to_id" : 147514618,
      "original_commit_id" : "9df01d2f2cb9eed5af395424e702fa5d7e441207",
      "original_position" : 74,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : 393,
      "pull_request_review_id" : 72646506,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147530962",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147531626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147531626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Honestly, I have no idea...someone who knows more about the test framework should come along and make the catch here much more specific.",
      "commit_id" : "9429cefe3182d10cd8f99209feaae0a21465e5e0",
      "created_at" : "2017-10-27T22:46:50Z",
      "diff_hunk" : "@@ -236,9 +240,78 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#discussion_r147531626",
      "id" : 147531626,
      "in_reply_to_id" : 147512503,
      "original_commit_id" : "9df01d2f2cb9eed5af395424e702fa5d7e441207",
      "original_position" : 77,
      "path" : "test/functional/p2p-acceptblock.py",
      "position" : null,
      "pull_request_review_id" : 72647318,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11531",
      "updated_at" : "2017-10-27T22:47:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/147531626",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed (or commented on) @ryanofsky's feedback.",
      "created_at" : "2017-10-27T22:47:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340114902",
      "id" : 340114902,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-27T22:47:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340114902",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed @MeshCollider's code comment issues.",
      "created_at" : "2017-10-29T17:45:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340280205",
      "id" : 340280205,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-29T17:45:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340280205",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/649246?v=4",
         "events_url" : "https://api.github.com/users/TheBlueMatt/events{/privacy}",
         "followers_url" : "https://api.github.com/users/TheBlueMatt/followers",
         "following_url" : "https://api.github.com/users/TheBlueMatt/following{/other_user}",
         "gists_url" : "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/TheBlueMatt",
         "id" : 649246,
         "login" : "TheBlueMatt",
         "organizations_url" : "https://api.github.com/users/TheBlueMatt/orgs",
         "received_events_url" : "https://api.github.com/users/TheBlueMatt/received_events",
         "repos_url" : "https://api.github.com/users/TheBlueMatt/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/TheBlueMatt/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/TheBlueMatt"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 35e7b4e2bb7f749a4c8426dc3ea71b77f3457f30",
      "created_at" : "2017-10-29T21:50:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340303341",
      "id" : 340303341,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-29T21:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340303341",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-utACK https://github.com/bitcoin/bitcoin/commit/35e7b4e2bb7f749a4c8426dc3ea71b77f3457f30",
      "created_at" : "2017-10-29T21:52:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11531#issuecomment-340303664",
      "id" : 340303664,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11531",
      "updated_at" : "2017-10-29T21:52:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/340303664",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   }
]
