[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-01-23T17:16:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26957#issuecomment-1400700700",
      "id" : 1400700700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/26957",
      "node_id" : "IC_kwDOABII585TfP8c",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400700700/reactions"
      },
      "updated_at" : "2023-01-23T17:16:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400700700",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26957#discussion_r1084351946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26957"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084351946"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The way this benchmark is implemented, we can identify a regression between code changes. But if we wanted to get a sense of how logging without a a debug.log file compares to logging with a debug.log file, this doesn't help, right? It should only log with one of {LogPrintLevel, LogPrint, LogPrintfCategory} in order to compare the result with one of the other benchmarks.",
      "commit_id" : "eddf2d21eeea2a37b303b11f08ed8f01e561e1b3",
      "created_at" : "2023-01-23T17:35:27Z",
      "diff_hunk" : "@@ -17,32 +17,62 @@ static void Logging(benchmark::Bench& bench, const std::vector<const char*>& ext\n     bench.run([&] { log(); });\n }\n \n-static void LoggingYoThreadNames(benchmark::Bench& bench)\n+static void LogPrintLevelWithThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintLevel(BCLog::VALIDATION, BCLog::Level::Error, \"%s\\n\", \"test\"); });\n }\n-static void LoggingNoThreadNames(benchmark::Bench& bench)\n+\n+static void LogPrintLevelWithoutThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintLevel(BCLog::VALIDATION, BCLog::Level::Error, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintWithCategory(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=0\", \"-debug=net\"}, [] { LogPrint(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintWithoutCategory(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=0\", \"-debug=0\"}, [] { LogPrint(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintfCategoryWithThreadNames(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintfCategory(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintfCategoryWithoutThreadNames(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintfCategory(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n }\n-static void LoggingYoCategory(benchmark::Bench& bench)\n+\n+static void LogPrintfWithThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=0\", \"-debug=net\"}, [] { LogPrint(BCLog::NET, \"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n }\n-static void LoggingNoCategory(benchmark::Bench& bench)\n+\n+static void LogPrintfWithoutThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=0\", \"-debug=0\"}, [] { LogPrint(BCLog::NET, \"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n }\n-static void LoggingNoFile(benchmark::Bench& bench)\n+\n+static void LogWithoutDebugLogFile(benchmark::Bench& bench)\n {\n     Logging(bench, {\"-nodebuglogfile\", \"-debug=1\"}, [] {\n+        LogPrintLevel(BCLog::VALIDATION, BCLog::Level::Error, \"%s\\n\", \"test\");\n+        LogPrint(BCLog::VALIDATION, \"%s\\n\", \"test\");\n+        LogPrintfCategory(BCLog::VALIDATION, \"%s\\n\", \"test\");\n         LogPrintf(\"%s\\n\", \"test\");\n-        LogPrint(BCLog::NET, \"%s\\n\", \"test\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26957#discussion_r1084351946",
      "id" : 1084351946,
      "line" : 40,
      "node_id" : "PRRC_kwDOABII585AoeXK",
      "original_commit_id" : "eddf2d21eeea2a37b303b11f08ed8f01e561e1b3",
      "original_line" : 40,
      "original_position" : 60,
      "original_start_line" : 63,
      "path" : "src/bench/logging.cpp",
      "position" : 60,
      "pull_request_review_id" : 1266044025,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26957",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084351946/reactions"
      },
      "side" : "LEFT",
      "start_line" : 63,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-23T17:35:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084351946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/18506343?v=4",
         "events_url" : "https://api.github.com/users/kouloumos/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kouloumos/followers",
         "following_url" : "https://api.github.com/users/kouloumos/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kouloumos/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kouloumos",
         "id" : 18506343,
         "login" : "kouloumos",
         "node_id" : "MDQ6VXNlcjE4NTA2MzQz",
         "organizations_url" : "https://api.github.com/users/kouloumos/orgs",
         "received_events_url" : "https://api.github.com/users/kouloumos/received_events",
         "repos_url" : "https://api.github.com/users/kouloumos/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kouloumos/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kouloumos/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kouloumos"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/26957#discussion_r1084394512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26957"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084394512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That benchmark was added in fa31dc9b714 with the intention expressed in https://github.com/bitcoin/bitcoin/pull/18815#issuecomment-621404493, i.e. to test this code currently in `setup_common`:\r\n\r\n```cpp\r\n/**\r\n * Make a test setup that has disk access to the debug.log file disabled. Can\r\n * be used in \"hot loops\", for example fuzzing or benchmarking.\r\n */\r\ntemplate <class T = const BasicTestingSetup>\r\nstd::unique_ptr<T> MakeNoLogFileContext(const std::string& chain_name = CBaseChainParams::REGTEST, const std::vector<const char*>& extra_args = {})\r\n{\r\n    const std::vector<const char*> arguments = Cat(\r\n        {\r\n            \"-nodebuglogfile\",\r\n            \"-nodebug\",\r\n        },\r\n        extra_args);\r\n\r\n    return std::make_unique<T>(chain_name, arguments);\r\n}\r\n```\r\nEdit: Decided to add a comment and not otherwise change that benchmark.  It also looks like the -debuglogfile help could be clearer; updating.",
      "commit_id" : "eddf2d21eeea2a37b303b11f08ed8f01e561e1b3",
      "created_at" : "2023-01-23T18:18:13Z",
      "diff_hunk" : "@@ -17,32 +17,62 @@ static void Logging(benchmark::Bench& bench, const std::vector<const char*>& ext\n     bench.run([&] { log(); });\n }\n \n-static void LoggingYoThreadNames(benchmark::Bench& bench)\n+static void LogPrintLevelWithThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintLevel(BCLog::VALIDATION, BCLog::Level::Error, \"%s\\n\", \"test\"); });\n }\n-static void LoggingNoThreadNames(benchmark::Bench& bench)\n+\n+static void LogPrintLevelWithoutThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintLevel(BCLog::VALIDATION, BCLog::Level::Error, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintWithCategory(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=0\", \"-debug=net\"}, [] { LogPrint(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintWithoutCategory(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=0\", \"-debug=0\"}, [] { LogPrint(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintfCategoryWithThreadNames(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintfCategory(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n+}\n+\n+static void LogPrintfCategoryWithoutThreadNames(benchmark::Bench& bench)\n+{\n+    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintfCategory(BCLog::VALIDATION, \"%s\\n\", \"test\"); });\n }\n-static void LoggingYoCategory(benchmark::Bench& bench)\n+\n+static void LogPrintfWithThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=0\", \"-debug=net\"}, [] { LogPrint(BCLog::NET, \"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=1\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n }\n-static void LoggingNoCategory(benchmark::Bench& bench)\n+\n+static void LogPrintfWithoutThreadNames(benchmark::Bench& bench)\n {\n-    Logging(bench, {\"-logthreadnames=0\", \"-debug=0\"}, [] { LogPrint(BCLog::NET, \"%s\\n\", \"test\"); });\n+    Logging(bench, {\"-logthreadnames=0\"}, [] { LogPrintf(\"%s\\n\", \"test\"); });\n }\n-static void LoggingNoFile(benchmark::Bench& bench)\n+\n+static void LogWithoutDebugLogFile(benchmark::Bench& bench)\n {\n     Logging(bench, {\"-nodebuglogfile\", \"-debug=1\"}, [] {\n+        LogPrintLevel(BCLog::VALIDATION, BCLog::Level::Error, \"%s\\n\", \"test\");\n+        LogPrint(BCLog::VALIDATION, \"%s\\n\", \"test\");\n+        LogPrintfCategory(BCLog::VALIDATION, \"%s\\n\", \"test\");\n         LogPrintf(\"%s\\n\", \"test\");\n-        LogPrint(BCLog::NET, \"%s\\n\", \"test\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/26957#discussion_r1084394512",
      "id" : 1084394512,
      "in_reply_to_id" : 1084351946,
      "line" : 40,
      "node_id" : "PRRC_kwDOABII585AoowQ",
      "original_commit_id" : "eddf2d21eeea2a37b303b11f08ed8f01e561e1b3",
      "original_line" : 40,
      "original_position" : 60,
      "original_start_line" : 63,
      "path" : "src/bench/logging.cpp",
      "position" : 60,
      "pull_request_review_id" : 1266104090,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/26957",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084394512/reactions"
      },
      "side" : "LEFT",
      "start_line" : 63,
      "start_side" : "RIGHT",
      "updated_at" : "2023-01-23T18:40:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1084394512",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
