[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169511450"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12493"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169511450"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is a great start! I don't think think it is thread safe yet, though, because in parallel with this thread, a block connected notification could be coming in, or another another RPC could be being made that is using one of the `Db*` or `DbEnv*` pointers that this closes.\r\n\r\nI think all you need to do to make this thread safe is wait for the `mapFileUseCount` entries to go to zero. You could do this with a condition variable. For example, if you added a `std::condition_variable m_cv_in_use;` member to `CDBEnv` you could trigger it in `CDB::Close`:\r\n\r\n```c++\r\nm_cv_in_use.notify_all()\r\n```\r\n\r\nand wait for it at the top of `CDBEnv::ReloadDbEnv`:\r\n\r\n```c++\r\nWAIT_LOCK(cs_db, lock);\r\nm_cv_in_use.wait(lock, [this](){\r\n    for (count : mapFileUseCount) {\r\n        if (count.second > 0) return false;\r\n    }\r\n    return true;\r\n});\r\n```\r\n\r\nThis is one possible approach. Other approaches may be simpler or better. One drawback of this approach is that if there are a lot of background writes happening in different wallets, ReloadDbEnv could get starved out waiting for all wallets to be simultaneously not in use.",
      "commit_id" : "b56e66199fe5fc3f3933305ff4db54d1eebaa6ad",
      "created_at" : "2018-02-21T01:16:48Z",
      "diff_hunk" : "@@ -509,6 +509,22 @@ void CDBEnv::CloseDb(const std::string& strFile)\n     }\n }\n \n+void CDBEnv::ReloadDbEnv()\n+{\n+    std::vector<std::string> filenames;\n+    for (auto it : mapDb) {\n+        filenames.push_back(it.first);\n+    }\n+    // Close the individual Db's\n+    for (std::string filename : filenames) {\n+        CloseDb(filename);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12493#discussion_r169511450",
      "id" : 169511450,
      "original_commit_id" : "6b2b3a76980ab0c3418d46a5df8040eaa160f449",
      "original_position" : 12,
      "path" : "src/wallet/db.cpp",
      "position" : 12,
      "pull_request_review_id" : 98049174,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12493",
      "updated_at" : "2018-02-21T01:16:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/169511450",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
