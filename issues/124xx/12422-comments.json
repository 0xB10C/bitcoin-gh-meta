[
   {
      "author_association" : "OWNER",
      "body" : "@MeshCollider A question about this code - what is supposed to be the semantics of `LockDirectory` if it's called with the same directory multiple times? I understand that the map is just to hold on to the per-directory lock, but right now, if it happens to be called multiple times it will try to re-lock the same lock again\\*. We don't check if it already exists, and emplace will return the current object with that key.\r\n\r\nAccording to the documentation http://www.boost.org/doc/libs/master/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock\r\n> Effects: The calling thread tries to acquire exclusive ownership of the file lock without waiting. If no other thread has exclusive or sharable ownership of the file lock, this succeeds.\r\n\r\nThe result of that will depend if the lock was taken in the same thread (? I'd expect process, in the case of interprocess locks).\r\n\r\nI think the intent of the function is to return `true` if the process acquired the lock, or already had it, and `false` if it didn't have the lock already and failed to acquire it? Correct?\r\n\r\n\\* Or will it? or will it first try to construct a new `boost::interprocess::file_lock>(pathLockFile.string().c_str())` with the directory, then discard it when it cannot be inserted? (will that constructor raise an exception if the lock already exists?)\r\n\r\n**Edit:** I've tested this, and it seems \r\n- a second `LockDirectory` with the same directory and lock file name, from the same thread, returns `true`.\r\n- a second `LockDirectory` with the same directory and lock file name, from another thread within the same process, returns `true`.",
      "created_at" : "2018-02-13T11:46:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365243439",
      "id" : 365243439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T12:14:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365243439",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Also (as noted by goatpig on IRC) this function is currently not thread-safe. That's no issue right now for 0.16, I think, as this is only used by the init thread at init time, but will be with dynamic loading of wallets.",
      "created_at" : "2018-02-13T11:53:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365245110",
      "id" : 365245110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T11:56:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365245110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@MeshCollider I've added a unit test, test_LockDirectory. Can you please verify I'm testing the intended behavior of the function?",
      "created_at" : "2018-02-13T13:13:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365262878",
      "id" : 365262878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T13:13:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365262878",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "So this is interesting: my test already found a divergence between the behavior on Linux and Windows. \r\n\r\nOn Linux, \r\n- Another lock on the directory from the same thread succeeds\r\n- Another lock on the directory from a different thread within the same process succeeds\r\n\r\nOn Windows, both cases fail:\r\n```\r\ntest/util_tests.cpp(655): error: in \"util_tests/test_LockDirectory\": check LockDirectory(dirname, LOCKNAME) == true has failed [false != true]\r\ntest/util_tests.cpp(661): error: in \"util_tests/test_LockDirectory\": check threadresult == true has failed [false != true]\r\n```",
      "created_at" : "2018-02-13T14:02:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365275126",
      "id" : 365275126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T14:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365275126",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> On Windows, both cases fail:\r\n\r\nI guess this is due to inconsistent behavior of try_lock. Probably best not to rely on this behavior. Maybe we should replace:\r\n\r\n```c++\r\nlock = locks.emplace(...).first->second;\r\nif (!lock->try_lock()) {\r\n    return false;\r\n}\r\n```\r\n\r\nwith something like:\r\n\r\n```c++\r\nauto inserted = locks.emplace(...);\r\nif (inserted.second && !inserted.first.second->try_lock()) {\r\n    locks.erase(inserted.first)\r\n    return false;\r\n}\r\n```",
      "created_at" : "2018-02-13T15:17:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365297403",
      "id" : 365297403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T15:17:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365297403",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> I guess this is due to inconsistent behavior of try_lock. Probably best not to rely on this behavior. Maybe we should replace:\r\n\r\nI agree  - I think we shouldn't insert locks that aren't held into the map at all. This makes it possible to use 'already in map' as early-out.\r\n\r\nWhile implementing and testing this, I ran into something really frustrating, I found the `FILE* file = fsbridge::fopen(pathLockFile, \"a\");` destroys the lock if it already exists! (but apparently, only if the current process holds it, not if another does, so it wipes the 'we own this lock' administration)",
      "created_at" : "2018-02-13T15:25:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365299935",
      "id" : 365299935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T15:47:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365299935",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Pushed a new commit, which hopefully fixes the tests on windows:\r\n\r\n### util: Fix multiple use of LockDirectory\r\n    \r\nThis commit fixes problems with calling LockDirectory multiple times on the same directory, or from multiple threads.\r\n    \r\n- Protect the locks map using a mutex\r\n- Make sure that only locks that are successfully acquired (and when not probing) are inserted in the map\r\n- Open the lock file for appending only if we know we don't have the lock yet - The `FILE* file = fsbridge::fopen(pathLockFile, \"a\");` (reopening the file) wipes the 'we own this lock' administration.\r\n",
      "created_at" : "2018-02-13T16:00:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365311724",
      "id" : 365311724,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T16:05:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365311724",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167914138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167914138"
         }
      },
      "author_association" : "OWNER",
      "body" : "It think this explicit unlock is unnecessary now, as the lock will fall out of scope when `locks.emplace` is not called to move it to the map.",
      "commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "created_at" : "2018-02-13T16:08:47Z",
      "diff_hunk" : "@@ -375,18 +375,33 @@ int LogPrintStr(const std::string &str)\n \n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    // A map that contains all the currently held directory locks. After\n+    // successful locking, these will be held here until the global\n+    // destructor cleans them up and thus automatically unlocks them.\n+    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n+    // Protect the map with a mutex\n+    static std::mutex cs;\n+    std::unique_lock<std::mutex> ulock(cs);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;\n         }\n         if (probe_only) {\n-            lock.unlock();\n+            lock->unlock();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167914138",
      "id" : 167914138,
      "original_commit_id" : "0a671a733c4a47cc97b3b4e62bda007c71921c11",
      "original_position" : 33,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 96199130,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-13T21:02:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167914138",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167966315"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167966315"
         }
      },
      "author_association" : "NONE",
      "body" : "std::lock_guard should suffice for this",
      "commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "created_at" : "2018-02-13T18:58:14Z",
      "diff_hunk" : "@@ -375,18 +375,32 @@ int LogPrintStr(const std::string &str)\n \n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    // A map that contains all the currently held directory locks. After\n+    // successful locking, these will be held here until the global\n+    // destructor cleans them up and thus automatically unlocks them.\n+    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n+    // Protect the map with a mutex\n+    static std::mutex cs;\n+    std::unique_lock<std::mutex> ulock(cs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r167966315",
      "id" : 167966315,
      "original_commit_id" : "cb80237c757faaec394866636bea126a89b2562e",
      "original_position" : 10,
      "path" : "src/util.cpp",
      "position" : null,
      "pull_request_review_id" : 96259486,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-13T21:02:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167966315",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/8334203?v=4",
         "events_url" : "https://api.github.com/users/bpay/events{/privacy}",
         "followers_url" : "https://api.github.com/users/bpay/followers",
         "following_url" : "https://api.github.com/users/bpay/following{/other_user}",
         "gists_url" : "https://api.github.com/users/bpay/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/bpay",
         "id" : 8334203,
         "login" : "bpay",
         "organizations_url" : "https://api.github.com/users/bpay/orgs",
         "received_events_url" : "https://api.github.com/users/bpay/received_events",
         "repos_url" : "https://api.github.com/users/bpay/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/bpay/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/bpay/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/bpay"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168027391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168027391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe define TestOtherThread as a lambda instead of an external function. TestOther code would seem easier to understand in the context where it launches instead of out here. Also this would allow test case to be self contained and not need external LOCKNAME/TestOther declarations.\r\n",
      "commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "created_at" : "2018-02-13T22:46:25Z",
      "diff_hunk" : "@@ -603,4 +607,71 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static const std::string LOCKNAME = \".lock\";\n+\n+static void TestOtherThread(fs::path dirname, bool *result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168027391",
      "id" : 168027391,
      "original_commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "original_position" : 17,
      "path" : "src/test/util_tests.cpp",
      "position" : 17,
      "pull_request_review_id" : 96329108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-13T22:53:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168027391",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168091131"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168091131"
         }
      },
      "author_association" : "OWNER",
      "body" : "Conceptually I do prefer (especially) the TestOtherProcess code to be in a self-contained function instead of in-line, because the stuff runs in a separate process. Also making the separate-process test work on windows (not going to do so in this pull) would involve some factoring in that direction anyhow.\r\nIf the LOCKNAME constant is a problem it could be passed in as parameter.\r\n",
      "commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "created_at" : "2018-02-14T07:08:40Z",
      "diff_hunk" : "@@ -603,4 +607,71 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static const std::string LOCKNAME = \".lock\";\n+\n+static void TestOtherThread(fs::path dirname, bool *result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168091131",
      "id" : 168091131,
      "in_reply_to_id" : 168027391,
      "original_commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "original_position" : 17,
      "path" : "src/test/util_tests.cpp",
      "position" : 17,
      "pull_request_review_id" : 96400641,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-14T07:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168091131",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168093502"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168093502"
         }
      },
      "author_association" : "OWNER",
      "body" : "But yeah I do see the argument for making it self-contained, too. Really not sure here...\r\n\r\nEdit: however, unlike for the thread, inlining TestOtherProcess won't put the code in a context where it's easier to understand, but at the beginning of the function in ` fork()` else.",
      "commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "created_at" : "2018-02-14T07:26:29Z",
      "diff_hunk" : "@@ -603,4 +607,71 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static const std::string LOCKNAME = \".lock\";\n+\n+static void TestOtherThread(fs::path dirname, bool *result)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#discussion_r168093502",
      "id" : 168093502,
      "in_reply_to_id" : 168027391,
      "original_commit_id" : "ca4c802ac05c651559ca23c6f614c50b5f161a92",
      "original_position" : 17,
      "path" : "src/test/util_tests.cpp",
      "position" : 17,
      "pull_request_review_id" : 96403286,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/12422",
      "updated_at" : "2018-02-14T07:30:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/168093502",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
