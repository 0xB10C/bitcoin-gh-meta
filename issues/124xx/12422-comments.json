[
   {
      "author_association" : "OWNER",
      "body" : "@MeshCollider A question about this code - what is supposed to be the semantics of `LockDirectory` if it's called with the same directory multiple times? I understand that the map is just to hold on to the per-directory lock, but right now, if it happens to be called multiple times it will try to re-lock the same lock again\\*. We don't check if it already exists, and emplace will return the current object with that key.\r\n\r\nAccording to the documentation http://www.boost.org/doc/libs/master/doc/html/interprocess/synchronization_mechanisms.html#interprocess.synchronization_mechanisms.file_lock\r\n> Effects: The calling thread tries to acquire exclusive ownership of the file lock without waiting. If no other thread has exclusive or sharable ownership of the file lock, this succeeds.\r\n\r\nThe result of that will depend if the lock was taken in the same thread (? I'd expect process, in the case of interprocess locks).\r\n\r\nI think the intent of the function is to return `true` if the process acquired the lock, or already had it, and `false` if it didn't have the lock already and failed to acquire it? Correct?\r\n\r\n\\* Or will it? or will it first try to construct a new `boost::interprocess::file_lock>(pathLockFile.string().c_str())` with the directory, then discard it when it cannot be inserted? (will that constructor raise an exception if the lock already exists?)\r\n\r\n**Edit:** I've tested this, and it seems \r\n- a second `LockDirectory` with the same directory and lock file name, from the same thread, returns `true`.\r\n- a second `LockDirectory` with the same directory and lock file name, from another thread within the same process, returns `true`.",
      "created_at" : "2018-02-13T11:46:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365243439",
      "id" : 365243439,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T12:14:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365243439",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "Also (as noted by goatpig on IRC) this function is currently not thread-safe. That's no issue right now for 0.16, I think, as this is only used by the init thread at init time, but will be with dynamic loading of wallets.",
      "created_at" : "2018-02-13T11:53:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365245110",
      "id" : 365245110,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T11:56:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365245110",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "@MeshCollider I've added a unit test, test_LockDirectory. Can you please verify I'm testing the intended behavior of the function?",
      "created_at" : "2018-02-13T13:13:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365262878",
      "id" : 365262878,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T13:13:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365262878",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "So this is interesting: my test already found a divergence between the behavior on Linux and Windows. \r\n\r\nOn Linux, \r\n- Another lock on the directory from the same thread succeeds\r\n- Another lock on the directory from a different thread within the same process succeeds\r\n\r\nOn Windows, both cases fail:\r\n```\r\ntest/util_tests.cpp(655): error: in \"util_tests/test_LockDirectory\": check LockDirectory(dirname, LOCKNAME) == true has failed [false != true]\r\ntest/util_tests.cpp(661): error: in \"util_tests/test_LockDirectory\": check threadresult == true has failed [false != true]\r\n```",
      "created_at" : "2018-02-13T14:02:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365275126",
      "id" : 365275126,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T14:02:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365275126",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> On Windows, both cases fail:\r\n\r\nI guess this is due to inconsistent behavior of try_lock. Probably best not to rely on this behavior. Maybe we should replace:\r\n\r\n```c++\r\nlock = locks.emplace(...).first->second;\r\nif (!lock->try_lock()) {\r\n    return false;\r\n}\r\n```\r\n\r\nwith something like:\r\n\r\n```c++\r\nauto inserted = locks.emplace(...);\r\nif (inserted.second && !inserted.first.second->try_lock()) {\r\n    locks.erase(inserted.first)\r\n    return false;\r\n}\r\n```",
      "created_at" : "2018-02-13T15:17:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365297403",
      "id" : 365297403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T15:17:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365297403",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "OWNER",
      "body" : "> I guess this is due to inconsistent behavior of try_lock. Probably best not to rely on this behavior. Maybe we should replace:\r\n\r\nI agree  - I think we shouldn't insert locks that aren't held into the map at all. This makes it possible to use 'already in map' as early-out.\r\n\r\nWhile implementing and testing this, I ran into something really frustrating, I found the `FILE* file = fsbridge::fopen(pathLockFile, \"a\");` destroys the lock if it already exists!",
      "created_at" : "2018-02-13T15:25:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/12422#issuecomment-365299935",
      "id" : 365299935,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/12422",
      "updated_at" : "2018-02-13T15:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/365299935",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   }
]
