[
   {
      "body" : "Yes! This is indeed what I was referring to. Thanks!\r\n\r\nI'd rather the flag be a boolean (\"Skip validation of burried blocks\"), as is right now it's trivial to (accidentally) set it to 0 and not check anything, which isn't a configuration we should operate on; other people may also have opinions there.   One thing that will likely be requested is a unidirectional latch, similar to how IsInitialBlockDownload works, so that in a reorg the signatures will still be validated. (Rationale: a reorg of burred blocks should never happen, so we don't care if its slow. Having it ends any concern \"zomg what if all the hashpower goes rogue for a month!\"-- no need to debate how unlikely an attack is when we can instead make it so that it would only impact installing new nodes).\r\n\r\nI'll give your patch more review soon.",
      "created_at" : "2016-11-17T23:55:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261407827",
      "id" : 261407827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9180",
      "updated_at" : "2016-11-17T23:58:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261407827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Cool!\r\n\r\nAbout the flag: I'm flexible. I kind of like the ability to choose a time/depth/amount of work beyond just buried validation being allowed or not. It does make it easier for people to be extra conservative and increase it. Although, any non-boolean usage would be only for super-power-users and it might not be prudent to use values much lower than the default. I could make the minimum acceptable value be two weeks (nPowTargetTimespan) instead of zero. Less than one re-target interval kinda seems risky when considering possible sudden increases in rate of work. The default of being equivalent to 30 days worth of current work is longer than two re-targets, so I figured that would mitigate some risk. I guess we'd need to provide some kind of guidance on usage if it's not a boolean flag too.\r\n\r\nAbout the latch: Your rationale seems to make sense, but I don't see right now how a block would have to be re-validated again. A theoretical ginormous re-org could re-org the buried block off the active branch, or layer different work on top. But, a re-org could not make the buried block be covered by less total work. I'll dig into this more in the morning.",
      "created_at" : "2016-11-18T01:26:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261422893",
      "id" : 261422893,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9180",
      "updated_at" : "2016-11-18T01:26:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261422893",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6440430?v=3",
         "events_url" : "https://api.github.com/users/mruddy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mruddy/followers",
         "following_url" : "https://api.github.com/users/mruddy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mruddy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mruddy",
         "id" : 6440430,
         "login" : "mruddy",
         "organizations_url" : "https://api.github.com/users/mruddy/orgs",
         "received_events_url" : "https://api.github.com/users/mruddy/received_events",
         "repos_url" : "https://api.github.com/users/mruddy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mruddy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mruddy"
      }
   },
   {
      "body" : "The latch isn't about checking the same block twice,  it's the idea that if there is a big reorg our definition of \"burried\" must be wrong and so we shouldn't skip validation of anything new that shows up.\r\n\r\nE.g.  you have    blocks  \"A B C D ..... Y Z \"  where B, C, D had their scriptchecks skipped because they were burred: then later  there is a reorg to   \"A B C' D' .... Y' Z' ZZ\", C' and D' should still get scriptchecked even though they are buried.  This limits the exposure to attack to just initialization, and doesn't harm performance because we are already assuming such a large reorg will never happen.  (Also: There is less reason for miners to ever try it when it won't let them bypass validation.)  \r\n\r\nI think the latch could work like this:  Remember the greatest height the function has been called on so far, and only return burried on blocks that are greater height. Make sure to init at the current height at start. Alternatively, I believe the same could be done with total work instead which would be less subject to shenanigans: malicious peer feeds you 100k fake early blocks to cause you to have to run scriptchecks when you reorg to the real chain. Another way to avoid those kinds of shenanigans would be to guard the function with a check that the header tip has total work greater than nMinimumChainWork. \r\n\r\nActually, this last point is a protection you should put in regardless of the latching: do not return burried while the header tip has less than nMinimumChainWork.  This protects against the case where I have network isolated you and I fork the chain early and give you 'burried' junk which is all at low difficulty.\r\n\r\nAs far as configuration goes:  Every configuration option has a large maintenance cost: We need to test it-- what happens when it's set to crazy values?-- what do we do when the logic changes and the old setting can't really be applied? -- e.g. we realize 'age' is a bad metric, and want to use total work differences?.  It also has a direct cost to the user-- one more setting to worry about,  some users will misunderstand it and set it in ways that are contrary to their own interests and expectations. There are, indeed, differences in use cases-- at least a few, but generally we're in a better position to pick settings: we have a wider view of the system, we can conduct extensive tests, gather peer review.. etc.  So in principle we should think carefully before adding more than the minimally necessary options.  I _hope_ we can find settings here which are good enough for performance that the defaults will work for everyone who could otherwise run Bitcoin Core-- and any setting would just be a 'paranoid' mode the primarily exists for auditing and software testing purposes, like the checkpoints=0 setting today. :)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n",
      "created_at" : "2016-11-18T07:42:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261468418",
      "id" : 261468418,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9180",
      "updated_at" : "2016-11-18T07:42:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261468418",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "@petertodd  @maaku   I recall both of you specifically having thoughts about this kind of functionality.",
      "created_at" : "2016-11-18T07:43:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261468511",
      "id" : 261468511,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9180",
      "updated_at" : "2016-11-18T07:43:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261468511",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "body" : "Thanks for the explanation @gmaxwell. I think I understand. Updates made to incorporate all of your feedback.\r\nI removed the new config option and just left it just gated by -checkpoints.\r\nOn the latch: I call it a high water mark in the code. It's not done yet (see the TODO), but figured I'd put up what I had so far to make sure I was on the right track.\r\nAlso, minor note: I added a new GetAncestor check before GetBlockProofEquivalentTime in IsBuried. I added it for completeness although I haven't found it actually necessary while running some regtest scenarios.",
      "created_at" : "2016-11-18T19:47:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9180#issuecomment-261624534",
      "id" : 261624534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9180",
      "updated_at" : "2016-11-18T19:47:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261624534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6440430?v=3",
         "events_url" : "https://api.github.com/users/mruddy/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mruddy/followers",
         "following_url" : "https://api.github.com/users/mruddy/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mruddy/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mruddy",
         "id" : 6440430,
         "login" : "mruddy",
         "organizations_url" : "https://api.github.com/users/mruddy/orgs",
         "received_events_url" : "https://api.github.com/users/mruddy/received_events",
         "repos_url" : "https://api.github.com/users/mruddy/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mruddy/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mruddy"
      }
   }
]
