[
   {
      "body" : "Concept ACK, thanks for improving documentation around this code.\r\n",
      "created_at" : "2016-11-21T11:06:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#issuecomment-261908235",
      "id" : 261908235,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9107",
      "updated_at" : "2016-11-21T11:06:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261908235",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908233"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908233"
         }
      },
      "body" : "nit: \"ids\" instead of \"txs\" would be more consistent with other names",
      "commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "created_at" : "2016-11-21T14:47:27Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908233",
      "id" : 88908233,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 50,
      "path" : "src/test/coins_tests.cpp",
      "position" : 50,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-11-21T15:39:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908233",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908996"
         }
      },
      "body" : "Arg could be const reference",
      "commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "created_at" : "2016-11-21T14:50:38Z",
      "diff_hunk" : "@@ -211,6 +215,22 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     BOOST_CHECK(missed_an_entry);\n }\n \n+typedef std::tuple<CTransaction,CTxUndo,CCoins> TxData;\n+// Store of all necessary tx and undo data for next test\n+std::map<uint256, TxData> alltxs;\n+\n+TxData &FindRandomFrom(std::set<uint256> &txidset) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88908996",
      "id" : 88908996,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 26,
      "path" : "src/test/coins_tests.cpp",
      "position" : 26,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-11-21T15:39:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88908996",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88916229"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88916229"
         }
      },
      "body" : "Is this special case actually needed? Seems like origcoins/oldcoins will be empty in this case anyway.",
      "commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "created_at" : "2016-11-21T15:23:18Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;\n     std::set<uint256> duplicateids;\n+    std::set<uint256> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        {\n+        uint32_t randiter = insecure_rand();\n+\n+        // 19/20 txs add a new transaction\n+        if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n             unsigned int height = insecure_rand();\n+            CCoins oldcoins;\n \n-            // 1/10 times create a coinbase\n-            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n-                // 1/100 times create a duplicate coinbase\n+            // 2/20 times create a newscoinbase\n+            if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n+                // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n-                    if (coinbaseIt == coinbaseids.end()) {\n-                        coinbaseIt = coinbaseids.begin();\n-                    }\n-                    //Use same random value to have same hash and be a true duplicate\n-                    tx.vout[0].nValue = coinbaseIt->second;\n-                    assert(tx.GetHash() == coinbaseIt->first);\n-                    duplicateids.insert(coinbaseIt->first);\n+                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    // Reuse the exact same coinbase\n+                    tx = std::get<0>(txd);\n+                    // shouldn't be available for reconnection if its been duplicated\n+                    disconnectedtxs.erase(tx.GetHash());\n+\n+                    duplicateids.insert(tx.GetHash());\n                 }\n                 else {\n-                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                    coinbaseids.insert(tx.GetHash());\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n-            // 9/10 times create a regular tx\n+\n+            // 17/20 times reconnect previous or add a regular tx\n             else {\n+\n                 uint256 prevouthash;\n-                // equally likely to spend coinbase or non coinbase\n-                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n-                if (txIt == alltxids.end()) {\n-                    txIt = alltxids.begin();\n+                // 1/20 times reconnect a previously disconnected tx\n+                if (randiter % 20 == 2 && disconnectedtxs.size()) {\n+                    TxData &txd = FindRandomFrom(disconnectedtxs);\n+                    tx = std::get<0>(txd);\n+                    prevouthash = tx.vin[0].prevout.hash;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n+                        disconnectedtxs.erase(tx.GetHash());\n+                        continue;\n+                    }\n+\n+                    // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n+                    if (utxoset.count(tx.GetHash())) {\n+                        assert(CTransaction(tx).IsCoinBase());\n+                        assert(duplicateids.count(tx.GetHash()));\n+                    }\n+                    disconnectedtxs.erase(tx.GetHash());\n                 }\n-                prevouthash = *txIt;\n \n-                // Construct the tx to spend the coins of prevouthash\n-                tx.vin[0].prevout.hash = prevouthash;\n-                tx.vin[0].prevout.n = 0;\n+                // 16/20 times create a regular tx\n+                else {\n+                    TxData &txd = FindRandomFrom(utxoset);\n+                    prevouthash = std::get<0>(txd).GetHash();\n \n+                    // Construct the tx to spend the coins of prevouthash\n+                    tx.vin[0].prevout.hash = prevouthash;\n+                    tx.vin[0].prevout.n = 0;\n+                    assert(!CTransaction(tx).IsCoinBase());\n+                }\n+                // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n+                oldcoins = result[prevouthash];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                CCoins& oldcoins = result[prevouthash];\n-                oldcoins.Clear();\n+                result[prevouthash].Clear();\n \n-                // It is of particular importance here that once we spend a coinbase tx hash\n-                // it is no longer available to be duplicated (or spent again)\n-                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n-                // results in the fact that no coinbases were duplicated after they were already spent\n-                alltxids.erase(prevouthash);\n-                coinbaseids.erase(prevouthash);\n+                utxoset.erase(prevouthash);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n                 if (duplicateids.count(prevouthash))\n                     spent_a_duplicate_coinbase = true;\n \n-                assert(!CTransaction(tx).IsCoinBase());\n             }\n-            // Track this tx to possibly spend later\n-            alltxids.insert(tx.GetHash());\n-\n             // Update the expected result to know about the new output coins\n-            CCoins &coins = result[tx.GetHash()];\n-            coins.FromTx(tx, height);\n+            result[tx.GetHash()].FromTx(tx, height);\n+\n+            // Call UpdateCoins on the top cache\n+            CTxUndo undo;\n+            UpdateCoins(tx, *(stack.back()), undo, height);\n+\n+            // Track this tx and undo info to use later\n+            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+\n+            // Update the utxo set for future spends\n+            utxoset.insert(tx.GetHash());\n+        }\n+\n+        //1/20 times undo a previous transaction\n+        else if (utxoset.size()) {\n+            TxData &txd = FindRandomFrom(utxoset);\n+\n+            CTransaction &tx = std::get<0>(txd);\n+            CTxUndo &undo = std::get<1>(txd);\n+            CCoins &origcoins = std::get<2>(txd);\n+\n+            uint256 undohash = tx.GetHash();\n \n-            UpdateCoins(tx, *(stack.back()), height);\n+            // Update the expected result\n+            // Remove new outputs\n+            result[undohash].Clear();\n+            // If not coinbase restore prevout\n+            if (!tx.IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88916229",
      "id" : 88916229,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 194,
      "path" : "src/test/coins_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-11-21T15:39:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88916229",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88919480"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88919480"
         }
      },
      "body" : "Suggestion: Maybe move the `utxoset` updates here and elsewhere next to the `result` updates, since `utxoset` is essentially just a list of the keys present in the `result` map. If somebody is changing one of these, they probably need to update the other too.",
      "commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "created_at" : "2016-11-21T15:37:17Z",
      "diff_hunk" : "@@ -227,77 +247,139 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n     std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n     stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n-    // Track the txids we've used and whether they have been spent or not\n-    std::map<uint256, CAmount> coinbaseids;\n-    std::set<uint256> alltxids;\n+    // Track the txids we've used in various sets\n+    std::set<uint256> coinbaseids;\n+    std::set<uint256> disconnectedtxs;\n     std::set<uint256> duplicateids;\n+    std::set<uint256> utxoset;\n \n     for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n-        {\n+        uint32_t randiter = insecure_rand();\n+\n+        // 19/20 txs add a new transaction\n+        if (randiter % 20 < 19) {\n             CMutableTransaction tx;\n             tx.vin.resize(1);\n             tx.vout.resize(1);\n             tx.vout[0].nValue = i; //Keep txs unique unless intended to duplicate\n             unsigned int height = insecure_rand();\n+            CCoins oldcoins;\n \n-            // 1/10 times create a coinbase\n-            if (insecure_rand() % 10 == 0 || coinbaseids.size() < 10) {\n-                // 1/100 times create a duplicate coinbase\n+            // 2/20 times create a newscoinbase\n+            if (randiter % 20 < 2 || coinbaseids.size() < 10) {\n+                // 1/10 of those times create a duplicate coinbase\n                 if (insecure_rand() % 10 == 0 && coinbaseids.size()) {\n-                    std::map<uint256, CAmount>::iterator coinbaseIt = coinbaseids.lower_bound(GetRandHash());\n-                    if (coinbaseIt == coinbaseids.end()) {\n-                        coinbaseIt = coinbaseids.begin();\n-                    }\n-                    //Use same random value to have same hash and be a true duplicate\n-                    tx.vout[0].nValue = coinbaseIt->second;\n-                    assert(tx.GetHash() == coinbaseIt->first);\n-                    duplicateids.insert(coinbaseIt->first);\n+                    TxData &txd = FindRandomFrom(coinbaseids);\n+                    // Reuse the exact same coinbase\n+                    tx = std::get<0>(txd);\n+                    // shouldn't be available for reconnection if its been duplicated\n+                    disconnectedtxs.erase(tx.GetHash());\n+\n+                    duplicateids.insert(tx.GetHash());\n                 }\n                 else {\n-                    coinbaseids[tx.GetHash()] = tx.vout[0].nValue;\n+                    coinbaseids.insert(tx.GetHash());\n                 }\n                 assert(CTransaction(tx).IsCoinBase());\n             }\n-            // 9/10 times create a regular tx\n+\n+            // 17/20 times reconnect previous or add a regular tx\n             else {\n+\n                 uint256 prevouthash;\n-                // equally likely to spend coinbase or non coinbase\n-                std::set<uint256>::iterator txIt = alltxids.lower_bound(GetRandHash());\n-                if (txIt == alltxids.end()) {\n-                    txIt = alltxids.begin();\n+                // 1/20 times reconnect a previously disconnected tx\n+                if (randiter % 20 == 2 && disconnectedtxs.size()) {\n+                    TxData &txd = FindRandomFrom(disconnectedtxs);\n+                    tx = std::get<0>(txd);\n+                    prevouthash = tx.vin[0].prevout.hash;\n+                    if (!CTransaction(tx).IsCoinBase() && !utxoset.count(prevouthash)) {\n+                        disconnectedtxs.erase(tx.GetHash());\n+                        continue;\n+                    }\n+\n+                    // If this tx is already IN the UTXO, then it must be a coinbase, and it must be a duplicate\n+                    if (utxoset.count(tx.GetHash())) {\n+                        assert(CTransaction(tx).IsCoinBase());\n+                        assert(duplicateids.count(tx.GetHash()));\n+                    }\n+                    disconnectedtxs.erase(tx.GetHash());\n                 }\n-                prevouthash = *txIt;\n \n-                // Construct the tx to spend the coins of prevouthash\n-                tx.vin[0].prevout.hash = prevouthash;\n-                tx.vin[0].prevout.n = 0;\n+                // 16/20 times create a regular tx\n+                else {\n+                    TxData &txd = FindRandomFrom(utxoset);\n+                    prevouthash = std::get<0>(txd).GetHash();\n \n+                    // Construct the tx to spend the coins of prevouthash\n+                    tx.vin[0].prevout.hash = prevouthash;\n+                    tx.vin[0].prevout.n = 0;\n+                    assert(!CTransaction(tx).IsCoinBase());\n+                }\n+                // In this simple test coins only have two states, spent or unspent, save the unspent state to restore\n+                oldcoins = result[prevouthash];\n                 // Update the expected result of prevouthash to know these coins are spent\n-                CCoins& oldcoins = result[prevouthash];\n-                oldcoins.Clear();\n+                result[prevouthash].Clear();\n \n-                // It is of particular importance here that once we spend a coinbase tx hash\n-                // it is no longer available to be duplicated (or spent again)\n-                // BIP 34 in conjunction with enforcing BIP 30 (at least until BIP 34 was active)\n-                // results in the fact that no coinbases were duplicated after they were already spent\n-                alltxids.erase(prevouthash);\n-                coinbaseids.erase(prevouthash);\n+                utxoset.erase(prevouthash);\n \n                 // The test is designed to ensure spending a duplicate coinbase will work properly\n                 // if that ever happens and not resurrect the previously overwritten coinbase\n                 if (duplicateids.count(prevouthash))\n                     spent_a_duplicate_coinbase = true;\n \n-                assert(!CTransaction(tx).IsCoinBase());\n             }\n-            // Track this tx to possibly spend later\n-            alltxids.insert(tx.GetHash());\n-\n             // Update the expected result to know about the new output coins\n-            CCoins &coins = result[tx.GetHash()];\n-            coins.FromTx(tx, height);\n+            result[tx.GetHash()].FromTx(tx, height);\n+\n+            // Call UpdateCoins on the top cache\n+            CTxUndo undo;\n+            UpdateCoins(tx, *(stack.back()), undo, height);\n+\n+            // Track this tx and undo info to use later\n+            alltxs.insert(std::make_pair(tx.GetHash(),std::make_tuple(tx,undo,oldcoins)));\n+\n+            // Update the utxo set for future spends\n+            utxoset.insert(tx.GetHash());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9107#discussion_r88919480",
      "id" : 88919480,
      "original_commit_id" : "3572fea7dce3c20bfca237a53353cdf97c0f3669",
      "original_position" : 176,
      "path" : "src/test/coins_tests.cpp",
      "position" : 176,
      "pull_request_review_id" : 9465092,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9107",
      "updated_at" : "2016-11-21T15:39:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88919480",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=3",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
