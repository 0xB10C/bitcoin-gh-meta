{
   "assignee" : null,
   "assignees" : [],
   "body" : "I've been investigating performance regressions in CreateNewBlock.\r\n\r\n`addPackageTxs()` is supposed to \"fail fast\" for transactions that don't fit in a block.  However while we skip the most expensive ancestor/descendant calculations for failing transactions (generally), it turns out the other work we're doing (mostly map lookups?) can still be pretty slow.\r\n\r\nAfter trying various approaches to speed up those operations  (replacing maps with unordered_maps, changing the sort order on the ancestor score function to avoid needless re-sorting, and even getting rid of the maps altogether in favor of storing set information directly in the mempool entry), the one optimization that dominates all these is to just return earlier when the block is nearly full.\r\n\r\nSo in this PR: when we're within 4000 weight of the block being full, if we consider and fail to add 1000 transactions in a row, then give up.  I've benchmarked this as reducing the average run of CNB from ~84ms to ~63ms, with negligible difference in fees.\r\n\r\nI also added some commits that provide benchmarking of CNB when running with -debug=bench, which I thought might be generally useful/interesting.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9959/comments",
   "created_at" : "2017-03-09T01:30:41Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9959/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/9959",
   "id" : 212909341,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9959/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "number" : 9959,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/9959.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/9959",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/9959.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/9959"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "Mining: Prevent slowdown in CreateNewBlock on large mempools",
   "updated_at" : "2017-03-09T01:30:41Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/9959",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7463573?v=3",
      "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sdaftuar/followers",
      "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sdaftuar",
      "id" : 7463573,
      "login" : "sdaftuar",
      "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
      "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
      "repos_url" : "https://api.github.com/users/sdaftuar/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sdaftuar"
   }
}
