{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "This contains functionality and commits from #26711 and #25038 (see #27463).\r\nThis is built on top of #26933 - review that first.\r\n\r\n**Problem**\r\nWhen loading mempool.dat, we apply -minrelaytxfee and mempool min feerate on each transaction, meaning we'll reject transactions that may be CPFP'd by later transactions mempool.dat. Even without package relay, we can run into this problem if we are shrinking -maxmempool or raising -minrelaytxfee on a restart.\r\n\r\n**Solution**\r\nWhen loading mempool.dat, use `bypass_limits=true` and then call `TrimToSize()` at the very end.\r\n\r\nAdvantages:\r\n- We definitely keep the \"highest descendant score\" transactions if mempool min feerate rises.\r\n- It's extremely simple implementation-wise.\r\n- It's simple to keep track of what made it in and what didn't.\r\n\r\nDisadvantages:\r\n- If mempool.dat is very large, we can exceed maxmempool by quite a bit.\r\n- This won't be sufficient for ephemeral anchors (unless `bypass_limits` allows not-yet-spent anchors).\r\n\r\n**Alternatives Considered**\r\n\r\nFeel free to suggest more alternatives, but note potential problems.\r\n\r\n(1) Call `TrimToSize()` at smart intervals, e.g. when a timestamp changes (since packages are submitted with the same timestamp), or every ~25 transactions, or when we hit a certain threshold above maxmempool.\r\n(2) When a transaction fails for fee-related reasons, try again with `bypass_limits=true`, and then schedule a flush for later.\r\n(3) Create a new mempool.dat format, which contains a list of *packages* instead of transactions (package can have 1 transaction).\r\n(4) When loading, load into a buffer and use `AncestorPackage` \"packageifier\" (in #26711) to group them into packages and submit them together.\r\n\r\nTheir disadvantages:\r\n- (1, 2) The implementation is a bit hacky. Some strategies may fail.\r\n- (3, 4) The implementation is quite complex.\r\n- (1, 2) When shrinking maxmempool, we won't always pick the top transactions by descendant feerate. Since mempool min feerate depends on the feerate of the last package removed + incremental, we can end up rejecting something with feerate 1sat/vB higher than what we keep. Essentially, we have a bias for earlier transactions. This is weird behavior (and makes it quite annoying to write tests).\r\n- (1, 2) We need to add various bits of code to track things evicting each other to accurately report which transactions made it in and which didn't.\r\n- (1, 2) Doesn't work for ephemeral anchors (#26403). We could work around this by adding another flag to bypass \"unspent anchor\" checks but... also a bit ugly.\r\n\r\nWe can also pick one of the more complex solutions to implement later (I expect people are going to be interested in (3) since it's the most future-proof). This problem shouldn't be very common right now. For the most part, it doesn't really matter if the \"bottom\" of your mempool doesn't match others'.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 2,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/comments",
   "created_at" : "2023-04-17T16:28:02Z",
   "draft" : true,
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/27476",
   "id" : 1671559202,
   "labels" : [
      {
         "color" : "fef2c0",
         "default" : false,
         "description" : null,
         "id" : 164208572,
         "name" : "Mempool",
         "node_id" : "MDU6TGFiZWwxNjQyMDg1NzI=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Mempool"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "PR_kwDOABII585Of17A",
   "number" : 27476,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/27476.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27476",
      "merged_at" : null,
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/27476.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27476"
   },
   "reactions" : {
      "+1" : 0,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 0,
      "heart" : 0,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 0,
      "total_count" : 0,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27476/timeline",
   "title" : "mempool: keep CPFP'd transactions when loading from mempool.dat",
   "updated_at" : "2023-04-18T06:28:08Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27476",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
      "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
      "followers_url" : "https://api.github.com/users/glozow/followers",
      "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/glozow",
      "id" : 25183001,
      "login" : "glozow",
      "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
      "organizations_url" : "https://api.github.com/users/glozow/orgs",
      "received_events_url" : "https://api.github.com/users/glozow/received_events",
      "repos_url" : "https://api.github.com/users/glozow/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/glozow"
   }
}
