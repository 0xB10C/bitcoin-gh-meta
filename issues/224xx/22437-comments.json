[
   {
      "author_association" : "MEMBER",
      "body" : "Test output after these changes.  The slow legacy multisig tests are placed at the end.\r\n\r\n```rake\r\n$ test/functional/rpc_rawtransaction.py \r\n2021-07-13T13:42:55.022000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_u_56kycw\r\n2021-07-13T13:42:56.672000Z TestFramework (INFO): Prepare some coins for multiple *rawtransaction commands\r\n2021-07-13T13:43:04.132000Z TestFramework (INFO): Test getrawtransaction with -txindex, without -blocksonly\r\n2021-07-13T13:43:04.305000Z TestFramework (INFO): Test getrawtransaction without -txindex, without -blocksonly\r\n2021-07-13T13:43:04.447000Z TestFramework (INFO): Test getrawtransaction without -txindex, with -blocksonly\r\n2021-07-13T13:43:04.603000Z TestFramework (INFO): Test getrawtransaction with -txindex, with -blocksonly\r\n2021-07-13T13:43:04.763000Z TestFramework (INFO): Test getrawtransaction on genesis block coinbase returns an error\r\n2021-07-13T13:43:04.770000Z TestFramework (INFO): Test createrawtransaction\r\n2021-07-13T13:43:04.917000Z TestFramework (INFO): Test sendrawtransaction with missing input\r\n2021-07-13T13:43:04.969000Z TestFramework (INFO): Test sendrawtransaction with missing prevtx info (bech32)\r\n2021-07-13T13:43:05.055000Z TestFramework (INFO): Test sendrawtransaction with missing prevtx info (p2sh-segwit)\r\n2021-07-13T13:43:05.121000Z TestFramework (INFO): Test sendrawtransaction with missing prevtx info (legacy)\r\n2021-07-13T13:43:05.165000Z TestFramework (INFO): Test sendrawtransaction/testmempoolaccept with maxfeerate\r\n2021-07-13T13:43:07.578000Z TestFramework (INFO): Test decoderawtransaction\r\n2021-07-13T13:43:07.598000Z TestFramework (INFO): Test transaction version numbers\r\n2021-07-13T13:43:07.602000Z TestFramework (INFO): Test raw multisig transactions (legacy)\r\n2021-07-13T13:43:13.866000Z TestFramework (INFO): Stopping nodes\r\n2021-07-13T13:43:14.133000Z TestFramework (INFO): Cleaning up /tmp/bitcoin_func_test_u_56kycw on exit\r\n2021-07-13T13:43:14.134000Z TestFramework (INFO): Tests successful\r\n```\r\n",
      "created_at" : "2021-07-13T13:46:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879102807",
      "id" : 879102807,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3OTEwMjgwNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-13T13:46:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879102807",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22567](https://github.com/bitcoin/bitcoin/pull/22567) (test: Implicitly sync after generate* to preempt races and intermittent test failures by MarcoFalke)\n* [#20892](https://github.com/bitcoin/bitcoin/pull/20892) (tests: Run both descriptor and legacy tests within a single test invocation by achow101)\n* [#20362](https://github.com/bitcoin/bitcoin/pull/20362) (test: Implicitly sync after generate* to preempt races and intermittent test failures by MarcoFalke)\n* [#19831](https://github.com/bitcoin/bitcoin/pull/19831) (test: Check that decoderawtransaction heuristic may fail by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-07-13T19:10:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879332860",
      "id" : 879332860,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg3OTMzMjg2MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-03T21:42:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879332860",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 993189b1fe39cfc29e960ea3a20092309001fa8f very nicely done!",
      "created_at" : "2021-07-14T19:46:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880161748",
      "id" : 880161748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDE2MTc0OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-14T19:46:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880161748",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Thanks @mjdietzx!  Rebased to master following the merge of #22447, dropping the first two commits; no other change.\r\n\r\n`git range-diff 97153a7 993189b d27edf1`",
      "created_at" : "2021-07-15T08:20:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880497872",
      "id" : 880497872,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDg4MDQ5Nzg3Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-15T08:20:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880497872",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673478039"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe:\r\n\r\n```suggestion\r\n            # 2. invalid parameters - supply txid and string \"Flase\" (intentionally misspelled \"False\").\r\n```\r\n\r\n?",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-20T20:42:39Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673478039",
      "id" : 673478039,
      "line" : 148,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ3ODAzOQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 148,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 118,
      "pull_request_review_id" : 711046958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T21:02:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673481308"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This is suspicious to me. Isn't this always true given that `gottx` is in hex?",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-20T20:47:42Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673481308",
      "id" : 673481308,
      "line" : 142,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ4MTMwOA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 142,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 112,
      "pull_request_review_id" : 711046958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T21:02:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673490146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Question: Is this intentionally only on 4 nodes instead of 6? If it is, maybe `sync_peers` should be called slightly differently not to give the wrong impression.",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-20T21:01:05Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673490146",
      "id" : 673490146,
      "line" : 78,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5MDE0Ng==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 78,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 35,
      "pull_request_review_id" : 711046958,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T21:02:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673496593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not originally your code, but variables named `txid` and `txId` are very easy to confuse, I think.",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-20T21:11:19Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673496593",
      "id" : 673496593,
      "line" : 111,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5NjU5Mw==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 111,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 81,
      "pull_request_review_id" : 711070104,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T21:11:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673498569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I would expect `txId` instead of `txid` here. Or can you explain this please?",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-20T21:14:44Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673498569",
      "id" : 673498569,
      "line" : 146,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5ODU2OQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 146,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 116,
      "pull_request_review_id" : 711072535,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-20T21:14:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675615674"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it necessary here to have `node[2]` create 1 block first? ",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-23T14:38:02Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675615674",
      "id" : 675615674,
      "line" : 88,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYxNTY3NA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 88,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 58,
      "pull_request_review_id" : 713795683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-23T15:09:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675626356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "+1. Maybe something like `txid1`, `txid2`? ",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-23T14:52:33Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675626356",
      "id" : 675626356,
      "in_reply_to_id" : 673496593,
      "line" : 111,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYyNjM1Ng==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 111,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 81,
      "pull_request_review_id" : 713795683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-23T15:09:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675629014"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This doesn't seem like `getrawtransaction()` tests. Maybe test `5` and `6` should be moved into `createrawtransaction()` test group? ",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-23T14:56:01Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\n+\n+            # 3. invalid parameters - supply txid and empty array\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+\n+            # 4. invalid parameters - supply txid and empty dict\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+\n+            # 5. invalid parameters - sequence out of range",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675629014",
      "id" : 675629014,
      "line" : 157,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYyOTAxNA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 157,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 127,
      "pull_request_review_id" : 713795683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-23T15:09:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675632466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I am not sure whether having two `txid` and `txId` transactions helps here, given both of them are confirmed. Because of that we are also not getting a test for only `mempool` transactions.\r\n\r\nSo maybe we can have a `txid` confirmed in a block, and then have `txId` in the mempool to check for both the scenario?\r\n\r\nWill make the purpose of two transactions clear.\r\n\r\nAlso, the names are confusing, something more distinct would be helpful.   \r\n\r\n  ",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-07-23T15:00:56Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675632466",
      "id" : 675632466,
      "line" : 112,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYzMjQ2Ng==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 112,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 82,
      "pull_request_review_id" : 713795683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-07-23T15:09:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK",
      "created_at" : "2021-07-24T20:04:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-886105206",
      "id" : 886105206,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII58400OR2",
      "performed_via_github_app" : null,
      "updated_at" : "2021-07-24T20:04:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886105206",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684646398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Question: Is this intentionally only on 4 nodes instead of 6?\r\n\r\nYes, as only nodes 0 to 3 have a mempool. The last two nodes are -blocksonly and `sync_mempools()` won't work on them.  Added a comment in efe13c3b77 to clarify this.\r\n\r\n```diff\r\n-        self.sync_mempools()\r\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool\r\n```\r\n",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-07T15:37:26Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684646398",
      "id" : 684646398,
      "in_reply_to_id" : 673490146,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY0NjM5OA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 78,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724828134,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T16:42:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684648106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I agree that it's unclear. Changed to the following in b0bf8c996034a4:\r\n```diff\r\n-            # 6. invalid parameters - supply txid and string \"Flase\"\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\r\n+            # 6. invalid parameters - supply txid and invalid boolean values (strings) for verbose\r\n+            for value in [\"True\", \"False\"]:\r\n+                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txId, verbose=value)\r\n```\r\n",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-07T15:52:41Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684648106",
      "id" : 684648106,
      "in_reply_to_id" : 673478039,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY0ODEwNg==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 148,
      "original_position" : 118,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724829142,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T16:43:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good catch! This illustrates why using `txid` and `txId` variable names in the same test isn't ideal. Fixed in commit \"Test src/validation::GetTransaction() with -blocksonly\".",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-08-07T16:40:38Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116",
      "id" : 684653116,
      "in_reply_to_id" : 673498569,
      "line" : 146,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY1MzExNg==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 146,
      "original_position" : 116,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 116,
      "pull_request_review_id" : 724831986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-07T16:40:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684668654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good idea! Done in a3d8f790633b89a.",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-07T19:24:10Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\n+\n+            # 3. invalid parameters - supply txid and empty array\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+\n+            # 4. invalid parameters - supply txid and empty dict\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+\n+            # 5. invalid parameters - sequence out of range",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684668654",
      "id" : 684668654,
      "in_reply_to_id" : 675629014,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY2ODY1NA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 157,
      "original_position" : 127,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724841082,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T16:46:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684669101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I initially planned to respond that this was out of scope, then saw this very issue had tripped me up (https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116). Agree! Done in 10a3db049ce2858 when the name is reused or reassigned in the same test function. Doing this also revealed an unused `txId` assignment; fixed.",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-07T19:29:25Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684669101",
      "id" : 684669101,
      "in_reply_to_id" : 673496593,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY2OTEwMQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 111,
      "original_position" : 81,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724841291,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T16:41:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684672025"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Well spotted! Thanks to the transactions in the next lines, it's not needed and might be an example of the accumulated layers of change in this test file. Removed in commit 8f5c6ba69000b  with an explanation in the commit message.",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-07T20:02:06Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684672025",
      "id" : 684672025,
      "in_reply_to_id" : 675615674,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3MjAyNQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 88,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724842779,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T16:45:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684680006"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Interesting.  We use and need all three transactions, AFAICT.  Updated the names in the last commit to txid, txid2, and txid3.  The test still passes if we sync_blocks() for the second and third transactions instead of sync_all(), but I'd rather not mess with this here.",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-08-07T21:32:39Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684680006",
      "id" : 684680006,
      "in_reply_to_id" : 675632466,
      "line" : 112,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY4MDAwNg==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 112,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 82,
      "pull_request_review_id" : 724846983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-07T21:32:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684752491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Took a fresh look this morning, good call!  The first conditional in `CTransactionRef GetTransaction()` was not necessarily being exercised by the tests:\r\n```c++\r\n    if (mempool && !block_index) {\r\n        CTransactionRef ptx = mempool->get(hash);\r\n        if (ptx) return ptx;\r\n    }\r\n```\r\nAdded this assert in 7f7e64e30376a2 that covers it:\r\n```python\r\n             # 1. valid parameters - supply txid along with various valid values for verbose\r\n+            if n == 0 or n == 3:\r\n+                # test with a tx in mempool, with and without -txindex\r\n+                tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.1)\r\n+                self.nodes[n].getrawtransaction(tx_in_mempool)\r\n```\r\nVerified by removing that code in GetTransaction() to ensure the new assert fails without it and passes with it.",
      "commit_id" : "4a3f0cbb298d9860285ee381ce9ad1c2fc6aaf60",
      "created_at" : "2021-08-08T10:31:17Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684752491",
      "id" : 684752491,
      "in_reply_to_id" : 675632466,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1MjQ5MQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 111,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724886622,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-09T08:21:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684755680"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This assert tests that the `in_active_chain` field is absent as expected when the blockhash argument is not passed...see `src/rpc/rawtransaction.cpp::getrawtransaction()` or `bitcoin-cli help getrawtransaction`",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-08-08T10:57:45Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684755680",
      "id" : 684755680,
      "in_reply_to_id" : 673481308,
      "line" : 142,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1NTY4MA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 142,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 112,
      "pull_request_review_id" : 724888821,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T11:05:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to make myself more clear: L140 ends with `['hex']` so presumably `gottx` is a string, so testing on L142 whether `gottx` does not contain `in_active_chain` seems to be always true.\r\n\r\nBut maybe I just didn't get your reply. Anyway, if I got it wrong, feel free to just ignore my comment.",
      "commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "created_at" : "2021-08-08T12:38:15Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854",
      "id" : 684768854,
      "in_reply_to_id" : 673481308,
      "line" : 142,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc2ODg1NA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 142,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 112,
      "pull_request_review_id" : 724898086,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T12:38:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/58662979?v=4",
         "events_url" : "https://api.github.com/users/kiminuo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kiminuo/followers",
         "following_url" : "https://api.github.com/users/kiminuo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kiminuo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kiminuo",
         "id" : 58662979,
         "login" : "kiminuo",
         "node_id" : "MDQ6VXNlcjU4NjYyOTc5",
         "organizations_url" : "https://api.github.com/users/kiminuo/orgs",
         "received_events_url" : "https://api.github.com/users/kiminuo/received_events",
         "repos_url" : "https://api.github.com/users/kiminuo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kiminuo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kiminuo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684785050"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It seems to me that `sync_peers()` is not doing anything and all the nodes get the blocks with `generate()`. This is probably because `generate()` already broadcasts the blocks in p2p. ",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-08T14:38:54Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684785050",
      "id" : 684785050,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc4NTA1MA==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 116,
      "original_position" : 87,
      "original_start_line" : 116,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724909753,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-08T16:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased due to #22510 and updated with the excellent review feedback from @kiminuo and @rajarshimaitra (thanks!) \r\n\r\nCommit-by-commit changes (re-pushed a second time for https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854):\r\n\r\n`git range-diff db94d74 d27edf1 7f7e64e`\r\n\r\nThank you @mjdietzx, @lsilva01, and @rajarshimaitra for the ACKs. Would you mind re-ACKing?\r\n  ",
      "created_at" : "2021-08-08T15:29:29Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894813926",
      "id" : 894813926,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII5841Vcbm",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-08T16:49:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894813926",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684792766"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thank you for re-explaining. You are right! Fixing. Thank you!",
      "commit_id" : "afb4eab7a3d309c34357aa6ac54b03bebd15adfb",
      "created_at" : "2021-08-08T15:39:53Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684792766",
      "id" : 684792766,
      "in_reply_to_id" : 673481308,
      "line" : 145,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc5Mjc2Ng==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 145,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : 115,
      "pull_request_review_id" : 724915007,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T15:39:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684799515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Updated commit 4e83843f03dad710a0fad7a706e2618a7a69a6b3 to fix. Thanks @kiminuo!",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-08T16:33:41Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684799515",
      "id" : 684799515,
      "in_reply_to_id" : 673481308,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc5OTUxNQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 145,
      "original_position" : 112,
      "original_start_line" : null,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724919401,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-08-08T16:33:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@rajarshimaitra I agree, bringing together the various related tests shows that we can simplify them. I'll look at integrating the following diff based on your suggestion, which works for me, into the changes. \r\n\r\n<details><summary>code diff</summary><p>\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_rawtransaction.py b/test/functional/rpc_rawtransaction.py\r\nindex 84210d3a03..cc6324d9fc 100755\r\n--- a/test/functional/rpc_rawtransaction.py\r\n+++ b/test/functional/rpc_rawtransaction.py\r\n@@ -101,19 +101,9 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             self.raw_multisig_transaction_legacy_tests()\r\n \r\n     def getrawtransaction_tests(self):\r\n-        addr = self.nodes[1].getnewaddress()\r\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\r\n-        self.generate_and_sync(node=0, blocks=1)\r\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\r\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\r\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\r\n-        txid2 = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\r\n-        self.generate_and_sync(node=0, blocks=1)\r\n-\r\n         # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\r\n-        txid3 = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n+        hex = self.nodes[2].getrawtransaction(tx)\r\n         block1, block2 = self.nodes[2].generate(2)\r\n-        self.sync_peers()\r\n \r\n         err_msg = (\r\n             \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\r\n@@ -134,47 +124,44 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             if n == 0 or n == 5:\r\n                 # with -txindex\r\n                 for verbose in [None, 0, False]:\r\n-                    assert_equal(self.nodes[n].getrawtransaction(txid2, verbose), rawTxSigned['hex'])\r\n+                    assert_equal(self.nodes[n].getrawtransaction(tx, verbose), hex)\r\n                 for verbose in [1, True]:\r\n-                    gottx1 = self.nodes[n].getrawtransaction(txid2, verbose)\r\n-                    assert_equal(gottx1['hex'], rawTxSigned['hex'])\r\n-                    assert 'in_active_chain' not in gottx1.keys()\r\n-                    gottx2 = self.nodes[n].getrawtransaction(txid=txid3, verbose=verbose)\r\n-                    assert_equal(gottx2['txid'], txid3)\r\n-                    assert 'in_active_chain' not in gottx2.keys()\r\n+                    gottx = self.nodes[n].getrawtransaction(tx, verbose)\r\n+                    assert_equal(gottx['hex'], hex)\r\n+                    assert 'in_active_chain' not in gottx.keys()\r\n             else:\r\n                 # without -txindex\r\n                 for verbose in [None, 0, False, 1, True]:\r\n-                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid2, verbose)\r\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, tx, verbose)\r\n \r\n             # 2. invalid parameters - supply txid and invalid boolean values (strings) for verbose\r\n             for value in [\"True\", \"False\"]:\r\n-                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txid2, verbose=value)\r\n+                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=tx, verbose=value)\r\n \r\n             # 3. invalid parameters - supply txid and empty array\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid2, [])\r\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, tx, [])\r\n \r\n             # 4. invalid parameters - supply txid and empty dict\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid2, {})\r\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, tx, {})\r\n \r\n             # 5. with block hash\r\n             # We should be able to get the raw transaction by providing the correct block\r\n-            gottx = self.nodes[n].getrawtransaction(txid=txid3, verbose=True, blockhash=block1)\r\n-            assert_equal(gottx['txid'], txid3)\r\n+            gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\r\n+            assert_equal(gottx['txid'], tx)\r\n             assert_equal(gottx['in_active_chain'], True)\r\n             # We should not get the tx if we provide an unrelated block\r\n-            assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=block2)\r\n+            assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[n].getrawtransaction, txid=tx, blockhash=block2)\r\n             # An invalid block hash should raise the correct errors\r\n-            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=True)\r\n-            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=\"foobar\")\r\n-            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=\"abcd1234\")\r\n+            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[n].getrawtransaction, txid=tx, blockhash=True)\r\n+            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=\"foobar\")\r\n+            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=\"abcd1234\")\r\n             foo = \"ZZZ0000000000000000000000000000000000000000000000000000000000000\"\r\n-            assert_raises_rpc_error(-8, f\"parameter 3 must be hexadecimal string (not '{foo}')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=foo)\r\n+            assert_raises_rpc_error(-8, f\"parameter 3 must be hexadecimal string (not '{foo}')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=foo)\r\n             bar = \"0000000000000000000000000000000000000000000000000000000000000000\"\r\n-            assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=bar)\r\n+            assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[n].getrawtransaction, txid=tx, blockhash=bar)\r\n             # Undo the blocks and verify that \"in_active_chain\" is false.\r\n             self.nodes[n].invalidateblock(block1)\r\n-            gottx = self.nodes[n].getrawtransaction(txid=txid3, verbose=True, blockhash=block1)\r\n+            gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\r\n             assert_equal(gottx['in_active_chain'], False)\r\n             self.nodes[n].reconsiderblock(block1)\r\n             assert_equal(self.nodes[n].getbestblockhash(), block2)\r\n```\r\n</p></details>\r\n\r\n> It if txindex is on, the blockhash searching won't take place even if it's provided. It seems to me that this particular behaviour is not being tested. I am also not sure what can be a possible approach to test this.\r\n\r\nAt first glance I don't see a straightforward way to test which code path is taken in that case with the current code, as there is no observable difference in behavior other than hopefully in performance, for which a benchmark could be added.",
      "created_at" : "2021-08-08T17:13:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894827564",
      "id" : 894827564,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII5841Vfws",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T08:20:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894827564",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684809613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done",
      "commit_id" : "c2d79955a833aec09ad2f7a064509bcdcdbd1cb0",
      "created_at" : "2021-08-08T18:07:28Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684809613",
      "id" : 684809613,
      "in_reply_to_id" : 684785050,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDgwOTYxMw==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 116,
      "original_position" : 87,
      "original_start_line" : 116,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 724925423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-08T18:07:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@rajarshimaitra I've appended a commit with you as the author.  Let me know if the name and email `codeShark149 <rajarshi149@gmail.com>` are correct.\r\n",
      "created_at" : "2021-08-08T18:11:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894834554",
      "id" : 894834554,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII5841Vhd6",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-08T18:11:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894834554",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "It could be a good to reorder some of these commits so we're not making one change, then changing the same lines again straight after. For example, in https://github.com/bitcoin/bitcoin/pull/22437/commits/10a3db049ce2858b4885472314567d05d6cc75cb you rename variables i.e `tx`, `txId` to `txid2`, `txid3` etc. However in the following commit (https://github.com/bitcoin/bitcoin/pull/22437/commits/c2d79955a833aec09ad2f7a064509bcdcdbd1cb0), a bunch of those end up being renamed again, i.e `txid3` and `txid2` back to `tx`.",
      "created_at" : "2021-08-09T07:14:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895003637",
      "id" : 895003637,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII5841WKv1",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T07:14:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895003637",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@fanquake yes, that's better. Reordered the last three commits and reduced the diff slightly in others.",
      "created_at" : "2021-08-09T10:00:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895096970",
      "id" : 895096970,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII5841WhiK",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T10:00:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895096970",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r685064629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Moving the in-mempool transaction tests commit after the simplification commit revealed that removing the `self.sync_peers()` would be flakey without the presence of the in-mempool transaction. This could be fragile, so no longer removing it in the simplification commit.",
      "commit_id" : "4a3f0cbb298d9860285ee381ce9ad1c2fc6aaf60",
      "created_at" : "2021-08-09T10:04:25Z",
      "diff_hunk" : "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r685064629",
      "id" : 685064629,
      "in_reply_to_id" : 684785050,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA2NDYyOQ==",
      "original_commit_id" : "d27edf1d85f44c58029e0197251cca56873b860f",
      "original_line" : 106,
      "original_position" : 87,
      "original_start_line" : 116,
      "path" : "test/functional/rpc_rawtransaction.py",
      "position" : null,
      "pull_request_review_id" : 725211679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-08-09T10:15:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "tACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\r\n\r\n> @rajarshimaitra I've appended a commit with you as the author. Let me know if the name and email codeShark149 <rajarshi149@gmail.com> are correct.\r\n\r\nThat seems correct. That's very generous of you. You did the work, i just pointed fingers. \r\n\r\n>At first glance I don't see a straightforward way to test which code path is taken in that case with the current code, as there is no observable difference in behavior other than hopefully in performance, for which a benchmark could be added.\r\n\r\nYes that occurred to me too. There is no observational difference between the two paths. So we won't know which one is taken. Probably something for a future improvement. Maybe all it needs is one debug log in the core logic, and with that we can check in the test.   ",
      "created_at" : "2021-08-09T17:32:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895407401",
      "id" : 895407401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
      "node_id" : "IC_kwDOABII5841XtUp",
      "performed_via_github_app" : null,
      "updated_at" : "2021-08-09T17:32:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895407401",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/rajarshimaitra/events{/privacy}",
         "followers_url" : "https://api.github.com/users/rajarshimaitra/followers",
         "following_url" : "https://api.github.com/users/rajarshimaitra/following{/other_user}",
         "gists_url" : "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/rajarshimaitra",
         "id" : 36541669,
         "login" : "rajarshimaitra",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/rajarshimaitra/orgs",
         "received_events_url" : "https://api.github.com/users/rajarshimaitra/received_events",
         "repos_url" : "https://api.github.com/users/rajarshimaitra/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/rajarshimaitra/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/rajarshimaitra"
      }
   }
]
