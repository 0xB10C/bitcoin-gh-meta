[
   {
      "author_association" : "MEMBER",
      "body" : "Here is a categorized list of all the commits:\r\n\r\n### Refactors (https://github.com/sipa/bitcoin/compare/1d94d90a3b...d6ea44640e) [+49 -39]:\r\n * 0daa3708e2 **scripted-diff: put ECDSA in name of signature functions**: In preparation for adding Schnorr versions of `CheckSig`, `VerifySignature`, and `ComputeEntry`, give them an ECDSA specific name. \r\n * 135f12ad38 **refactor: rename scriptPubKey in VerifyWitnessProgram to exec_script**: The old name is confusing, as it doesn't store a scriptPubKey, but the actually executed script. \r\n * f4d16cf644 **refactor: keep spent outputs in PrecomputedTransactionData**: A BIP-341 signature message may commit to the scriptPubKeys and amounts of all spent outputs (including other ones than the input being signed for spends), so keep them available to signature hashing code. \r\n\r\n### BIP340/341/342 consensus rules (https://github.com/sipa/bitcoin/compare/d6ea44640e...512fd57eff) [+670 -51]:\r\n * 60ce12334f **Add TaggedHash function (BIP 340)**: This adds the TaggedHash function as defined by BIP340 to the hash module, which is used in BIP340 and BIP341 to produce domain-separated hashes. \r\n * cfb921c33a **Implement Taproot signature hashing (BIP 341)**: This implements the new sighashing scheme from BIP341, with all relevant whole-transaction values precomputed once and cached. \r\n * 603d01a2ef **Support for Schnorr signatures and integration in SignatureCheckers (BIP 340)**: This enables the schnorrsig module in libsecp256k1, adds the relevant types and functions to src/pubkey, as well as in higher-level `SignatureChecker` classes. The (verification side of the) BIP340 test vectors is also added. \r\n * 04f843a5d0 **Implement Taproot validation (BIP 341)**: This includes key path spending and script path spending, but not the Tapscript execution implementation (leaf 0xc0 remains unemcumbered in this commit). \r\n * 342c55479f **Use ScriptExecutionData to pass through annex hash**: Instead of recomputing the annex hash every time a signature is verified, compute it once and cache it in a new ScriptExecutionData structure. \r\n * 4a4600f572 **Implement Tapscript script validation rules (BIP 342)**: This adds a new `SigVersion::TAPSCRIPT`, makes the necessary interpreter changes to make it implement BIP342, and uses them for leaf version 0xc0 in Taproot script path spends. \r\n\r\n### Regtest activation and policy (https://github.com/sipa/bitcoin/compare/512fd57eff...d812749453) [+98 -8]:\r\n * 51810b0b88 **Make Taproot spends standard + policy limits**: This adds a `TxoutType::WITNESS_V1_TAPROOT` for P2TR outputs, and permits spending them in standardness rules. No corresponding `CTxDestination` is added for it, as that isn't needed until we want wallet integration. The taproot validation flags are also enabled for mempool transactions, and standardness rules are added (stack item size limit, no annexes). \r\n * dd31d1cae2 **Activate Taproot/Tapscript on regtest (BIP 341, BIP 342)**: Define a versionbits-based activation for the new consensus rules on regtest. No activation or activation mechanism is defined for testnet or mainnet. \r\n\r\n### Tests (https://github.com/sipa/bitcoin/compare/d812749453...80efcba5e7ad84f68f5cd59c05fc87134fc9fb69) [+1887 -28]:\r\n * f9eb7dfcbb **[TESTS] Add BIP340 Schnorr signature support to test framework**: Add a pure Python implementation of BIP340 signing and verification, tested against the BIP's test vectors. \r\n * 1caf63e42c **[TESTS] Functional tests for Schnorr/Taproot/Tapscript**: A large functional test is added that automatically generates random transactions which exercise various aspects of the new rules, and verifies they are accepted into the mempool (when appropriate), and correctly accepted/rejected in (Python-constructed) blocks. \r\n * 80efcba5e7 **[TESTS] Add generic qa-asset-based script verification unit test**: This adds a unit test that does generic script verification tests, with positive/negative witnesses/scriptsigs, under various flags. The test data is large (several MB) so it's stored in the qa-assets repo. \r\n\r\n<sub>`PREV=\"$(git rev-parse HEAD)\"; git log --oneline upstream/master..HEAD | while read C L; do if [ \"d${L:0:14}\" == \"d--- [TAPROOT] \" ]; then if [ \"d$PREV\" != \"\" ]; then git diff --shortstat $C..$PREV | (read _ _ _ ADD _ DEL _; echo \"### ${L:14:-4} (https://github.com/sipa/bitcoin/compare/$C...$PREV) [+$ADD -$DEL]:\"); echo; fi; PREV=$C; PREVL=$L; else echo -n \" * $C **${L}**: \"; git show \"$C\" --format=\"%b\" -s | awk '/^$/{exit} 1' | tr $'\\n' ' '; echo; fi; done | tac`</sub>\r\n",
      "created_at" : "2020-09-14T05:15:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-691815830",
      "id" : 691815830,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MTgxNTgzMA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-25T03:41:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/691815830",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487713900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487713900"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Does it make sense to remove the requirement for the `-enable-experimental` flag to build the schnorrsig module?",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-14T07:44:52Z",
      "diff_hunk" : "@@ -1645,7 +1645,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487713900",
      "id" : 487713900,
      "line" : 1648,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxMzkwMA==",
      "original_commit_id" : "111be541b5076e87bf800bc4769685d9b2340aed",
      "original_line" : 1648,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 5,
      "pull_request_review_id" : 487496838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487713900",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487717197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487717197"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was [discussed in the previous PR](https://github.com/bitcoin/bitcoin/pull/17977/files#r475990462).\r\n\r\nluke-jr\r\n> Should this be non-experimental before merging?\r\n\r\ngmaxwell\r\n> I don't think so: It probably shouldn't be marked non-experimental until after it deployed for activation in Bitcoin because it wouldn't be good to encourage third party users of it while it is still easy to make incompatible changes in Bitcoin (e.g. as was just done. :) )\r\n\r\nsipa\r\n> Or, maybe more likely: the API in libsecp256k1 may change still significantly in the near future (e.g. support for variable-length messages, batch validation, ...) even after we treat the scheme itself final.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-14T07:50:45Z",
      "diff_hunk" : "@@ -1645,7 +1645,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487717197",
      "id" : 487717197,
      "in_reply_to_id" : 487713900,
      "line" : 1648,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNzE5Nw==",
      "original_commit_id" : "111be541b5076e87bf800bc4769685d9b2340aed",
      "original_line" : 1648,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "configure.ac",
      "position" : 5,
      "pull_request_review_id" : 487501076,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487717197",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jnewbery There are only two of them. The variable name one is very small, and the ECDSA naming one isn't really a standalone useful change. I think that one could be changed into a scripted-diff though.",
      "created_at" : "2020-09-14T08:34:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-691907545",
      "id" : 691907545,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MTkwNzU0NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T08:34:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/691907545",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487880593"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487880593"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "maybe move that block down into the one below, then you don't have to check `stack.size() >= 2` twice",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-14T12:42:00Z",
      "diff_hunk" : "@@ -237,6 +239,36 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check policy limits for Taproot spends:\n+        // - MAX_STANDARD_TAPSCRIPT_STACK_ITEM_SIZE limit for stack item size\n+        // - No annexes\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !p2sh) {\n+            // Taproot spend (non-P2SH-wrapped, version 1, witness program size 32; see BIP 341)\n+            auto stack = MakeSpan(tx.vin[i].scriptWitness.stack);\n+            if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r487880593",
      "id" : 487880593,
      "line" : 249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg4MDU5Mw==",
      "original_commit_id" : "111be541b5076e87bf800bc4769685d9b2340aed",
      "original_line" : 249,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : 36,
      "pull_request_review_id" : 487712003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487880593",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/425166?v=4",
         "events_url" : "https://api.github.com/users/flack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/flack/followers",
         "following_url" : "https://api.github.com/users/flack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/flack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/flack",
         "id" : 425166,
         "login" : "flack",
         "node_id" : "MDQ6VXNlcjQyNTE2Ng==",
         "organizations_url" : "https://api.github.com/users/flack/orgs",
         "received_events_url" : "https://api.github.com/users/flack/received_events",
         "repos_url" : "https://api.github.com/users/flack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/flack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/flack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/flack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "concept ACK, just confirming for now this PR is identical to the old PR #17977 at https://github.com/bitcoin/bitcoin/pull/19953/commits/111be541b5076e87bf800bc4769685d9b2340aed",
      "created_at" : "2020-09-14T14:14:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692080594",
      "id" : 692080594,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjA4MDU5NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T14:14:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692080594",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r488066922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488066922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I would rather not, because if later changes do add supported annexes, it'll need to revert to this flow anyway (where the branch dealing with annexes pops it from the stack, and the next if looks at the stack size after removing it).",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-14T16:30:54Z",
      "diff_hunk" : "@@ -237,6 +239,36 @@ bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n                     return false;\n             }\n         }\n+\n+        // Check policy limits for Taproot spends:\n+        // - MAX_STANDARD_TAPSCRIPT_STACK_ITEM_SIZE limit for stack item size\n+        // - No annexes\n+        if (witnessversion == 1 && witnessprogram.size() == WITNESS_V1_TAPROOT_SIZE && !p2sh) {\n+            // Taproot spend (non-P2SH-wrapped, version 1, witness program size 32; see BIP 341)\n+            auto stack = MakeSpan(tx.vin[i].scriptWitness.stack);\n+            if (stack.size() >= 2 && !stack.back().empty() && stack.back()[0] == ANNEX_TAG) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r488066922",
      "id" : 488066922,
      "in_reply_to_id" : 487880593,
      "line" : 249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA2NjkyMg==",
      "original_commit_id" : "111be541b5076e87bf800bc4769685d9b2340aed",
      "original_line" : 249,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/policy/policy.cpp",
      "position" : 36,
      "pull_request_review_id" : 487947905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488066922",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Reordered commits a bit, replaced the ECDSA naming one with a scripted diff, and organized the commits in sections. The end state is identical to what it was before.",
      "created_at" : "2020-09-14T18:42:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692240577",
      "id" : 692240577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjI0MDU3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T18:57:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692240577",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Could the first 2 commits be done as separate PRs? That should slightly reduce the size of this one",
      "created_at" : "2020-09-14T20:37:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692300062",
      "id" : 692300062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjMwMDA2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-14T20:37:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692300062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@benthecarman That was suggested earlier by @jnewbery. I think splitting off 28 trivial lines of refactors from a 2500-line PR (though 1700 are tests) isn't going to change much. The refactors that were nontrivial and useful as standalone improvements have been split off already and merged (see history of the previous PR).",
      "created_at" : "2020-09-14T20:39:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-692301083",
      "id" : 692301083,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MjMwMTA4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T16:23:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692301083",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I added a unit test too now, with test vectors that were extracted from 20000 runs of the feature_taproot.py test (with the largest tests removed, and larger groups of inputs per transaction), minimized using libfuzzer's coverage tracking to 105.\r\n\r\nThe code for doing so is in https://github.com/sipa/bitcoin/commits/taproot-test-creation. I'll clean that code up a bit and integrate some parts of it in the normal Python test, so it's easier to recreate these vectors if improvements to the Python test are made.",
      "created_at" : "2020-09-16T04:08:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-693157316",
      "id" : 693157316,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzE1NzMxNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T04:10:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693157316",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I was surprised to learn that this was a 2500-line PR. By directory:\r\n\r\n- `/test/functional` - 1790 lines\r\n- `/src/test` - 134 lines\r\n- `/src` (exc `test`) - 817 lines\r\n\r\nSo the majority of code in this PR is tests (which is a good thing!)\r\n\r\nI agree with sipa that it's not necessary to split off the first two commits (especially now that they're separated to the top of the branch). Equally no harm in doing so if that'd reduce the workload.",
      "created_at" : "2020-09-16T08:52:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-693269062",
      "id" : 693269062,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzI2OTA2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T08:52:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693269062",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "No code changes aside from unit test commit https://github.com/bitcoin/bitcoin/pull/19953/commits/9673fd9999a7fef4bfc5b074fa1861938042df10",
      "created_at" : "2020-09-16T11:35:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-693347931",
      "id" : 693347931,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzM0NzkzMQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-16T11:35:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693347931",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19792 (rpc: Add dumpcoinstats by fjahr)\n* #19521 (Coinstats Index (without UTXO set hash) by fjahr)\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #18788 (tests: Update more tests to work with descriptor wallets by achow101)\n* #16546 (External signer support - Wallet Box edition by Sjors)\n* #13533 ([tests] Reduced number of validations in tx_validationcache_tests by lucash-dev)\n* #13062 (Make script interpreter independent from storage type CScript by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-09-19T13:34:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-695214236",
      "id" : 695214236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NTIxNDIzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-23T22:55:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/695214236",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491588125"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491588125"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`VerifySchnorr` has `assert(sigbytes.size() == 64);` so false won't be returned. Should either change this comment or change the assertion to `if (sigbytes.size() != 64) return false;`",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-19T22:57:31Z",
      "diff_hunk" : "@@ -206,6 +207,24 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    /** Construct an x-only pubkey from exactly 32 bytes. */\n+    XOnlyPubKey(Span<const unsigned char> input);\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not exactly 64 bytes, false is returned.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491588125",
      "id" : 491588125,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU4ODEyNQ==",
      "original_commit_id" : "beed0764df14791e33f60636fff06d50f067ea9d",
      "original_line" : 220,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : null,
      "pull_request_review_id" : 492160493,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491588125",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491638161"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491638161"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: would be easier for people to check if this was correct if they were ordered the same as the BIP",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-20T01:08:55Z",
      "diff_hunk" : "@@ -328,3 +331,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||\n+            opcode == 0x8a || opcode == 0x8d || opcode == 0x8e ||\n+            (opcode >= 0x7e && opcode <= 0x81) || (opcode >= 0x83 && opcode <= 0x86) ||\n+            (opcode >= 0x95 && opcode <= 0x99) || (opcode >= 0xbb && opcode <= 0xfe));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491638161",
      "id" : 491638161,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYzODE2MQ==",
      "original_commit_id" : "94844a655f12f598596ca7a35b878349de640e7b",
      "original_line" : 340,
      "original_position" : 20,
      "original_start_line" : 337,
      "path" : "src/script/script.cpp",
      "position" : null,
      "pull_request_review_id" : 492164684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491638161",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491638297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491638297"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: when referring to other op codes in the error messages they are normally prefixed with `OP_`, to be consistent this could be changed to `OP_SUCCESSx reserved for...`",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-20T01:10:59Z",
      "diff_hunk" : "@@ -75,6 +75,10 @@ std::string ScriptErrorString(const ScriptError serror)\n             return \"Witness version reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION:\n             return \"Taproot version reserved for soft-fork upgrades\";\n+        case SCRIPT_ERR_DISCOURAGE_OP_SUCCESS:\n+            return \"SUCCESSx reserved for soft-fork upgrades\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r491638297",
      "id" : 491638297,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYzODI5Nw==",
      "original_commit_id" : "94844a655f12f598596ca7a35b878349de640e7b",
      "original_line" : 79,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/script_error.cpp",
      "position" : null,
      "pull_request_review_id" : 492164684,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/491638297",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "#### My expectation was to do a code review for taproot, but unfortunately, I cannot ACK the concept or the approach of this PR at this time. \r\n\r\nAfter initial research and deep dive, I ask the following:  \r\n1. Will a majority of bitcoin users benefit from this PR?  \r\n_for consensus changes this answer should be a 'YES'_\r\n2. Does this PR create new security concerns or attack vectors for the typical bitcoin user?\r\n_for consensus changes this answer should be a 'NO'_\r\n\r\n**Below are my concerns with questions regarding this PR, answers and clarifications will hopefully bring me around.**\r\n\r\n### Background \r\nOriginal motivation to review this PR came from a tweet with a bounty. I am honored to help bitcoin, and am reviewing this PR independant of monetary expectations.  \r\n\r\nFollowing documents have been read and reviewed in detail specifically for this review, skipping some code and proofs.\r\n- [x] [PR Review Club for 17977](https://bitcoincore.reviews/17977-3)\r\n- [x] [[bitcoin-dev] Taproot](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-January/015614.html)\r\n- [x] [Homomorphic Payment Addresses and the Pay-to-Contract Protocol](https://arxiv.org/pdf/1212.3257.pdf)\r\n- [x] [BIP340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki), [BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki), [BIP342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki)\r\n- [x] [Simple Schnorr Multi-Signatures with Applications to Bitcoin](https://eprint.iacr.org/2018/068.pdf)\r\n- [x] [Impact of Taproot and Schnorr on Address Clustering Analysis of Bitcoin](http://blockchain.cs.ucl.ac.uk/wp-content/uploads/2020/04/UCL_CBT_DiscussionPaper_Q12020_Anania_2020.pdf) \r\n\r\nReason for not a simple \"concept NACK\" is because of the known information gap on my end. Specifically, I have not read most of bitcoin bips since early segwit. \r\n* My knowledge and use of bitcoin has been almost exclusively with P2PKH, including custom coded raw transactions on the utxo level. \r\n* Have not yet personally implemented BIP32 - Hierarchical Deterministic Wallets, nor SegWit \r\n\r\n### Questions\r\nsome of these are leading some of these are clarifying \r\n1. Are my current ECDSA private/public key pairs compatible with Schnorr?\r\n2. Where are the specific steps of transforming keys to Schnorr public/private key pairs? \r\n3. is there any difference in key management between ECDSA pairs and Schnorr pairs?\r\n4. is Schnorr compatible with BIP32? \r\n5. If we define _complexity risk_ as a measure of required knowledge in relation to security expectations, does this PR add complexity risk? \r\n6. Can we measure the _complexity risk_ delta of this PR?\r\n7. Would an expert ECDSA pk pair security manager need more knowledge to become an expert Schnorr pk pair manager? \r\n8. Would a future expert Schnorr pk pair manger already be an expert ECDSA pk pair manager? \r\n9. If we define a _hard-knowledge-fork_ as needing more knowledge and a _soft-knowledge-fork_ as needing less knowledge to use bitcoin, is this Taproot PR a _hard-knowledge-fork_ or _soft-knowledge-fork_? \r\n10. Can Taproot be implemented with ECDSA? [Technical: Pay-to-contract and Sign-to-contract](https://www.reddit.com/r/Bitcoin/comments/d3lffo/technical_paytocontract_and_signtocontract/)?\r\n11. Is Taproot available for ECDSA in this PR? \r\n\r\n### Concerns\r\n**MultiSig**\r\nIâm concerned that we are explicitly promoting MultiSig as a net positive for securing users private keys, and as far as i can tell, the consensus is that multisig comes down to a single leader in practice. \r\n\r\n[poll: Is the use of multisig on a bitcoin transaction, a security feature or a false sense of security? ](https://twitter.com/jaybny/status/1308297471735418882)\r\n\r\n**Key Reuse** \r\nIâm concerned that we are implicitly assuming that key reuse is wrong, but as far as i can tell, the consensus is that code reuse is fine for most cases.  \r\n\r\n**Highest concern is if the efficiency improvements, like removal of double sha256 hashing and others, are assuming no key reuse, creating a new vector for user error, since a majority of bitcoin users reuse their keys.**\r\n\r\n\r\nsimilar sentiments:\r\n> \"While the key holders are expected not to reuse key pair, little could be done to stop payers to reuse an address. Unfortunately, key-pair reuse has been a social and technical norm since the creation of Bitcoin (the first tx made in block 170 reused the previous public key). I donât see any hope to change this norm any time soon, if possible at all.\" [bitcoin-dev](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-December/016549.html)\r\n\r\n> > Overall, we are left with concerns both about the merit of doing Taproot\r\n> > versus alternatives, as well as the process through which we got to be here.\r\n> > 1) Is Taproot actually more private than bare MAST and Schnorr separately? What\r\n> > are the actual anonymity set benefits compared to doing the separately?\r\n> \r\n> Yes, presuming single-pubkey-single-signature remains a common authorisation pattern. \r\n[bitcoin-dev](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-February/017622.html)\r\n\r\nand fud: \r\n> [Similarly, the SIGHASH_SINGLE bug for example would have been disastrous for this scheme. In general, the Blockchain this is used in must not allow spending more than one output with a single \r\n> signature.](https://github.com/ElementsProject/scriptless-scripts/blob/master/md/partially-blind-swap.md)\r\n\r\nred flags:\r\n> [Homomorphic Payment Addresses and the Pay-to-Contract Protocol](https://arxiv.org/pdf/1212.3257.pdf)\r\n> * Customer public key âa\" in the tx cannot be used twice for same Public-Key of merchant \r\n> * signaling variation? address(a,c) vs address(P,c) - \r\n>     * (a,c) becomes a private key \r\n\r\nother:\r\nDISCOURAGE_FLAG - why the need for this flag? canât we say - ON_POLICY_CHANGE(Transform the mempool)?  \r\n\r\nflagged for followup:\r\n[BIP340](https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki)\r\n> This complicates the implementation of secure signing protocols in scenarios in which a group of mutually distrusting signers work together to produce a single joint signature \r\n\r\n> Using the first option would be slightly more efficient for verification (around 10%), but we prioritize compactness, and therefore choose option 3.\r\nbatch verification\r\n\r\n> breaking an X only key - at most a small constant faster\r\n\r\n> nonce - leaking secret\r\n\r\n> every public key - has two corresponding secret keys\r\n\r\n> not using the same private key - across different signing schemes - signatures can leak secret key through nonce reuse\r\n\r\n> open up new nonce attack vectors\r\n\r\n> However, if this optimization is used and additionally the signature verification at the end of the signing algorithm is dropped for increased efficiency, signers must ensure the public key is correctly calculated and not taken from untrusted sources.\r\n\r\n> While recent academic papers claim that they are also possible with ECDSA, consensus support for Schnorr signature verification would significantly simplify the constructions.â\r\n\r\n[BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki)\r\n> Combining all these ideas in a single proposal would be an extensive change, be hard to review, and likely miss new discoveries that otherwise could have been made along the way.\r\n\r\n> Just like other existing output types, taproot outputs should never reuse keys, for privacy reasons. This does not only apply to the particular leaf that was used to spend an output but to all leaves committed to in the output. If leaves were reused, it could happen that spending a different output would reuse the same Merkle branches in the Merkle proof. \r\n\r\n> fixes the verification capabilities of offline signing devices by including amount and scriptPubKey in the signature message, avoids unnecessary hashing\r\n\r\n> Hashes that go into the signature message and the message itself are now computed with a single SHA256 invocation instead of double SHA256. There is no expected security improvement by doubling SHA256 because this only protects against length-extension attacks against SHA256 which are not a concern for signature messages because there is no secret data. Therefore doubling SHA256 is a waste of resources.\r\n\r\n> The public key is directly included in the output in contrast to typical earlier constructions which store a hash of the public key or script in the output. This has the same cost for senders and is more space efficient overall if the key-based spending path is taken. [2]\r\n\r\n\r\n[BIP342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki)\r\n> The inefficient OP_CHECKMULTISIG and OP_CHECKMULTISIGVERIFY opcodes are disabled. Instead, a new opcode OP_CHECKSIGADD is introduced to allow creating the same multisignature policies in a batch-verifiable way. \r\n\r\n> Disabled script opcodes The following script opcodes are disabled in tapscript: OP_CHECKMULTISIG and OP_CHECKMULTISIGVERIFY[2]. The disabled opcodes behave in the same way as OP_RETURN, by failing and terminating the script immediately when executed, and being ignored when found in unexecuted branch of the script.\r\n\r\n> This way, new SIGHASH modes can be added, as well as NOINPUT-tagged public keys and a public key constant which is replaced by the taproot internal key for signature validation.\r\n\r\n> Why is a limit on script size no longer needed? Since there is no scriptCode directly included in the signature hash (only indirectly through a precomputable tapleaf hash), the CPU time spent on a signature check is no longer proportional to the size of the script being executed.\r\n\r\n### PR Purpose\r\nas stated \r\n\r\n> privacy, efficiency, and flexibility of Bitcoin's scripting capabilities\r\n\r\n> This proposal aims to improve privacy, efficiency, and flexibility of Bitcoin's scripting capabilities without adding new security assumptions[1]. Specifically, it seeks to minimize how much information about the spendability conditions of a transaction output is revealed on chain at creation or spending time and to add a number of upgrade mechanisms, while fixing a few minor but long-standing issues\r\n\r\nTaproot is an optional feature, and P2PKH key reusers, not concerned with privacy, do not need to us it. Yet, they still get the benefits of smaller multisig transactions.  \r\n\r\n**Is this [chart](https://eprint.iacr.org/2018/068.pdf) the only benefits of this PR for the majority of users? Is it worth consensus soft-fork? What are the risks?** \r\n![image](https://user-images.githubusercontent.com/777326/93874364-19fd3d80-fc88-11ea-8f65-c478398f0108.png)\r\n## Taproot ##\r\n> Taproot's advantages become apparent under the assumption that most applications involve outputs that could be spent by all parties agreeing \r\n\r\nThis use of practical reality built into the bitcoin protocol is exactly what we need more off! Maybe this abstraction can one day be made between alice and bob, because many times alice is really bob in a dress, and bob has no double spend risk on the tx from bob to bob.  \r\n\r\n**defaut spending path**\r\nfrom what i understand, since in practice over 85% of bitcoin transaction are single key, the default path will be basically p2pkh (or the Segwit + Schnorr equivalent)   \r\n\r\n**user story**\r\nIf Taproot tree path spending is not for the 85% of bitcoin users, then who is it for? actual user stories will go a long way here. \r\n",
      "created_at" : "2020-09-22T11:02:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-696650924",
      "id" : 696650924,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NjY1MDkyNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-22T11:02:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696650924",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/777326?v=4",
         "events_url" : "https://api.github.com/users/jaybny/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jaybny/followers",
         "following_url" : "https://api.github.com/users/jaybny/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jaybny/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jaybny",
         "id" : 777326,
         "login" : "jaybny",
         "node_id" : "MDQ6VXNlcjc3NzMyNg==",
         "organizations_url" : "https://api.github.com/users/jaybny/orgs",
         "received_events_url" : "https://api.github.com/users/jaybny/received_events",
         "repos_url" : "https://api.github.com/users/jaybny/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jaybny/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jaybny/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jaybny"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@jaybny All of those questions are about the BIPs themselves, and not about the code changes to implement them, and thus out of scope here. I suggest you discuss them on the bitcoin-dev mailing list, https://bitcoin.stackexchange.com, or other media.\n\nI'll give my answers for your list of short questions, but if you have follow up discussion, please take it elsewhere. It would be distracting to code reviewers here.\n\n1. Yes, intentionally. This is explained in BIP340.\n2. You remove the first byte of a 33-byte compressed pubkey to obtain a 32-byte x-only pubkey.\n3. No.\n4. Yes.\n5. BIP341/342 increase the functionality of the scripting language, which also implies there are more ways someone can screw up when doing nontrivial things. On the other hand, certain weaknesses that used to exist in legacy scripts and segwit scripts are fixed.\n6. That sounds subjective.\n7. No.\n8. Not sure what you mean.\n9. That sounds subjective.\n10. In theory yes, but doing most interesting things with it requires a way to have a single tweaked key that can be spent using consent of multiple parties. This is a *lot* harder with ECDSA than with Schnorr.\n11. This PR implements the BIP341 and BIP342 consensus rules. If those BIPs would have specified support for Taproot with ECDSA, then this PR would have needed to comply with that. BIP341 uses Schnorr signatures in its key spending path, and BIP342 explicitly specifies that all opcodes involving signatures use Schnorr signatures (OP_CHECKSIG, OP_CHECKSIGVERIFY, OP_CHECKSIGADD) or are disables (OP_CHECKMULTISIG, OP_CHECKMULTISIGVERIFY).",
      "created_at" : "2020-09-22T12:42:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-696695513",
      "id" : 696695513,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NjY5NTUxMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-22T12:51:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696695513",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492941551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492941551"
         }
      },
      "author_association" : "NONE",
      "body" : "inconsistent capitalization and hyphenation",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T18:19:07Z",
      "diff_hunk" : "@@ -86,13 +105,13 @@ def is_x_coord(self, x):\n         return jacobi_symbol(x_3 + self.a * x + self.b, self.p) != -1\n \n     def lift_x(self, x):\n-        \"\"\"Given an X coordinate on the curve, return a corresponding affine point.\"\"\"\n+        \"\"\"Given an X coordinate on the curve, return a corresponding affine point for which the y-coordinate is even.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492941551",
      "id" : 492941551,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MTU1MQ==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 108,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493729595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492941551",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492942832"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492942832"
         }
      },
      "author_association" : "NONE",
      "body" : "unclear whether it will be negated again if it is already negated, or if it will be negated if it is not already negated",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T18:21:15Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492942832",
      "id" : 492942832,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MjgzMg==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 411,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493729595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492942832",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492944176"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492944176"
         }
      },
      "author_association" : "NONE",
      "body" : "simpler to just use `bytes(32)`. python wouldn't let you have uninitialized memory.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T18:23:22Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord >= SECP256K1_FIELD_SIZE:\n+        return None\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return None\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    Q = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, t), (P, 1)]))\n+    if Q is None:\n+        return None\n+    return (Q[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(Q))\n+\n+def verify_schnorr(key, sig, msg):\n+    \"\"\"Verify a Schnorr signature (see BIP 340).\n+\n+    - key is a 32-byte xonly pubkey (computed using compute_xonly_pubkey).\n+    - sig is a 64-byte Schnorr signature\n+    - msg is a 32-byte message\n+    \"\"\"\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(sig) == 64)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord == 0 or x_coord >= SECP256K1_FIELD_SIZE:\n+        return False\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return False\n+    r = int.from_bytes(sig[0:32], 'big')\n+    if r >= SECP256K1_FIELD_SIZE:\n+        return False\n+    s = int.from_bytes(sig[32:64], 'big')\n+    if s >= SECP256K1_ORDER:\n+        return False\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", sig[0:32] + key + msg), 'big') % SECP256K1_ORDER\n+    R = SECP256K1.mul([(SECP256K1_G, s), (P, SECP256K1_ORDER - e)])\n+    if not SECP256K1.has_even_y(R):\n+        return False\n+    if ((r * R[2] * R[2]) % SECP256K1_FIELD_SIZE) != R[0]:\n+        return False\n+    return True\n+\n+def sign_schnorr(key, msg, aux=None, flip_p=False, flip_r=False):\n+    \"\"\"Create a Schnorr signature (see BIP 340).\"\"\"\n+\n+    if aux is None:\n+        aux = bytes(0 for _ in range(32))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492944176",
      "id" : 492944176,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDE3Ng==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 484,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493729595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492944176",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492944523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492944523"
         }
      },
      "author_association" : "NONE",
      "body" : "why call magic methods directly when you can use `next(reader)`? arguably more readable.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T18:23:55Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord >= SECP256K1_FIELD_SIZE:\n+        return None\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return None\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    Q = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, t), (P, 1)]))\n+    if Q is None:\n+        return None\n+    return (Q[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(Q))\n+\n+def verify_schnorr(key, sig, msg):\n+    \"\"\"Verify a Schnorr signature (see BIP 340).\n+\n+    - key is a 32-byte xonly pubkey (computed using compute_xonly_pubkey).\n+    - sig is a 64-byte Schnorr signature\n+    - msg is a 32-byte message\n+    \"\"\"\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(sig) == 64)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord == 0 or x_coord >= SECP256K1_FIELD_SIZE:\n+        return False\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return False\n+    r = int.from_bytes(sig[0:32], 'big')\n+    if r >= SECP256K1_FIELD_SIZE:\n+        return False\n+    s = int.from_bytes(sig[32:64], 'big')\n+    if s >= SECP256K1_ORDER:\n+        return False\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", sig[0:32] + key + msg), 'big') % SECP256K1_ORDER\n+    R = SECP256K1.mul([(SECP256K1_G, s), (P, SECP256K1_ORDER - e)])\n+    if not SECP256K1.has_even_y(R):\n+        return False\n+    if ((r * R[2] * R[2]) % SECP256K1_FIELD_SIZE) != R[0]:\n+        return False\n+    return True\n+\n+def sign_schnorr(key, msg, aux=None, flip_p=False, flip_r=False):\n+    \"\"\"Create a Schnorr signature (see BIP 340).\"\"\"\n+\n+    if aux is None:\n+        aux = bytes(0 for _ in range(32))\n+\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(aux) == 32)\n+\n+    sec = int.from_bytes(key, 'big')\n+    if sec == 0 or sec >= SECP256K1_ORDER:\n+        return None\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, sec)]))\n+    if SECP256K1.has_even_y(P) == flip_p:\n+        sec = SECP256K1_ORDER - sec\n+    t = (sec ^ int.from_bytes(TaggedHash(\"BIP0340/aux\", aux), 'big')).to_bytes(32, 'big')\n+    kp = int.from_bytes(TaggedHash(\"BIP0340/nonce\", t + P[0].to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER\n+    assert(kp != 0)\n+    R = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, kp)]))\n+    k = kp if SECP256K1.has_even_y(R) != flip_r else SECP256K1_ORDER - kp\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", R[0].to_bytes(32, 'big') + P[0].to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER\n+    return R[0].to_bytes(32, 'big') + ((k + e * sec) % SECP256K1_ORDER).to_bytes(32, 'big')\n+\n+class TestFrameworkKey(unittest.TestCase):\n+    def test_schnorr(self):\n+        \"\"\"Test the Python Schnorr implementation.\"\"\"\n+        byte_arrays = [generate_privkey() for _ in range(3)] + [v.to_bytes(32, 'big') for v in [0, SECP256K1_ORDER - 1, SECP256K1_ORDER, 2**256 - 1]]\n+        keys = {}\n+        for privkey in byte_arrays:  # build array of key/pubkey pairs\n+            pubkey, _ = compute_xonly_pubkey(privkey)\n+            if pubkey is not None:\n+                keys[privkey] = pubkey\n+        for msg in byte_arrays:  # test every combination of message, signing key, verification key\n+            for sign_privkey, sign_pubkey in keys.items():\n+                sig = sign_schnorr(sign_privkey, msg)\n+                for verify_privkey, verify_pubkey in keys.items():\n+                    if verify_privkey == sign_privkey:\n+                        self.assertTrue(verify_schnorr(verify_pubkey, sig, msg))\n+                        sig = list(sig)\n+                        sig[random.randrange(64)] ^= (1 << (random.randrange(8)))  # damaging signature should break things\n+                        sig = bytes(sig)\n+                    self.assertFalse(verify_schnorr(verify_pubkey, sig, msg))\n+\n+    def test_schnorr_testvectors(self):\n+        \"\"\"Implement the BIP340 test vectors (read from bip340_test_vectors.csv).\"\"\"\n+        num_tests = 0\n+        with open(os.path.join(sys.path[0], 'test_framework', 'bip340_test_vectors.csv'), newline='', encoding='utf8') as csvfile:\n+            reader = csv.reader(csvfile)\n+            reader.__next__()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492944523",
      "id" : 492944523,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0NDUyMw==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 529,
      "original_position" : 235,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493729595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492944523",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492948353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492948353"
         }
      },
      "author_association" : "NONE",
      "body" : "parens unnecessary",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T18:29:46Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord >= SECP256K1_FIELD_SIZE:\n+        return None\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return None\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    Q = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, t), (P, 1)]))\n+    if Q is None:\n+        return None\n+    return (Q[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(Q))\n+\n+def verify_schnorr(key, sig, msg):\n+    \"\"\"Verify a Schnorr signature (see BIP 340).\n+\n+    - key is a 32-byte xonly pubkey (computed using compute_xonly_pubkey).\n+    - sig is a 64-byte Schnorr signature\n+    - msg is a 32-byte message\n+    \"\"\"\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(sig) == 64)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord == 0 or x_coord >= SECP256K1_FIELD_SIZE:\n+        return False\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return False\n+    r = int.from_bytes(sig[0:32], 'big')\n+    if r >= SECP256K1_FIELD_SIZE:\n+        return False\n+    s = int.from_bytes(sig[32:64], 'big')\n+    if s >= SECP256K1_ORDER:\n+        return False\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", sig[0:32] + key + msg), 'big') % SECP256K1_ORDER\n+    R = SECP256K1.mul([(SECP256K1_G, s), (P, SECP256K1_ORDER - e)])\n+    if not SECP256K1.has_even_y(R):\n+        return False\n+    if ((r * R[2] * R[2]) % SECP256K1_FIELD_SIZE) != R[0]:\n+        return False\n+    return True\n+\n+def sign_schnorr(key, msg, aux=None, flip_p=False, flip_r=False):\n+    \"\"\"Create a Schnorr signature (see BIP 340).\"\"\"\n+\n+    if aux is None:\n+        aux = bytes(0 for _ in range(32))\n+\n+    assert(len(key) == 32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492948353",
      "id" : 492948353,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0ODM1Mw==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 486,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493729595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492948353",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492948800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492948800"
         }
      },
      "author_association" : "NONE",
      "body" : "parens unnecessary",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T18:30:25Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r492948800",
      "id" : 492948800,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0ODgwMA==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 432,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493729595,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492948800",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/284023?v=4",
         "events_url" : "https://api.github.com/users/ysangkok/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ysangkok/followers",
         "following_url" : "https://api.github.com/users/ysangkok/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ysangkok/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ysangkok",
         "id" : 284023,
         "login" : "ysangkok",
         "node_id" : "MDQ6VXNlcjI4NDAyMw==",
         "organizations_url" : "https://api.github.com/users/ysangkok/orgs",
         "received_events_url" : "https://api.github.com/users/ysangkok/received_events",
         "repos_url" : "https://api.github.com/users/ysangkok/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ysangkok/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ysangkok"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064062"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:15:28Z",
      "diff_hunk" : "@@ -206,6 +207,24 @@ class CPubKey\n     bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n+class XOnlyPubKey {\n+private:\n+    uint256 m_keydata;\n+\n+public:\n+    /** Construct an x-only pubkey from exactly 32 bytes. */\n+    XOnlyPubKey(Span<const unsigned char> input);\n+\n+    /** Verify a 64-byte Schnorr signature.\n+     *\n+     * If the signature is not exactly 64 bytes, false is returned.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064062",
      "id" : 493064062,
      "in_reply_to_id" : 491588125,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDA2Mg==",
      "original_commit_id" : "beed0764df14791e33f60636fff06d50f067ea9d",
      "original_line" : 220,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/pubkey.h",
      "position" : null,
      "pull_request_review_id" : 493883968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064062",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064438"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064438"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done. I intentionally didn't change the implementation in test_framework, as this provides weak additional evidence that the semantics didn't change compared to the older code.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:16:30Z",
      "diff_hunk" : "@@ -328,3 +331,11 @@ bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator en\n     opcodeRet = static_cast<opcodetype>(opcode);\n     return true;\n }\n+\n+bool IsOpSuccess(const opcodetype& opcode)\n+{\n+    return (opcode == 0x50 || opcode == 0x62 || opcode == 0x89 ||\n+            opcode == 0x8a || opcode == 0x8d || opcode == 0x8e ||\n+            (opcode >= 0x7e && opcode <= 0x81) || (opcode >= 0x83 && opcode <= 0x86) ||\n+            (opcode >= 0x95 && opcode <= 0x99) || (opcode >= 0xbb && opcode <= 0xfe));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064438",
      "id" : 493064438,
      "in_reply_to_id" : 491638161,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDQzOA==",
      "original_commit_id" : "94844a655f12f598596ca7a35b878349de640e7b",
      "original_line" : 340,
      "original_position" : 20,
      "original_start_line" : 337,
      "path" : "src/script/script.cpp",
      "position" : null,
      "pull_request_review_id" : 493884379,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064438",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064475"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:16:38Z",
      "diff_hunk" : "@@ -75,6 +75,10 @@ std::string ScriptErrorString(const ScriptError serror)\n             return \"Witness version reserved for soft-fork upgrades\";\n         case SCRIPT_ERR_DISCOURAGE_UPGRADABLE_TAPROOT_VERSION:\n             return \"Taproot version reserved for soft-fork upgrades\";\n+        case SCRIPT_ERR_DISCOURAGE_OP_SUCCESS:\n+            return \"SUCCESSx reserved for soft-fork upgrades\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064475",
      "id" : 493064475,
      "in_reply_to_id" : 491638297,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDQ3NQ==",
      "original_commit_id" : "94844a655f12f598596ca7a35b878349de640e7b",
      "original_line" : 79,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/script/script_error.cpp",
      "position" : null,
      "pull_request_review_id" : 493884422,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064475",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064570"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064570"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:16:51Z",
      "diff_hunk" : "@@ -86,13 +105,13 @@ def is_x_coord(self, x):\n         return jacobi_symbol(x_3 + self.a * x + self.b, self.p) != -1\n \n     def lift_x(self, x):\n-        \"\"\"Given an X coordinate on the curve, return a corresponding affine point.\"\"\"\n+        \"\"\"Given an X coordinate on the curve, return a corresponding affine point for which the y-coordinate is even.\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064570",
      "id" : 493064570,
      "in_reply_to_id" : 492941551,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDU3MA==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 108,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493884516,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064570",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064790"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064790"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed the interface to not take a negated argument, but infer it from the key. This should be cleaner and simpler.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:17:20Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064790",
      "id" : 493064790,
      "in_reply_to_id" : 492942832,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDc5MA==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 411,
      "original_position" : 117,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493884761,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064790",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064821"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064821"
         }
      },
      "author_association" : "MEMBER",
      "body" : "TIL. Done.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:17:28Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord >= SECP256K1_FIELD_SIZE:\n+        return None\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return None\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    Q = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, t), (P, 1)]))\n+    if Q is None:\n+        return None\n+    return (Q[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(Q))\n+\n+def verify_schnorr(key, sig, msg):\n+    \"\"\"Verify a Schnorr signature (see BIP 340).\n+\n+    - key is a 32-byte xonly pubkey (computed using compute_xonly_pubkey).\n+    - sig is a 64-byte Schnorr signature\n+    - msg is a 32-byte message\n+    \"\"\"\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(sig) == 64)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord == 0 or x_coord >= SECP256K1_FIELD_SIZE:\n+        return False\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return False\n+    r = int.from_bytes(sig[0:32], 'big')\n+    if r >= SECP256K1_FIELD_SIZE:\n+        return False\n+    s = int.from_bytes(sig[32:64], 'big')\n+    if s >= SECP256K1_ORDER:\n+        return False\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", sig[0:32] + key + msg), 'big') % SECP256K1_ORDER\n+    R = SECP256K1.mul([(SECP256K1_G, s), (P, SECP256K1_ORDER - e)])\n+    if not SECP256K1.has_even_y(R):\n+        return False\n+    if ((r * R[2] * R[2]) % SECP256K1_FIELD_SIZE) != R[0]:\n+        return False\n+    return True\n+\n+def sign_schnorr(key, msg, aux=None, flip_p=False, flip_r=False):\n+    \"\"\"Create a Schnorr signature (see BIP 340).\"\"\"\n+\n+    if aux is None:\n+        aux = bytes(0 for _ in range(32))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064821",
      "id" : 493064821,
      "in_reply_to_id" : 492944176,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDgyMQ==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 484,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493884805,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064821",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064966"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064966"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This was copied from the BIP340 reference code. You may want to update it there too.\r\n\r\nDone.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:17:51Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord >= SECP256K1_FIELD_SIZE:\n+        return None\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return None\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    Q = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, t), (P, 1)]))\n+    if Q is None:\n+        return None\n+    return (Q[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(Q))\n+\n+def verify_schnorr(key, sig, msg):\n+    \"\"\"Verify a Schnorr signature (see BIP 340).\n+\n+    - key is a 32-byte xonly pubkey (computed using compute_xonly_pubkey).\n+    - sig is a 64-byte Schnorr signature\n+    - msg is a 32-byte message\n+    \"\"\"\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(sig) == 64)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord == 0 or x_coord >= SECP256K1_FIELD_SIZE:\n+        return False\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return False\n+    r = int.from_bytes(sig[0:32], 'big')\n+    if r >= SECP256K1_FIELD_SIZE:\n+        return False\n+    s = int.from_bytes(sig[32:64], 'big')\n+    if s >= SECP256K1_ORDER:\n+        return False\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", sig[0:32] + key + msg), 'big') % SECP256K1_ORDER\n+    R = SECP256K1.mul([(SECP256K1_G, s), (P, SECP256K1_ORDER - e)])\n+    if not SECP256K1.has_even_y(R):\n+        return False\n+    if ((r * R[2] * R[2]) % SECP256K1_FIELD_SIZE) != R[0]:\n+        return False\n+    return True\n+\n+def sign_schnorr(key, msg, aux=None, flip_p=False, flip_r=False):\n+    \"\"\"Create a Schnorr signature (see BIP 340).\"\"\"\n+\n+    if aux is None:\n+        aux = bytes(0 for _ in range(32))\n+\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(aux) == 32)\n+\n+    sec = int.from_bytes(key, 'big')\n+    if sec == 0 or sec >= SECP256K1_ORDER:\n+        return None\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, sec)]))\n+    if SECP256K1.has_even_y(P) == flip_p:\n+        sec = SECP256K1_ORDER - sec\n+    t = (sec ^ int.from_bytes(TaggedHash(\"BIP0340/aux\", aux), 'big')).to_bytes(32, 'big')\n+    kp = int.from_bytes(TaggedHash(\"BIP0340/nonce\", t + P[0].to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER\n+    assert(kp != 0)\n+    R = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, kp)]))\n+    k = kp if SECP256K1.has_even_y(R) != flip_r else SECP256K1_ORDER - kp\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", R[0].to_bytes(32, 'big') + P[0].to_bytes(32, 'big') + msg), 'big') % SECP256K1_ORDER\n+    return R[0].to_bytes(32, 'big') + ((k + e * sec) % SECP256K1_ORDER).to_bytes(32, 'big')\n+\n+class TestFrameworkKey(unittest.TestCase):\n+    def test_schnorr(self):\n+        \"\"\"Test the Python Schnorr implementation.\"\"\"\n+        byte_arrays = [generate_privkey() for _ in range(3)] + [v.to_bytes(32, 'big') for v in [0, SECP256K1_ORDER - 1, SECP256K1_ORDER, 2**256 - 1]]\n+        keys = {}\n+        for privkey in byte_arrays:  # build array of key/pubkey pairs\n+            pubkey, _ = compute_xonly_pubkey(privkey)\n+            if pubkey is not None:\n+                keys[privkey] = pubkey\n+        for msg in byte_arrays:  # test every combination of message, signing key, verification key\n+            for sign_privkey, sign_pubkey in keys.items():\n+                sig = sign_schnorr(sign_privkey, msg)\n+                for verify_privkey, verify_pubkey in keys.items():\n+                    if verify_privkey == sign_privkey:\n+                        self.assertTrue(verify_schnorr(verify_pubkey, sig, msg))\n+                        sig = list(sig)\n+                        sig[random.randrange(64)] ^= (1 << (random.randrange(8)))  # damaging signature should break things\n+                        sig = bytes(sig)\n+                    self.assertFalse(verify_schnorr(verify_pubkey, sig, msg))\n+\n+    def test_schnorr_testvectors(self):\n+        \"\"\"Implement the BIP340 test vectors (read from bip340_test_vectors.csv).\"\"\"\n+        num_tests = 0\n+        with open(os.path.join(sys.path[0], 'test_framework', 'bip340_test_vectors.csv'), newline='', encoding='utf8') as csvfile:\n+            reader = csv.reader(csvfile)\n+            reader.__next__()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493064966",
      "id" : 493064966,
      "in_reply_to_id" : 492944523,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NDk2Ng==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 529,
      "original_position" : 235,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493884982,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493064966",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493065018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493065018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, in many places.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:18:01Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord >= SECP256K1_FIELD_SIZE:\n+        return None\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return None\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    Q = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, t), (P, 1)]))\n+    if Q is None:\n+        return None\n+    return (Q[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(Q))\n+\n+def verify_schnorr(key, sig, msg):\n+    \"\"\"Verify a Schnorr signature (see BIP 340).\n+\n+    - key is a 32-byte xonly pubkey (computed using compute_xonly_pubkey).\n+    - sig is a 64-byte Schnorr signature\n+    - msg is a 32-byte message\n+    \"\"\"\n+    assert(len(key) == 32)\n+    assert(len(msg) == 32)\n+    assert(len(sig) == 64)\n+\n+    x_coord = int.from_bytes(key, 'big')\n+    if x_coord == 0 or x_coord >= SECP256K1_FIELD_SIZE:\n+        return False\n+    P = SECP256K1.lift_x(x_coord)\n+    if P is None:\n+        return False\n+    r = int.from_bytes(sig[0:32], 'big')\n+    if r >= SECP256K1_FIELD_SIZE:\n+        return False\n+    s = int.from_bytes(sig[32:64], 'big')\n+    if s >= SECP256K1_ORDER:\n+        return False\n+    e = int.from_bytes(TaggedHash(\"BIP0340/challenge\", sig[0:32] + key + msg), 'big') % SECP256K1_ORDER\n+    R = SECP256K1.mul([(SECP256K1_G, s), (P, SECP256K1_ORDER - e)])\n+    if not SECP256K1.has_even_y(R):\n+        return False\n+    if ((r * R[2] * R[2]) % SECP256K1_FIELD_SIZE) != R[0]:\n+        return False\n+    return True\n+\n+def sign_schnorr(key, msg, aux=None, flip_p=False, flip_r=False):\n+    \"\"\"Create a Schnorr signature (see BIP 340).\"\"\"\n+\n+    if aux is None:\n+        aux = bytes(0 for _ in range(32))\n+\n+    assert(len(key) == 32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493065018",
      "id" : 493065018,
      "in_reply_to_id" : 492948353,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTAxOA==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 486,
      "original_position" : 192,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493885056,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493065018",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493065062"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493065062"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done in many places.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-22T22:18:09Z",
      "diff_hunk" : "@@ -369,3 +393,161 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def compute_xonly_pubkey(key):\n+    \"\"\"Compute an x-only (32 byte) public key from a (32 byte) private key.\n+\n+    This also returns whether the resulting public key was negated.\n+    \"\"\"\n+\n+    assert(len(key) == 32)\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return (None, None)\n+    P = SECP256K1.affine(SECP256K1.mul([(SECP256K1_G, x)]))\n+    return (P[0].to_bytes(32, 'big'), not SECP256K1.has_even_y(P))\n+\n+def tweak_add_privkey(key, tweak, negated=False):\n+    \"\"\"Tweak a private key (after optionally negating it).\"\"\"\n+\n+    assert(len(key) == 32)\n+    assert(len(tweak) == 32)\n+\n+    x = int.from_bytes(key, 'big')\n+    if x == 0 or x >= SECP256K1_ORDER:\n+        return None\n+    if negated:\n+       x = SECP256K1_ORDER - x\n+    t = int.from_bytes(tweak, 'big')\n+    if t >= SECP256K1_ORDER:\n+        return None\n+    x = (x + t) % SECP256K1_ORDER\n+    if x == 0:\n+        return None\n+    return x.to_bytes(32, 'big')\n+\n+def tweak_add_pubkey(key, tweak):\n+    \"\"\"Tweak a public key and return whether the result was negated.\"\"\"\n+\n+    assert(len(key) == 32)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493065062",
      "id" : 493065062,
      "in_reply_to_id" : 492948800,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA2NTA2Mg==",
      "original_commit_id" : "9673fd9999a7fef4bfc5b074fa1861938042df10",
      "original_line" : 432,
      "original_position" : 138,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/key.py",
      "position" : null,
      "pull_request_review_id" : 493885119,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493065062",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I addressed comments by @benthecarman and @ysangkok. See \"Updates 2020-09-22\" in the new PR #19997 for the changes that were applied.\r\n\r\nI also moved the \"keep spent outputs in PrecomputedTransactionData\" to the refactors section, as it contains no semantics changes, and didn't depend on any earlier commits.",
      "created_at" : "2020-09-22T22:21:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-697013149",
      "id" : 697013149,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NzAxMzE0OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-22T22:43:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697013149",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reviewed updates to https://github.com/bitcoin/bitcoin/pull/19953/commits/fe5cf2ed6adbf2271553f97c61de4d59bee20c05\r\n\r\n`IsOpSuccess` was compared against the BIP directly rather than previous iteration, which I had hand-calculated painstakingly. It matches the BIP.",
      "created_at" : "2020-09-23T14:10:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-697415762",
      "id" : 697415762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NzQxNTc2Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-23T14:10:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697415762",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493822427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493822427"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pico-nit: This is only one output. This probably belongs https://github.com/bitcoin/bitcoin/pull/19953/commits/34da2198264cf90a7ae7f50a912a599f6fd66291#diff-be2905e2f5218ecdbe4e55637dac75f3R1415",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T18:55:22Z",
      "diff_hunk" : "@@ -1322,6 +1375,75 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_bip341_taproot_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HASHER_TAPSIGHASH;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (!(hash_type <= 0x03 || (hash_type >= 0x81 && hash_type <= 0x83))) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_single_hash;\n+        ss << cache->m_spent_amounts_single_hash;\n+        ss << cache->m_spent_scripts_single_hash;\n+        ss << cache->m_sequences_single_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_single_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == ANNEX_TAG;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();\n+    }\n+\n+    // Data about the output(s)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493822427",
      "id" : 493822427,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMjQyNw==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 494958421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493822427",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493833809"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493833809"
         }
      },
      "author_association" : "MEMBER",
      "body" : "pico-nit: why not just `assert(sigversion != SigVersion:: TAPROOT)`?",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T19:11:39Z",
      "diff_hunk" : "@@ -381,6 +439,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     // static const valtype vchZero(0);\n     static const valtype vchTrue(1, 1);\n \n+    // sigversion cannot be TAPROOT here, as it admits no script execution.\n+    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0 || sigversion == SigVersion::TAPSCRIPT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493833809",
      "id" : 493833809,
      "line" : 443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzMzgwOQ==",
      "original_commit_id" : "390252cd5bc562a40ab193c044ded32126c3ffbd",
      "original_line" : 443,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 101,
      "pull_request_review_id" : 494958421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493833809",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493838107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493838107"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, 0x00 /* key_version */, this->txdata)) return false;\r\n```",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T19:19:47Z",
      "diff_hunk" : "@@ -1565,7 +1675,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const uns\n         if (hashtype == SIGHASH_DEFAULT) return false;\n     }\n     uint256 sighash;\n-    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, this->txdata)) return false;\n+    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, 0x00, this->txdata)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493838107",
      "id" : 493838107,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzODEwNw==",
      "original_commit_id" : "390252cd5bc562a40ab193c044ded32126c3ffbd",
      "original_line" : 1678,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 494958421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493838107",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493865077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493865077"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why no `MINIMALIF`?",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:09:15Z",
      "diff_hunk" : "@@ -1610,5 +1640,50 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)\n     BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_INVALID_FLAGS);\n }\n \n+BOOST_AUTO_TEST_CASE(script_taproot)\n+{\n+    UniValue tests = read_json(std::string(std::begin(json_tests::script_taproot_tests), std::end(json_tests::script_taproot_tests)));\n+\n+    static constexpr unsigned int VERIFY_FLAGS =\n+        SCRIPT_VERIFY_P2SH |\n+        SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+        SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n+        SCRIPT_VERIFY_WITNESS |\n+        SCRIPT_VERIFY_NULLFAIL |\n+        SCRIPT_VERIFY_TAPROOT;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493865077",
      "id" : 493865077,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2NTA3Nw==",
      "original_commit_id" : "fe5cf2ed6adbf2271553f97c61de4d59bee20c05",
      "original_line" : 1653,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/test/script_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 494958421,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493865077",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493869440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493869440"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If a new sig version is added in the future, we probably want it to fail here.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:17:27Z",
      "diff_hunk" : "@@ -381,6 +439,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     // static const valtype vchZero(0);\n     static const valtype vchTrue(1, 1);\n \n+    // sigversion cannot be TAPROOT here, as it admits no script execution.\n+    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0 || sigversion == SigVersion::TAPSCRIPT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493869440",
      "id" : 493869440,
      "in_reply_to_id" : 493833809,
      "line" : 443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2OTQ0MA==",
      "original_commit_id" : "390252cd5bc562a40ab193c044ded32126c3ffbd",
      "original_line" : 443,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 101,
      "pull_request_review_id" : 495015539,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493869440",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493870676"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493870676"
         }
      },
      "author_association" : "MEMBER",
      "body" : "eh ok, guess crashing would be best in this case",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:19:51Z",
      "diff_hunk" : "@@ -381,6 +439,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     // static const valtype vchZero(0);\n     static const valtype vchTrue(1, 1);\n \n+    // sigversion cannot be TAPROOT here, as it admits no script execution.\n+    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0 || sigversion == SigVersion::TAPSCRIPT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493870676",
      "id" : 493870676,
      "in_reply_to_id" : 493833809,
      "line" : 443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MDY3Ng==",
      "original_commit_id" : "390252cd5bc562a40ab193c044ded32126c3ffbd",
      "original_line" : 443,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 101,
      "pull_request_review_id" : 495017161,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493870676",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493871166"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493871166"
         }
      },
      "author_association" : "MEMBER",
      "body" : "... because it's not used for consensus, along with CLEANSTACK et al. Right.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:20:43Z",
      "diff_hunk" : "@@ -1610,5 +1640,50 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)\n     BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_INVALID_FLAGS);\n }\n \n+BOOST_AUTO_TEST_CASE(script_taproot)\n+{\n+    UniValue tests = read_json(std::string(std::begin(json_tests::script_taproot_tests), std::end(json_tests::script_taproot_tests)));\n+\n+    static constexpr unsigned int VERIFY_FLAGS =\n+        SCRIPT_VERIFY_P2SH |\n+        SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+        SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n+        SCRIPT_VERIFY_WITNESS |\n+        SCRIPT_VERIFY_NULLFAIL |\n+        SCRIPT_VERIFY_TAPROOT;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493871166",
      "id" : 493871166,
      "in_reply_to_id" : 493865077,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MTE2Ng==",
      "original_commit_id" : "fe5cf2ed6adbf2271553f97c61de4d59bee20c05",
      "original_line" : 1653,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/test/script_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 495017759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493871166",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493871451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493871451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, I'm intentionally only using equality checks with sigversion (all over interpreter.cpp), so that there are no surprises when a new one is added.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:21:15Z",
      "diff_hunk" : "@@ -381,6 +439,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n     // static const valtype vchZero(0);\n     static const valtype vchTrue(1, 1);\n \n+    // sigversion cannot be TAPROOT here, as it admits no script execution.\n+    assert(sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0 || sigversion == SigVersion::TAPSCRIPT);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493871451",
      "id" : 493871451,
      "in_reply_to_id" : 493833809,
      "line" : 443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MTQ1MQ==",
      "original_commit_id" : "390252cd5bc562a40ab193c044ded32126c3ffbd",
      "original_line" : 443,
      "original_position" : 90,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 101,
      "pull_request_review_id" : 495018135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493871451",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493885215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493885215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "34da2198264cf90a7ae7f50a912a599f6fd66291\r\n\r\nNo need to be exhaustive?\r\n```cpp\r\nuses_bip341_taproot = true;\r\nif (uses_bip143_segwit) break;\r\n```",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:47:12Z",
      "diff_hunk" : "@@ -1291,23 +1291,76 @@ uint256 GetOutputsSHA256(const T& txTo)\n     return ss.GetSHA256();\n }\n \n+/** Compute the (single) SHA256 of the concatenation of all amounts spent by a tx. */\n+uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptPubKeys spent by a tx. */\n+uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.scriptPubKey;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+\n } // namespace\n \n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n-    assert(!m_ready);\n+    assert(!m_spent_outputs_ready);\n \n     m_spent_outputs = std::move(spent_outputs);\n+    if (!m_spent_outputs.empty()) {\n+        assert(m_spent_outputs.size() == txTo.vin.size());\n+        m_spent_outputs_ready = true;\n+    }\n \n-    // Cache is calculated only for transactions with witness\n-    if (txTo.HasWitness()) {\n-        hashPrevouts = SHA256Uint256(GetPrevoutsSHA256(txTo));\n-        hashSequence = SHA256Uint256(GetSequencesSHA256(txTo));\n-        hashOutputs = SHA256Uint256(GetOutputsSHA256(txTo));\n+    // Determine which precomputation-impacting features this transaction uses.\n+    bool uses_bip143_segwit = false;\n+    bool uses_bip341_taproot = false;\n+    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+        if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n+            if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n+                m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n+                // Treat every native witness v1 spend as a Taproot spend. This only works if spent_outputs was\n+                // provided as well, but if it wasn't, actual validation will fail anyway.\n+                uses_bip341_taproot = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493885215",
      "id" : 493885215,
      "line" : 1435,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4NTIxNQ==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 271,
      "pull_request_review_id" : 495035585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493885215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493888647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493888647"
         }
      },
      "author_association" : "MEMBER",
      "body" : "34da2198264cf90a7ae7f50a912a599f6fd66291\r\n\r\nThen change to `const PrecomputedTransactionData& cache` instead?",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T20:53:38Z",
      "diff_hunk" : "@@ -1322,6 +1375,75 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_bip341_taproot_ready && cache->m_spent_outputs_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493888647",
      "id" : 493888647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg4ODY0Nw==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1491,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 495035585,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493888647",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493901353"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T21:18:39Z",
      "diff_hunk" : "@@ -1322,6 +1375,75 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_bip341_taproot_ready && cache->m_spent_outputs_ready);\n+\n+    CHashWriter ss = HASHER_TAPSIGHASH;\n+\n+    // Epoch\n+    static constexpr uint8_t EPOCH = 0;\n+    ss << EPOCH;\n+\n+    // Hash type\n+    const uint8_t output_type = (hash_type == SIGHASH_DEFAULT) ? SIGHASH_ALL : (hash_type & SIGHASH_OUTPUT_MASK); // Default (no sighash byte) is equivalent to SIGHASH_ALL\n+    const uint8_t input_type = hash_type & SIGHASH_INPUT_MASK;\n+    if (!(hash_type <= 0x03 || (hash_type >= 0x81 && hash_type <= 0x83))) return false;\n+    ss << hash_type;\n+\n+    // Transaction level data\n+    ss << tx_to.nVersion;\n+    ss << tx_to.nLockTime;\n+    if (input_type != SIGHASH_ANYONECANPAY) {\n+        ss << cache->m_prevouts_single_hash;\n+        ss << cache->m_spent_amounts_single_hash;\n+        ss << cache->m_spent_scripts_single_hash;\n+        ss << cache->m_sequences_single_hash;\n+    }\n+    if (output_type == SIGHASH_ALL) {\n+        ss << cache->m_outputs_single_hash;\n+    }\n+\n+    // Data about the input/prevout being spent\n+    const auto* witstack = &tx_to.vin[in_pos].scriptWitness.stack;\n+    bool have_annex = witstack->size() > 1 && witstack->back().size() > 0 && witstack->back()[0] == ANNEX_TAG;\n+    const uint8_t spend_type = (ext_flag << 1) + (have_annex ? 1 : 0); // The low bit indicates whether an annex is present.\n+    ss << spend_type;\n+    if (input_type == SIGHASH_ANYONECANPAY) {\n+        ss << tx_to.vin[in_pos].prevout;\n+        ss << cache->m_spent_outputs[in_pos];\n+        ss << tx_to.vin[in_pos].nSequence;\n+    } else {\n+        ss << in_pos;\n+    }\n+    if (have_annex) {\n+        ss << (CHashWriter(SER_GETHASH, 0) << witstack->back()).GetSHA256();\n+    }\n+\n+    // Data about the output(s)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901353",
      "id" : 493901353,
      "in_reply_to_id" : 493822427,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMTM1Mw==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 145,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 495056275,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493901353",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901411"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493901411"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T21:18:46Z",
      "diff_hunk" : "@@ -1565,7 +1675,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSchnorrSignature(Span<const uns\n         if (hashtype == SIGHASH_DEFAULT) return false;\n     }\n     uint256 sighash;\n-    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, this->txdata)) return false;\n+    if (!SignatureHashSchnorr(sighash, execdata, *txTo, nIn, hashtype, sigversion, 0x00, this->txdata)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901411",
      "id" : 493901411,
      "in_reply_to_id" : 493838107,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMTQxMQ==",
      "original_commit_id" : "390252cd5bc562a40ab193c044ded32126c3ffbd",
      "original_line" : 1678,
      "original_position" : 249,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 495056352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493901411",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901512"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493901512"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment in script/interpreter.h.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T21:18:59Z",
      "diff_hunk" : "@@ -1610,5 +1640,50 @@ BOOST_AUTO_TEST_CASE(bitcoinconsensus_verify_script_invalid_flags)\n     BOOST_CHECK_EQUAL(err, bitcoinconsensus_ERR_INVALID_FLAGS);\n }\n \n+BOOST_AUTO_TEST_CASE(script_taproot)\n+{\n+    UniValue tests = read_json(std::string(std::begin(json_tests::script_taproot_tests), std::end(json_tests::script_taproot_tests)));\n+\n+    static constexpr unsigned int VERIFY_FLAGS =\n+        SCRIPT_VERIFY_P2SH |\n+        SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+        SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n+        SCRIPT_VERIFY_WITNESS |\n+        SCRIPT_VERIFY_NULLFAIL |\n+        SCRIPT_VERIFY_TAPROOT;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493901512",
      "id" : 493901512,
      "in_reply_to_id" : 493865077,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMTUxMg==",
      "original_commit_id" : "fe5cf2ed6adbf2271553f97c61de4d59bee20c05",
      "original_line" : 1653,
      "original_position" : 75,
      "original_start_line" : null,
      "path" : "src/test/script_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 495056479,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493901512",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I addressed comments by @instagibbs, and made the unit test vectors test more and generic and made it qa-assets based (see corresponding PR https://github.com/bitcoin-core/qa-assets/pull/27). Changes are in two new sections in #19997.\r\n\r\nI'm still working on polishing up the tooling used to create script_assets_test.json. At this point they don't test anything that (many iterations of) feature_taproot.py doesn't test, so I think review should be focused on that.",
      "created_at" : "2020-09-23T21:25:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-697981325",
      "id" : 697981325,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5Nzk4MTMyNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-23T21:28:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/697981325",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493906842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493906842"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No, one input can be segwit and another can be taproot.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T21:30:34Z",
      "diff_hunk" : "@@ -1291,23 +1291,76 @@ uint256 GetOutputsSHA256(const T& txTo)\n     return ss.GetSHA256();\n }\n \n+/** Compute the (single) SHA256 of the concatenation of all amounts spent by a tx. */\n+uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptPubKeys spent by a tx. */\n+uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.scriptPubKey;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+\n } // namespace\n \n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n-    assert(!m_ready);\n+    assert(!m_spent_outputs_ready);\n \n     m_spent_outputs = std::move(spent_outputs);\n+    if (!m_spent_outputs.empty()) {\n+        assert(m_spent_outputs.size() == txTo.vin.size());\n+        m_spent_outputs_ready = true;\n+    }\n \n-    // Cache is calculated only for transactions with witness\n-    if (txTo.HasWitness()) {\n-        hashPrevouts = SHA256Uint256(GetPrevoutsSHA256(txTo));\n-        hashSequence = SHA256Uint256(GetSequencesSHA256(txTo));\n-        hashOutputs = SHA256Uint256(GetOutputsSHA256(txTo));\n+    // Determine which precomputation-impacting features this transaction uses.\n+    bool uses_bip143_segwit = false;\n+    bool uses_bip341_taproot = false;\n+    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+        if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n+            if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n+                m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n+                // Treat every native witness v1 spend as a Taproot spend. This only works if spent_outputs was\n+                // provided as well, but if it wasn't, actual validation will fail anyway.\n+                uses_bip341_taproot = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493906842",
      "id" : 493906842,
      "in_reply_to_id" : 493885215,
      "line" : 1435,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNjg0Mg==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 271,
      "pull_request_review_id" : 495063019,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493906842",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493911557"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493911557"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This should just be an optimization, ie if there are 100 inputs and the first is segwit v0 and the second is segwit v1, with @promag's suggestion it would then stop checking with both `uses_bip341_taproot` and `uses_bip143_segwit` set correctly, vs with the current implementation it would continue and check the remaining 98 inputs.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T21:41:19Z",
      "diff_hunk" : "@@ -1291,23 +1291,76 @@ uint256 GetOutputsSHA256(const T& txTo)\n     return ss.GetSHA256();\n }\n \n+/** Compute the (single) SHA256 of the concatenation of all amounts spent by a tx. */\n+uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptPubKeys spent by a tx. */\n+uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.scriptPubKey;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+\n } // namespace\n \n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n-    assert(!m_ready);\n+    assert(!m_spent_outputs_ready);\n \n     m_spent_outputs = std::move(spent_outputs);\n+    if (!m_spent_outputs.empty()) {\n+        assert(m_spent_outputs.size() == txTo.vin.size());\n+        m_spent_outputs_ready = true;\n+    }\n \n-    // Cache is calculated only for transactions with witness\n-    if (txTo.HasWitness()) {\n-        hashPrevouts = SHA256Uint256(GetPrevoutsSHA256(txTo));\n-        hashSequence = SHA256Uint256(GetSequencesSHA256(txTo));\n-        hashOutputs = SHA256Uint256(GetOutputsSHA256(txTo));\n+    // Determine which precomputation-impacting features this transaction uses.\n+    bool uses_bip143_segwit = false;\n+    bool uses_bip341_taproot = false;\n+    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+        if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n+            if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n+                m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n+                // Treat every native witness v1 spend as a Taproot spend. This only works if spent_outputs was\n+                // provided as well, but if it wasn't, actual validation will fail anyway.\n+                uses_bip341_taproot = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493911557",
      "id" : 493911557,
      "in_reply_to_id" : 493885215,
      "line" : 1435,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxMTU1Nw==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 271,
      "pull_request_review_id" : 495068952,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493911557",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/15256660?v=4",
         "events_url" : "https://api.github.com/users/benthecarman/events{/privacy}",
         "followers_url" : "https://api.github.com/users/benthecarman/followers",
         "following_url" : "https://api.github.com/users/benthecarman/following{/other_user}",
         "gists_url" : "https://api.github.com/users/benthecarman/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/benthecarman",
         "id" : 15256660,
         "login" : "benthecarman",
         "node_id" : "MDQ6VXNlcjE1MjU2NjYw",
         "organizations_url" : "https://api.github.com/users/benthecarman/orgs",
         "received_events_url" : "https://api.github.com/users/benthecarman/received_events",
         "repos_url" : "https://api.github.com/users/benthecarman/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/benthecarman/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/benthecarman"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493913215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493913215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I misread. Indeed, that's a potentially useful and simple optimization. I'll implement it when I make further changes.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-23T21:44:56Z",
      "diff_hunk" : "@@ -1291,23 +1291,76 @@ uint256 GetOutputsSHA256(const T& txTo)\n     return ss.GetSHA256();\n }\n \n+/** Compute the (single) SHA256 of the concatenation of all amounts spent by a tx. */\n+uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptPubKeys spent by a tx. */\n+uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.scriptPubKey;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+\n } // namespace\n \n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n-    assert(!m_ready);\n+    assert(!m_spent_outputs_ready);\n \n     m_spent_outputs = std::move(spent_outputs);\n+    if (!m_spent_outputs.empty()) {\n+        assert(m_spent_outputs.size() == txTo.vin.size());\n+        m_spent_outputs_ready = true;\n+    }\n \n-    // Cache is calculated only for transactions with witness\n-    if (txTo.HasWitness()) {\n-        hashPrevouts = SHA256Uint256(GetPrevoutsSHA256(txTo));\n-        hashSequence = SHA256Uint256(GetSequencesSHA256(txTo));\n-        hashOutputs = SHA256Uint256(GetOutputsSHA256(txTo));\n+    // Determine which precomputation-impacting features this transaction uses.\n+    bool uses_bip143_segwit = false;\n+    bool uses_bip341_taproot = false;\n+    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+        if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n+            if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n+                m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n+                // Treat every native witness v1 spend as a Taproot spend. This only works if spent_outputs was\n+                // provided as well, but if it wasn't, actual validation will fail anyway.\n+                uses_bip341_taproot = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r493913215",
      "id" : 493913215,
      "in_reply_to_id" : 493885215,
      "line" : 1435,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxMzIxNQ==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 271,
      "pull_request_review_id" : 495070960,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:40:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/493913215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-ACK https://github.com/bitcoin/bitcoin/pull/19953/commits/528ed883558b0bdac97fa64ada560906c322d021\r\n\r\n",
      "created_at" : "2020-09-24T13:43:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-698352605",
      "id" : 698352605,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODM1MjYwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-24T13:43:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698352605",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r494730343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494730343"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-25T03:43:44Z",
      "diff_hunk" : "@@ -1291,23 +1291,76 @@ uint256 GetOutputsSHA256(const T& txTo)\n     return ss.GetSHA256();\n }\n \n+/** Compute the (single) SHA256 of the concatenation of all amounts spent by a tx. */\n+uint256 GetSpentAmountsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.nValue;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+/** Compute the (single) SHA256 of the concatenation of all scriptPubKeys spent by a tx. */\n+uint256 GetSpentScriptsSHA256(const std::vector<CTxOut>& outputs_spent)\n+{\n+    CHashWriter ss(SER_GETHASH, 0);\n+    for (const auto& txout : outputs_spent) {\n+        ss << txout.scriptPubKey;\n+    }\n+    return ss.GetSHA256();\n+}\n+\n+\n } // namespace\n \n template <class T>\n void PrecomputedTransactionData::Init(const T& txTo, std::vector<CTxOut> spent_outputs)\n {\n-    assert(!m_ready);\n+    assert(!m_spent_outputs_ready);\n \n     m_spent_outputs = std::move(spent_outputs);\n+    if (!m_spent_outputs.empty()) {\n+        assert(m_spent_outputs.size() == txTo.vin.size());\n+        m_spent_outputs_ready = true;\n+    }\n \n-    // Cache is calculated only for transactions with witness\n-    if (txTo.HasWitness()) {\n-        hashPrevouts = SHA256Uint256(GetPrevoutsSHA256(txTo));\n-        hashSequence = SHA256Uint256(GetSequencesSHA256(txTo));\n-        hashOutputs = SHA256Uint256(GetOutputsSHA256(txTo));\n+    // Determine which precomputation-impacting features this transaction uses.\n+    bool uses_bip143_segwit = false;\n+    bool uses_bip341_taproot = false;\n+    for (size_t inpos = 0; inpos < txTo.vin.size(); ++inpos) {\n+        if (!txTo.vin[inpos].scriptWitness.IsNull()) {\n+            if (m_spent_outputs_ready && m_spent_outputs[inpos].scriptPubKey.size() == 2 + WITNESS_V1_TAPROOT_SIZE &&\n+                m_spent_outputs[inpos].scriptPubKey[0] == OP_1) {\n+                // Treat every native witness v1 spend as a Taproot spend. This only works if spent_outputs was\n+                // provided as well, but if it wasn't, actual validation will fail anyway.\n+                uses_bip341_taproot = true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r494730343",
      "id" : 494730343,
      "in_reply_to_id" : 493885215,
      "line" : 1435,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMDM0Mw==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1435,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : 271,
      "pull_request_review_id" : 496091133,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:43:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494730343",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r494730380"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494730380"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done.",
      "commit_id" : "80efcba5e7ad84f68f5cd59c05fc87134fc9fb69",
      "created_at" : "2020-09-25T03:43:56Z",
      "diff_hunk" : "@@ -1322,6 +1375,75 @@ template void PrecomputedTransactionData::Init(const CMutableTransaction& txTo,\n template PrecomputedTransactionData::PrecomputedTransactionData(const CTransaction& txTo);\n template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTransaction& txTo);\n \n+static const CHashWriter HASHER_TAPSIGHASH = TaggedHash(\"TapSighash\");\n+\n+template<typename T>\n+bool SignatureHashSchnorr(uint256& hash_out, const T& tx_to, const uint32_t in_pos, const uint8_t hash_type, const SigVersion sigversion, const PrecomputedTransactionData* cache)\n+{\n+    uint8_t ext_flag;\n+    switch (sigversion) {\n+    case SigVersion::TAPROOT:\n+        ext_flag = 0;\n+        break;\n+    default:\n+        assert(false);\n+    }\n+    assert(in_pos < tx_to.vin.size());\n+    assert(cache != nullptr && cache->m_bip341_taproot_ready && cache->m_spent_outputs_ready);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#discussion_r494730380",
      "id" : 494730380,
      "in_reply_to_id" : 493888647,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDczMDM4MA==",
      "original_commit_id" : "34da2198264cf90a7ae7f50a912a599f6fd66291",
      "original_line" : 1491,
      "original_position" : 102,
      "original_start_line" : null,
      "path" : "src/script/interpreter.cpp",
      "position" : null,
      "pull_request_review_id" : 496091175,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19953",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-25T03:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/494730380",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I addressed comments by @promag, added a functional test to verify CLEANSTACK is consensus-enforced in tapscript, and gave tapscript's MINIMALIF a separate error code (effectively addressing #20009 to the extent it affects this PR).",
      "created_at" : "2020-09-25T03:45:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19953#issuecomment-698703640",
      "id" : 698703640,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19953",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5ODcwMzY0MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-25T03:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/698703640",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   }
]
