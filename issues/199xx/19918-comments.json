[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485066540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485066540"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "developer-notes currently recommends \"Combine annotations in function declarations with run-time asserts in function definitions\", think these recommendations are better off there, and certainly having conflicting recommendations is worse.\r\n\r\nI think the only case where it's useful for virtual methods is if the parent class doesn't need the lock, but the child class does -- in that case invoking `Parent* p = new Child(); p->func();` won't trigger compile-time warnings but you could at least catch it with a runtime check. But I think that pattern probably should be considered a mistake anyway.\r\n\r\nAs far as I know callbacks will need the `WeaklyAssertLockHeld` variant?",
      "commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "created_at" : "2020-09-08T16:58:10Z",
      "diff_hunk" : "@@ -70,13 +70,34 @@ inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, v\n inline void LeaveCritical() {}\n inline void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n template <typename MutexType>\n-inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs) {}\n+inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) {}\n template <typename MutexType>\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) {}\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+\n+/**\n+ * Assert at compile time and run time that a mutex is locked. Has no effect\n+ * when EXCLUSIVE_LOCKS_REQUIRED annotations are enforced because the runtime\n+ * assertions will never trigger (analogous to asserting an unsigned int is\n+ * greator or equal to 0).\n+ *\n+ * Use of this macro is neither encouraged nor discouraged in new code. It was\n+ * historically used before compile time checks were available, but it may\n+ * still be be useful for virtual methods or std::function callbacks where\n+ * EXCLUSIVE_LOCKS_REQUIRED annotations are not enforced.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485066540",
      "id" : 485066540,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NjU0MA==",
      "original_commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "original_line" : 89,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 31,
      "pull_request_review_id" : 484329563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-08T18:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485066540",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485102739"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485102739"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe `LOCK_ALREADY_HELD(mutex)` would be better, comparable with `LOCK(mutex)`? This isn't a particularly weak assertion in anyway I can see, it's just one the compiler isn't able to verify at compile time.\r\n\r\n\"Assert that a mutex was already locked in any possible way this code could be reached. If DEBUG_LOCKORDER is defined, a runtime check that the mutex was actually locked by this thread will be made.\" ? Without DEBUG_LOCKORDER this does nothing at runtime.\r\n\r\nNote that ASSERT_EXCLUSIVE_LOCK has slightly weird scoping behaviour; if `x` requires mutex `m` then:\r\n\r\n```c++\r\n    if (1) { WeaklyAssertLockHeld(m); }\r\n    ++x;\r\n```\r\n\r\nworks fine, while\r\n\r\n```c++\r\n    extern int n;\r\n    if (n > 1) { WeaklyAssertLockHeld(m); }\r\n    ++x;\r\n```\r\ntells you you need to hold the mutex to do `++x`. I couldn't come up with a case where this results in missing a warning though; but I'm not super-confident in it, as compared to being tightly bounded by scopes the way `SCOPED_LOCKABLE` is.",
      "commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "created_at" : "2020-09-08T18:04:08Z",
      "diff_hunk" : "@@ -70,13 +70,34 @@ inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, v\n inline void LeaveCritical() {}\n inline void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n template <typename MutexType>\n-inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs) {}\n+inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) {}\n template <typename MutexType>\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) {}\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+\n+/**\n+ * Assert at compile time and run time that a mutex is locked. Has no effect\n+ * when EXCLUSIVE_LOCKS_REQUIRED annotations are enforced because the runtime\n+ * assertions will never trigger (analogous to asserting an unsigned int is\n+ * greator or equal to 0).\n+ *\n+ * Use of this macro is neither encouraged nor discouraged in new code. It was\n+ * historically used before compile time checks were available, but it may\n+ * still be be useful for virtual methods or std::function callbacks where\n+ * EXCLUSIVE_LOCKS_REQUIRED annotations are not enforced.\n+ */\n+#define AssertLockHeld(mutex) [&]() EXCLUSIVE_LOCKS_REQUIRED(mutex) { AssertLockHeldInternal(#mutex, __FILE__, __LINE__, &mutex); }()\n+\n+/**\n+ * Assert at runtime that a mutex is locked. May be necessary to work around\n+ * EXCLUSIVE_LOCKS_REQUIRED errors when the compiler can't determine that a\n+ * mutex is locked.\n+ */\n+#define WeaklyAssertLockHeld(mutex) [&]() ASSERT_EXCLUSIVE_LOCK(mutex) { AssertLockHeldInternal(#mutex, __FILE__, __LINE__, &mutex); }()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r485102739",
      "id" : 485102739,
      "line" : 98,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwMjczOQ==",
      "original_commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "original_line" : 98,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 40,
      "pull_request_review_id" : 484329563,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-08T18:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485102739",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/127186?v=4",
         "events_url" : "https://api.github.com/users/ajtowns/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ajtowns/followers",
         "following_url" : "https://api.github.com/users/ajtowns/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ajtowns/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ajtowns",
         "id" : 127186,
         "login" : "ajtowns",
         "node_id" : "MDQ6VXNlcjEyNzE4Ng==",
         "organizations_url" : "https://api.github.com/users/ajtowns/orgs",
         "received_events_url" : "https://api.github.com/users/ajtowns/received_events",
         "repos_url" : "https://api.github.com/users/ajtowns/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ajtowns/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ajtowns"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487716721"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487716721"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The compile time check is not an assertion (like `static_assert`), but is a warning. The code will get compiled with it if `--enable-werror` is not used during `./configure`. Maybe reword to:\r\n\r\n> Produce a compilation warning and assert at run time (only if `DEBUG_LOCKORDER` is defined) that a mutex is locked.",
      "commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "created_at" : "2020-09-14T07:50:02Z",
      "diff_hunk" : "@@ -70,13 +70,34 @@ inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, v\n inline void LeaveCritical() {}\n inline void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n template <typename MutexType>\n-inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs) {}\n+inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) {}\n template <typename MutexType>\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) {}\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+\n+/**\n+ * Assert at compile time and run time that a mutex is locked. Has no effect\n+ * when EXCLUSIVE_LOCKS_REQUIRED annotations are enforced because the runtime\n+ * assertions will never trigger (analogous to asserting an unsigned int is\n+ * greator or equal to 0).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487716721",
      "id" : 487716721,
      "line" : 84,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNjcyMQ==",
      "original_commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "original_line" : 84,
      "original_position" : 26,
      "original_start_line" : 81,
      "path" : "src/sync.h",
      "position" : 26,
      "pull_request_review_id" : 487500551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918",
      "side" : "RIGHT",
      "start_line" : 81,
      "start_side" : "RIGHT",
      "updated_at" : "2020-09-14T08:09:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487716721",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487719492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487719492"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe just drop the above paragraph as it contradicts with the developer nodes? IMO the latter is correct.",
      "commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "created_at" : "2020-09-14T07:54:53Z",
      "diff_hunk" : "@@ -70,13 +70,34 @@ inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, v\n inline void LeaveCritical() {}\n inline void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n template <typename MutexType>\n-inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs) {}\n+inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) {}\n template <typename MutexType>\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) {}\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+\n+/**\n+ * Assert at compile time and run time that a mutex is locked. Has no effect\n+ * when EXCLUSIVE_LOCKS_REQUIRED annotations are enforced because the runtime\n+ * assertions will never trigger (analogous to asserting an unsigned int is\n+ * greator or equal to 0).\n+ *\n+ * Use of this macro is neither encouraged nor discouraged in new code. It was\n+ * historically used before compile time checks were available, but it may\n+ * still be be useful for virtual methods or std::function callbacks where\n+ * EXCLUSIVE_LOCKS_REQUIRED annotations are not enforced.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487719492",
      "id" : 487719492,
      "in_reply_to_id" : 485066540,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxOTQ5Mg==",
      "original_commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "original_line" : 89,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 31,
      "pull_request_review_id" : 487500551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-14T08:09:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487719492",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487723681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487723681"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In non-debug build a code like:\r\n\r\n```cpp\r\nWeaklyAssertLockHeld(mutex_required_for_x);\r\nx = 1;\r\n```\r\n\r\nwhere the mutex is not held will **not** produce a compilation warning and will **not** assert at runtime. So the unprotected access will actually happen. This is because `ASSERT_EXCLUSIVE_LOCK` tells the compiler we are going to check, but we actually don't check (in non-debug build). Maybe remove `ASSERT_EXCLUSIVE_LOCK` in non-debug builds, or at least clearly explain in the comment the dangers of using this.",
      "commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "created_at" : "2020-09-14T08:02:18Z",
      "diff_hunk" : "@@ -70,13 +70,34 @@ inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, v\n inline void LeaveCritical() {}\n inline void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n template <typename MutexType>\n-inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs) {}\n+inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) {}\n template <typename MutexType>\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) {}\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+\n+/**\n+ * Assert at compile time and run time that a mutex is locked. Has no effect\n+ * when EXCLUSIVE_LOCKS_REQUIRED annotations are enforced because the runtime\n+ * assertions will never trigger (analogous to asserting an unsigned int is\n+ * greator or equal to 0).\n+ *\n+ * Use of this macro is neither encouraged nor discouraged in new code. It was\n+ * historically used before compile time checks were available, but it may\n+ * still be be useful for virtual methods or std::function callbacks where\n+ * EXCLUSIVE_LOCKS_REQUIRED annotations are not enforced.\n+ */\n+#define AssertLockHeld(mutex) [&]() EXCLUSIVE_LOCKS_REQUIRED(mutex) { AssertLockHeldInternal(#mutex, __FILE__, __LINE__, &mutex); }()\n+\n+/**\n+ * Assert at runtime that a mutex is locked. May be necessary to work around\n+ * EXCLUSIVE_LOCKS_REQUIRED errors when the compiler can't determine that a\n+ * mutex is locked.\n+ */\n+#define WeaklyAssertLockHeld(mutex) [&]() ASSERT_EXCLUSIVE_LOCK(mutex) { AssertLockHeldInternal(#mutex, __FILE__, __LINE__, &mutex); }()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487723681",
      "id" : 487723681,
      "in_reply_to_id" : 485102739,
      "line" : 98,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyMzY4MQ==",
      "original_commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "original_line" : 98,
      "original_position" : 40,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 40,
      "pull_request_review_id" : 487500551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-14T08:09:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487723681",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487727569"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487727569"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "As above, maybe replace \"assert at compile time\" with \"warn at compile time\"?",
      "commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "created_at" : "2020-09-14T08:09:39Z",
      "diff_hunk" : "@@ -70,13 +70,34 @@ inline void EnterCritical(const char* pszName, const char* pszFile, int nLine, v\n inline void LeaveCritical() {}\n inline void CheckLastCritical(void* cs, std::string& lockname, const char* guardname, const char* file, int line) {}\n template <typename MutexType>\n-inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(cs) {}\n+inline void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) {}\n template <typename MutexType>\n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, MutexType* cs) EXCLUSIVE_LOCKS_REQUIRED(!cs) {}\n inline void DeleteLock(void* cs) {}\n inline bool LockStackEmpty() { return true; }\n #endif\n-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n+\n+/**\n+ * Assert at compile time and run time that a mutex is locked. Has no effect\n+ * when EXCLUSIVE_LOCKS_REQUIRED annotations are enforced because the runtime\n+ * assertions will never trigger (analogous to asserting an unsigned int is\n+ * greator or equal to 0).\n+ *\n+ * Use of this macro is neither encouraged nor discouraged in new code. It was\n+ * historically used before compile time checks were available, but it may\n+ * still be be useful for virtual methods or std::function callbacks where\n+ * EXCLUSIVE_LOCKS_REQUIRED annotations are not enforced.\n+ */\n+#define AssertLockHeld(mutex) [&]() EXCLUSIVE_LOCKS_REQUIRED(mutex) { AssertLockHeldInternal(#mutex, __FILE__, __LINE__, &mutex); }()\n+\n+/**\n+ * Assert at runtime that a mutex is locked. May be necessary to work around\n+ * EXCLUSIVE_LOCKS_REQUIRED errors when the compiler can't determine that a\n+ * mutex is locked.\n+ */\n+#define WeaklyAssertLockHeld(mutex) [&]() ASSERT_EXCLUSIVE_LOCK(mutex) { AssertLockHeldInternal(#mutex, __FILE__, __LINE__, &mutex); }()\n+\n+/** Assert at compile time and run time that a mutex is not locked. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19918#discussion_r487727569",
      "id" : 487727569,
      "line" : 100,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcyNzU2OQ==",
      "original_commit_id" : "070803dc7e741c9d43b076b06d9540c6911ee427",
      "original_line" : 100,
      "original_position" : 42,
      "original_start_line" : null,
      "path" : "src/sync.h",
      "position" : 42,
      "pull_request_review_id" : 487500551,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19918",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2020-09-14T08:09:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/487727569",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   }
]
