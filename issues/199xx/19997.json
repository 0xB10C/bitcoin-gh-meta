{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "I'm opening this PR to give a convenient way to see the history #19953 goes through, as review comments get addressed.\r\n\r\nThe intent is to only add commits here, and use merge commit when the real PR undergoes a rebase.\r\n\r\nIt is marked draft as this branch isn't expected to be merged.\r\n\r\n<sub>`PREV=\"$(git rev-parse HEAD)\"; git log --oneline upstream/master..HEAD | while read C L; do if [ \"d${L:0:14}\" == \"d--- [TAPROOT] \" ]; then if [ \"d$PREV\" != \"\" ]; then git diff --shortstat $C..$PREV | (read _ _ _ ADD _ DEL _; echo \"### ${L:14:-4} (https://github.com/sipa/bitcoin/compare/$C...$PREV) [+$ADD -$DEL]:\"); echo; fi; PREV=$C; PREVL=$L; else echo -n \" * $C **${L}**: \"; git show \"$C\" --format=\"%b\" -s | awk '/^$/{exit} 1' | tr $'\\n' ' '; echo; fi; done | tac`</sub>\r\n\r\n### Initial version (2020-09-20) [+2730 -118]\r\n\r\n * 0daa3708e2 **scripted-diff: put ECDSA in name of signature functions**: In preparation for adding Schnorr versions of `CheckSig`, `VerifySignature`, and `ComputeEntry`, give them an ECDSA specific name. \r\n * 135f12ad38 **refactor: rename scriptPubKey in VerifyWitnessProgram to exec_script**: The old name is confusing, as it doesn't store a scriptPubKey, but the actually executed script. \r\n * f4d16cf644 **refactor: keep spent outputs in PrecomputedTransactionData**: A BIP-341 signature message may commit to the scriptPubKeys and amounts of all spent outputs (including other ones than the input being signed for spends), so keep them available to signature hashing code. \r\n * 60ce12334f **Add TaggedHash function (BIP 340)**: This adds the TaggedHash function as defined by BIP340 to the hash module, which is used in BIP340 and BIP341 to produce domain-separated hashes. \r\n * 34da219826 **Implement Taproot signature hashing (BIP 341)**: This implements the new sighashing scheme from BIP341, with all relevant whole-transaction values precomputed once and cached. \r\n * 52ddb42100 **Support for Schnorr signatures and integration in SignatureCheckers (BIP 340)**: This enables the schnorrsig module in libsecp256k1, adds the relevant types and functions to src/pubkey, as well as in higher-level `SignatureChecker` classes. The (verification side of the) BIP340 test vectors is also added. \r\n * 828aed0abd **Implement Taproot validation (BIP 341)**: This includes key path spending and script path spending, but not the Tapscript execution implementation (leaf 0xc0 remains unemcumbered in this commit). \r\n * a39a7ec822 **Use ScriptExecutionData to pass through annex hash**: Instead of recomputing the annex hash every time a signature is verified, compute it once and cache it in a new ScriptExecutionData structure. \r\n * ebce9826f9 **Implement Tapscript script validation rules (BIP 342)**: This adds a new `SigVersion::TAPSCRIPT`, makes the necessary interpreter changes to make it implement BIP342, and uses them for leaf version 0xc0 in Taproot script path spends. \r\n * 812c85615c **Make Taproot spends standard + policy limits**: This adds a `TxoutType::WITNESS_V1_TAPROOT` for P2TR outputs, and permits spending them in standardness rules. No corresponding `CTxDestination` is added for it, as that isn't needed until we want wallet integration. The taproot validation flags are also enabled for mempool transactions, and standardness rules are added (stack item size limit, no annexes). \r\n * 5ee49fd3b8 **Activate Taproot/Tapscript on regtest (BIP 341, BIP 342)**: Define a versionbits-based activation for the new consensus rules on regtest. No activation or activation mechanism is defined for testnet or mainnet. \r\n * 697d461682 **[TESTS] Add BIP340 Schnorr signature support to test framework**: Add a pure Python implementation of BIP340 signing and verification, tested against the BIP's test vectors. \r\n * fd6e288349 **[TESTS] Functional tests for Schnorr/Taproot/Tapscript**: A large functional test is added that automatically generates random transactions which exercise various aspects of the new rules, and verifies they are accepted into the mempool (when appropriate), and correctly accepted/rejected in (Python-constructed) blocks. \r\n * 64030b1152 **[TESTS] Add minimized test vector as unit test**: This adds a relatively small set of test cases for the BIP341/BIP342 script validation rules as a unit test. The tests were generated by modifying the feature_taproot.py randomized tester to dump the constructed transactions and witnesses used, and using the fuzzing framework to minimize it. \r\n\r\n### Updates 2020-09-22 (https://github.com/sipa/bitcoin/compare/33b6a13c86...076dfd97a37678fb7fe818f94e37ede6b5d6048d) [+38 -38]:\r\n * 4f5272cf5c **Document length assumption in XOnlyPubKey::VerifySchnorr correctly**: \r\n * 672b1af9c2 **Make IsOpSuccess match BIP text more closely**: \r\n * c22d75b702 **Use OP_SUCCESSx instead of SUCCESSx in error message**: \r\n * 550edc05e5 **Simplify/clarify tweak_add_{priv,pub}_key in tests**: \r\n * 076dfd97a3 **Python assert does not need parens**: \r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19997/comments",
   "created_at" : "2020-09-22T21:01:32Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19997/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/pull/19997",
   "id" : 706690631,
   "labels" : [
      {
         "color" : "009800",
         "default" : false,
         "description" : null,
         "id" : 192202000,
         "name" : "Consensus",
         "node_id" : "MDU6TGFiZWwxOTIyMDIwMDA=",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Consensus"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19997/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDExOlB1bGxSZXF1ZXN0NDkxMTkzMTQ5",
   "number" : 19997,
   "performed_via_github_app" : null,
   "pull_request" : {
      "diff_url" : "https://github.com/bitcoin/bitcoin/pull/19997.diff",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/19997",
      "patch_url" : "https://github.com/bitcoin/bitcoin/pull/19997.patch",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/19997"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "History for Taproot PR #19953",
   "updated_at" : "2020-09-22T22:13:00Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19997",
   "user" : {
      "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
      "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sipa/followers",
      "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sipa",
      "id" : 548488,
      "login" : "sipa",
      "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
      "organizations_url" : "https://api.github.com/users/sipa/orgs",
      "received_events_url" : "https://api.github.com/users/sipa/received_events",
      "repos_url" : "https://api.github.com/users/sipa/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sipa"
   }
}
