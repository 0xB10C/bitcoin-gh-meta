[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK on improving the design testability and coverage here.",
      "created_at" : "2020-09-17T05:56:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-693931152",
      "id" : 693931152,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5MzkzMTE1Mg==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-17T05:56:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/693931152",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The functional tests cover some parts of the eviction logic but the coverage is spotty/incomplete.\r\n\r\nIn order to get a rough idea of the quality of the current eviction logic testing I performed some basic mutation testing of this code.\r\n\r\nAll tests (including `p2p_eviction.py`) pass successfully also in the presence of these mutations:\r\n\r\n```diff\r\n$ git diff\r\ndiff --git a/src/net.cpp b/src/net.cpp\r\nindex e35d05cec..e138a4a13 100644\r\n--- a/src/net.cpp\r\n+++ b/src/net.cpp\r\n@@ -826,43 +826,36 @@ static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const\r\n\r\n static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n static bool CompareLocalHostTimeConnected(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n-    if (a.m_is_local != b.m_is_local) return b.m_is_local;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\r\n-    return a.nKeyedNetGroup < b.nKeyedNetGroup;\r\n+    return false;\r\n }\r\n\r\n static bool CompareNodeBlockTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n     // There is a fall-through here because it is common for a node to have many peers which have not yet relayed a block.\r\n     if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\r\n-    if (a.fRelevantServices != b.fRelevantServices) return b.fRelevantServices;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n     // There is a fall-through here because it is common for a node to have more than a few peers that have not yet relayed txn.\r\n     if (a.nLastTXTime != b.nLastTXTime) return a.nLastTXTime < b.nLastTXTime;\r\n-    if (a.fRelayTxes != b.fRelayTxes) return b.fRelayTxes;\r\n-    if (a.fBloomFilter != b.fBloomFilter) return a.fBloomFilter;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n // Pick out the potential block-relay only peers, and sort them by last block time.\r\n static bool CompareNodeBlockRelayOnlyTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\r\n {\r\n-    if (a.fRelayTxes != b.fRelayTxes) return a.fRelayTxes;\r\n-    if (a.nLastBlockTime != b.nLastBlockTime) return a.nLastBlockTime < b.nLastBlockTime;\r\n-    if (a.fRelevantServices != b.fRelevantServices) return b.fRelevantServices;\r\n-    return a.nTimeConnected > b.nTimeConnected;\r\n+    return false;\r\n }\r\n\r\n //! Sort an array by the specified comparator, then erase the last K elements.\r\n@@ -870,8 +863,6 @@ template<typename T, typename Comparator>\r\n static void EraseLastKElements(std::vector<T> &elements, Comparator comparator, size_t k)\r\n {\r\n     std::sort(elements.begin(), elements.end(), comparator);\r\n-    size_t eraseSize = std::min(k, elements.size());\r\n-    elements.erase(elements.end() - eraseSize, elements.end());\r\n }\r\n\r\n /** Try to find a connection to evict when the node is full.\r\n$ make\r\n$ make check\r\n$ echo $?\r\n0\r\n$ test/functional/test_runner.py\r\n$ echo $?\r\n0\r\n```",
      "created_at" : "2020-09-17T12:26:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/issues/19966#issuecomment-694196367",
      "id" : 694196367,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/19966",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDY5NDE5NjM2Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2020-09-17T12:33:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/694196367",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
