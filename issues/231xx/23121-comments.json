[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Further motivation:\r\n\r\n(1) The restriction of only allowing confirmed UTXOs for funding a fee-bump doesn't necessarily help our mempool validation logic, but hurts users trying to fee-bump their transactions. If the original transaction's output value isn't sufficient to fund a fee-bump and/or all of the user's other UTXOs are unconfirmed, they might not be able to fee bump. Wallet developers also need to treat self-owned unconfirmed UTXOs as unusable for fee-bumping, which is an unnecessary complication.\r\n\r\n(2) BIP125#2 can also be bypassed: @jnewbery recently pointed out to me that an attacker can simply split a 1-input 1-output transaction off from the replacement transaction, then broadcast the transaction as is. This can always be done, and quite cheaply.\r\n\r\nTo illustrate, Example L shows how BIP125#2 can be bypassed in all cases where the replacement transaction has enough fees to be split into multiple transactions. Example L1 is blocked by BIP125#2 because C is not allowed to spend an output of B. The owner of transaction C can bypass BIP125#2 as shown in example L2. Simply create a 1-input 1-output transaction, C*, that spends the output from B, and replace it with C.\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/135102103-8fc3e943-2a05-48ba-840c-66c05007d5d3.png)\r\n\r\nThis might be a good hack for people who need to RBF transactions and only have unconfirmed UTXOs available, like scenario M, where we want to replace A (a 100vB transaction paying 1000sats), but our only UTXOs are in unconfirmed transactions B and C. We can simply create D*, an intermediary transaction spending the outputs we want from B and C, and then replace that with D. This just means that D needs to pay some additional fees for replacing D* (which can be at the mempool minimum feerate).\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/135105526-0c384e20-a52d-4aa3-8fb5-f14bc2f79df1.png)\r\n\r\nHowever, Example N shows how this strategy can cause us to accept an replacement transaction that is actually less economical to mine than the original. Assume all transactions have a vsize of 100vB. A user wants to replace A, which has an ancestor score of 10sat/vB, with transaction C. Suppose they want to spend an unconfirmed output from transaction B, which has an ancestor score of 1sat/vB (maybe their wallet doesn't have enough funds to provide a higher fee using only confirmed inputs). BIP125#2 prevents scenario N1, where the inclusion of another unconfirmed input means C has an ancestor score of 8sat/vB and thus less economical to mine than A. However, it does not prevent scenario M2, where the user splits off a 1-input 1-output transaction, C*, in order to be able to include the output from B. This causes us to incorrectly accept C (7.5sat/vB including its parent B) in favor of A (10sat/vB).\r\n\r\n![image](https://user-images.githubusercontent.com/25183001/135104603-9e775062-5c8d-4d55-9bc9-6e9db92cfe6d.png)\r\n\r\nAgain, credit to @jnewbery for this discovery.\r\n\r\n(3) I believe package RBF requires removal of BIP125#2, (explained [here](https://gist.github.com/glozow/dc4e9d5c5b14ade7cdfac40f43adb18a#new-unconfirmed-inputs-rule-2) if you're interested). I know this is not a super robust argument, but it would be a much better interface if the two sets of RBF rules are the same.",
      "created_at" : "2021-09-28T17:33:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929475999",
      "id" : 929475999,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843Zq2f",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-28T17:49:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929475999",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22867](https://github.com/bitcoin/bitcoin/pull/22867) (test: Extend test coverage of BIP125 and document confusing/inconsistent behavior by mjdietzx)\n* [#22674](https://github.com/bitcoin/bitcoin/pull/22674) (validation: mempool validation and submission for packages of 1 child + parents by glozow)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-09-28T18:05:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929498773",
      "id" : 929498773,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843ZwaV",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-28T18:05:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929498773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow @jnewbery If you think this discovery has safety implications, have you done a responsible disclosure of this defect not only to the maintainers of this project but also potentially affected ecosystem stakeholders e.g maintainers of other full-nodes implementations ?\r\n\r\n-------------------\r\n\r\nGood finding! IIUC, the bypass trick relies on extending the set of replaced transactions with a 1 input/1 output \"bridge\" transaction spending a targeted new unconfirmed intput. A new replacement candidate tries to replace the bridge and original (the `setConflicts`  computed L620). As `HasNoNewUnconfirmed` considers the parent set of `iters_conflicting` any parent of the bridge and original are qualified of old inputs  and thus allowed to be spend by the replacement candidate. I think the bridge transaction can be extended to N new unconfirmed inputs within package limits ? The bypass trick isn't zero-cost as the Rule#4 penalty must still be paid.\r\n\r\nI think this Rule#2 bypass doesn't present obvious safety implications for LN, even with \"anchor output\" channel type. If an adversary needs currently unconfirmed UTXOs to be used as fee-bumping ones to succeed an attack, she can waits to have them confirmed before to initiate any malicious operation. That's an adversary \"first-move\" advantage anyway. In a pinch, unconfirmed UTXOs could be used to increase the rate of attacks launched sequentially if the UTXOs resources are limited...",
      "created_at" : "2021-09-29T00:07:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-929711645",
      "id" : 929711645,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843akYd",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T00:08:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/929711645",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> If you think this discovery has safety implications, have you done a responsible disclosure of this defect not only to the maintainers of this project but also potentially affected ecosystem stakeholders e.g maintainers of other full-nodes implementations ?\r\n\r\n@ariard I didn't think this is a safety issue for Bitcoin nodes, just slightly incentive-incompatible behavior. The trick isn't completely cost-free and the replacement transaction still needs to be higher fees due to the other BIP125 rules, it's just lower priority for mining than the mempool code thinks it is. Worst case scenario is if the original transaction was going to be in the next block and the replacement transaction isn't. That's unfortunate for the miner of this block since they _might_ lose a bit on fees, and definitely incentive-incompatible mempool behavior, so I think we should fix this.\r\n\r\n> The disclosed fee decrease (good catch) is a breach against the fee-bumping protocol for Revault and really any other protocol that broadcasts ANYONECANPAY-signed inputs. Sure you can always re-RBF it but in the end we can't assume honest node to engage in (and win) a race for fee-bumping.\r\n\r\n@darosior Attempting to summarize, please correct me if I'm misunderstanding: when a transaction has all inputs signed `ANYONECANPAY` and RBF opt-in, any attacker can create a replacement transaction by adding any input they want. Coupled with the strategy mentioned above, they can reduce the ancestor score of this transaction, thereby pinning it. You can re-RBF it, but might need to pay more fees. :scream:",
      "created_at" : "2021-09-29T14:16:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930220389",
      "id" : 930220389,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843cgll",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T14:16:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930220389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Coupled with the strategy mentioned above, they can reduce the ancestor score of this transaction, thereby pinning it\r\n\r\nYes.\r\n\r\n> You can re-RBF it, but might need to pay more fees. scream\r\n\r\nYes, and they can do that again and again (paying more fee at each iteration though so it's a limiting factor). Since nodes will accept any of the low-feerate package or the higher-feerate one it's a game of who will be able to connect to the miners' nodes and maintain their version of the package: at this game we can expect an attacker running a custom software has a much higher success probability than a honest watchtower trying to feebump.",
      "created_at" : "2021-09-29T14:27:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930230217",
      "id" : 930230217,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843ci_J",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T14:27:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930230217",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't suppose it's reasonable to recommend opting out of RBF for now? In any case, I think we need to add this ancestor score checking before we try to do full RBF, since it would leave all `ANYONECANPAY`-signed transactions vulnerable to this pinning attack.",
      "created_at" : "2021-09-29T14:51:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23121#issuecomment-930252121",
      "id" : 930252121,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23121",
      "node_id" : "IC_kwDOABII5843coVZ",
      "performed_via_github_app" : null,
      "updated_at" : "2021-09-29T14:51:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/930252121",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
