[
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK, conditional on that we are going to try make this be default for the release binaries (I don't mean in this PR). I'm generally not a fan of configure options that simply add cflags/linkerflags, but I think that's something for which to make an exception.\r\n\r\n> I had previously had a PR open to perform link time garbage collection (-ffunction-sections -fdata-sections -Wl,--gc-sections), in #18605, however moving straight to using LTO would be preferable.\r\n\r\nAgree. Function/data garbage collection is mostly an executable size concern, it doesn't, besides possibly better (and sometimes worse!) cache access patterns, affect performance.",
      "created_at" : "2021-10-01T07:54:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-931999086",
      "id" : 931999086,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843jS1u",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931999086/reactions"
      },
      "updated_at" : "2021-10-01T08:00:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/931999086",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Concept ACK, conditional on that we are going to try make this be default for the release binaries\r\n\r\nI've added `--enable-lto` to the configure for the Guix build, so it's easier for anyone to test/run those now as well.\r\n\r\nEDIT: Looks like this will need some changes to the Guix toolchains.",
      "created_at" : "2021-10-01T08:20:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932024116",
      "id" : 932024116,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843jY80",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932024116/reactions"
      },
      "updated_at" : "2021-10-01T08:50:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932024116",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Is there a possibility to use -flto=jobserver? That makes GCC use make's parallel scheduler (so the argument to -j is available for multiple parallel compilations). It requires the linker's command in Makefile to be prepended with +.\n\nAlternatively, some way of setting N for -flto=N. Doing the entire LTO stage single-threadedly (the default, I think) would be very slow, especially on machines with lots of cores.\n\nOf course, none of this is a requirement to evaluate whether we want LTO or not.",
      "created_at" : "2021-10-01T13:34:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932234276",
      "id" : 932234276,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843kMQk",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932234276/reactions"
      },
      "updated_at" : "2021-10-01T13:35:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932234276",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> EDIT: Looks like this will need some changes to the Guix toolchains.\r\n\r\nWhich reminds meâshould we enable lto for the depends build as well? I guess it's another separate decision, but it would allow for the most optimization opportunities.",
      "created_at" : "2021-10-01T14:07:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932261757",
      "id" : 932261757,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843kS99",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932261757/reactions"
      },
      "updated_at" : "2021-10-01T14:07:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932261757",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK\r\n\r\nSome LTO results from measurements made back in 2018 can be found in #14277 :)",
      "created_at" : "2021-10-01T14:30:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932281490",
      "id" : 932281490,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843kXyS",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932281490/reactions"
      },
      "updated_at" : "2021-10-01T14:30:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932281490",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2021-10-01T14:51:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932298638",
      "id" : 932298638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843kb-O",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932298638/reactions"
      },
      "updated_at" : "2021-10-01T14:51:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932298638",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "There seems to be a patch for automake to support -flto=jobserver, but it's not yet accepted: https://www.mail-archive.com/automake-patches@gnu.org/msg07973.html",
      "created_at" : "2021-10-01T15:03:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932308376",
      "id" : 932308376,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843keWY",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932308376/reactions"
      },
      "updated_at" : "2021-10-01T15:03:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932308376",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I ran all of the benchmarks with clang++ 12.0.1, g++ 11.1.0 with and without `--enable-lto` on my Intel i7-8700. Some benchmarks results change quite a lot, and I also didn't expect that clang++ and g++ can behave so differently. But microbenchmark results should always be taken with a grain of salt.\r\n\r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|       44,850,331.00 |       41,649,957.00 |       45,752,245.00 |       44,851,254.00 | `AddrManAdd`\r\n|      115,908,612.00 |      108,865,250.00 |      118,227,091.00 |      115,271,712.00 | `AddrManAddThenGood`\r\n|          343,083.67 |          317,334.33 |          357,469.33 |          362,177.00 | `AddrManGetAddr`\r\n|              185.81 |              169.72 |              192.36 |              187.05 | `AddrManSelect`\r\n|          389,690.00 |          369,410.50 |          392,837.50 |          432,549.00 | `AssembleBlock`\r\n                                                                                                  \r\n|             clang++ ns/byte |             clang++ lto ns/byte |             g++ ns/byte |             g++ lto ns/byte | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              110.74 |              111.10 |               69.79 |               70.17 | `Base58CheckEncode`\r\n|               18.69 |               23.26 |               24.59 |               24.62 | `Base58Decode`\r\n|               76.33 |               77.01 |               41.60 |               42.04 | `Base58Encode`\r\n|                9.05 |                8.63 |                9.56 |                9.16 | `Bech32Decode`\r\n|               19.08 |               18.32 |               19.37 |               20.05 | `Bech32Encode`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              157.37 |              152.55 |              172.30 |              174.80 | `BenchLockedPool`\r\n|                4.09 |                2.50 |                4.38 |                5.02 | `BenchTimeDeprecated`\r\n|               24.05 |               20.26 |               24.00 |               20.58 | `BenchTimeMillis`\r\n|               21.95 |               20.16 |               22.97 |               20.63 | `BenchTimeMillisSys`\r\n|                2.21 |                0.31 |                1.56 |                0.63 | `BenchTimeMock`\r\n|       62,958,650.00 |       62,619,805.00 |       59,419,903.00 |       62,824,850.00 | `BlockToJsonVerbose`\r\n|       25,195,748.00 |       25,594,730.00 |       30,520,213.00 |       30,058,971.00 | `BlockToJsonVerboseWrite`\r\n|        1,028,430.00 |        1,084,184.00 |        1,233,630.00 |        1,286,939.00 | `BnBExhaustion`\r\n                                                                                                  \r\n|              clang++ ns/job |              clang++ lto ns/job |              g++ ns/job |              g++ lto ns/job | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              902.03 |              812.48 |              822.47 |              814.88 | `CCheckQueueSpeedPrevectorJob`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              329.16 |              298.86 |              354.83 |              347.61 | `CCoinsCaching`\r\n                                                                                                  \r\n|             clang++ ns/byte |             clang++ lto ns/byte |             g++ ns/byte |             g++ lto ns/byte | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|                1.98 |                1.93 |                1.93 |                1.92 | `CHACHA20_1MB`\r\n|                1.97 |                1.94 |                1.97 |                1.95 | `CHACHA20_256BYTES`\r\n|                2.06 |                2.04 |                2.07 |                2.06 | `CHACHA20_64BYTES`\r\n|                5.58 |                5.54 |                5.54 |                5.51 | `CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT`\r\n|                2.74 |                2.79 |                2.77 |                2.76 | `CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT`\r\n|                7.02 |                6.95 |                7.61 |                7.61 | `CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT`\r\n|                3.53 |                3.47 |                3.82 |                3.78 | `CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT`\r\n|               11.51 |               11.25 |               13.91 |               14.06 | `CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT`\r\n|                5.80 |                5.68 |                6.94 |                6.95 | `CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|          547,191.50 |          542,479.50 |          559,722.50 |          552,408.50 | `CoinSelection`\r\n|      349,819,707.00 |      339,765,062.00 |      307,623,521.00 |      286,347,434.00 | `ComplexMemPool`\r\n                                                                                                  \r\n|             clang++ ns/elem |             clang++ lto ns/elem |             g++ ns/elem |             g++ lto ns/elem | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              183.01 |              171.14 |              159.75 |              159.41 | `ConstructGCSFilter`\r\n                                                                                                  \r\n|            clang++ ns/block |            clang++ lto ns/block |            g++ ns/block |            g++ lto ns/block | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|        6,413,984.00 |        6,106,104.00 |        6,165,040.00 |        6,470,182.00 | `DeserializeAndCheckBlockTest`\r\n|        5,317,655.00 |        5,157,372.00 |        5,142,803.00 |        5,225,309.00 | `DeserializeBlockTest`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|        7,837,080.00 |        7,805,025.00 |        7,807,746.00 |        7,867,452.00 | `DuplicateInputs`\r\n|           10,777.09 |            8,604.29 |           13,273.04 |           10,657.84 | `EvictionProtection0Networks250Candidates`\r\n|           16,693.46 |           12,104.46 |           17,841.92 |           14,626.06 | `EvictionProtection1Networks250Candidates`\r\n|           22,453.76 |           18,138.77 |           23,554.42 |           20,238.65 | `EvictionProtection2Networks250Candidates`\r\n|            3,773.30 |            3,281.87 |            4,258.64 |            3,979.64 | `EvictionProtection3Networks050Candidates`\r\n|           10,160.02 |            8,873.71 |           10,910.08 |           10,462.54 | `EvictionProtection3Networks100Candidates`\r\n|           24,539.60 |           20,099.13 |           26,483.08 |           23,736.26 | `EvictionProtection3Networks250Candidates`\r\n|                1.78 |                2.18 |                1.77 |                1.77 | `FastRandom_1bit`\r\n|               10.25 |               10.22 |                9.49 |                9.20 | `FastRandom_32bit`\r\n                                                                                                  \r\n|             clang++ ns/byte |             clang++ lto ns/byte |             g++ ns/byte |             g++ lto ns/byte | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|                3.21 |                3.20 |                3.18 |                3.19 | `HASH_1MB`\r\n|                5.02 |                4.88 |                5.01 |                4.99 | `HASH_256BYTES`\r\n|               10.50 |               10.02 |               10.52 |               10.41 | `HASH_64BYTES`\r\n                                                                                                  \r\n|             clang++ ns/elem |             clang++ lto ns/elem |             g++ ns/elem |             g++ lto ns/elem | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|           43,724.23 |           23,583.33 |           28,537.38 |           26,545.66 | `MatchGCSFilter`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|           24,054.61 |           23,268.32 |           24,299.66 |           23,389.98 | `MempoolEviction`\r\n                                                                                                  \r\n|             clang++ ns/leaf |             clang++ lto ns/leaf |             g++ ns/leaf |             g++ lto ns/leaf | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              142.35 |              139.38 |              138.71 |              238.02 | `MerkleRoot`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|            6,416.92 |            6,543.58 |            8,118.72 |            8,013.09 | `MuHash`\r\n|            5,345.43 |            5,501.68 |            7,129.37 |            6,946.70 | `MuHashDiv`\r\n|            5,370.88 |            5,496.21 |            7,062.38 |            6,948.19 | `MuHashMul`\r\n|            1,050.07 |            1,031.97 |            1,028.19 |              978.20 | `MuHashPrecompute`\r\n                                                                                                  \r\n|             clang++ ns/byte |             clang++ lto ns/byte |             g++ ns/byte |             g++ lto ns/byte | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|                0.79 |                0.79 |                0.83 |                0.83 | `POLY1305_1MB`\r\n|                0.87 |                0.88 |                0.89 |                0.89 | `POLY1305_256BYTES`\r\n|                1.08 |                1.08 |                1.09 |                1.09 | `POLY1305_64BYTES`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              233.72 |              218.40 |              229.82 |              229.67 | `PrePadded`\r\n|                4.96 |                8.15 |               15.31 |               15.00 | `PrevectorClearNontrivial`\r\n|                5.65 |                5.43 |                4.55 |                4.54 | `PrevectorClearTrivial`\r\n|              327.33 |              316.28 |              114.71 |              123.24 | `PrevectorDeserializeNontrivial`\r\n|               17.38 |               16.27 |               10.55 |               14.19 | `PrevectorDeserializeTrivial`\r\n|               10.30 |                7.97 |                7.23 |                7.04 | `PrevectorDestructorNontrivial`\r\n|               10.27 |                7.32 |                7.32 |                7.19 | `PrevectorDestructorTrivial`\r\n|                2.28 |                3.98 |                7.58 |                7.53 | `PrevectorResizeNontrivial`\r\n|                2.74 |                2.73 |                2.14 |                2.26 | `PrevectorResizeTrivial`\r\n                                                                                                  \r\n|             clang++ ns/byte |             clang++ lto ns/byte |             g++ ns/byte |             g++ lto ns/byte | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|                2.54 |                2.56 |                2.52 |                2.53 | `RIPEMD160`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|              443.48 |              427.45 |              441.40 |              441.89 | `RegularPadded`\r\n|              537.25 |              486.07 |              493.83 |              431.17 | `RollingBloom`\r\n|           32,004.94 |           33,067.62 |           35,217.81 |           33,502.58 | `RollingBloomReset`\r\n|       10,805,603.00 |       10,352,368.00 |       10,300,251.00 |       10,862,213.00 | `RpcMempool`\r\n                                                                                                  \r\n|             clang++ ns/byte |             clang++ lto ns/byte |             g++ ns/byte |             g++ lto ns/byte | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|                1.92 |                1.85 |                1.87 |                1.88 | `SHA1`\r\n|                3.21 |                3.19 |                3.18 |                3.19 | `SHA256`\r\n|                2.05 |                2.04 |                2.04 |                3.58 | `SHA256D64_1024`\r\n|                7.37 |                6.88 |                7.20 |                7.16 | `SHA256_32b`\r\n|                4.11 |                4.03 |                4.01 |                4.02 | `SHA3_256_1M`\r\n|                3.07 |                2.96 |                2.94 |                4.42 | `SHA512`\r\n                                                                                                  \r\n|               clang++ ns/op |               clang++ lto ns/op |               g++ ns/op |               g++ lto ns/op | benchmark\r\n|--------------------:|--------------------:|--------------------:|--------------------:|:----------\r\n|               29.88 |               29.51 |               28.23 |               28.05 | `SipHash_32b`\r\n|               10.09 |                9.84 |                8.68 |                8.97 | `Trig`\r\n|           83,430.64 |           77,216.85 |           83,367.50 |           88,736.58 | `VerifyNestedIfScript`\r\n|           96,481.36 |           94,740.30 |           97,176.62 |           96,895.70 | `VerifyScriptBench`\r\n|           37,446.16 |           38,476.75 |           40,102.65 |           36,176.27 | `WalletBalanceClean`\r\n|          254,368.50 |          241,829.00 |          278,516.50 |          262,199.75 | `WalletBalanceDirty`\r\n|           18,055.69 |           18,901.00 |           19,411.54 |           17,680.53 | `WalletBalanceMine`\r\n|           36,783.80 |           38,399.57 |           39,947.21 |           36,207.50 | `WalletBalanceWatch`\r\n",
      "created_at" : "2021-10-01T22:23:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932611057",
      "id" : 932611057,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843loPx",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932611057/reactions"
      },
      "updated_at" : "2021-10-01T22:23:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932611057",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@martinus Man, that's a wildly inconsistent set of differences... I don't see anything really dramatic, though.",
      "created_at" : "2021-10-01T23:16:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932628920",
      "id" : 932628920,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843lsm4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932628920/reactions"
      },
      "updated_at" : "2021-10-01T23:17:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932628920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I've now calculated the geometric mean of all the benchmark results:\r\n\r\ngeomean of runtime (lower is better) | compiler\r\n---:|---\r\n500.60 | clang++ \r\n470.27 | clang++ lto\r\n501.78 | g++\r\n498.56 | g++ lto\r\n\r\nSo on average clang++ seems to benefit in the benchmarks, but for g++ the change is not significant. I'd say one needs to do more real world benchmarks to see if it's a benefit.\r\n\r\nOne other interesting observeration: When compiling with `--enable-lto` g++ seems to be able to detect more problems. E.g. it found this:\r\n\r\n```\r\nIn member function 'operator=',\r\n    inlined from 'Seed' at test/util/setup_common.cpp:66:33,\r\n    inlined from 'SeedInsecureRand' at ./test/util/setup_common.h:61:13,\r\n    inlined from '__ct_base ' at test/util/setup_common.cpp:105:21:\r\nrandom.cpp:702:19: warning: 'D.34682.bitbuf' may be used uninitialized [-Wmaybe-uninitialized]\r\n  702 |     bitbuf = from.bitbuf;\r\n      |                   ^\r\ntest/util/setup_common.cpp: In member function '__ct_base ':\r\ntest/util/setup_common.cpp:66:33: note: '<anonymous>' declared here\r\n   66 |     ctx = FastRandomContext(seed);\r\n```\r\n\r\nThe `FastRandomContext(const uint256& seed)` constructor does not initialize the `uint64_t bitbuf` member, and in `FastRandomContext& operator=(FastRandomContext&& from) noexcept;` the uninitialized variable is copied with `bitbuf = from.bitbuf;` which technically is undefined behavior.",
      "created_at" : "2021-10-02T10:43:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932730690",
      "id" : 932730690,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843mFdC",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932730690/reactions"
      },
      "updated_at" : "2021-10-02T10:43:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932730690",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--9cd9c72976c961c55c7acef8f6ba82cd-->\n### Guix builds\n\n| File | commit 35a31d5f7e9cd71a210c1ed10abc9d772ff36049<br>(master) | commit 714cfae09db70a39178bf5c511e36f6a69ebf444<br>(master and this pull) |\n|--|--|--|\n| SHA256SUMS.part | [`492a0384086452ac...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/SHA256SUMS.part) |  |\n| *-aarch64-linux-gnu-debug.tar.gz | [`16867c76796473c4...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-aarch64-linux-gnu-debug.tar.gz) |  |\n| *-aarch64-linux-gnu.tar.gz | [`84f0fc972786971e...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-aarch64-linux-gnu.tar.gz) |  |\n| *-arm-linux-gnueabihf-debug.tar.gz | [`5b359cfd87fe6818...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-arm-linux-gnueabihf-debug.tar.gz) |  |\n| *-arm-linux-gnueabihf.tar.gz | [`9e96ecfbf8c48873...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-arm-linux-gnueabihf.tar.gz) |  |\n| *-osx-unsigned.dmg | [`e5800e67dc17c84a...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-osx-unsigned.dmg) |  |\n| *-osx-unsigned.tar.gz | [`1a6e9cc4e80d90f8...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-osx-unsigned.tar.gz) |  |\n| *-osx64.tar.gz | [`8ecd00cb3ff5b3d8...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-osx64.tar.gz) |  |\n| *-powerpc64-linux-gnu-debug.tar.gz | [`764ebaf4c6b477f9...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-powerpc64-linux-gnu-debug.tar.gz) |  |\n| *-powerpc64-linux-gnu.tar.gz | [`a7edc8f7e6b99b6b...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-powerpc64-linux-gnu.tar.gz) |  |\n| *-powerpc64le-linux-gnu-debug.tar.gz | [`6c33e5a013404a04...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-powerpc64le-linux-gnu-debug.tar.gz) |  |\n| *-powerpc64le-linux-gnu.tar.gz | [`d6325b26303e2ebe...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-powerpc64le-linux-gnu.tar.gz) |  |\n| *-riscv64-linux-gnu-debug.tar.gz | [`16c387740dbb267a...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-riscv64-linux-gnu-debug.tar.gz) |  |\n| *-riscv64-linux-gnu.tar.gz | [`4e7af7c1951b26c8...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-riscv64-linux-gnu.tar.gz) |  |\n| *-win-unsigned.tar.gz | [`48b2aa0938825646...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-win-unsigned.tar.gz) |  |\n| *-win64-debug.zip | [`06a1c171366eab17...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-win64-debug.zip) |  |\n| *-win64-setup-unsigned.exe | [`18ce9615047ca3d8...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-win64-setup-unsigned.exe) |  |\n| *-win64.zip | [`fb2c616343319e1c...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-win64.zip) |  |\n| *-x86_64-linux-gnu-debug.tar.gz | [`0f4f1b9674caec9d...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-x86_64-linux-gnu-debug.tar.gz) |  |\n| *-x86_64-linux-gnu.tar.gz | [`50c45e817dac2f49...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c-x86_64-linux-gnu.tar.gz) |  |\n| *.tar.gz | [`9108535d941ed527...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/bitcoin-35a31d5f7e9c.tar.gz) | [`a9e7069607b12094...`](https://drahtbot.space/guix/bitcoin/bitcoin/714cfae09db70a39178bf5c511e36f6a69ebf444/bitcoin-714cfae09db7.tar.gz) |\n| guix_build.log | [`4abd25ecdb41ec97...`](https://drahtbot.space/guix/bitcoin/bitcoin/35a31d5f7e9cd71a210c1ed10abc9d772ff36049/guix_build.log) | [`c0f963cc4b0cdf4f...`](https://drahtbot.space/guix/bitcoin/bitcoin/714cfae09db70a39178bf5c511e36f6a69ebf444/guix_build.log) |\n| guix_build.log.diff |  | [`801c2a9a90baa5a5...`](https://drahtbot.space/guix/bitcoin/bitcoin/714cfae09db70a39178bf5c511e36f6a69ebf444/guix_build.log.diff) |\n\n",
      "created_at" : "2021-10-02T13:33:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932753211",
      "id" : 932753211,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843mK87",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932753211/reactions"
      },
      "updated_at" : "2021-10-02T13:33:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932753211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> One other interesting observeration: When compiling with `--enable-lto` g++ seems to be able to detect more problems. E.g. it found this:\r\n> \r\n> ```\r\n> In member function 'operator=',\r\n>     inlined from 'Seed' at test/util/setup_common.cpp:66:33,\r\n>     inlined from 'SeedInsecureRand' at ./test/util/setup_common.h:61:13,\r\n>     inlined from '__ct_base ' at test/util/setup_common.cpp:105:21:\r\n> random.cpp:702:19: warning: 'D.34682.bitbuf' may be used uninitialized [-Wmaybe-uninitialized]\r\n>   702 |     bitbuf = from.bitbuf;\r\n>       |                   ^\r\n> test/util/setup_common.cpp: In member function '__ct_base ':\r\n> test/util/setup_common.cpp:66:33: note: '<anonymous>' declared here\r\n>    66 |     ctx = FastRandomContext(seed);\r\n> ```\r\n> \r\n> The `FastRandomContext(const uint256& seed)` constructor does not initialize the `uint64_t bitbuf` member, and in `FastRandomContext& operator=(FastRandomContext&& from) noexcept;` the uninitialized variable is copied with `bitbuf = from.bitbuf;` which technically is undefined behavior.\r\n\r\nGreat find @martinus!\r\n\r\nEnabling more intelligent compiler reasoning is a very good reason for LTO :)\r\n\r\nAfter some testing I can confirm that the uninitialized read above is reachable from testing code.\r\n\r\nCan be verified by applying the following patch:\r\n\r\n```patch\r\ndiff --git a/src/random.cpp b/src/random.cpp\r\nindex 174f4cef3..73e946783 100644\r\n--- a/src/random.cpp\r\n+++ b/src/random.cpp\r\n@@ -693,13 +693,30 @@ FastRandomContext::FastRandomContext(bool fDeterministic) noexcept : requires_se\r\n     rng.SetKey(seed.begin(), 32);\r\n }\r\n\r\n+// Force Valgrind use-of-uninitialized memory (UUM) violation if `o` is uninitialized.\r\n+//\r\n+// As suggested by @guidovranken in https://github.com/bitcoin/bitcoin/issues/22064\r\n+template<typename T>\r\n+void ForceValgrindWarningIfUninitialized(const T& o) {\r\n+    static_assert(std::is_trivially_copyable<T>::value);\r\n+    FILE* f = fopen(\"/dev/null\", \"wb\");\r\n+    fwrite(&o, sizeof(o), 1, f);\r\n+    fclose(f);\r\n+}\r\n+\r\n FastRandomContext& FastRandomContext::operator=(FastRandomContext&& from) noexcept\r\n {\r\n+    ForceValgrindWarningIfUninitialized(from.requires_seed);\r\n     requires_seed = from.requires_seed;\r\n+    ForceValgrindWarningIfUninitialized(from.rng);\r\n     rng = from.rng;\r\n+    ForceValgrindWarningIfUninitialized(from.bytebuf);\r\n     std::copy(std::begin(from.bytebuf), std::end(from.bytebuf), std::begin(bytebuf));\r\n+    ForceValgrindWarningIfUninitialized(from.bytebuf_size);\r\n     bytebuf_size = from.bytebuf_size;\r\n+    ForceValgrindWarningIfUninitialized(from.bitbuf);\r\n     bitbuf = from.bitbuf;\r\n+    ForceValgrindWarningIfUninitialized(from.bitbuf_size);\r\n     bitbuf_size = from.bitbuf_size;\r\n     from.requires_seed = true;\r\n     from.bytebuf_size = 0;\r\n```\r\n\r\nAnd running `valgrind src/test/test_bitcoin -t addrman_tests/addrman_simple`:\r\n\r\n```\r\n==22209== Memcheck, a memory error detector\r\nâ¦\r\nRunning 1 test case...\r\n==22209== Syscall param write(buf) points to uninitialised byte(s)\r\n==22209==    at 0x736A264: write (write.c:27)\r\n==22209==    by 0x72E522C: _IO_file_write@@GLIBC_2.2.5 (fileops.c:1203)\r\n==22209==    by 0x72E6FC0: new_do_write (fileops.c:457)\r\n==22209==    by 0x72E6FC0: _IO_do_write@@GLIBC_2.2.5 (fileops.c:433)\r\n==22209==    by 0x72E637F: _IO_file_close_it@@GLIBC_2.2.5 (fileops.c:136)\r\n==22209==    by 0x72D83F6: fclose@@GLIBC_2.2.5 (iofclose.c:53)\r\n==22209==    by 0xDA86B7: ForceValgrindWarningIfUninitialized<unsigned char [64]> (random.cpp:704)\r\n==22209==    by 0xDA86B7: FastRandomContext::operator=(FastRandomContext&&) (random.cpp:713)\r\n==22209==    by 0x9CFD67: Seed(FastRandomContext&) (setup_common.cpp:66)\r\n==22209==    by 0x9D066B: SeedInsecureRand (setup_common.h:61)\r\n==22209==    by 0x9D066B: BasicTestingSetup::BasicTestingSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<char const*, std::allocator<char const*> > const&) (setup_common.cpp:105)\r\n==22209==    by 0x3AB6BE: addrman_simple (addrman_tests.cpp:166)\r\nâ¦\r\n```",
      "created_at" : "2021-10-03T08:24:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-932887861",
      "id" : 932887861,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843mr01",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932887861/reactions"
      },
      "updated_at" : "2021-10-03T08:24:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/932887861",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "I ran a few `-reindex-chainstate` benchmarks overnight on my Intel i7 CPU:\r\n\r\nRunning `-assumevalid=00000000000000000002a23d6df20eecec15b21d32c75833cce28f113de888b7 -reindex-chainstate -stopatheight=400000 -dbcache=4000`\r\n\r\nuser [sec] | system [sec] | total [sec] | total relativ | compiler\r\n---:|---:|---:|---:|---\r\n1863.15 | 69.09 | 1932.24 | 100.00% | g++\r\n1852.46 | 68.42 | 1920.88 | 99.41% | g++ lto\r\n1827.73 | 69.73 | 1897.46 | 98.20% | clang++\r\n1788.40 | 70.35 | 1858.75 | 96.20% | clang++ lto\r\n\r\nRunning `-assumevalid=0 -reindex-chainstate -stopatheight=400000 -dbcache=4000`\r\n\r\nuser [sec] | system [sec] | total [sec] | total relative | compiler\r\n---:|---:|---:|---:|---\r\n35243.08 | 158.50 | 35401.58 | 100.00% | g++\r\n35491.77 | 154.54 | 35646.30 | 100.69% | g++ lto\r\n32663.09 | 158.60 | 32821.68 | 92.71% | clang++\r\n32184.18 | 154.70 | 32338.88 | 91.35% | clang++ lto\r\n\r\nMy takeaways:\r\n\r\n* `--enable-lto` seems to make g++ 11.1.0 builds slightly slower (but the change is not significant)\r\n* `--enable-lto` makes clang++ 12.0.1 builds slightly faster\r\n* clang 12.0.1 optimizes significantly better than g++ 11.1, especially when validating scripts (`-asumevalid=0`) This is in line with what [this phoronix article found](https://www.phoronix.com/scan.php?page=article&item=clang12-gcc11-icelake&num=1)\r\n\r\n\r\n\r\n",
      "created_at" : "2021-10-04T04:48:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-933140344",
      "id" : 933140344,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843npd4",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933140344/reactions"
      },
      "updated_at" : "2021-10-04T04:49:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933140344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/14386?v=4",
         "events_url" : "https://api.github.com/users/martinus/events{/privacy}",
         "followers_url" : "https://api.github.com/users/martinus/followers",
         "following_url" : "https://api.github.com/users/martinus/following{/other_user}",
         "gists_url" : "https://api.github.com/users/martinus/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/martinus",
         "id" : 14386,
         "login" : "martinus",
         "node_id" : "MDQ6VXNlcjE0Mzg2",
         "organizations_url" : "https://api.github.com/users/martinus/orgs",
         "received_events_url" : "https://api.github.com/users/martinus/received_events",
         "repos_url" : "https://api.github.com/users/martinus/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/martinus/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/martinus/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/martinus"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@martinus thanks for the testing so far.\r\n\r\nFor more benchmarking / testing, I've added an additional commit which adds a `--enable-thin-lto` flag. Note that this is Clang only, and will run with much more parallelism than fat LTO.\r\n\r\nI've also added a commit that will partially fix using LTO in the Guix builds. After discussing with @dongcarl , we've realized that using the `gcc-*` wrappers for `ar`, `ranlib` etc is \"better\" when using LTO, as the required `--plugin` arguments will be setup automatically. I've successfully completed a `x86_64-linux-gnu` Guix build, with LTO, with this change.",
      "created_at" : "2021-10-04T06:23:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23152#issuecomment-933179113",
      "id" : 933179113,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/23152",
      "node_id" : "IC_kwDOABII5843ny7p",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933179113/reactions"
      },
      "updated_at" : "2021-10-04T06:23:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933179113",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   }
]
