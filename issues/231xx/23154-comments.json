[
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720868458"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720868458"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"see `ActivateSnapshot()`\" ?",
      "commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "created_at" : "2021-10-03T18:32:05Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720868458",
      "id" : 720868458,
      "line" : 67,
      "node_id" : "PRRC_kwDOABII584q95Rq",
      "original_commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "original_line" : 67,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "doc/assumeutxo.md",
      "position" : 67,
      "pull_request_review_id" : 769614599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720868458/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-03T18:45:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720868458",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720868523"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720868523"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"see `MaybeRebalanceCaches`\" ? ?",
      "commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "created_at" : "2021-10-03T18:32:43Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.\n+During snapshot load and validation (see `PopulateAndValidateSnapshot()`), the\n+new chainstate is not considered active and\n+the original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache as our chief consideration is getting to network tip.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720868523",
      "id" : 720868523,
      "line" : 89,
      "node_id" : "PRRC_kwDOABII584q95Sr",
      "original_commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "original_line" : 89,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "doc/assumeutxo.md",
      "position" : 89,
      "pull_request_review_id" : 769614599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720868523/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-03T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720868523",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720869222"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869222"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do you have a Big Comment(tm) warning users of ValidationInterface callbacks of this subtlety ? Grepping quickly `src/validationinterface.h`, I don't see a mention of background/snapshot chainstate. Could be nice to be added at somepoint.",
      "commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "created_at" : "2021-10-03T18:38:09Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.\n+During snapshot load and validation (see `PopulateAndValidateSnapshot()`), the\n+new chainstate is not considered active and\n+the original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache as our chief consideration is getting to network tip.\n+\n+**Failure consideration:** if shutdown happens at any point during this phase, both\n+chainstates will be detected during the next init and the process will resume.\n+\n+### Snapshot chainstate hits network tip\n+\n+Once the snapshot chainstate leaves IBD, caches are rebalanced\n+(via `MaybeRebalanceCaches()` in `ActivateBestChain()`) and more cache is given\n+to the background chainstate, which is responsible for doing full validation of the\n+assumed-valid parts of the chain.\n+\n+**Note:** at this point, ValidationInterface callbacks will be coming in from both\n+chainstates. Considerations here must be made for indexing, which may no longer be happening\n+sequentially.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720869222",
      "id" : 720869222,
      "line" : 103,
      "node_id" : "PRRC_kwDOABII584q95dm",
      "original_commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "original_line" : 103,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "doc/assumeutxo.md",
      "position" : 103,
      "pull_request_review_id" : 769614599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869222/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-03T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869222",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720869709"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869709"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think `m_stop_use` isn't yet landed. Maybe add a \"//XXX:\" pointing to the downstream branch where it's present ? Like docs isn't matching yet the code.",
      "commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "created_at" : "2021-10-03T18:41:34Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.\n+During snapshot load and validation (see `PopulateAndValidateSnapshot()`), the\n+new chainstate is not considered active and\n+the original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache as our chief consideration is getting to network tip.\n+\n+**Failure consideration:** if shutdown happens at any point during this phase, both\n+chainstates will be detected during the next init and the process will resume.\n+\n+### Snapshot chainstate hits network tip\n+\n+Once the snapshot chainstate leaves IBD, caches are rebalanced\n+(via `MaybeRebalanceCaches()` in `ActivateBestChain()`) and more cache is given\n+to the background chainstate, which is responsible for doing full validation of the\n+assumed-valid parts of the chain.\n+\n+**Note:** at this point, ValidationInterface callbacks will be coming in from both\n+chainstates. Considerations here must be made for indexing, which may no longer be happening\n+sequentially.\n+\n+### Background chainstate hits snapshot base block\n+\n+Once the tip of the background chainstate hits the base block of the snapshot\n+chainstate, we stop use of the background chainstate (by setting `m_stop_use` in",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720869709",
      "id" : 720869709,
      "line" : 108,
      "node_id" : "PRRC_kwDOABII584q95lN",
      "original_commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "original_line" : 108,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "doc/assumeutxo.md",
      "position" : 108,
      "pull_request_review_id" : 769614599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869709/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-03T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869709",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720869990"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869990"
         }
      },
      "author_association" : "MEMBER",
      "body" : "From a user, observing the chainstate from RPC calls, do you have any difference with the above \"Normal\" operation\" at that stage or they're fully similar ?",
      "commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "created_at" : "2021-10-03T18:44:35Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.\n+During snapshot load and validation (see `PopulateAndValidateSnapshot()`), the\n+new chainstate is not considered active and\n+the original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache as our chief consideration is getting to network tip.\n+\n+**Failure consideration:** if shutdown happens at any point during this phase, both\n+chainstates will be detected during the next init and the process will resume.\n+\n+### Snapshot chainstate hits network tip\n+\n+Once the snapshot chainstate leaves IBD, caches are rebalanced\n+(via `MaybeRebalanceCaches()` in `ActivateBestChain()`) and more cache is given\n+to the background chainstate, which is responsible for doing full validation of the\n+assumed-valid parts of the chain.\n+\n+**Note:** at this point, ValidationInterface callbacks will be coming in from both\n+chainstates. Considerations here must be made for indexing, which may no longer be happening\n+sequentially.\n+\n+### Background chainstate hits snapshot base block\n+\n+Once the tip of the background chainstate hits the base block of the snapshot\n+chainstate, we stop use of the background chainstate (by setting `m_stop_use` in\n+`CompleteSnapshotValidation()`, which is checked in `ActivateBestChain()`). We hash the\n+background chainstate's UTXO set contents and ensure it matches the compiled\n+value in `CMainParams::m_assumeutxo_data`.\n+\n+The background chainstate data lingers on disk until shutdown, when in\n+`ChainstateManager::Reset()`, the background chainstate is cleaned up with\n+`ValidatedSnapshotShutdownCleanup()`, which renames the `chainstate_[hash]` datadir as\n+`chainstate`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 (ibd has `m_stop_use=true`) |\n+| active chainstate | snapshot |\n+\n+**Failure consideration:** if bitcoind unexpectedly halts after `m_stop_use` is set on\n+the background chainstate but before `CompleteSnapshotValidation()` can finish, the\n+need to complete snapshot validation will be detected on subsequent init by\n+`ChainstateManager::CheckForUncleanShutdown()`.\n+\n+### Bitcoind restarts sometime after snapshot validation has completed\n+\n+When the bitcoind initializes again, what began as the snapshot chainstate is now\n+indistinguishable from a chainstate that has been built from the traditional IBD\n+process, and will be initialized as such.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r720869990",
      "id" : 720869990,
      "line" : 132,
      "node_id" : "PRRC_kwDOABII584q95pm",
      "original_commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "original_line" : 132,
      "original_position" : 132,
      "original_start_line" : null,
      "path" : "doc/assumeutxo.md",
      "position" : 132,
      "pull_request_review_id" : 769614599,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869990/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-03T18:45:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/720869990",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r721252232"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721252232"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps you could call this ibd chainstate, and not background? Or anything not background, because at some point background also refers to the snapshot as well",
      "commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "created_at" : "2021-10-04T10:54:40Z",
      "diff_hunk" : "@@ -0,0 +1,137 @@\n+# assumeutxo\n+\n+Assumeutxo is a feature that allows fast bootstrapping of a validating bitcoind\n+instance with a very similar security model to assumevalid.\n+\n+The RPC commands `dumptxoutset` and `loadtxoutset` are used to respectively generate\n+and load UTXO snapshots. The utility script `./contrib/devtools/utxo_snapshot.sh` may\n+be of use.\n+\n+## General background\n+\n+- [assumeutxo proposal](https://github.com/jamesob/assumeutxo-docs/tree/2019-04-proposal/proposal)\n+- [Github issue](https://github.com/bitcoin/bitcoin/issues/15605)\n+- [draft PR](https://github.com/bitcoin/bitcoin/pull/15606)\n+\n+## Design notes\n+\n+- A new block index `nStatus` flag is introduced, `BLOCK_ASSUMED_VALID`, to mark block\n+  index entries that are required to be assumed-valid by a chainstate created\n+  from a UTXO snapshot. This flag is mostly used as a way to modify certain\n+  CheckBlockIndex() logic to account for index entries that are pending validation by a\n+  chainstate running asynchronously in the background. We also use this flag to control\n+  which index entries are added to setBlockIndexCandidates during LoadBlockIndex().\n+\n+- Indexing implementations via BaseIndex can no longer assume that indexation happens\n+  sequentially, since background validation chainstates can submit BlockConnected\n+  events out of order with the active chain.\n+\n+- The concept of UTXO snapshots is treated as an implementation detail that lives\n+  behind the ChainstateManager interface. The external presentation of the changes\n+  required to facilitate the use of UTXO snapshots is the understanding that there are\n+  now certain regions of the chain that can be temporarily assumed to be valid (using\n+  the nStatus flag mentioned above). In certain cases, e.g. wallet rescanning, this is\n+  very similar to dealing with a pruned chain.\n+\n+  Logic outside ChainstateManager should try not to know about snapshots, instead\n+  preferring to work in terms of more general states like assumed-valid.\n+\n+\n+## Chainstate phases\n+\n+Chainstate within the system goes through a number of phases when UTXO snapshots are\n+used, as managed by `ChainstateManager`. At various points there can be multiple\n+`CChainState` objects in existence to facilitate both maintaining the network tip and\n+performing historical validation of the assumed-valid chain.\n+\n+It is worth noting that though there are multiple separate chainstates, those\n+chainstates share use of a common block index (i.e. they hold the same `BlockManager`\n+reference).\n+\n+The subheadings below outline the phases and the corresponding changes to chainstate\n+data.\n+\n+### \"Normal\" operation via initial block download\n+\n+`ChainstateManager` manages a single CChainState object, for which\n+`m_snapshot_blockhash` is null. This chainstate is (maybe obviously)\n+considered active. This is the \"traditional\" mode of operation for bitcoind.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 1 |\n+| active chainstate | ibd |\n+\n+### User loads a UTXO snapshot via `loadtxoutset` RPC\n+\n+`ChainstateManager` initializes a new chainstate to load the snapshot contents into.\n+During snapshot load and validation (see `PopulateAndValidateSnapshot()`), the\n+new chainstate is not considered active and\n+the original chainstate remains in use as active.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | ibd |\n+\n+Once the snapshot chainstate is loaded and validated, it is promoted to active\n+chainstate and a sync to tip begins. A new chainstate directory is created in the\n+datadir for the snapshot chainstate called\n+`chainstate_[SHA256 blockhash of snapshot base block]`.\n+\n+|    |    |\n+| ---------- | ----------- |\n+| number of chainstates | 2 |\n+| active chainstate | snapshot |\n+\n+The snapshot begins to sync to tip from its base block, technically in parallel with\n+the original chainstate, but it is given priority during block download and is\n+allocated most of the cache as our chief consideration is getting to network tip.\n+\n+**Failure consideration:** if shutdown happens at any point during this phase, both\n+chainstates will be detected during the next init and the process will resume.\n+\n+### Snapshot chainstate hits network tip\n+\n+Once the snapshot chainstate leaves IBD, caches are rebalanced\n+(via `MaybeRebalanceCaches()` in `ActivateBestChain()`) and more cache is given\n+to the background chainstate, which is responsible for doing full validation of the\n+assumed-valid parts of the chain.\n+\n+**Note:** at this point, ValidationInterface callbacks will be coming in from both\n+chainstates. Considerations here must be made for indexing, which may no longer be happening\n+sequentially.\n+\n+### Background chainstate hits snapshot base block",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/23154#discussion_r721252232",
      "id" : 721252232,
      "line" : 105,
      "node_id" : "PRRC_kwDOABII584q_W-I",
      "original_commit_id" : "4c29459b44f70d264466dd5e23aa456d9c1b62c8",
      "original_line" : 105,
      "original_position" : 105,
      "original_start_line" : null,
      "path" : "doc/assumeutxo.md",
      "position" : 105,
      "pull_request_review_id" : 770142961,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/23154",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721252232/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-10-04T10:54:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/721252232",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7975071?v=4",
         "events_url" : "https://api.github.com/users/naumenkogs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/naumenkogs/followers",
         "following_url" : "https://api.github.com/users/naumenkogs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/naumenkogs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/naumenkogs",
         "id" : 7975071,
         "login" : "naumenkogs",
         "node_id" : "MDQ6VXNlcjc5NzUwNzE=",
         "organizations_url" : "https://api.github.com/users/naumenkogs/orgs",
         "received_events_url" : "https://api.github.com/users/naumenkogs/received_events",
         "repos_url" : "https://api.github.com/users/naumenkogs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/naumenkogs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/naumenkogs"
      }
   }
]
