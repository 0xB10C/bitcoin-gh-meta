[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-07-11T14:19:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28066#issuecomment-1630922459",
      "id" : 1630922459,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28066",
      "node_id" : "IC_kwDOABII585hNebb",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1630922459/reactions"
      },
      "updated_at" : "2023-07-11T14:19:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1630922459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1259974561"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259974561"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think `--perl-regexp` won't work on MacOS.\r\n\r\nSee (MacOS 13.0 (M1)):\r\n```sh\r\nâ  bitcoin-core-dev git:(28066-marco) â ./test/fuzz/test_runner.py corpus process_message -g\r\n1 of 168 detected fuzz target(s) selected: process_message\r\nGenerating corpus to corpus\r\ngrep: unrecognized option `--perl-regexp'\r\nusage: grep [-abcdDEFGHhIiJLlMmnOopqRSsUVvwXxZz] [-A num] [-B num] [-C[num]]\r\n        [-e pattern] [-f file] [--binary-files=value] [--color=when]\r\n        [--context[=num]] [--directories=action] [--label] [--line-buffered]\r\n        [--null] [pattern] [file ...]\r\nTraceback (most recent call last):\r\n  File \"/Users/brunogarcia/projects/bitcoin-core-dev/./test/fuzz/test_runner.py\", line 365, in <module>\r\n    main()\r\n  File \"/Users/brunogarcia/projects/bitcoin-core-dev/./test/fuzz/test_runner.py\", line 165, in main\r\n    return generate_corpus(\r\n           ^^^^^^^^^^^^^^^^\r\n  File \"/Users/brunogarcia/projects/bitcoin-core-dev/./test/fuzz/test_runner.py\", line 236, in generate_corpus\r\n    targets = transform_targets(targets, src_dir)\r\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/Users/brunogarcia/projects/bitcoin-core-dev/./test/fuzz/test_runner.py\", line 217, in transform_targets\r\n    lines = subprocess.run(\r\n            ^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/Cellar/python@3.11/3.11.4_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/subprocess.py\", line 571, in run\r\n    raise CalledProcessError(retcode, process.args,\r\nsubprocess.CalledProcessError: Command '['grep', '--only-matching', '--perl-regexp', '--null-data', 'namespace NetMsgType(\\\\n|.)*namespace NetMsgType', '/Users/brunogarcia/projects/bitcoin-core-dev/src/protocol.cpp']' returned non-zero exit status 2.\r\n```\r\n\r\n\r\nexamples:\r\nhttps://github.com/sara-nl/GridScripts/issues/2\r\nhttps://github.com/sara-nl/GridScripts/commit/963139b482751320b68cc74d008b6ce27e220f38",
      "commit_id" : "bbbb996c15aef7786c3a215ed16e1913b12b0f8c",
      "created_at" : "2023-07-11T16:21:20Z",
      "diff_hunk" : "@@ -214,6 +212,28 @@ def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\n         ).stdout.splitlines()\n         lines = [l.split(\"\\\"\", 1)[1].split(\"\\\"\")[0] for l in lines if l.startswith(\"src/test/fuzz/rpc.cpp-    \\\"\")]\n         targets += [(rpc_target, {\"LIMIT_TO_RPC_COMMAND\": r}) for r in lines]\n+        targets += [(rpc_target, {})]  # Allow for cross-pollination\n+    if has_p2p_msg:\n+        lines = subprocess.run(\n+            [\"grep\", \"--only-matching\", \"--perl-regexp\", \"--null-data\", r\"namespace NetMsgType(\\n|.)*namespace NetMsgType\", os.path.join(src_dir, \"src\", \"protocol.cpp\")],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1259974561",
      "id" : 1259974561,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LGa-h",
      "original_commit_id" : "fa288032f441a0d900f9f62028e59dd163100a03",
      "original_line" : 218,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/fuzz/test_runner.py",
      "position" : null,
      "pull_request_review_id" : 1524663382,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259974561/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T16:31:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259974561",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/19480819?v=4",
         "events_url" : "https://api.github.com/users/brunoerg/events{/privacy}",
         "followers_url" : "https://api.github.com/users/brunoerg/followers",
         "following_url" : "https://api.github.com/users/brunoerg/following{/other_user}",
         "gists_url" : "https://api.github.com/users/brunoerg/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/brunoerg",
         "id" : 19480819,
         "login" : "brunoerg",
         "node_id" : "MDQ6VXNlcjE5NDgwODE5",
         "organizations_url" : "https://api.github.com/users/brunoerg/orgs",
         "received_events_url" : "https://api.github.com/users/brunoerg/received_events",
         "repos_url" : "https://api.github.com/users/brunoerg/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/brunoerg/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/brunoerg/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/brunoerg"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1260062800"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260062800"
         }
      },
      "author_association" : "MEMBER",
      "body" : "thx, fixed",
      "commit_id" : "bbbb996c15aef7786c3a215ed16e1913b12b0f8c",
      "created_at" : "2023-07-11T17:33:35Z",
      "diff_hunk" : "@@ -214,6 +212,28 @@ def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\n         ).stdout.splitlines()\n         lines = [l.split(\"\\\"\", 1)[1].split(\"\\\"\")[0] for l in lines if l.startswith(\"src/test/fuzz/rpc.cpp-    \\\"\")]\n         targets += [(rpc_target, {\"LIMIT_TO_RPC_COMMAND\": r}) for r in lines]\n+        targets += [(rpc_target, {})]  # Allow for cross-pollination\n+    if has_p2p_msg:\n+        lines = subprocess.run(\n+            [\"grep\", \"--only-matching\", \"--perl-regexp\", \"--null-data\", r\"namespace NetMsgType(\\n|.)*namespace NetMsgType\", os.path.join(src_dir, \"src\", \"protocol.cpp\")],",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1260062800",
      "id" : 1260062800,
      "in_reply_to_id" : 1259974561,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LGwhQ",
      "original_commit_id" : "fa288032f441a0d900f9f62028e59dd163100a03",
      "original_line" : 218,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "test/fuzz/test_runner.py",
      "position" : null,
      "pull_request_review_id" : 1524802963,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260062800/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T17:33:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260062800",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1260977018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260977018"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I was thinking about suggesting this refactoring in the previous PR, glad to see it happen here. Since there's almost no code reuse between both targets, would prefer splitting it out into 2 smaller functions. The diff below does that, plus:\r\n- use pathlib\r\n- avoid removing and then re-adding the unlimited search target (not sure if having it at the beginning instead of at the end of targets makes a meaningful difference?)\r\n- add some docstrings\r\n\r\n<details>\r\n<summary>new code</summary>\r\n\r\n```py\r\ndef transform_process_message_target(targets, src_dir):\r\n    \"\"\"Add a target per process message, and also keep (\"process_message\", {}) to allow for\r\n    cross-pollination, or unlimited search\"\"\"\r\n\r\n    p2p_msg_target = \"process_message\"\r\n    has_p2p_msg = (p2p_msg_target, {}) in targets\r\n    if has_p2p_msg:\r\n        with open(Path(src_dir) / \"src\" / \"protocol.cpp\", \"r\", encoding=\"utf8\") as f:\r\n            lines = f.read().splitlines()\r\n        lines = [l.split('\"', 1)[1].split('\"')[0] for l in lines if l.startswith(\"const char\")]\r\n        assert len(lines)\r\n        targets += [(p2p_msg_target, {\"LIMIT_TO_MESSAGE_TYPE\": m}) for m in lines]\r\n    return targets\r\n\r\ndef transform_rpc_target(targets, src_dir):\r\n    \"\"\"Add a target per RPC command, and also keep (\"rpc\", {}) to allow for cross-pollination,\r\n    or unlimited search\"\"\"\r\n\r\n    rpc_target = \"rpc\"\r\n    has_rpc = (rpc_target, {}) in targets\r\n    if has_rpc: \r\n        lines = subprocess.run(\r\n            [\"git\", \"grep\", \"--function-context\", \"RPC_COMMANDS_SAFE_FOR_FUZZING{\", Path(src_dir) / \"src\" / \"test\" / \"fuzz\" / \"rpc.cpp\"],\r\n            check=True,\r\n            stdout=subprocess.PIPE,\r\n            text=True,\r\n        ).stdout.splitlines()\r\n        lines = [l.split(\"\\\"\", 1)[1].split(\"\\\"\")[0] for l in lines if l.startswith(\"src/test/fuzz/rpc.cpp-    \\\"\")]\r\n        assert len(lines)\r\n        targets += [(rpc_target, {\"LIMIT_TO_RPC_COMMAND\": r}) for r in lines]\r\n    return targets\r\n\r\ndef generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\r\n    \"\"\"Generates new corpus.\r\n\r\n    Run {targets} without input, and outputs the generated corpus to\r\n    {corpus_dir}.\r\n    \"\"\"\r\n    logging.info(\"Generating corpus to {}\".format(corpus_dir))\r\n    targets = [(t, {}) for t in targets] # expand to add dictionary for target-specific env variables\r\n    targets = transform_process_message_target(targets, src_dir)\r\n    targets = transform_rpc_target(targets, src_dir)\r\n...\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>git diff</summary>\r\n\r\n```diff\r\ndiff --git a/test/fuzz/test_runner.py b/test/fuzz/test_runner.py\r\nindex bef1c52f7..7ffd938e6 100755\r\n--- a/test/fuzz/test_runner.py\r\n+++ b/test/fuzz/test_runner.py\r\n@@ -192,20 +192,29 @@ def main():\r\n             empty_min_time=args.empty_min_time,\r\n         )\r\n \r\n+def transform_process_message_target(targets, src_dir):\r\n+    \"\"\"Add a target per process message, and also keep (\"process_message\", {}) to allow for\r\n+    cross-pollination, or unlimited search\"\"\"\r\n \r\n-def transform_targets(targets, src_dir):\r\n-    rpc_target = \"rpc\"\r\n     p2p_msg_target = \"process_message\"\r\n-    has_rpc = rpc_target in targets\r\n-    has_p2p_msg = p2p_msg_target in targets\r\n-    if has_rpc:\r\n-        targets.remove(rpc_target)\r\n+    has_p2p_msg = (p2p_msg_target, {}) in targets\r\n     if has_p2p_msg:\r\n-        targets.remove(p2p_msg_target)\r\n-    targets = [(t, {}) for t in targets]\r\n-    if has_rpc:\r\n+        with open(Path(src_dir) / \"src\" / \"protocol.cpp\", \"r\", encoding=\"utf8\") as f:\r\n+            lines = f.read().splitlines()\r\n+        lines = [l.split('\"', 1)[1].split('\"')[0] for l in lines if l.startswith(\"const char\")]\r\n+        assert len(lines)\r\n+        targets += [(p2p_msg_target, {\"LIMIT_TO_MESSAGE_TYPE\": m}) for m in lines]\r\n+    return targets\r\n+\r\n+def transform_rpc_target(targets, src_dir):\r\n+    \"\"\"Add a target per RPC command, and also keep (\"rpc\", {}) to allow for cross-pollination,\r\n+    or unlimited search\"\"\"\r\n+\r\n+    rpc_target = \"rpc\"\r\n+    has_rpc = (rpc_target, {}) in targets\r\n+    if has_rpc: \r\n         lines = subprocess.run(\r\n-            [\"git\", \"grep\", \"--function-context\", \"RPC_COMMANDS_SAFE_FOR_FUZZING{\", os.path.join(src_dir, \"src\", \"test\", \"fuzz\", \"rpc.cpp\")],\r\n+            [\"git\", \"grep\", \"--function-context\", \"RPC_COMMANDS_SAFE_FOR_FUZZING{\", Path(src_dir) / \"src\" / \"test\" / \"fuzz\" / \"rpc.cpp\"],\r\n             check=True,\r\n             stdout=subprocess.PIPE,\r\n             text=True,\r\n@@ -213,17 +222,8 @@ def transform_targets(targets, src_dir):\r\n         lines = [l.split(\"\\\"\", 1)[1].split(\"\\\"\")[0] for l in lines if l.startswith(\"src/test/fuzz/rpc.cpp-    \\\"\")]\r\n         assert len(lines)\r\n         targets += [(rpc_target, {\"LIMIT_TO_RPC_COMMAND\": r}) for r in lines]\r\n-        targets += [(rpc_target, {})]  # Allow for cross-pollination, or unlimited search\r\n-    if has_p2p_msg:\r\n-        with open(os.path.join(src_dir, \"src\", \"protocol.cpp\"), \"r\", encoding=\"utf8\") as f:\r\n-            lines = f.read().splitlines()\r\n-        lines = [l.split('\"', 1)[1].split('\"')[0] for l in lines if l.startswith(\"const char\")]\r\n-        assert len(lines)\r\n-        targets += [(p2p_msg_target, {\"LIMIT_TO_MESSAGE_TYPE\": m}) for m in lines]\r\n-        targets += [(p2p_msg_target, {})]  # Allow for cross-pollination, or unlimited search\r\n     return targets\r\n \r\n-\r\n def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\r\n     \"\"\"Generates new corpus.\r\n \r\n@@ -231,7 +231,9 @@ def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\r\n     {corpus_dir}.\r\n     \"\"\"\r\n     logging.info(\"Generating corpus to {}\".format(corpus_dir))\r\n-    targets = transform_targets(targets, src_dir)\r\n+    targets = [(t, {}) for t in targets] # expand to add dictionary for target-specific env variables\r\n+    targets = transform_process_message_target(targets, src_dir)\r\n+    targets = transform_rpc_target(targets, src_dir)\r\n \r\n     def job(command, t, t_env):\r\n         logging.debug(f\"Running '{command}'\")\r\n\r\n```\r\n</details>\r\n",
      "commit_id" : "bbbb996c15aef7786c3a215ed16e1913b12b0f8c",
      "created_at" : "2023-07-12T10:37:55Z",
      "diff_hunk" : "@@ -193,17 +193,15 @@ def main():\n         )\n \n \n-def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\n-    \"\"\"Generates new corpus.\n-\n-    Run {targets} without input, and outputs the generated corpus to\n-    {corpus_dir}.\n-    \"\"\"\n-    logging.info(\"Generating corpus to {}\".format(corpus_dir))\n+def transform_targets(targets, src_dir):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1260977018",
      "id" : 1260977018,
      "line" : 196,
      "node_id" : "PRRC_kwDOABII585LKPt6",
      "original_commit_id" : "bbbb996c15aef7786c3a215ed16e1913b12b0f8c",
      "original_line" : 196,
      "original_position" : 11,
      "original_start_line" : null,
      "path" : "test/fuzz/test_runner.py",
      "position" : 11,
      "pull_request_review_id" : 1526047738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260977018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T11:31:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1260977018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1261042551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261042551"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Could make this a bit more robust by only considering lines within `namespace NetMsgType`?\r\n\r\n```py\r\n    if has_p2p_msg:\r\n        cmd = [\"awk\" , \"/namespace NetMsgType {/,/} \\/\\/ namespace NetMsgType/ { print $0 }\", str(Path(src_dir) / 'src' / 'protocol.cpp')]\r\n        lines = subprocess.run(\r\n            cmd,\r\n            check=True,\r\n            stdout=subprocess.PIPE,\r\n            text=True,\r\n        ).stdout.splitlines()\r\n        lines = [l.split('\"', 1)[1].split('\"')[0] for l in lines if l.startswith(\"const char\")]\r\n```\r\n",
      "commit_id" : "bbbb996c15aef7786c3a215ed16e1913b12b0f8c",
      "created_at" : "2023-07-12T11:29:50Z",
      "diff_hunk" : "@@ -213,7 +211,27 @@ def generate_corpus(*, fuzz_pool, src_dir, build_dir, corpus_dir, targets):\n             text=True,\n         ).stdout.splitlines()\n         lines = [l.split(\"\\\"\", 1)[1].split(\"\\\"\")[0] for l in lines if l.startswith(\"src/test/fuzz/rpc.cpp-    \\\"\")]\n+        assert len(lines)\n         targets += [(rpc_target, {\"LIMIT_TO_RPC_COMMAND\": r}) for r in lines]\n+        targets += [(rpc_target, {})]  # Allow for cross-pollination, or unlimited search\n+    if has_p2p_msg:\n+        with open(os.path.join(src_dir, \"src\", \"protocol.cpp\"), \"r\", encoding=\"utf8\") as f:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28066#discussion_r1261042551",
      "id" : 1261042551,
      "line" : 218,
      "node_id" : "PRRC_kwDOABII585LKft3",
      "original_commit_id" : "bbbb996c15aef7786c3a215ed16e1913b12b0f8c",
      "original_line" : 218,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "test/fuzz/test_runner.py",
      "position" : 31,
      "pull_request_review_id" : 1526047738,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28066",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261042551/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T11:31:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261042551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/69010457?v=4",
         "events_url" : "https://api.github.com/users/stickies-v/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stickies-v/followers",
         "following_url" : "https://api.github.com/users/stickies-v/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stickies-v/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stickies-v",
         "id" : 69010457,
         "login" : "stickies-v",
         "node_id" : "MDQ6VXNlcjY5MDEwNDU3",
         "organizations_url" : "https://api.github.com/users/stickies-v/orgs",
         "received_events_url" : "https://api.github.com/users/stickies-v/received_events",
         "repos_url" : "https://api.github.com/users/stickies-v/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stickies-v/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stickies-v"
      }
   }
]
