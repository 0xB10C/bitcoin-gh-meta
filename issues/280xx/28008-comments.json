[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27993](https://github.com/bitcoin/bitcoin/pull/27993) (Make poly1305 support incremental computation + modernize by sipa)\n* [#27985](https://github.com/bitcoin/bitcoin/pull/27985) (Add support for RFC8439 variant of ChaCha20 by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-29T22:00:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1613858567",
      "id" : 1613858567,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585gMYcH",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613858567/reactions"
      },
      "updated_at" : "2023-07-07T21:25:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1613858567",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-07-12T18:07:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#issuecomment-1632988853",
      "id" : 1632988853,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/28008",
      "node_id" : "IC_kwDOABII585hVW61",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1632988853/reactions"
      },
      "updated_at" : "2023-07-12T18:07:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1632988853",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268163179"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179"
         }
      },
      "author_association" : "MEMBER",
      "body" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7\r\n\r\n(Non-blocking note:) a little unexpected that this is written out of sequence with how it's described in [RFC 8439](https://datatracker.ietf.org/doc/html/rfc8439#section-2.8); \r\n\r\n> - First, a Poly1305 one-time key is generated from the 256-bit key and nonce using the procedure described in [Section 2.6](https://datatracker.ietf.org/doc/html/rfc8439#section-2.6).\r\n> - Next, the ChaCha20 encryption function is called to encrypt the plaintext, using the same key and nonce, and with the initial counter set to 1.\r\n\r\nNo harm in writing it this way, since a `Seek64()` resets any determinant state for `Keystream64()`/`Crypt64()`, but just had to squint for a few seconds to make sure it was okay.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-19T14:29:21Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268163179",
      "id" : 1268163179,
      "line" : 86,
      "node_id" : "PRRC_kwDOABII585LlqJr",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 86,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : 86,
      "pull_request_review_id" : 1537240624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T13:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268163179",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268282951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note for reviewers that RFC test vectors use network byte order (big-endian); the `Nonce96` constructor here expects little-endian representation. Hence the reversal relative to RFC vectors.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-19T15:53:45Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268282951",
      "id" : 1268282951,
      "line" : 973,
      "node_id" : "PRRC_kwDOABII585LmHZH",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 973,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 1537240624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T13:30:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268282951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268291488"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note for reviewers that this ciphertext includes the Poly1305 tag; in the RFC, ciphertext vector omits the tag.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-19T16:00:43Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1268291488",
      "id" : 1268291488,
      "line" : 978,
      "node_id" : "PRRC_kwDOABII585LmJeg",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 978,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 199,
      "pull_request_review_id" : 1537240624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T14:04:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1268291488",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269911157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(in commit c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9)\r\nnit: these refactoring changes in `UpdateTag` seem to be unrelated to FSChaCha20Poly1305, I think they can be already included the commit that introduces the ChaCha20Poly1305 AEAD (to avoid touching it again later and keep the diff small)? Also, `aad_padding` and `cipher_padding` could be const.",
      "commit_id" : "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "created_at" : "2023-07-20T20:03:29Z",
      "diff_hunk" : "@@ -46,11 +47,11 @@ void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::by\n {\n     static const std::byte PADDING[16] = {{}};\n     // Process the padded AAD with Poly1305.\n-    poly1305.Update(aad);\n-    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    unsigned aad_padding = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding));\n     // Process the padded ciphertext with Poly1305.\n-    poly1305.Update(cipher);\n-    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    unsigned cipher_padding = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269911157",
      "id" : 1269911157,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LsU51",
      "original_commit_id" : "c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9",
      "original_line" : 54,
      "original_position" : 20,
      "original_start_line" : 49,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1539997888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-07-20T21:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269911157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269960092"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: could encrypt _after_ generating the poly1305 key to avoid having to `Seek64` twice, as the chacha20 object is already at the desired block count 1 after the `Keystream` call below (I think generate-poly1305-key -> encrypt -> compute tag is also the order as described in RFC8439). On the other hand, performance-wise it shouldn't make a difference as `Seek64` is quite cheap, and maybe it's even preferred to be explicit about the block counter instead. I haven't looked at any other ChaCha20Poly1305 AEAD implementation yet, so no idea what is common practice here. Just an idea.",
      "commit_id" : "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "created_at" : "2023-07-20T21:03:01Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269960092",
      "id" : 1269960092,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585Lsg2c",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : 67,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1539997888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-20T21:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269960092",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269973943"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: it might be worth introducing a generate-poly1305-key helper (or even one that also does the tag computation already, given also aad and ciphertext) that can be called in Encrypt and Decrypt, to deduplicate code?",
      "commit_id" : "b0b6d11f16f65ce9b0d106372ce131eb6f179fe9",
      "created_at" : "2023-07-20T21:14:19Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);\n+    m_chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1269973943",
      "id" : 1269973943,
      "line" : 78,
      "node_id" : "PRRC_kwDOABII585LskO3",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : 71,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : 78,
      "pull_request_review_id" : 1539997888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 73,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-20T21:32:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1269973943",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270122616"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Done, I've replaced `UpdateTag` with `ComputeTag`, which does the whole tag calculation, including poly1305 key generation.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T00:30:45Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);\n+    m_chacha20.Keystream(UCharCast(first_block), sizeof(first_block));\n+    // Use the first 32 bytes of the first keystream block as poly1305 key.\n+    Poly1305 poly1305{Span{first_block}.first(Poly1305::KEYLEN)};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270122616",
      "id" : 1270122616,
      "in_reply_to_id" : 1269973943,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIh4",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 76,
      "original_position" : 76,
      "original_start_line" : 71,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1540313350,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:30:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270122616",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe it's better not to do that, though it really doesn't matter much.\r\n\r\nThe reason is that if we'd start by generating the key, we'd have to store that key in memory somewhere, leave it there for the whole encryption, then fetch it again (at which point it's quite possibly gone from CPU caches) to compute the tag. By seeking and deriving at the end, we only need the chacha20 key/state, which is likely still hot at that point (as it's needed every 64 bytes of encryption). And the seeking itself is trivial.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T00:32:42Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417",
      "id" : 1270123417,
      "in_reply_to_id" : 1269960092,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIuZ",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 69,
      "original_position" : 69,
      "original_start_line" : 67,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1540314352,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:32:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123417",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T00:32:51Z",
      "diff_hunk" : "@@ -46,11 +47,11 @@ void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::by\n {\n     static const std::byte PADDING[16] = {{}};\n     // Process the padded AAD with Poly1305.\n-    poly1305.Update(aad);\n-    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    unsigned aad_padding = (16 - (aad.size() % 16)) % 16;\n+    poly1305.Update(aad).Update(Span{PADDING}.first(aad_padding));\n     // Process the padded ciphertext with Poly1305.\n-    poly1305.Update(cipher);\n-    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    unsigned cipher_padding = (16 - (cipher.size() % 16)) % 16;\n+    poly1305.Update(cipher).Update(Span{PADDING}.first(cipher_padding));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123471",
      "id" : 1270123471,
      "in_reply_to_id" : 1269911157,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LtIvP",
      "original_commit_id" : "c61fa6ab5917f3745a917f4fc2f3a9e96629d5d9",
      "original_line" : 54,
      "original_position" : 20,
      "original_start_line" : 49,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1540314438,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "LEFT",
      "subject_type" : "line",
      "updated_at" : "2023-07-21T00:32:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270123471",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270710501"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> Note for reviewers that RFC test vectors use network byte order (big-endian);\r\n\r\nThat's not really accurate. The RFC (and its test vectors) see the nonce as a 12-byte array, not as a number that needs encoding. If anything, it assumes little-endian encoding (see https://datatracker.ietf.org/doc/html/rfc8439#section-2.3, \"A 96-bit nonce, treated as a concatenation of three 32-bit little-endian integers.\").\r\n\r\n> the Nonce96 constructor here expects little-endian representation.\r\n\r\nThe Nonce96 type here is indeed a pair of 32-bit and 64-bit integers which are serialized in little-endian notation to obtain the 12-byte array nonce in the RFC8439 sense.\r\n\r\n>  Hence the reversal relative to RFC vectors.\r\n\r\nThe reversal is actually due to the fact that integer constants in C++ (and in English...) are written in big-endian. After that point, everything in the code and the spec are little-endian.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T13:59:05Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270710501",
      "id" : 1270710501,
      "in_reply_to_id" : 1268282951,
      "line" : 973,
      "node_id" : "PRRC_kwDOABII585LvYDl",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 973,
      "original_position" : 46,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 194,
      "pull_request_review_id" : 1541213348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T14:06:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270710501",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270711568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I believe this may be clearer now that it's been rewritten. Also see https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270123417 for a rationale, if you're curious.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T14:00:04Z",
      "diff_hunk" : "@@ -0,0 +1,105 @@\n+// Copyright (c) 2023 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha20poly1305.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/chacha20.h>\n+#include <crypto/poly1305.h>\n+#include <span.h>\n+\n+#include <assert.h>\n+#include <cstdint>\n+#include <cstddef>\n+#include <iterator>\n+\n+AEADChaCha20Poly1305::AEADChaCha20Poly1305(Span<const std::byte> key) noexcept : m_chacha20(UCharCast(key.data()))\n+{\n+    assert(key.size() == KEYLEN);\n+}\n+\n+void AEADChaCha20Poly1305::SetKey(Span<const std::byte> key) noexcept\n+{\n+    assert(key.size() == KEYLEN);\n+    m_chacha20.SetKey32(UCharCast(key.data()));\n+}\n+\n+namespace {\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+#define HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n) noexcept\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif\n+\n+/** Write all tag data to poly1305 for an AEADChaCha20Poly1305 tag. */\n+void UpdateTag(Poly1305& poly1305, Span<const std::byte> aad, Span<const std::byte> cipher) noexcept\n+{\n+    static const std::byte PADDING[16] = {{}};\n+    // Process the padded AAD with Poly1305.\n+    poly1305.Update(aad);\n+    poly1305.Update(Span{PADDING}.first((16 - (aad.size() % 16)) % 16));\n+    // Process the padded ciphertext with Poly1305.\n+    poly1305.Update(cipher);\n+    poly1305.Update(Span{PADDING}.first((16 - (cipher.size() % 16)) % 16));\n+    // Process the AAD and plaintext length with Poly1305.\n+    std::byte length_desc[16];\n+    WriteLE64(UCharCast(length_desc), aad.size());\n+    WriteLE64(UCharCast(length_desc + 8), cipher.size());\n+    poly1305.Update(length_desc);\n+}\n+\n+} // namespace\n+\n+void AEADChaCha20Poly1305::Encrypt(Span<const std::byte> plain, Span<const std::byte> aad, Nonce96 nonce, Span<std::byte> cipher) noexcept\n+{\n+    assert(cipher.size() == plain.size() + EXPANSION);\n+\n+    // Encrypt using ChaCha20 (starting at index 1).\n+    m_chacha20.Seek64(nonce, 1);\n+    m_chacha20.Crypt(UCharCast(plain.data()), UCharCast(cipher.data()), plain.size());\n+\n+    // Get first block of keystream.\n+    std::byte first_block[64];\n+    m_chacha20.Seek64(nonce, 0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270711568",
      "id" : 1270711568,
      "in_reply_to_id" : 1268163179,
      "line" : 86,
      "node_id" : "PRRC_kwDOABII585LvYUQ",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 86,
      "original_position" : 73,
      "original_start_line" : null,
      "path" : "src/crypto/chacha20poly1305.cpp",
      "position" : 86,
      "pull_request_review_id" : 1541215141,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 1,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 1,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T14:08:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270711568",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270921379"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yeah, it gives the tag separately; the RFC doesn't actually require the tag to be sent at the end.",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-21T17:32:42Z",
      "diff_hunk" : "@@ -818,6 +837,61 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n                  \"0e410fa9d7a40ac582e77546be9a72bb\");\n }\n \n+BOOST_AUTO_TEST_CASE(chacha20poly1305_testvectors)\n+{\n+    // RFC 8439 Example from section 2.8.2\n+    TestChaCha20Poly1305(\"4c616469657320616e642047656e746c656d656e206f662074686520636c6173\"\n+                         \"73206f66202739393a204966204920636f756c64206f6666657220796f75206f\"\n+                         \"6e6c79206f6e652074697020666f7220746865206675747572652c2073756e73\"\n+                         \"637265656e20776f756c642062652069742e\",\n+                         \"50515253c0c1c2c3c4c5c6c7\",\n+                         \"808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9f\",\n+                         {7, 0x4746454443424140},\n+                         \"d31a8d34648e60db7b86afbc53ef7ec2a4aded51296e08fea9e2b5a736ee62d6\"\n+                         \"3dbea45e8ca9671282fafb69da92728b1a71de0a9e060b2905d6a5b67ecd3b36\"\n+                         \"92ddbd7f2d778b8c9803aee328091b58fab324e4fad675945585808b4831d7bc\"\n+                         \"3ff4def08e4b7a9de576d26586cec64b61161ae10b594f09e26a7e902ecbd060\"\n+                         \"0691\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1270921379",
      "id" : 1270921379,
      "in_reply_to_id" : 1268291488,
      "line" : 978,
      "node_id" : "PRRC_kwDOABII585LwLij",
      "original_commit_id" : "26a7c254dcb49a92070c88cc7963e4996cd9e7c7",
      "original_line" : 978,
      "original_position" : 51,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 199,
      "pull_request_review_id" : 1541557139,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-21T17:32:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1270921379",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271193421"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "off-by-one, the \"message index wrong\" kind of error type (error=12) is currently not tested:\r\n```suggestion\r\n    for (unsigned error = 0; error <= 12; ++error) {\r\n```\r\n(to avoid issues like this, could add an enum with error types and give the highest error sth like ERROR_HIGHEST, to be used in the loop counter, but that's probably overkill)",
      "commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "created_at" : "2023-07-22T01:15:49Z",
      "diff_hunk" : "@@ -89,9 +92,67 @@ void TestBIP324PacketVector(\n     BOOST_CHECK(ciphertext.size() >= out_ciphertext_endswith.size());\n     BOOST_CHECK(Span{out_ciphertext_endswith} == Span{ciphertext}.last(out_ciphertext_endswith.size()));\n \n-    // Note that we don't test decryption here, as the test vectors don't provide the other party's\n-    // private key, so we cannot act like them. See the bip324_cipher_roundtrip fuzz test for a test\n-    // that does cover decryption.\n+    for (unsigned error = 0; error <= 11; ++error) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/28008#discussion_r1271193421",
      "id" : 1271193421,
      "line" : 95,
      "node_id" : "PRRC_kwDOABII585LxN9N",
      "original_commit_id" : "d377aa60866cd298948edaf8166ad1df1bd4899a",
      "original_line" : 95,
      "original_position" : 23,
      "original_start_line" : null,
      "path" : "src/test/bip324_tests.cpp",
      "position" : 95,
      "pull_request_review_id" : 1541993939,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/28008",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-22T01:15:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1271193421",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
