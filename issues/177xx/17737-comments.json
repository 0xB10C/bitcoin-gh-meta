[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17484](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17484.html) (wallet: add cached m_is_ibd to remove Chain::isInitialBlockDownload by ariard)\n* [#17479](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17479.html) (Return BlockValidationState from ProcessNewBlock if CheckBlock/AcceptBlock fails by jnewbery)\n* [#17399](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17399.html) (validation: Templatize ValidationState instead of subclassing by jkczyz)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (BIP-325: Signet support by kallewoof)\n* [#16224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16224.html) (gui: Bilingual GUI error messages by hebasto)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-12-12T19:52:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-565159369",
      "id" : 565159369,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NTE1OTM2OQ==",
      "updated_at" : "2020-01-27T21:50:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/565159369",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709665"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709665"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6d1491603f6dfb9f755e60d77685635c35d5a48b: \r\n\r\nIs m_chain.SetTip assumed to be under cs_main? If yes, this should say ` ... = WITH_LOCK(cs_main, return m_chain.Tip());`",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T15:51:26Z",
      "diff_hunk" : "@@ -4908,6 +4908,13 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n+std::string CChainState::ToString()\n+{\n+    CBlockIndex* tip = m_chain.Tip();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709665",
      "id" : 357709665,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcwOTY2NQ==",
      "original_commit_id" : "6d1491603f6dfb9f755e60d77685635c35d5a48b",
      "original_position" : 6,
      "path" : "src/validation.cpp",
      "position" : 288,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709665",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709949"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709949"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6d14916:\r\n\r\nI think the arguments are switched?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T15:52:03Z",
      "diff_hunk" : "@@ -4908,6 +4908,13 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n+std::string CChainState::ToString()\n+{\n+    CBlockIndex* tip = m_chain.Tip();\n+    return strprintf(\"Chainstate [%s] @ height %d\",\n+        tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : \"null\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357709949",
      "id" : 357709949,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcwOTk0OQ==",
      "original_commit_id" : "6d1491603f6dfb9f755e60d77685635c35d5a48b",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357709949",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357711715"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357711715"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nShould be const to ensure at compile time that we know whether a chainstate was created from a snapshot?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T15:55:41Z",
      "diff_hunk" : "@@ -611,6 +611,13 @@ class CChainState {\n     //! @see CChain, CBlockIndex.\n     CChain m_chain;\n \n+    /**\n+     * The blockhash which is the base of the snapshot this chainstate was created from.\n+     *\n+     * IsNull() if this chainstate was not created from a snapshot.\n+     */\n+    uint256 m_from_snapshot_blockhash{};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357711715",
      "id" : 357711715,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMTcxNQ==",
      "original_commit_id" : "6b62d2f15397226b273cb87f56b8978404fd415f",
      "original_position" : 18,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357711715",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712223"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712223"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nconstructors (especially single arg ones) should be explicit. Otherwise any hash can be passed into a function that accepts a chainstate. Hmmm",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T15:56:44Z",
      "diff_hunk" : "@@ -583,7 +583,7 @@ class CChainState {\n \n public:\n     CChainState(BlockManager& blockman) : m_blockman(blockman) {}\n-    CChainState();\n+    CChainState(uint256 from_snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712223",
      "id" : 357712223,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMjIyMw==",
      "original_commit_id" : "6b62d2f15397226b273cb87f56b8978404fd415f",
      "original_position" : 5,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712223",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712757"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712757"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nNow the arguments are correct. Might just squash the commits?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T15:57:52Z",
      "diff_hunk" : "@@ -4908,6 +4908,13 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     assert(nNodes == forward.size());\n }\n \n+std::string CChainState::ToString()\n+{\n+    CBlockIndex* tip = m_chain.Tip();\n+    return strprintf(\"Chainstate [%s] @ height %d\",\n+        tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : \"null\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357712757",
      "id" : 357712757,
      "in_reply_to_id" : 357709949,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMjc1Nw==",
      "original_commit_id" : "6d1491603f6dfb9f755e60d77685635c35d5a48b",
      "original_position" : 8,
      "path" : "src/validation.cpp",
      "position" : 291,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357712757",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357713099"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357713099"
         }
      },
      "author_association" : "MEMBER",
      "body" : "style-nit in 6b62d2f15397226b273cb87f56b8978404fd415f:\r\n\r\nThe colon goes into a new line according to our clang-format",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T15:58:41Z",
      "diff_hunk" : "@@ -1245,7 +1245,9 @@ void CoinsViews::InitCache()\n \n // NOTE: for now m_blockman is set to a global, but this will be changed\n // in a future commit.\n-CChainState::CChainState() : m_blockman(g_blockman) {}\n+CChainState::CChainState(uint256 from_snapshot_blockhash) :",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357713099",
      "id" : 357713099,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxMzA5OQ==",
      "original_commit_id" : "6b62d2f15397226b273cb87f56b8978404fd415f",
      "original_position" : 5,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357713099",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357716948"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357716948"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd02:\r\n\r\nWouldn't this need to happen under some chainstate manager lock? Otherwise the chainstate might point to uninitialized memory in case of a race where \" Its contents will be freed when background validation of the snapshot has completed.\"",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T16:07:06Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357716948",
      "id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxNjk0OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 149,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357716948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357719170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357719170"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd029071: \r\n\r\nHow and why is this different from `return !m_ibd_chainstate`?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T16:11:38Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357719170",
      "id" : 357719170,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcxOTE3MA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 103,
      "path" : "src/validation.h",
      "position" : 166,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357719170",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357721286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357721286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd02907162ce:\r\n\r\nI wonder if this method needs to happen under some kind of lock. Otherwise there might be a race in validation or net processing where the chainstate is switched down under during a call.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T16:16:07Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357721286",
      "id" : 357721286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcyMTI4Ng==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 350,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357721286",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357723785"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357723785"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 6a629cfd0290716:\r\n\r\nHow and why is this different from `return m_active_chainstate->m_snapshot_blockhash;`?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T16:21:52Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357723785",
      "id" : 357723785,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcyMzc4NQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 100,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357723785",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357727259"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357727259"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 4813167d989c:\r\n\r\nIs this comment no longer relevant?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-13T16:29:30Z",
      "diff_hunk" : "@@ -1463,8 +1467,7 @@ bool AppInitMain(NodeContext& node)\n             bool is_coinsview_empty;\n             try {\n                 LOCK(cs_main);\n-                // This statement makes ::ChainstateActive() usable.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357727259",
      "id" : 357727259,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1NzcyNzI1OQ==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 32,
      "path" : "src/init.cpp",
      "position" : 59,
      "pull_request_review_id" : 331955313,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357727259",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357890585"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357890585"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree. Same question for other methods.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-14T02:14:57Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r357890585",
      "id" : 357890585,
      "in_reply_to_id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1Nzg5MDU4NQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 149,
      "pull_request_review_id" : 332189983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/357890585",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358506358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358506358"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nEven if I understand what you mean by an assumed-valid UTXO, I think it may confuse readers try to learn what's the difference is between assume-utxo and assume-valid. Wouldn't be shock by a simple `assume-utxo snapshot`.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T22:45:42Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358506358",
      "id" : 358506358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwNjM1OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 38,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358506358",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507123"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nIt's ambiguous here, do you mean a chainstate for which validity is assumed ? Overall, what's the definition of validity w.r.t to chainstates types ? I.e a IBD chainstate is always considered valid (because all consensus checks are done by us) or only when it's out-of-IBD? What's about a assume-valid IBD chainstate ?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T22:48:01Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507123",
      "id" : 358507123,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwNzEyMw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 49,
      "path" : "src/validation.h",
      "position" : 101,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507123",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507922"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nLogger is weird, given than default activate is true, no blockhash is going to be display, maybe `snapshot_blockhash.IsNull ? \"an IBD one\" : snapshot_blockhash.ToString()`",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T22:50:19Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358507922",
      "id" : 358507922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwNzkyMg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 29,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358507922",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358508803"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358508803"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6b62d2f\r\n\r\nI think consequences of activating a non valid chainstate by mistake can be pretty bad, would be better to have default to false in case of buggy call of this method.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T22:52:45Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358508803",
      "id" : 358508803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUwODgwMw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 88,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358508803",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358510858"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358510858"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agree, could be removed in GetAll, if idea is to garbage collect m_ibd_chainstate when foreground utxo get validated",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T22:58:22Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358510858",
      "id" : 358510858,
      "in_reply_to_id" : 357719170,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxMDg1OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 103,
      "path" : "src/validation.h",
      "position" : 166,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358510858",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6a629cf\r\n\r\nnit: you can move body function to validation.cpp, like `IsSnapshotActive`",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T22:59:21Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }\n+\n+    //! @returns true if this chainstate is being used to validate an active\n+    //!          snapshot in the background.\n+    bool IsBackgroundValidationChainstate(CChainState* chainstate) const\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511242",
      "id" : 358511242,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxMTI0Mg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 108,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511242",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511722"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "6a629cf\r\n\r\nMaybe reset `m_snapshot_blockhash` to null and `m_snapshot_validated` to false?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T23:00:48Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());\n+        m_active_chainstate = to_modify.get();\n+    }\n+\n+    return *to_modify.get();\n+}\n+\n+CChain& ChainstateManager::ActiveChain() const\n+{\n+    return m_active_chainstate->m_chain;\n+}\n+\n+bool ChainstateManager::IsSnapshotActive() const\n+{\n+    return m_snapshot_chainstate && m_active_chainstate == m_snapshot_chainstate.get();\n+}\n+\n+CChainState& ChainstateManager::ValidatedChainstate() const\n+{\n+    if (m_snapshot_chainstate && IsSnapshotValidated()) {\n+        return *m_snapshot_chainstate.get();\n+    }\n+    assert(m_ibd_chainstate);\n+    return *m_ibd_chainstate.get();\n+}\n+\n+void ChainstateManager::Unload()\n+{\n+    for (CChainState* chainstate : this->GetAll()) {\n+        chainstate->m_chain.SetTip(nullptr);\n+        chainstate->UnloadBlockIndex();\n+    }\n+}\n+\n+void ChainstateManager::Reset()\n+{\n+    m_ibd_chainstate.reset();\n+    m_snapshot_chainstate.reset();\n+    m_active_chainstate = nullptr;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358511722",
      "id" : 358511722,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxMTcyMg==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 67,
      "path" : "src/validation.cpp",
      "position" : 397,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358511722",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358514335"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358514335"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "175e570\r\n\r\nI'm not sure if `RewindBlockIndex` is still relevant.\r\n\r\nFollowing Suhas comment https://github.com/bitcoin/bitcoin/pull/8149#issuecomment-257943026, it was added to let upgrading nodes after segwit activation redownload consensus data without redownloading the whole blockchain.\r\n\r\nAccording to sipa in #15402, the rewinding logic \"is probably becoming increasingly unnecessary, as very few pre-0.13.1 nodes remain that would care to upgrade\".\r\n\r\nFurther, it doesn't make sense for the assumed-valid UTXO chainstate to rewind until first insufficiently-validated block, all utxo hash are going to be post segwit. It only makes sense for the ibd chainstate. ",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T23:08:56Z",
      "diff_hunk" : "@@ -1566,7 +1566,7 @@ bool AppInitMain(NodeContext& node)\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n                 uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n+                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358514335",
      "id" : 358514335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxNDMzNQ==",
      "original_commit_id" : "175e5704ad6b1ceaaaf7925d36045e7e7700a6ff",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358514335",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358515509"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358515509"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "4813167\r\n\r\nJust iterate for the `VerifyDB`, pruning and best block seen by RPC maybe should be common to both chainstates ?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-16T23:12:43Z",
      "diff_hunk" : "@@ -1517,93 +1520,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358515509",
      "id" : 358515509,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODUxNTUwOQ==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 181,
      "path" : "src/init.cpp",
      "position" : 213,
      "pull_request_review_id" : 332918349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358515509",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358853789"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358853789"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for raising this point. Initially, I had all pointers in the ChainstateManager protected by a private `m_cs` lock. I later found that there were irreconcilable lock inversions that happened during initialization - because a function like `ChainActive()` would necessarily have to acquire `ChainstateManager.m_cs`, there were many tricky inversions that happened between that lock and others like `cs_main` since ChainActive() is used so pervasively throughout the code. \r\n\r\nAs a result, I removed the chainman-specific lock and replaced it with `cs_main` in a later commit (https://github.com/bitcoin/bitcoin/pull/15606/commits/f1fa917e2081dd8d1847cbb23a0eae5a2cded2e5). Because ChainActive() isn't formally annotated as being protected by cs_main, and use of ChainstateManager always happens while under the protection of cs_main, I figured I could forgo adding those annotations now. But now that the point has been raised, I think it's probably worth addressing in this PR. \r\n\r\nSo I'll add the `cs_main` annotations to the relevant ChainManager parts. Though of course this will entail annotating ChainActive() and there will come with many other (mostly trivial) changes.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-17T15:23:30Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358853789",
      "id" : 358853789,
      "in_reply_to_id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1Mzc4OQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 149,
      "pull_request_review_id" : 333356348,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358853789",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358858324"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also, it's worth noting that the comment you quote is out of date (my fault!). We don't actually free the contents of the background validation chainstate *immediately* when validation completes - [we do it during shutdown](https://github.com/bitcoin/bitcoin/pull/15606/commits/8d6e0c34c32c5b95c126a963b16b5aebf707acbd#diff-24efdb00bfbe56b140fb006b562cc70bR5653-R5679) when `g_chainman.Reset()` is called. \r\n\r\nThe reason I don't do it immediately after validation is complete is so that we can be sure that no other parts of the code are still making reference to that pointer. This also relates to your question below about `IsSnapshotValidated()` - the extra piece of state (`m_snapshot_validated`) is used to track whether or not we need to do this cleanup.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-17T15:30:30Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324",
      "id" : 358858324,
      "in_reply_to_id" : 357716948,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1ODMyNA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 91,
      "path" : "src/validation.h",
      "position" : 149,
      "pull_request_review_id" : 333362196,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358858324",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859057"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859057"
         }
      },
      "author_association" : "MEMBER",
      "body" : "See my comment above for background: https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358858324. Perhaps we can do this without necessarily needing to maintain extra state (`m_snapshot_validated`) for it. I'll look into it.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-17T15:31:40Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }\n+\n+    //! Is there a snapshot in use and has it been fully validated?\n+    bool IsSnapshotValidated() const { return m_snapshot_validated; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859057",
      "id" : 358859057,
      "in_reply_to_id" : 357719170,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1OTA1Nw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 103,
      "path" : "src/validation.h",
      "position" : 166,
      "pull_request_review_id" : 333363176,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859057",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859358"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859358"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In practice all usages of this happen under `cs_main`, but as I said above I'll do explicit annotations.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-17T15:32:09Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859358",
      "id" : 358859358,
      "in_reply_to_id" : 357721286,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1OTM1OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 30,
      "path" : "src/validation.cpp",
      "position" : 350,
      "pull_request_review_id" : 333363576,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859358",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859584"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859584"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you're right here, I'll remove this.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-17T15:32:30Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());\n+\n+    //! Get all chainstates currently being used.\n+    std::vector<CChainState*> GetAll();\n+\n+    //! The most-work chain.\n+    CChain& ActiveChain() const;\n+    int ActiveHeight() const { return ActiveChain().Height(); }\n+    CBlockIndex* ActiveTip() const { return ActiveChain().Tip(); }\n+\n+    bool IsSnapshotActive() const;\n+\n+    uint256 SnapshotBlockhash() const { return m_snapshot_blockhash; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358859584",
      "id" : 358859584,
      "in_reply_to_id" : 357723785,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg1OTU4NA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 100,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 333363872,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358859584",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358860840"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358860840"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this method is called so infrequently and has such major effects that it'd be hard to accidentally do anything one way or the other, and the results would be immediately obvious and buggy. But to your point, maybe I should remove the default parameters so that everything has to be explicit.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2019-12-17T15:34:40Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r358860840",
      "id" : 358860840,
      "in_reply_to_id" : 358508803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1ODg2MDg0MA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 88,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 333365587,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/358860840",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362555635"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362555635"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it was incorrect since we haven't initialized the coins views at that point.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-02T17:21:18Z",
      "diff_hunk" : "@@ -1463,8 +1467,7 @@ bool AppInitMain(NodeContext& node)\n             bool is_coinsview_empty;\n             try {\n                 LOCK(cs_main);\n-                // This statement makes ::ChainstateActive() usable.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362555635",
      "id" : 362555635,
      "in_reply_to_id" : 357727259,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NTYzNQ==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 32,
      "path" : "src/init.cpp",
      "position" : 59,
      "pull_request_review_id" : 337763978,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362555635",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556013"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-02T17:22:26Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556013",
      "id" : 362556013,
      "in_reply_to_id" : 358506358,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NjAxMw==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 38,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 337764425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556449"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556449"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed, thanks.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-02T17:23:39Z",
      "diff_hunk" : "@@ -5116,3 +5116,68 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", snapshot_blockhash.ToString());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556449",
      "id" : 362556449,
      "in_reply_to_id" : 358507922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NjQ0OQ==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 29,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 337765003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556449",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556568"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556568"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed the default parameters, thanks.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-02T17:24:03Z",
      "diff_hunk" : "@@ -757,6 +762,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumed-valid UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or,\n+    //! if a snapshot is in use, for background validation. Its contents will\n+    //! be freed when background validation of the snapshot has completed.\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.\n+    std::unique_ptr<CChainState> m_snapshot_chainstate;\n+\n+    //! Points to either the ibd or snapshot chainstate; indicates our\n+    //! most-work chain.\n+    CChainState* m_active_chainstate;\n+\n+    //! The base blockhash of the active UTXO snapshot (if one is being used)\n+    uint256 m_snapshot_blockhash{};\n+\n+    //! If true, the assumed-valid chainstate has been fully validated\n+    //! by the background validation chainstate.\n+    bool m_snapshot_validated{false};\n+\n+    // For access to m_active_chainstate.\n+    friend CChain& ChainActive();\n+\n+public:\n+    //! Instantiate a new chainstate and assign it based upon whether it is\n+    //! from a snapshot.\n+    //!\n+    //! @param[in] activate   If true, make this new chainstate the active one.\n+    //! @param[in] snapshot_blockhash   If given, signify that this chainstate\n+    //!                                 is based on a snapshot.\n+    CChainState& InitializeChainstate(\n+        bool activate = true, const uint256& snapshot_blockhash = uint256());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556568",
      "id" : 362556568,
      "in_reply_to_id" : 358508803,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1NjU2OA==",
      "original_commit_id" : "6a629cfd02907162cea4dbef86837ee4c01bf157",
      "original_position" : 88,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 337765165,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556568",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556744"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556744"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Agree this is worth investigating, but probably not within this PR. I'd rather just preserve existing behavior.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-02T17:24:38Z",
      "diff_hunk" : "@@ -1566,7 +1566,7 @@ bool AppInitMain(NodeContext& node)\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n                 uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n+                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362556744",
      "id" : 362556744,
      "in_reply_to_id" : 358514335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjU1Njc0NA==",
      "original_commit_id" : "175e5704ad6b1ceaaaf7925d36045e7e7700a6ff",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 337765420,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362556744",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362648146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362648146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Good point - I'm changing this to only report a new tip to RPC for the active chain. The tip/time check is very cheap and doesn't hurt to be done for both. There isn't anything that actually happens for pruning here other than a possible log statement, so I think leaving that as-is should be fine. Thanks!",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-02T22:06:45Z",
      "diff_hunk" : "@@ -1517,93 +1520,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362648146",
      "id" : 362648146,
      "in_reply_to_id" : 358515509,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY0ODE0Ng==",
      "original_commit_id" : "4813167d989c5777eb8b5133dedd93b12e1cc207",
      "original_position" : 181,
      "path" : "src/init.cpp",
      "position" : 213,
      "pull_request_review_id" : 337881526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362648146",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362987653"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362987653"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "FYI, https://github.com/bitcoin/bitcoin/issues/17862. I had a second look, I think it's safe to maintain logic as it is for this PR even it should be never triggered because both chainstates will belong to segwit nodes. ",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-03T22:54:50Z",
      "diff_hunk" : "@@ -1566,7 +1566,7 @@ bool AppInitMain(NodeContext& node)\n                 // It both disconnects blocks based on ::ChainActive(), and drops block data in\n                 // BlockIndex() based on lack of available witness data.\n                 uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!RewindBlockIndex(chainparams)) {\n+                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r362987653",
      "id" : 362987653,
      "in_reply_to_id" : 358514335,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4NzY1Mw==",
      "original_commit_id" : "175e5704ad6b1ceaaaf7925d36045e7e7700a6ff",
      "original_position" : 5,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 338308159,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362987653",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-01-13T12:29:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-573640391",
      "id" : 573640391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzY0MDM5MQ==",
      "updated_at" : "2020-01-13T12:29:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573640391",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Bringing in [this IRC comment](http://www.erisian.com.au/bitcoin-core-dev/log-2020-01-16.html#l-454), if helpful:\r\n\r\n\"recent utxo snapshots for testing are available here: https://github.com/bitcoin/bitcoin/pull/15606#issuecomment-555213164\"",
      "created_at" : "2020-01-16T19:18:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-575302740",
      "id" : 575302740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NTMwMjc0MA==",
      "updated_at" : "2020-01-16T19:18:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/575302740",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370812356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370812356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16d20d91b43b1c30333fe14272d69cfb543229b3:\r\n\r\nYou mention that \"// If a snapshot chainstate exists, it will always be our active.\"\r\n\r\nHowever, then you provide code here to activate a ibd chainstate even though a snapshot chainstate might exist. This is confusing and the code should probably not provide such a backdoor.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-24T19:48:07Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370812356",
      "id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxMjM1Ng==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 350,
      "pull_request_review_id" : 348185426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370812356",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370815097"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370815097"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe a check like `if (m_active_chainstate && to_modify != m_snapshot_chainstate) LogPrintf(\"Error!\"); else ...` or similar could prevent that?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-24T19:54:27Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370815097",
      "id" : 370815097,
      "in_reply_to_id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxNTA5Nw==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 350,
      "pull_request_review_id" : 348188967,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370815097",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370819528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370819528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16d20d91b43b1c30333fe14272d69cfb543229b3:\r\n\r\nShould `assert m_active_chainstate` first?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-24T20:05:05Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();\n+    }\n+\n+    return *to_modify.get();\n+}\n+\n+CChain& ChainstateManager::ActiveChain() const\n+{\n+    return m_active_chainstate->m_chain;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370819528",
      "id" : 370819528,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxOTUyOA==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 61,
      "path" : "src/validation.cpp",
      "position" : 361,
      "pull_request_review_id" : 348194679,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370819528",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370821538"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370821538"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 16d20d9:\r\n\r\n\"proven invalid\" sounds odd. In normal operation (with the assumevalid hash baked in) an assumevalid chainstate can never be invalid. And if it is, there is no way to recover from this, right? So proving that one or the other chainstate is invalid is impossible with conflicting information. The only way to handle this is to crash the node immediately. I'd say to remove the \"unless proven invalid\" phrase here.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-24T20:10:37Z",
      "diff_hunk" : "@@ -775,6 +782,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or, if\n+    //! a snapshot is in use, for background validation.\n+    //!\n+    //! Its contents (including on-disk data) will be deleted *upon shutdown*\n+    //! after background validation of the snapshot has completed. We do not\n+    //! free the chainstate contents immediately after it finishes validation\n+    //! to cautiously avoid a case where some other part of the system is still\n+    //! using this pointer (e.g. net_processing).\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r370821538",
      "id" : 370821538,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgyMTUzOA==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 77,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 348197553,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/370821538",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 16d20d91b43b1c30333fe14272d69cfb543229b3 only, will continue review later on ð\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 16d20d91b43b1c30333fe14272d69cfb543229b3 only, will continue review later on ð\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjn6wv/cGwiv/yWquRmx2FEjuO62k8716JXtWFhx7zE1OcbgSYtOx2i4QAPQJhJ\r\nFYhRtUuVArBrkz9lrn9VSCo3Aueb7w8b/j3/8dGyH/zqUU7IhWgrjC7qlfbdP4lp\r\nDzDGE5ITqlvZlEkYAloI3zMoVRaUHDlGTK+bEHK3WdRnsPL9oR/C+S1UNcPNqq1m\r\nI4G5UrneAHnQnIiWJfjfzpZ0BlXCXCfs3S4BBwKNTQAMlqlgzz1sCQr5R2d8kcW3\r\nmNexZ76vn3IlrmFAyXWNwzQvGvfrGMF4RcIYQiS5OLfcjlzLfZOxSQJjerHzMe7C\r\nEdnUsD+OX6BA6ijgU7eO7k5mdRxSkUVLanAzINUB5dupiw1NscUyZlqsH2J549DT\r\nQ2g6va4jFXAULCFg2Rwx18k3GOQ0spLsRyv6wn/PxpwzEaZnEnSsoCe8pdiwCaOk\r\nSyIJzqx3vzfA3IhEgHVnLHqLN8iYk9F5XXevDDA7fPN1A/KAWDcQXjVEpu3jA03w\r\nnuOXSfZ+\r\n=G8F6\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `7e94e353f869ccf97b1947f28a0c0193a5e2cf8d984598592f1296d23f14168d  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401087e94e353f869ccf97b1947f28a0c0193a5e2cf8d984598592f1296d23f14168df010932f6a93389aee9f66370eb628789b3008fff01004dcbe7b06025934db649ab4347e89ef08f1045e2b516cf008ede39c0dfa042ee40083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff0100b1cd423e577a643596a0db531309fae08f1045e2b516df00861dda22d00ab11700083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267fff010b968296e10819ea09540a39ea357315508f1045e2b516df00827bbb6020257f1af0083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6df010e29ce239459275631a2919133ddc8ea308f1205b9e10df70f3727651768e1846a82711418f1e6299509dde211d4887f2f4162808f1045e2b516cf008882a6ad733fe9ab80083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6d)\r\n\r\n</details>\r\n",
      "created_at" : "2020-01-24T20:20:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-578285881",
      "id" : 578285881,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3ODI4NTg4MQ==",
      "updated_at" : "2020-01-24T20:20:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/578285881",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371446270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371446270"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, good point.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-27T19:47:06Z",
      "diff_hunk" : "@@ -775,6 +782,111 @@ bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparam\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+/**\n+ * Provides an interface for creating and interacting with multiple\n+ * chainstates, as well as a means to initialize chainstates from a\n+ * UTXO snapshot. Managed chainstates can be maintained at different\n+ * heights simultaneously.\n+ *\n+ * This class provides abstractions that allow the retrieval of the current\n+ * most-work chainstate (\"Active\") as well as chainstates which may be in\n+ * background use to validate UTXO snapshots.\n+ *\n+ * A few quick definitions:\n+ *\n+ * *IBD chainstate*: a chainstate populated via initial block download.\n+ *\n+ * *Snapshot chainstate*: a chainstate populated by loading in an\n+ *    assumeutxo UTXO snapshot.\n+ *\n+ * *Active chainstate*: the chainstate containing the current most-work\n+ *    chain. Consulted by most parts of the system (net_processing,\n+ *    wallet) as a reflection of the current chain and UTXO set.\n+ *    This may either be an IBD chainstate or a snapshot chainstate.\n+ *\n+ * *Background validation chainstate*: an IBD chainstate for which the\n+ *    IBD process is happening in the background while use of the\n+ *    active chainstate allows the rest of the system to function.\n+ *\n+ * *Validated chainstate*: a chainstate whose validity is not assumed.\n+ *    This could be an IBD chainstate, or a snapshot chainstate for\n+ *    which background validation (up to the base of the snapshot)\n+ *    has completed.\n+ */\n+class ChainstateManager\n+{\n+private:\n+    //! The chainstate used under normal operation (i.e. \"regular\" IBD) or, if\n+    //! a snapshot is in use, for background validation.\n+    //!\n+    //! Its contents (including on-disk data) will be deleted *upon shutdown*\n+    //! after background validation of the snapshot has completed. We do not\n+    //! free the chainstate contents immediately after it finishes validation\n+    //! to cautiously avoid a case where some other part of the system is still\n+    //! using this pointer (e.g. net_processing).\n+    std::unique_ptr<CChainState> m_ibd_chainstate;\n+\n+    //! A chainstate initialized on the basis of a UTXO snapshot. If this is\n+    //! non-null, it is always our active chainstate unless proven invalid.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371446270",
      "id" : 371446270,
      "in_reply_to_id" : 370821538,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NjI3MA==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 77,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 348928687,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371446270",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371459713"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371459713"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yep, this is a really good point. Fixed it to only allow a single activation sequence. ",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-27T20:15:42Z",
      "diff_hunk" : "@@ -5139,3 +5147,82 @@ class CMainCleanup\n     }\n };\n static CMainCleanup instance_of_cmaincleanup;\n+\n+uint256 ChainstateManager::SnapshotBlockhash() const {\n+    if (m_active_chainstate != nullptr) {\n+        // If a snapshot chainstate exists, it will always be our active.\n+        return m_active_chainstate->m_from_snapshot_blockhash;\n+    }\n+    return {};\n+}\n+\n+std::vector<CChainState*> ChainstateManager::GetAll()\n+{\n+    std::vector<CChainState*> out;\n+\n+    if (!IsSnapshotValidated() && m_ibd_chainstate) {\n+        out.push_back(m_ibd_chainstate.get());\n+    }\n+\n+    if (m_snapshot_chainstate) {\n+        out.push_back(m_snapshot_chainstate.get());\n+    }\n+\n+    return out;\n+}\n+\n+CChainState& ChainstateManager::InitializeChainstate(\n+    bool activate, const uint256& snapshot_blockhash)\n+{\n+    std::unique_ptr<CChainState>& to_modify = (\n+        snapshot_blockhash.IsNull() ? m_ibd_chainstate : m_snapshot_chainstate);\n+\n+    to_modify.reset(new CChainState(snapshot_blockhash));\n+\n+    if (activate) {\n+        LogPrintf(\"Switching active chainstate to %s\\n\", to_modify->ToString());\n+        m_active_chainstate = to_modify.get();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371459713",
      "id" : 371459713,
      "in_reply_to_id" : 370812356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1OTcxMw==",
      "original_commit_id" : "16d20d91b43b1c30333fe14272d69cfb543229b3",
      "original_position" : 53,
      "path" : "src/validation.cpp",
      "position" : 350,
      "pull_request_review_id" : 348945798,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-27T20:15:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371459713",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886443"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886443"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e89fbd3cf0820ee263a94c49751a97a784acb049:\r\n\r\nI have a hard time following the logic-change.\r\n\r\n* You replace all calls to ChainActive with a for loop over all chainstates\r\n* You only initialize the \"ibd\" chainstate, which will retain all logic as it was before\r\n* However, is_coinsview_empty will be set to the result of whatever chainstate was processed last, and then used (in the next loop) on whatever chainstate is processed first. This seems fragile or at least requires a comment to explain why this can be done.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T15:48:24Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886443",
      "id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4NjQ0Mw==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : 137,
      "pull_request_review_id" : 349483802,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T15:48:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886443",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886873"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886873"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e89fbd3cf0820ee263a94c49751a97a784acb049:\r\n\r\nPreviously we'd break out, now we continue. Why?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T15:49:07Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371886873",
      "id" : 371886873,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4Njg3Mw==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 152,
      "path" : "src/init.cpp",
      "position" : 184,
      "pull_request_review_id" : 349484380,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T15:49:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371886873",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371914209"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371914209"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe it's a little hard to see in the diff, but the current value of `is_coinsview_empty` is only ever used within a single loop. In the next loop, the [value is reset](https://github.com/jamesob/bitcoin/blob/1c173812bac34e263ae49e0bc80e45b437e95e8b/src/init.cpp#L1619-L1620) based on the chainstate being worked on.\r\n\r\nIt's safe to reset the value on line 1619 because it's not possible for the coinstip's best block to be set to null between this `is_coinsview_empty = ...` assignment and the one in the next loop.\r\n\r\nTo be extra sure there's no change, I could create a `chainstate_to_coinsview_empty` map and only set the values once, but I'll only do this if you think it's worthwhile.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T16:30:42Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371914209",
      "id" : 371914209,
      "in_reply_to_id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkxNDIwOQ==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : 137,
      "pull_request_review_id" : 349520079,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T16:30:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371914209",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371963531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371963531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oh, I missed that the value is reset. Maybe it would help to limit the scope of the variable to make that more clear and avoid this issue accidentally coming up in the future?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T17:57:35Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371963531",
      "id" : 371963531,
      "in_reply_to_id" : 371886443,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk2MzUzMQ==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 110,
      "path" : "src/init.cpp",
      "position" : 137,
      "pull_request_review_id" : 349583431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T17:57:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371963531",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371972320"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371972320"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit e89fbd3:\r\n\r\nVerifyDB will verify the db based on the active chain. How is this supposed to work when you pass in a db that is not from the active chainstate?",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T18:15:00Z",
      "diff_hunk" : "@@ -1519,93 +1522,125 @@ bool AppInitMain(NodeContext& node)\n                 // At this point we're either in reindex or we've loaded a useful\n                 // block tree into BlockIndex()!\n \n-                ::ChainstateActive().InitCoinsDB(\n-                    /* cache_size_bytes */ nCoinDBCache,\n-                    /* in_memory */ false,\n-                    /* should_wipe */ fReset || fReindexChainState);\n-\n-                ::ChainstateActive().CoinsErrorCatcher().AddReadErrCallback([]() {\n-                    uiInterface.ThreadSafeMessageBox(\n-                        _(\"Error reading from database, shutting down.\").translated,\n-                        \"\", CClientUIInterface::MSG_ERROR);\n-                });\n-\n-                // If necessary, upgrade from older database format.\n-                // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().CoinsDB().Upgrade()) {\n-                    strLoadError = _(\"Error upgrading chainstate database\").translated;\n-                    break;\n-                }\n-\n-                // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n-                if (!::ChainstateActive().ReplayBlocks(chainparams)) {\n-                    strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n-                    break;\n-                }\n-\n-                // The on-disk coinsdb is now in a good state, create the cache\n-                ::ChainstateActive().InitCoinsCache();\n-                assert(::ChainstateActive().CanFlushToDisk());\n+                bool failed_chainstate_init = false;\n+\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    LogPrintf(\"Initializing chainstate %s\\n\", chainstate->ToString());\n+                    chainstate->InitCoinsDB(\n+                        /* cache_size_bytes */ nCoinDBCache,\n+                        /* in_memory */ false,\n+                        /* should_wipe */ fReset || fReindexChainState);\n+\n+                    chainstate->CoinsErrorCatcher().AddReadErrCallback([]() {\n+                        uiInterface.ThreadSafeMessageBox(\n+                            _(\"Error reading from database, shutting down.\").translated,\n+                            \"\", CClientUIInterface::MSG_ERROR);\n+                    });\n+\n+                    // If necessary, upgrade from older database format.\n+                    // This is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->CoinsDB().Upgrade()) {\n+                        strLoadError = _(\"Error upgrading chainstate database\").translated;\n+                        failed_chainstate_init = true;\n+                        break;\n+                    }\n \n-                is_coinsview_empty = fReset || fReindexChainState ||\n-                    ::ChainstateActive().CoinsTip().GetBestBlock().IsNull();\n-                if (!is_coinsview_empty) {\n-                    // LoadChainTip initializes the chain based on CoinsTip()'s best block\n-                    if (!::ChainstateActive().LoadChainTip(chainparams)) {\n-                        strLoadError = _(\"Error initializing block database\").translated;\n+                    // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n+                    if (!chainstate->ReplayBlocks(chainparams)) {\n+                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\").translated;\n+                        failed_chainstate_init = true;\n                         break;\n                     }\n-                    assert(::ChainActive().Tip() != nullptr);\n+\n+                    // The on-disk coinsdb is now in a good state, create the cache\n+                    chainstate->InitCoinsCache();\n+                    assert(chainstate->CanFlushToDisk());\n+\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        // LoadChainTip initializes the chain based on CoinsTip()'s best block\n+                        if (!chainstate->LoadChainTip(chainparams)) {\n+                            strLoadError = _(\"Error initializing block database\").translated;\n+                            failed_chainstate_init = true;\n+                            break;\n+                        }\n+                        assert(chainstate->m_chain.Tip() != nullptr);\n+                    }\n+                }\n+\n+                if (failed_chainstate_init) {\n+                    // Necessary to have a break here because the above breaks\n+                    // are local to the per-chainstate loop.\n+                    break;\n                 }\n             } catch (const std::exception& e) {\n                 LogPrintf(\"%s\\n\", e.what());\n                 strLoadError = _(\"Error opening block database\").translated;\n                 break;\n             }\n \n-            if (!fReset) {\n-                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                // It both disconnects blocks based on ::ChainActive(), and drops block data in\n-                // BlockIndex() based on lack of available witness data.\n-                uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n-                if (!::ChainstateActive().RewindBlockIndex(chainparams)) {\n-                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\").translated;\n-                    break;\n+            for (CChainState* chainstate : g_chainman.GetAll()) {\n+                if (!fReset) {\n+                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                    // It both disconnects blocks based on ::ChainActive(), and drops block data in\n+                    // BlockIndex() based on lack of available witness data.\n+                    uiInterface.InitMessage(_(\"Rewinding blocks...\").translated);\n+                    if (!chainstate->RewindBlockIndex(chainparams)) {\n+                        strLoadError = _(\n+                            \"Unable to rewind the database to a pre-fork state. \"\n+                            \"You will need to redownload the blockchain\").translated;\n+                        break;\n+                    }\n                 }\n             }\n \n+            bool failed_verification = false;\n+\n             try {\n                 LOCK(cs_main);\n-                if (!is_coinsview_empty) {\n-                    uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n-                    if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n-                            MIN_BLOCKS_TO_KEEP);\n-                    }\n-\n-                    CBlockIndex* tip = ::ChainActive().Tip();\n-                    RPCNotifyBlockChange(true, tip);\n-                    if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n-                        strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n-                                \"This may be due to your computer's date and time being set incorrectly. \"\n-                                \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n-                        break;\n-                    }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, &::ChainstateActive().CoinsDB(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n-                                  gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n-                        strLoadError = _(\"Corrupted block database detected\").translated;\n-                        break;\n+                for (CChainState* chainstate : g_chainman.GetAll()) {\n+                    is_coinsview_empty = fReset || fReindexChainState ||\n+                        chainstate->CoinsTip().GetBestBlock().IsNull();\n+                    if (!is_coinsview_empty) {\n+                        uiInterface.InitMessage(_(\"Verifying blocks...\").translated);\n+                        if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n+                            LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n+                                MIN_BLOCKS_TO_KEEP);\n+                        }\n+\n+                        const CBlockIndex* tip = chainstate->m_chain.Tip();\n+                        RPCNotifyBlockChange(true, tip);\n+                        if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n+                            strLoadError = _(\"The block database contains a block which appears to be from the future. \"\n+                                    \"This may be due to your computer's date and time being set incorrectly. \"\n+                                    \"Only rebuild the block database if you are sure that your computer's date and time are correct\").translated;\n+                            failed_verification = true;\n+                            break;\n+                        }\n+\n+                        if (!CVerifyDB().VerifyDB(\n+                                chainparams, &chainstate->CoinsDB(),",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371972320",
      "id" : 371972320,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk3MjMyMA==",
      "original_commit_id" : "e89fbd3cf0820ee263a94c49751a97a784acb049",
      "original_position" : 202,
      "path" : "src/init.cpp",
      "position" : 234,
      "pull_request_review_id" : 349594651,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T18:15:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371972320",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371994558"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371994558"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit 1c173812bac34e263ae49e0bc80e45b437e95e8b:\r\n\r\nWhy is this a hack and what should be used instead of the hack? If there is nothing that can be used instead, this is not a hack and the comment should go.",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T18:58:20Z",
      "diff_hunk" : "@@ -701,11 +701,21 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n     }\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n-    BlockValidationState state;\n-    if (!ActivateBestChain(state, chainparams)) {\n-        LogPrintf(\"Failed to connect best block (%s)\\n\", FormatStateMessage(state));\n-        StartShutdown();\n-        return;\n+\n+    // XXX this is kind of a hack to avoid a lock inversion.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371994558",
      "id" : 371994558,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5NDU1OA==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 10,
      "path" : "src/init.cpp",
      "position" : 38,
      "pull_request_review_id" : 349622592,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T18:58:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371994558",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371995471"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371995471"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here and everywhere else you use the `XXX`",
      "commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "created_at" : "2020-01-28T19:00:08Z",
      "diff_hunk" : "@@ -1403,7 +1403,15 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!ActivateBestChain(state, Params(), a_recent_block)) {\n+\n+        // XXX this is kind of a hack here to get around the fact that we can't",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#discussion_r371995471",
      "id" : 371995471,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5NTQ3MQ==",
      "original_commit_id" : "1c173812bac34e263ae49e0bc80e45b437e95e8b",
      "original_position" : 6,
      "path" : "src/net_processing.cpp",
      "position" : 6,
      "pull_request_review_id" : 349623726,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17737",
      "updated_at" : "2020-01-28T19:00:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/371995471",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 1c173812bac34e263ae49e0bc80e45b437e95e8b, but it looks like the tests fail ð¢\r\n\r\n<details><summary>Show signature and timestamp</summary>\r\n\r\nSignature:\r\n\r\n```\r\n-----BEGIN PGP SIGNED MESSAGE-----\r\nHash: SHA512\r\n\r\nACK 1c173812bac34e263ae49e0bc80e45b437e95e8b, but it looks like the tests fail ð¢\r\n-----BEGIN PGP SIGNATURE-----\r\n\r\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\r\npUjFNgwApRAQI5N2D4113l6z1rLjgUjlixBjaHFnZC0rG5naAL/Gu55ofeAmzg5Z\r\nTYF1WvqL9spMC+CDCweOyRGKsWb81Ryv8Ieni+Dn8RE+pu0VLakDu9Lw95+bd43j\r\n1P6RLJYa2NYFlCuJssbs5ziEPJqs3/DlelgWPslfbdgwLXWFT54CvijXuFEF43b/\r\nT9/NBr1OO1ByA0+AEM0eT3iHH55Guna544fuY8UjEDabnjqs8EiatmXArGlqi6Wr\r\nD6U7J33USdtpof1bb+2zR8KLSb4MCFFxezr2yrSREHf5tqqamfN3qJ2dYHazNEMd\r\nS4ka7rOrQqY/c2XIBs4oYD8pxI3thvxuo4nAnsG0sxjxkW0mm4O5OBqTFP/aGilX\r\nNNkR1TTl1DcuqbTFK3FNoiqmG/yuh2OWw3jm0EG6jhEcf3sdf1d2e5RUQ0xKPDRm\r\nh/PVqKPlmRDkEHiT9XoLgWDw6C9fH86HdGh0HLBZmTJ2jOt+sVeIvSXtth7sVznG\r\nvtfM49Wg\r\n=0mLY\r\n-----END PGP SIGNATURE-----\r\n```\r\n\r\n[Timestamp of file with hash `6a38ed3fc7e109b015b25d8cd883d76b0d7c7f56f8c96dd80e10381889e51bbd  -`](https://opentimestamps.org/info/?004f70656e54696d657374616d7073000050726f6f6600bf89e2e884e8929401086a38ed3fc7e109b015b25d8cd883d76b0d7c7f56f8c96dd80e10381889e51bbdf010aa5fff91763b0cf471495be301eed42608fff0101ef862cc09f5549b6fe9bd6be7aa9ab308f1045e3084fef00840dc1af3f0f867230083dfe30d2ef90c8e292868747470733a2f2f66696e6e65792e63616c656e6461722e657465726e69747977616c6c2e636f6dfff01060445eda4658bc26a60a7fb78cea975908f1045e3084fdf00843441668b950cb840083dfe30d2ef90c8e232268747470733a2f2f6274632e63616c656e6461722e636174616c6c6178792e636f6dfff010a59c899827ea8fb57697330aa2dde3cb08f1045e3084fef008291d3bc5bd7b02730083dfe30d2ef90c8e2c2b68747470733a2f2f626f622e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267f010d1af961bfb84c92bb1d87fe19689d14e08f1045e3084fdf008ce3f6b62ea653e220083dfe30d2ef90c8e2e2d68747470733a2f2f616c6963652e6274632e63616c656e6461722e6f70656e74696d657374616d70732e6f7267)\r\n\r\n</details>\r\n",
      "created_at" : "2020-01-28T19:01:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17737#issuecomment-579403029",
      "id" : 579403029,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17737",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3OTQwMzAyOQ==",
      "updated_at" : "2020-01-28T19:01:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/579403029",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
