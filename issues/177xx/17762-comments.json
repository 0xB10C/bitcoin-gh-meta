[
   {
      "author_association" : "MEMBER",
      "body" : "Tested ACK 4d88c3dcb61e7c075ed3dd442044e0eff4e3c8de",
      "created_at" : "2019-12-17T15:31:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17762#issuecomment-566592445",
      "id" : 566592445,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NjU5MjQ0NQ==",
      "updated_at" : "2019-12-17T15:31:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566592445",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK. I probably should have done this in #16021.",
      "created_at" : "2019-12-17T15:54:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17762#issuecomment-566602864",
      "id" : 566602864,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17762",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU2NjYwMjg2NA==",
      "updated_at" : "2019-12-17T15:54:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/566602864",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17762#discussion_r360339386"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17762"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360339386"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, `unexpected` or `unhandled` instead or unknown?",
      "commit_id" : "4d88c3dcb61e7c075ed3dd442044e0eff4e3c8de",
      "created_at" : "2019-12-20T11:44:10Z",
      "diff_hunk" : "@@ -3333,32 +3333,10 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n             fMoreWork = true;\n-    }\n-    catch (const std::ios_base::failure& e)\n-    {\n-        if (strstr(e.what(), \"end of data\")) {\n-            // Allow exceptions from under-length message on vRecv\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"size too large\")) {\n-            // Allow exceptions from over-long size\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"non-canonical ReadCompactSize()\")) {\n-            // Allow exceptions from non-canonical encoding\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"Superfluous witness record\")) {\n-            // Allow exceptions from illegal witness encoding\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else if (strstr(e.what(), \"Unknown transaction optional data\")) {\n-            // Allow exceptions from unknown witness encoding\n-            LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n-        } else {\n-            PrintExceptionContinue(&e, \"ProcessMessages()\");\n-        }\n-    }\n-    catch (const std::exception& e) {\n-        PrintExceptionContinue(&e, \"ProcessMessages()\");\n+    } catch (const std::exception& e) {\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' (%s) caught\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what(), typeid(e).name());\n     } catch (...) {\n-        PrintExceptionContinue(nullptr, \"ProcessMessages()\");\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): Unknown exception caught\\n\", __func__, SanitizeString(strCommand), nMessageSize);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17762#discussion_r360339386",
      "id" : 360339386,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MDMzOTM4Ng==",
      "original_commit_id" : "4d88c3dcb61e7c075ed3dd442044e0eff4e3c8de",
      "original_position" : 32,
      "path" : "src/net_processing.cpp",
      "position" : 32,
      "pull_request_review_id" : 335212610,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17762",
      "updated_at" : "2019-12-20T11:45:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/360339386",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
