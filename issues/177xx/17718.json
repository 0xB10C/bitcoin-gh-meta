{
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "When fuzzing the base58 functions I noticed that `DecodeBase58(const std::string& str, â¦)` is perhaps a bit too liberal in what input it accepts when decoding.\r\n\r\nI naÃ¯vely assumed that `DecodeBase58(const std::string& str, â¦)` would return `false` when passing it a `str` which contains at least one character that is not any of the base58 characters (all alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\") or the whitespace characters.\r\n\r\nThat is not the case:\r\n* `str` contains `good` â `DecodeBase58(const std::string& str, â¦) == true` (as expected)\r\n* `str` contains `bad0IOl` â `DecodeBase58(const std::string& str, â¦) == false` (as expected)\r\n* `str` contains `good\\x00bad0IOl` â `DecodeBase58(const std::string& str, â¦) == true`(!)\r\n\r\nThe reason is that `DecodeBase58(const std::string& str, â¦)` calls `DecodeBase58(const char* psz, â¦)` which will only consider the string up to the first `\\x00`.",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 0,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17718/comments",
   "created_at" : "2019-12-10T23:21:42Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17718/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/17718",
   "id" : 536050815,
   "labels" : [
      {
         "color" : "FBBAAB",
         "default" : false,
         "description" : null,
         "id" : 64585,
         "name" : "Bug",
         "node_id" : "MDU6TGFiZWw2NDU4NQ==",
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/labels/Bug"
      }
   ],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17718/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "MDU6SXNzdWU1MzYwNTA4MTU=",
   "number" : 17718,
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "title" : "DecodeBase58(const std::string& str, â¦) is a bit too liberal when decoding?",
   "updated_at" : "2019-12-10T23:21:42Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17718",
   "user" : {
      "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
      "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
      "followers_url" : "https://api.github.com/users/practicalswift/followers",
      "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/practicalswift",
      "id" : 7826565,
      "login" : "practicalswift",
      "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
      "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
      "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
      "repos_url" : "https://api.github.com/users/practicalswift/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/practicalswift"
   }
}
