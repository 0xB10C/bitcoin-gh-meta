[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20876 (test: Replace getmempoolentry with testmempoolaccept in MiniWallet by MarcoFalke)\n* #20391 (wallet: introduce setfeerate (an improved settxfee, in sat/vB) by jonatack)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-07T19:55:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-756346617",
      "id" : 756346617,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NjM0NjYxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-07T19:55:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/756346617",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554068735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554068735"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just curious, is there a reason to generate blocks through the MiniWallet and the TestNode separately?",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T16:55:36Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554068735",
      "id" : 554068735,
      "line" : 36,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA2ODczNQ==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 36,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 34,
      "pull_request_review_id" : 564423905,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554068735",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/264977?v=4",
         "events_url" : "https://api.github.com/users/joelklabo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/joelklabo/followers",
         "following_url" : "https://api.github.com/users/joelklabo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/joelklabo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/joelklabo",
         "id" : 264977,
         "login" : "joelklabo",
         "node_id" : "MDQ6VXNlcjI2NDk3Nw==",
         "organizations_url" : "https://api.github.com/users/joelklabo/orgs",
         "received_events_url" : "https://api.github.com/users/joelklabo/received_events",
         "repos_url" : "https://api.github.com/users/joelklabo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/joelklabo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/joelklabo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/joelklabo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554073731"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554073731"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We generate blocks in `MiniWallet` so we have utxos to spend (coinbases). It is helpful to generate 100 blocks on the node separately, so all the utxos in MiniWallet are mature.\r\n\r\nIf we just did, miniwallet.generate(191), only 91 of the utxos in mini wallets utxo set will be mature. And it gets tricky because some miniwallet transactions will now fail (And we don't necessarily know which utxo we are gonna get as mini wallet sorts them by size)",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:03:10Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554073731",
      "id" : 554073731,
      "in_reply_to_id" : 554068735,
      "line" : 36,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA3MzczMQ==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 36,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 34,
      "pull_request_review_id" : 564429452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554073731",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554079938"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554079938"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Not sure if `relayfee = node.getnetworkinfo()['relayfee']` is needed here anymore. seems like it shouldn't have changed, right?",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:14:44Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554079938",
      "id" : 554079938,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA3OTkzOA==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 40,
      "original_position" : 49,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554079938",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554087398"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554087398"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: might as well fix this type-o `minrelytxfee` => `minrelaytxfee`?",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:28:20Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554087398",
      "id" : 554087398,
      "line" : 49,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA4NzM5OA==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 59,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 61,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554087398",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554090506"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554090506"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: need a space between `if` and `(`. I think our linter won't even want the parenthesis (superfluous parenthesis). Really, why not just do: `if big_txouts:` ... `else:`",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:34:17Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554090506",
      "id" : 554090506,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MDUwNg==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 96,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554090506",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554092198"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554092198"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `tx.vout.extend(big_txouts)` would have the same behavior and get rid of a loop",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:37:37Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554092198",
      "id" : 554092198,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MjE5OA==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 98,
      "original_position" : 22,
      "original_start_line" : 97,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554092198",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554093130"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554093130"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Do we even want this `else` condition? I would think `big_txouts` should be a required param. Otherwise this branch seems to just duplicate `send_self_transfer`",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:39:28Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554093130",
      "id" : 554093130,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDA5MzEzMA==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 102,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554093130",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554102596"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554102596"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`fee_rate` seems to be a confusing param name. As this is now just the absolute `fee`, right? ",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T17:57:42Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554102596",
      "id" : 554102596,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEwMjU5Ng==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 85,
      "original_position" : 9,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554102596",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554108817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554108817"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not sure this method name is ideal? I was expecting multiple txns, but I guess this sends one big transaction? I'm not sure `send_big_self_transfer` would be better, but just want to double check on naming here",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T18:10:28Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554108817",
      "id" : 554108817,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEwODgxNw==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 81,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554108817",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554110427"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554110427"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I know this is existing behavior. But I'ma little confused because `txids` aren't used. Should we be checking these are in the mempool?",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T18:13:42Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554110427",
      "id" : 554110427,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExMDQyNw==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 44,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 53,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554110427",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554112536"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554112536"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is there a need to grab a specific utxo here? I would think you can just let miniwallet pick it, and do:\r\n\r\n`assert_raises_rpc_error(-26, \"mempool min fee not met\", miniwallet.send_self_transfer, from_node=node, fee_rate=relayfee)`",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T18:17:50Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        insufficient_fee_utxo = miniwallet.get_utxo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554112536",
      "id" : 554112536,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExMjUzNg==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 54,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554112536",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554115491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554115491"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I think there is some confusing behavior here. bc you generate 91 utxos, then spend 1, spend 3*30, and are now spending again (so this won't spend a Coinbase, rather it'll spend one of our previous transactions).\r\n\r\nAnd bc you explicitly `get_utxo` you are going to get the utxo from last transaction from `create_large_transactions` . Whereas if you let MiniWallet pick, it'd sort the utxo set by value, and you'd probably get the transaction that was evicted from the mempool since it had the lowest fee. idk what would happen in that case, very confusing to me.\r\n\r\nAnyways, maybe you just want to generate 92 utxos at the get-go?",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T18:23:45Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert txid not in self.nodes[0].getrawmempool()\n-        txdata = self.nodes[0].gettransaction(txid)\n-        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n+        assert txid not in node.getrawmempool()\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_greater_than(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n         self.log.info('Create a mempool tx that will not pass mempoolminfee')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n-        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        insufficient_fee_utxo = miniwallet.get_utxo()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554115491",
      "id" : 554115491,
      "in_reply_to_id" : 554112536,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExNTQ5MQ==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 54,
      "original_position" : 77,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : null,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554115491",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554117463"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554117463"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just want to confirm that we no longer need a `vsize` assertion. I guess we don't know the `vsize` or don't care since we are passing an absolute fee and not calculating the fee based on vsize*fee_rate?",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-08T18:27:25Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)\n+        self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n+        tx_info = from_node.getmempoolentry(txid)\n+        assert_equal(tx_info['fee'], fee)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554117463",
      "id" : 554117463,
      "line" : 99,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExNzQ2Mw==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 99,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 49,
      "pull_request_review_id" : 564437518,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T00:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554117463",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554276038"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554276038"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'm not very sure about that too. I just followed the existing behavior and kept it there. If it really serves no purpose, i can either get rid of it or add a test case to check those txs in the mempool",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-09T02:11:37Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)\n \n         self.log.info('Create a mempool tx that will be evicted')\n-        us0 = utxos.pop()\n-        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n-        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n-        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n-        txF = self.nodes[0].fundrawtransaction(tx)\n-        self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n-\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        txid = miniwallet.send_self_transfer(fee_rate = relayfee, from_node = node)['txid']\n+        relayfee = node.getnetworkinfo()['relayfee']\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = self.create_large_transactions(node, txouts, miniwallet, 30, (i+1)*base_fee)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554276038",
      "id" : 554276038,
      "in_reply_to_id" : 554110427,
      "line" : 44,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI3NjAzOA==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 44,
      "original_position" : 54,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 53,
      "pull_request_review_id" : 564675030,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T02:11:37Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554276038",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/26356227?v=4",
         "events_url" : "https://api.github.com/users/stackman27/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stackman27/followers",
         "following_url" : "https://api.github.com/users/stackman27/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stackman27/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stackman27",
         "id" : 26356227,
         "login" : "stackman27",
         "node_id" : "MDQ6VXNlcjI2MzU2MjI3",
         "organizations_url" : "https://api.github.com/users/stackman27/orgs",
         "received_events_url" : "https://api.github.com/users/stackman27/received_events",
         "repos_url" : "https://api.github.com/users/stackman27/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stackman27/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stackman27"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554279481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554279481"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes thats what i realized. Also the `vsize` changed (from 96 to 67552) while making big txs  and therefore checking it with a constant value of 96 didn't really make sense. I can however, add an assertion to check big tx `vsize` since they're all the same. Do you recommend? ",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-09T02:44:51Z",
      "diff_hunk" : "@@ -77,3 +77,30 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fee'], fee)\n         return {'txid': txid, 'wtxid': tx_info['wtxid'], 'hex': tx_hex}\n+\n+    def send_multi_self_transfer(self, *, fee_rate=Decimal(\"0.03\"), from_node, utxo_to_spend=None, big_txouts=None):\n+        \"\"\"Create multiple tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n+        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or self._utxos.pop() # Pick the largest utxo (if none provided) and hope it covers the fee\n+        send_value = satoshi_round(utxo_to_spend['value'] - fee_rate)\n+        fee = utxo_to_spend['value'] - send_value\n+        assert send_value > 0\n+\n+        tx = CTransaction()\n+        tx.vin = [CTxIn(COutPoint(int(utxo_to_spend['txid'], 16), utxo_to_spend['vout']))]\n+        tx.vout = [CTxOut(int(send_value * COIN), self._scriptPubKey)]\n+        tx.wit.vtxinwit = [CTxInWitness()]\n+        tx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_hex = tx.serialize().hex()\n+\n+        if(big_txouts is not None):\n+            for txout in big_txouts:\n+                tx.vout.append(txout)\n+            tx_hex = tx.serialize().hex()\n+            txid = from_node.sendrawtransaction(tx_hex, 0)\n+        else:\n+            txid = from_node.sendrawtransaction(tx_hex)\n+        self._utxos.append({'txid': txid, 'vout': 0, 'value': send_value})\n+        tx_info = from_node.getmempoolentry(txid)\n+        assert_equal(tx_info['fee'], fee)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554279481",
      "id" : 554279481,
      "in_reply_to_id" : 554117463,
      "line" : 99,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI3OTQ4MQ==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 99,
      "original_position" : 29,
      "original_start_line" : null,
      "path" : "test/functional/test_framework/wallet.py",
      "position" : 49,
      "pull_request_review_id" : 564677460,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T02:57:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554279481",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/26356227?v=4",
         "events_url" : "https://api.github.com/users/stackman27/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stackman27/followers",
         "following_url" : "https://api.github.com/users/stackman27/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stackman27/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stackman27",
         "id" : 26356227,
         "login" : "stackman27",
         "node_id" : "MDQ6VXNlcjI2MzU2MjI3",
         "organizations_url" : "https://api.github.com/users/stackman27/orgs",
         "received_events_url" : "https://api.github.com/users/stackman27/received_events",
         "repos_url" : "https://api.github.com/users/stackman27/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stackman27/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stackman27"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554280046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554280046"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@joelklabo I used the previous `miniWallet` tests as reference to generate utxos like the one done here  https://github.com/bitcoin/bitcoin/pull/20688/files  ",
      "commit_id" : "5546a4f7b69b500abb3bdf890f27b4fcb04a46a7",
      "created_at" : "2021-01-09T02:50:06Z",
      "diff_hunk" : "@@ -20,55 +21,44 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         txouts = gen_return_txouts()\n-        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+        node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        relayfee = node.getnetworkinfo()['relayfee']\n \n         self.log.info('Check that mempoolminfee is minrelytxfee')\n-        assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n-        assert_equal(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n+        assert_equal(node.getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n-        txids = []\n-        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n+        txids=[]\n+        miniwallet.generate(91)\n+        node.generate(100)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#discussion_r554280046",
      "id" : 554280046,
      "in_reply_to_id" : 554068735,
      "line" : 36,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI4MDA0Ng==",
      "original_commit_id" : "543919b4b19b98867b3eebc33b38c87f4fd164a3",
      "original_line" : 36,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "test/functional/mempool_limit.py",
      "position" : 34,
      "pull_request_review_id" : 564677817,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20874",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-09T02:50:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/554280046",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/26356227?v=4",
         "events_url" : "https://api.github.com/users/stackman27/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stackman27/followers",
         "following_url" : "https://api.github.com/users/stackman27/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stackman27/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stackman27",
         "id" : 26356227,
         "login" : "stackman27",
         "node_id" : "MDQ6VXNlcjI2MzU2MjI3",
         "organizations_url" : "https://api.github.com/users/stackman27/orgs",
         "received_events_url" : "https://api.github.com/users/stackman27/received_events",
         "repos_url" : "https://api.github.com/users/stackman27/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stackman27/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stackman27"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mjdietzx Thank you very much for the review. I just pushed an update shortening the methods in `miniwallet` class by adding `prepare_tx` and also resolved most of your comments ",
      "created_at" : "2021-01-09T02:52:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20874#issuecomment-757083465",
      "id" : 757083465,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20874",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzA4MzQ2NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-09T02:57:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757083465",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/26356227?v=4",
         "events_url" : "https://api.github.com/users/stackman27/events{/privacy}",
         "followers_url" : "https://api.github.com/users/stackman27/followers",
         "following_url" : "https://api.github.com/users/stackman27/following{/other_user}",
         "gists_url" : "https://api.github.com/users/stackman27/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/stackman27",
         "id" : 26356227,
         "login" : "stackman27",
         "node_id" : "MDQ6VXNlcjI2MzU2MjI3",
         "organizations_url" : "https://api.github.com/users/stackman27/orgs",
         "received_events_url" : "https://api.github.com/users/stackman27/received_events",
         "repos_url" : "https://api.github.com/users/stackman27/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/stackman27/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/stackman27/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/stackman27"
      }
   }
]
