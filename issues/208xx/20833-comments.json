[
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for working on this. Strong Concept ACK!",
      "created_at" : "2021-01-03T09:20:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753589415",
      "id" : 753589415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU4OTQxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T09:20:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753589415",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK and approach ACK.",
      "created_at" : "2021-01-03T10:38:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753597483",
      "id" : 753597483,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU5NzQ4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T10:38:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753597483",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20916 (rpc: Return wtxid from testmempoolaccept by MarcoFalke)\n* #20834 (locks and docs in ATMP and CheckInputsFromMempoolAndCache by glozow)\n* #20749 ([Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex by dongcarl)\n* #20267 (Disable and fix tests for when BDB is not compiled by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-03T11:29:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753602927",
      "id" : 753602927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwMjkyNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T19:38:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602927",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This means that we will update our script cache with transactions that might not ultimately get accepted to the mempool?  This would need to be restructured before exposing to the p2p network to avoid becoming a DoS vector.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-05T19:57:33Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033",
      "id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2MTAzMw==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562088788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?  It can only return failure if our software is broken -- it's a safeguard against miners creating invalid blocks, not something that users should expect to ever run into.\r\n\r\nIf you drop this call, then dropping CIFMAC is also no longer necessary, right?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-05T20:12:32Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344",
      "id" : 552168344,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2ODM0NA==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562098520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "AFAIK we only use the script cache when it passes, so I don't think it's a DoS vector? On master, if you call `testmempoolaccept`, it caches the successful script executions with consensus flags.\r\n\r\n> On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?\r\n\r\nGood point, `PolicyScriptChecks` is stricter so `ConsensusScriptChecks` is unnecessary. And yes, we could then keep CIFMAC. But in order to do actual, non-test-accepts, we'll have to revisit the issue again (since I assume we'll want to call `ConsensusScriptChecks` then). It'd be \"kicking the can down the road.\"",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-05T20:37:04Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013",
      "id" : 552180013,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDAxMw==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562113660,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool (probably along with some other properties on the feerate of the package being used rather than individual feerates).  If that's correct, then calling `ConsensusScriptChecks` on anything (which will add to the script cache) before you finish calling `PolicyScriptChecks` on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nIf exposed on the p2p network, an attacker could wipe out a target's script cache for free this way, which is the DoS vector I was referring to.\r\n\r\nSo instead, you can make this loop just call `PolicyScriptChecks`, which is good enough for test_accept.  Once you implement adding to the mempool on success, you could have a new loop over the set of transactions in the package (topologically sorted) that invokes `ConsensusScriptChecks` and then adds the transaction to the mempool.  This way, CIFMAC doesn't need to be touched at all, because all a transaction's inputs are already in the utxo set or the mempool at the time `ConsensusScriptChecks` is invoked.  (This is essentially the structure I proposed in #16401.)",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T14:53:09Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985",
      "id" : 552684985,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4NDk4NQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562770282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do we want to commit to that?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T17:05:54Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597",
      "id" : 552814597,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNDU5Nw==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 562884556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This syntax seems strange?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T17:06:38Z",
      "diff_hunk" : "@@ -921,56 +920,80 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n+    const size_t num_txns = {transactions.size()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366",
      "id" : 552815366,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNTM2Ng==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 924,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 562884556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool... \r\nIf that's correct, then calling ConsensusScriptChecks on anything (which will add to the script cache) before you finish calling PolicyScriptChecks on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nRight, I have the same vision in mind, and absolutely agree. I should change these two be separate loops - all `PolicyScriptChecks`, then all `ConsensusScriptChecks`. This would mean that we would only be calling `ConsensusScriptChecks` (which is effectively just used to cache script results) if all of them would pass - there's no way for any of them to fail consensus if they passed policy.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T19:53:47Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655",
      "id" : 552930655,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzMDY1NQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562998317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The more I think about this, the more it makes sense ð \r\nIn actual package accept, we don't need CoinsViewMempool after `PolicyScriptChecks`, we can actually just go one by one in the package (after topological sort) and run `ConsensusScriptChecks` + submit to mempool. And subsequent txns should have all of the Coins they need from the pool. Apologies if this was obvious to you - is this what you had in mind?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T22:31:20Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459",
      "id" : 552997459,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NzQ1OQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563082415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe we plan to validate packages atomically, so we would never have a situation of \"these txns passed, but those didn't.\" That's why I believed length 1 for failure would be alright, especially since this wouldn't be an API-breaking change. I imagine it could be helpful to return more information to the client, but don't know what that would look like concretely.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T22:49:39Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781",
      "id" : 553003781,
      "in_reply_to_id" : 552814597,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzc4MQ==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 563090036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(Open to ideas)",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-06T23:14:02Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795",
      "id" : 553011795,
      "in_reply_to_id" : 552814597,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxMTc5NQ==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 563099740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes -- sounds like we're on the same page!",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-07T14:10:06Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758",
      "id" : 553349758,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0OTc1OA==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563513837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-08T21:02:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "5th time's the charm I guess ð this is ready for review!",
      "created_at" : "2021-01-08T23:10:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757042159",
      "id" : 757042159,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzA0MjE1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T23:10:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757042159",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK :) ",
      "created_at" : "2021-01-09T19:48:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757357961",
      "id" : 757357961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzM1Nzk2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-09T19:48:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757357961",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-01-13T11:45:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-759396273",
      "id" : 759396273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTM5NjI3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T11:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759396273",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557161651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557161651"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit c97fae1011c4bd376898af73576756f163eeaf58:\r\n\r\nThis member seems currently unused? Also, what is the point of copying the (already cached) txid once more? If you need a reference to the tx, maybe store the `CTransactionRef`, but that seems redundant, because the caller is already aware of the tx.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T08:11:02Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557161651",
      "id" : 557161651,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE2MTY1MQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 201,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 30,
      "pull_request_review_id" : 567995465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T08:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557161651",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557163163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557163163"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be nice to clarify what kind of fee this is. Probably base fee and not prioritized fee?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T08:12:09Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557163163",
      "id" : 557163163,
      "line" : 205,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE2MzE2Mw==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 34,
      "pull_request_review_id" : 567995465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T08:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557163163",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557185885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if it makes sense to return a fee of `0` when the tx was rejected. At the very least the members that are optional, should be `std::optional`. Though, I am thinking that it could make sense to return two completely different types, based on whether the tx was accepted? I.e. a struct with `{fee, replaced_txs}` if the tx was accepted and a struct with `{state}` if the tx was rejected.\r\n\r\nThis would make it harder at the call sites to make mistakes such as returning the fee of a rejected tx.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T08:26:35Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885",
      "id" : 557185885,
      "line" : 205,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE4NTg4NQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 34,
      "pull_request_review_id" : 567995465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T08:26:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557185885",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-01-14T16:34:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-760311306",
      "id" : 760311306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDMxMTMwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T16:34:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760311306",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557530738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557530738"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, it's not used in https://github.com/bitcoin/bitcoin/commit/c97fae1011c4bd376898af73576756f163eeaf58. I ended up needing it for multi-accept on the failure case to indicate which tx failed. It might fit better in https://github.com/bitcoin/bitcoin/pull/20833/commits/2f36f0743158817635a39f7efb60541fe0c4b31d",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T16:35:31Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557530738",
      "id" : 557530738,
      "in_reply_to_id" : 557161651,
      "line" : 201,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzMDczOA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 201,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 30,
      "pull_request_review_id" : 568412951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T16:35:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557530738",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557561211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557561211"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: you can probably ditch`self.extra_args = [[]]` right?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T17:19:03Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557561211",
      "id" : 557561211,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2MTIxMQ==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 25,
      "pull_request_review_id" : 568454011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:18:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557561211",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557562563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557562563"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "would it be better to check that this now passes without throwing rather than removing it?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T17:21:04Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557562563",
      "id" : 557562563,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2MjU2Mw==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 68,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568454011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:13:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557562563",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557600992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557600992"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I preferred keeping the package-related tests in rpc_package.py",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T18:24:33Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557600992",
      "id" : 557600992,
      "in_reply_to_id" : 557562563,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMDk5Mg==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 68,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568506197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:24:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557600992",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557601346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557601346"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(also these 2 are not well-formed transactions, so it would return a deserialization error)",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T18:25:08Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557601346",
      "id" : 557601346,
      "in_reply_to_id" : 557562563,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMTM0Ng==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 68,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568506667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:25:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557601346",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557603719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557603719"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "OK, that makes sense. All good ð",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T18:29:15Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557603719",
      "id" : 557603719,
      "in_reply_to_id" : 557562563,
      "line" : 68,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMzcxOQ==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 68,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568509766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:29:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557603719",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mjdietzx thanks for review! :)\r\n\r\n> I think soon `test/functional/rpc_packages.py` can be done with `MiniWallet` and get rid of some code.\r\n\r\nI didn't feel like `MiniWallet` suited my needs at the moment - I needed to chain transactions and wanted more control over the scripts. I considered just adding more functionality to `MiniWallet` but it might not be needed elsewhere and would conflict with a lot of the PRs that stem from #20078 (which I am a huge fan of) ð. Certainly interested in putting more of the code in test_framework/wallet.py in the future, if it could be reused!",
      "created_at" : "2021-01-14T18:45:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-760395006",
      "id" : 760395006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDM5NTAwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T18:51:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760395006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557613939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557613939"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah true! I'm also starting to think that `m_accepted == m_state.IsValid()` always?? ð¤ maybe could get rid of that and do\r\n\r\n```c\r\nTxValidationState m_state;\r\nstd::optional<std::list<CTransactionRef>> m_replaced_transactions;\r\nstd::optional<CAmount> m_base_fee;\r\n```",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T18:47:14Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557613939",
      "id" : 557613939,
      "in_reply_to_id" : 557185885,
      "line" : 205,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxMzkzOQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 34,
      "pull_request_review_id" : 568522776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:47:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557613939",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557615182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557615182"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ya i think you're right",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T18:49:28Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557615182",
      "id" : 557615182,
      "in_reply_to_id" : 557561211,
      "line" : 25,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNTE4Mg==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 25,
      "pull_request_review_id" : 568524233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T18:49:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557615182",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557626960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557626960"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure about the equivalence right now, but `if m_accepted then m_state.IsValid()` should hold.\r\n\r\nSo you don't need to return a validation state if the tx was accepted. Though, instead of having a return struct with\r\n```\r\noptional<state>\r\noptional<fee>\r\noptional<txs>\r\n...\r\n```\r\n\r\nIt could make sense to have one struct `Success` with \r\n```\r\nfee\r\ntxs\r\n```\r\nand then return `std::variant<Sucess, TxValidationState>`\r\n\r\n\r\nwdyt?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-14T19:10:50Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557626960",
      "id" : 557626960,
      "in_reply_to_id" : 557185885,
      "line" : 205,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYyNjk2MA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 34,
      "pull_request_review_id" : 568539848,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-14T19:15:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557626960",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265297"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we have a coding style recommendation for this, but IMO it's more intuitive to have `comment - arg` rather than `arg - comment`. At least other codebase callsites are following this.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T00:39:09Z",
      "diff_hunk" : "@@ -48,9 +48,8 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n-            assert(ret);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265297",
      "id" : 559265297,
      "line" : 51,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2NTI5Nw==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 51,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/bench/block_assemble.cpp",
      "position" : 7,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T03:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265297",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why breaking line for rvalue ?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T00:42:09Z",
      "diff_hunk" : "@@ -50,23 +50,21 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool.\n-        TxValidationState state;\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-                return HandleATMPError(state, err_string);\n-            } else if (fee > max_tx_fee) {\n+            const MempoolAcceptResult result =\n+                AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */, true /* test_accept */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265704",
      "id" : 559265704,
      "line" : 57,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2NTcwNA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 57,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/node/transaction.cpp",
      "position" : 14,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T03:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265704",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559269796"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559269796"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"Evaluation result of a single-transaction mempool acceptance\", better than repeating twice transaction ?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T01:07:36Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559269796",
      "id" : 559269796,
      "line" : 197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2OTc5Ng==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 197,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 26,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T03:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559269796",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559286531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559286531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I need to dig more but if we do have a bug slips in, you might inflate the utxo cache and not update accurately `coins_to_uncache`. Thus in case of invalid transactions it avoids wasting cache space with junks. I don't understand your commit rational to deprecate this belt-and-suspender. ",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T02:34:08Z",
      "diff_hunk" : "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559286531",
      "id" : 559286531,
      "line" : 669,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NjUzMQ==",
      "original_commit_id" : "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "original_line" : 665,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 158,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T03:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559286531",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559287607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559287607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think you need mempool state for this new check and the other one. You're verifying package element against each other (txid-vs-txid, input-vs-input). \r\n\r\nMaybe they could be gathered in some `SanitizePackage` function called in `ProcessNewPackage`. This would avoid encumbering more `PreChecks()` code path.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T02:38:39Z",
      "diff_hunk" : "@@ -602,6 +605,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n     }\n \n+    // Check for duplicates in package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559287607",
      "id" : 559287607,
      "line" : 608,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NzYwNw==",
      "original_commit_id" : "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "original_line" : 608,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 129,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T03:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559287607",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559288304"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559288304"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you can split `ProcessNewPackage()`/`AcceptMultipleTransactions` in its own commit. Better to isolate mempool changes from rpc-level ones IMO.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T02:41:59Z",
      "diff_hunk" : "@@ -921,56 +920,78 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    MempoolAcceptResult accept_result(std::move(tx));\n-    {\n-        LOCK(cs_main);\n-        accept_result = AcceptToMemoryPool(mempool, std::move(tx),\n-            false /* bypass_limits */, true /* test_accept */);\n+    for (unsigned int i = 0; i < transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n-    const bool test_accept_res = accept_result.m_accepted;\n-    const TxValidationState state = accept_result.m_state;\n-    const CAmount fee = accept_result.m_fee;\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (transactions.size() == 1) {\n+        {\n+            LOCK(cs_main);\n+            validation_results.emplace_back(\n+                AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */));\n+        }\n+    } else {\n+        {\n+            LOCK(cs_main);\n+            validation_results = ProcessNewPackage(mempool, txns, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559288304",
      "id" : 559288304,
      "line" : 950,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4ODMwNA==",
      "original_commit_id" : "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "original_line" : 950,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 79,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T03:21:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559288304",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard i think it is only intended to be a convenient way to sanity check for \"static\" standardness bounds, not for testing the whole validity prior to broadcast (which is intractable..). ",
      "created_at" : "2021-01-18T08:34:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762080588",
      "id" : 762080588,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MjA4MDU4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-18T08:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762080588",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559619214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559619214"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Let me try to elaborate a bit: when validating packages, we have each coin in the `m_viewmempool`, which at this point is the `m_view` backend. If we set the backend to dummy, we lose the ability to look up those coins. Typically, the backend allows for going to disk (which would be unnecessary after this line and be the source of a `coins_to_uncache` leak). Since we need the coins in `CheckSequenceLocks` right afterward, and then for `CheckInputScripts` again later, I got rid of it ð¤ maybe a little aggressive oops\r\n\r\nThe lines above for each input:\r\n\r\n```c\r\n        if (!coins_cache.HaveCoinInCache(txin.prevout)) {\r\n            coins_to_uncache.push_back(txin.prevout);\r\n        }\r\n```\r\n\r\nshould catch all of the coins that we need to uncache. It's a belt-and-suspenders check I would prefer not to remove, but we would need to implement a little differently. Perhaps a boolean in `CCoinsViewMemPool` for allowing fetching from disk?",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T14:51:11Z",
      "diff_hunk" : "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559619214",
      "id" : 559619214,
      "in_reply_to_id" : 559286531,
      "line" : 669,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYxOTIxNA==",
      "original_commit_id" : "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "original_line" : 665,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 158,
      "pull_request_review_id" : 570558793,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T14:55:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559619214",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
