[
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for working on this. Strong Concept ACK!",
      "created_at" : "2021-01-03T09:20:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753589415",
      "id" : 753589415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU4OTQxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T09:20:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753589415",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK and approach ACK.",
      "created_at" : "2021-01-03T10:38:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753597483",
      "id" : 753597483,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU5NzQ4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T10:38:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753597483",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20834 (locks and docs in ATMP and CheckInputsFromMempoolAndCache by glozow)\n* #20753 (rpc: Allow to ignore specific policy reject reasons by MarcoFalke)\n* #20749 ([Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex by dongcarl)\n* #20267 (Disable and fix tests for when BDB is not compiled by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-03T11:29:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753602927",
      "id" : 753602927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwMjkyNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T07:34:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602927",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This means that we will update our script cache with transactions that might not ultimately get accepted to the mempool?  This would need to be restructured before exposing to the p2p network to avoid becoming a DoS vector.",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-05T19:57:33Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033",
      "id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2MTAzMw==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562088788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?  It can only return failure if our software is broken -- it's a safeguard against miners creating invalid blocks, not something that users should expect to ever run into.\r\n\r\nIf you drop this call, then dropping CIFMAC is also no longer necessary, right?",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-05T20:12:32Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344",
      "id" : 552168344,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2ODM0NA==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562098520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "AFAIK we only use the script cache when it passes, so I don't think it's a DoS vector? On master, if you call `testmempoolaccept`, it caches the successful script executions with consensus flags.\r\n\r\n> On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?\r\n\r\nGood point, `PolicyScriptChecks` is stricter so `ConsensusScriptChecks` is unnecessary. And yes, we could then keep CIFMAC. But in order to do actual, non-test-accepts, we'll have to revisit the issue again (since I assume we'll want to call `ConsensusScriptChecks` then). It'd be \"kicking the can down the road.\"",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-05T20:37:04Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013",
      "id" : 552180013,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDAxMw==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562113660,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool (probably along with some other properties on the feerate of the package being used rather than individual feerates).  If that's correct, then calling `ConsensusScriptChecks` on anything (which will add to the script cache) before you finish calling `PolicyScriptChecks` on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nIf exposed on the p2p network, an attacker could wipe out a target's script cache for free this way, which is the DoS vector I was referring to.\r\n\r\nSo instead, you can make this loop just call `PolicyScriptChecks`, which is good enough for test_accept.  Once you implement adding to the mempool on success, you could have a new loop over the set of transactions in the package (topologically sorted) that invokes `ConsensusScriptChecks` and then adds the transaction to the mempool.  This way, CIFMAC doesn't need to be touched at all, because all a transaction's inputs are already in the utxo set or the mempool at the time `ConsensusScriptChecks` is invoked.  (This is essentially the structure I proposed in #16401.)",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T14:53:09Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985",
      "id" : 552684985,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4NDk4NQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562770282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do we want to commit to that?",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T17:05:54Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597",
      "id" : 552814597,
      "line" : 891,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNDU5Nw==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 15,
      "pull_request_review_id" : 562884556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This syntax seems strange?",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T17:06:38Z",
      "diff_hunk" : "@@ -921,56 +920,80 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n+    const size_t num_txns = {transactions.size()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366",
      "id" : 552815366,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNTM2Ng==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 924,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 562884556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool... \r\nIf that's correct, then calling ConsensusScriptChecks on anything (which will add to the script cache) before you finish calling PolicyScriptChecks on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nRight, I have the same vision in mind, and absolutely agree. I should change these two be separate loops - all `PolicyScriptChecks`, then all `ConsensusScriptChecks`. This would mean that we would only be calling `ConsensusScriptChecks` (which is effectively just used to cache script results) if all of them would pass - there's no way for any of them to fail consensus if they passed policy.",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T19:53:47Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655",
      "id" : 552930655,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzMDY1NQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562998317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The more I think about this, the more it makes sense ð \r\nIn actual package accept, we don't need CoinsViewMempool after `PolicyScriptChecks`, we can actually just go one by one in the package (after topological sort) and run `ConsensusScriptChecks` + submit to mempool. And subsequent txns should have all of the Coins they need from the pool. Apologies if this was obvious to you - is this what you had in mind?",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T22:31:20Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459",
      "id" : 552997459,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NzQ1OQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563082415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe we plan to validate packages atomically, so we would never have a situation of \"these txns passed, but those didn't.\" That's why I believed length 1 for failure would be alright, especially since this wouldn't be an API-breaking change. I imagine it could be helpful to return more information to the client, but don't know what that would look like concretely.",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T22:49:39Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781",
      "id" : 553003781,
      "in_reply_to_id" : 552814597,
      "line" : 891,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzc4MQ==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 15,
      "pull_request_review_id" : 563090036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:50:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(Open to ideas)",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-06T23:14:02Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795",
      "id" : 553011795,
      "in_reply_to_id" : 552814597,
      "line" : 891,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxMTc5NQ==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 15,
      "pull_request_review_id" : 563099740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T23:14:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes -- sounds like we're on the same page!",
      "commit_id" : "2ba45969975a495a2fccd6cf5eb801f236e20686",
      "created_at" : "2021-01-07T14:10:06Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758",
      "id" : 553349758,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0OTc1OA==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563513837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-07T14:10:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "5th time's the charm I guess ð this is ready for review!",
      "created_at" : "2021-01-08T23:10:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757042159",
      "id" : 757042159,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzA0MjE1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T23:10:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757042159",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK :) ",
      "created_at" : "2021-01-09T19:48:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757357961",
      "id" : 757357961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzM1Nzk2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-09T19:48:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757357961",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   }
]
