[
   {
      "author_association" : "MEMBER",
      "body" : "Thanks for working on this. Strong Concept ACK!",
      "created_at" : "2021-01-03T09:20:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753589415",
      "id" : 753589415,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU4OTQxNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T09:20:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753589415",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK and approach ACK.",
      "created_at" : "2021-01-03T10:38:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753597483",
      "id" : 753597483,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzU5NzQ4Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T10:38:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753597483",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2021-01-03T11:29:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-753602927",
      "id" : 753602927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwMjkyNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-07T07:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This means that we will update our script cache with transactions that might not ultimately get accepted to the mempool?  This would need to be restructured before exposing to the p2p network to avoid becoming a DoS vector.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-05T19:57:33Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552161033",
      "id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2MTAzMw==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562088788,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552161033",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?  It can only return failure if our software is broken -- it's a safeguard against miners creating invalid blocks, not something that users should expect to ever run into.\r\n\r\nIf you drop this call, then dropping CIFMAC is also no longer necessary, right?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-05T20:12:32Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552168344",
      "id" : 552168344,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2ODM0NA==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562098520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552168344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "AFAIK we only use the script cache when it passes, so I don't think it's a DoS vector? On master, if you call `testmempoolaccept`, it caches the successful script executions with consensus flags.\r\n\r\n> On further thought: if you're only implementing this for testmempoolaccept anyway, why bother with the call to ConsensusScriptChecks?\r\n\r\nGood point, `PolicyScriptChecks` is stricter so `ConsensusScriptChecks` is unnecessary. And yes, we could then keep CIFMAC. But in order to do actual, non-test-accepts, we'll have to revisit the issue again (since I assume we'll want to call `ConsensusScriptChecks` then). It'd be \"kicking the can down the road.\"",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-05T20:37:04Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552180013",
      "id" : 552180013,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE4MDAxMw==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562113660,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552180013",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool (probably along with some other properties on the feerate of the package being used rather than individual feerates).  If that's correct, then calling `ConsensusScriptChecks` on anything (which will add to the script cache) before you finish calling `PolicyScriptChecks` on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nIf exposed on the p2p network, an attacker could wipe out a target's script cache for free this way, which is the DoS vector I was referring to.\r\n\r\nSo instead, you can make this loop just call `PolicyScriptChecks`, which is good enough for test_accept.  Once you implement adding to the mempool on success, you could have a new loop over the set of transactions in the package (topologically sorted) that invokes `ConsensusScriptChecks` and then adds the transaction to the mempool.  This way, CIFMAC doesn't need to be touched at all, because all a transaction's inputs are already in the utxo set or the mempool at the time `ConsensusScriptChecks` is invoked.  (This is essentially the structure I proposed in #16401.)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T14:53:09Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985",
      "id" : 552684985,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjY4NDk4NQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562770282,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552684985",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Do we want to commit to that?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T17:05:54Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552814597",
      "id" : 552814597,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNDU5Nw==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 562884556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552814597",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This syntax seems strange?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T17:06:38Z",
      "diff_hunk" : "@@ -921,56 +920,80 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n+    const size_t num_txns = {transactions.size()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552815366",
      "id" : 552815366,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgxNTM2Ng==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 924,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 562884556,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552815366",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I assume that the ultimate goal of package validation is to only accept the whole set of transactions if each one individually makes it into the mempool... \r\nIf that's correct, then calling ConsensusScriptChecks on anything (which will add to the script cache) before you finish calling PolicyScriptChecks on later transactions in the package will mean that a policy failure in a later transaction could cause the whole package to be rejected, while still having updated the cache.\r\n\r\nRight, I have the same vision in mind, and absolutely agree. I should change these two be separate loops - all `PolicyScriptChecks`, then all `ConsensusScriptChecks`. This would mean that we would only be calling `ConsensusScriptChecks` (which is effectively just used to cache script results) if all of them would pass - there's no way for any of them to fail consensus if they passed policy.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T19:53:47Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552930655",
      "id" : 552930655,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzMDY1NQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562998317,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552930655",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "The more I think about this, the more it makes sense ð \r\nIn actual package accept, we don't need CoinsViewMempool after `PolicyScriptChecks`, we can actually just go one by one in the package (after topological sort) and run `ConsensusScriptChecks` + submit to mempool. And subsequent txns should have all of the Coins they need from the pool. Apologies if this was obvious to you - is this what you had in mind?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T22:31:20Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552997459",
      "id" : 552997459,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk5NzQ1OQ==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563082415,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552997459",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I believe we plan to validate packages atomically, so we would never have a situation of \"these txns passed, but those didn't.\" That's why I believed length 1 for failure would be alright, especially since this wouldn't be an API-breaking change. I imagine it could be helpful to return more information to the client, but don't know what that would look like concretely.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T22:49:39Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553003781",
      "id" : 553003781,
      "in_reply_to_id" : 552814597,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzc4MQ==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 563090036,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553003781",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(Open to ideas)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-06T23:14:02Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Length is exactly one if any failures occur.\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553011795",
      "id" : 553011795,
      "in_reply_to_id" : 552814597,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAxMTc5NQ==",
      "original_commit_id" : "10860308da57ae417aeb6a0e35515235e5f9360a",
      "original_line" : 891,
      "original_position" : 15,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 563099740,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553011795",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Yes -- sounds like we're on the same page!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-07T14:10:06Z",
      "diff_hunk" : "@@ -1024,46 +993,104 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n+    MempoolAcceptResult result(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, result, workspace, txdata)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        result.m_accepted = true;\n+        return result;\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, result, workspace)) {\n+        result.m_accepted = false;\n+        return result;\n+    }\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    result.m_accepted = true;\n+    return result;\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<const CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    LOCK(m_pool.cs);\n+    std::vector<MempoolAcceptResult> results{};\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](const CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        MempoolAcceptResult result(txns[i]);\n+        if (!PreChecks(args, result, workspaces[i])) {\n+            result.m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(result)};\n+        }\n+        result.m_accepted = true; // Allowed so far\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+        results.push_back(result);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+\n+        if (!PolicyScriptChecks(args, results[i], workspaces[i], txdata)) {\n+            results[i].m_accepted = false;\n+            return std::vector<MempoolAcceptResult> {std::move(results[i])};\n+        }\n+\n+        if (!ConsensusScriptChecks(args, results[i], workspaces[i], txdata)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r553349758",
      "id" : 553349758,
      "in_reply_to_id" : 552161033,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzM0OTc1OA==",
      "original_commit_id" : "25412b8d13a5287670033d6bab7730e978bbb6be",
      "original_line" : 1075,
      "original_position" : 398,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563513837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/553349758",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "5th time's the charm I guess ð this is ready for review!",
      "created_at" : "2021-01-08T23:10:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757042159",
      "id" : 757042159,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzA0MjE1OQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-08T23:10:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757042159",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK :) ",
      "created_at" : "2021-01-09T19:48:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-757357961",
      "id" : 757357961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NzM1Nzk2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-09T19:48:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/757357961",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nðµï¸ @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
      "created_at" : "2021-01-13T11:45:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-759396273",
      "id" : 759396273,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1OTM5NjI3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-13T11:45:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759396273",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557161651"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557161651"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in commit c97fae1011c4bd376898af73576756f163eeaf58:\r\n\r\nThis member seems currently unused? Also, what is the point of copying the (already cached) txid once more? If you need a reference to the tx, maybe store the `CTransactionRef`, but that seems redundant, because the caller is already aware of the tx.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T08:11:02Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557161651",
      "id" : 557161651,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE2MTY1MQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 201,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 567995465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557161651",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557163163"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557163163"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Would be nice to clarify what kind of fee this is. Probably base fee and not prioritized fee?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T08:12:09Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557163163",
      "id" : 557163163,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE2MzE2Mw==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 567995465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557163163",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557185885"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure if it makes sense to return a fee of `0` when the tx was rejected. At the very least the members that are optional, should be `std::optional`. Though, I am thinking that it could make sense to return two completely different types, based on whether the tx was accepted? I.e. a struct with `{fee, replaced_txs}` if the tx was accepted and a struct with `{state}` if the tx was rejected.\r\n\r\nThis would make it harder at the call sites to make mistakes such as returning the fee of a rejected tx.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T08:26:35Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885",
      "id" : 557185885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE4NTg4NQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 567995465,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557185885",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
      "created_at" : "2021-01-14T16:34:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-760311306",
      "id" : 760311306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDMxMTMwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T16:34:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760311306",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557530738"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557530738"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right, it's not used in https://github.com/bitcoin/bitcoin/commit/c97fae1011c4bd376898af73576756f163eeaf58. I ended up needing it for multi-accept on the failure case to indicate which tx failed. It might fit better in https://github.com/bitcoin/bitcoin/pull/20833/commits/2f36f0743158817635a39f7efb60541fe0c4b31d",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T16:35:31Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557530738",
      "id" : 557530738,
      "in_reply_to_id" : 557161651,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzMDczOA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 201,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 568412951,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557530738",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557561211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557561211"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: you can probably ditch`self.extra_args = [[]]` right?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T17:19:03Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557561211",
      "id" : 557561211,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2MTIxMQ==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 568454011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557561211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557562563"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557562563"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "would it be better to check that this now passes without throwing rather than removing it?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T17:21:04Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557562563",
      "id" : 557562563,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU2MjU2Mw==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 70,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568454011,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557562563",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557600992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557600992"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I preferred keeping the package-related tests in rpc_package.py",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T18:24:33Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557600992",
      "id" : 557600992,
      "in_reply_to_id" : 557562563,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMDk5Mg==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 70,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568506197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557600992",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557601346"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557601346"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "(also these 2 are not well-formed transactions, so it would return a deserialization error)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T18:25:08Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557601346",
      "id" : 557601346,
      "in_reply_to_id" : 557562563,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMTM0Ng==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 70,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568506667,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557601346",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557603719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557603719"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "OK, that makes sense. All good ð",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T18:29:15Z",
      "diff_hunk" : "@@ -65,7 +65,6 @@ def run_test(self):\n \n         self.log.info('Should not accept garbage to testmempoolaccept')\n         assert_raises_rpc_error(-3, 'Expected type array, got string', lambda: node.testmempoolaccept(rawtxs='ff00baar'))\n-        assert_raises_rpc_error(-8, 'Array must contain exactly one raw transaction for now', lambda: node.testmempoolaccept(rawtxs=['ff00baar', 'ff22']))",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557603719",
      "id" : 557603719,
      "in_reply_to_id" : 557562563,
      "line" : 70,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwMzcxOQ==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 70,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "test/functional/mempool_accept.py",
      "position" : 4,
      "pull_request_review_id" : 568509766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557603719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7217256?v=4",
         "events_url" : "https://api.github.com/users/mjdietzx/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mjdietzx/followers",
         "following_url" : "https://api.github.com/users/mjdietzx/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mjdietzx/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mjdietzx",
         "id" : 7217256,
         "login" : "mjdietzx",
         "node_id" : "MDQ6VXNlcjcyMTcyNTY=",
         "organizations_url" : "https://api.github.com/users/mjdietzx/orgs",
         "received_events_url" : "https://api.github.com/users/mjdietzx/received_events",
         "repos_url" : "https://api.github.com/users/mjdietzx/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mjdietzx/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mjdietzx"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@mjdietzx thanks for review! :)\r\n\r\n> I think soon `test/functional/rpc_packages.py` can be done with `MiniWallet` and get rid of some code.\r\n\r\nI didn't feel like `MiniWallet` suited my needs at the moment - I needed to chain transactions and wanted more control over the scripts. I considered just adding more functionality to `MiniWallet` but it might not be needed elsewhere and would conflict with a lot of the PRs that stem from #20078 (which I am a huge fan of) ð. Certainly interested in putting more of the code in test_framework/wallet.py in the future, if it could be reused!",
      "created_at" : "2021-01-14T18:45:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-760395006",
      "id" : 760395006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MDM5NTAwNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-14T18:51:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760395006",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557613939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557613939"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah true! I'm also starting to think that `m_accepted == m_state.IsValid()` always?? ð¤ maybe could get rid of that and do\r\n\r\n```c\r\nTxValidationState m_state;\r\nstd::optional<std::list<CTransactionRef>> m_replaced_transactions;\r\nstd::optional<CAmount> m_base_fee;\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T18:47:14Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557613939",
      "id" : 557613939,
      "in_reply_to_id" : 557185885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxMzkzOQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 568522776,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557613939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557615182"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557615182"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ya i think you're right",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T18:49:28Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.extra_args = [[]]",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557615182",
      "id" : 557615182,
      "in_reply_to_id" : 557561211,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNTE4Mg==",
      "original_commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "original_line" : 25,
      "original_position" : 25,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : null,
      "pull_request_review_id" : 568524233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557615182",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557626960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557626960"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Not sure about the equivalence right now, but `if m_accepted then m_state.IsValid()` should hold.\r\n\r\nSo you don't need to return a validation state if the tx was accepted. Though, instead of having a return struct with\r\n```\r\noptional<state>\r\noptional<fee>\r\noptional<txs>\r\n...\r\n```\r\n\r\nIt could make sense to have one struct `Success` with \r\n```\r\nfee\r\ntxs\r\n```\r\nand then return `std::variant<Sucess, TxValidationState>`\r\n\r\n\r\nwdyt?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-14T19:10:50Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557626960",
      "id" : 557626960,
      "in_reply_to_id" : 557185885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYyNjk2MA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 568539848,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557626960",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265297"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265297"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think we have a coding style recommendation for this, but IMO it's more intuitive to have `comment - arg` rather than `arg - comment`. At least other codebase callsites are following this.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T00:39:09Z",
      "diff_hunk" : "@@ -48,9 +48,8 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n-            assert(ret);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265297",
      "id" : 559265297,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2NTI5Nw==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 51,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/bench/block_assemble.cpp",
      "position" : null,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265297",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why breaking line for rvalue ?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T00:42:09Z",
      "diff_hunk" : "@@ -50,23 +50,21 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool.\n-        TxValidationState state;\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-                return HandleATMPError(state, err_string);\n-            } else if (fee > max_tx_fee) {\n+            const MempoolAcceptResult result =\n+                AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */, true /* test_accept */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559265704",
      "id" : 559265704,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2NTcwNA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 57,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/node/transaction.cpp",
      "position" : null,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559265704",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559269796"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559269796"
         }
      },
      "author_association" : "MEMBER",
      "body" : "\"Evaluation result of a single-transaction mempool acceptance\", better than repeating twice transaction ?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T01:07:36Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559269796",
      "id" : 559269796,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI2OTc5Ng==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 197,
      "original_position" : 26,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559269796",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559286531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559286531"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I need to dig more but if we do have a bug slips in, you might inflate the utxo cache and not update accurately `coins_to_uncache`. Thus in case of invalid transactions it avoids wasting cache space with junks. I don't understand your commit rational to deprecate this belt-and-suspender. ",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T02:34:08Z",
      "diff_hunk" : "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559286531",
      "id" : 559286531,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NjUzMQ==",
      "original_commit_id" : "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "original_line" : 699,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559286531",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559287607"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559287607"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think you need mempool state for this new check and the other one. You're verifying package element against each other (txid-vs-txid, input-vs-input). \r\n\r\nMaybe they could be gathered in some `SanitizePackage` function called in `ProcessNewPackage`. This would avoid encumbering more `PreChecks()` code path.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T02:38:39Z",
      "diff_hunk" : "@@ -602,6 +605,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n     }\n \n+    // Check for duplicates in package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559287607",
      "id" : 559287607,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4NzYwNw==",
      "original_commit_id" : "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "original_line" : 608,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559287607",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559288304"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559288304"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think you can split `ProcessNewPackage()`/`AcceptMultipleTransactions` in its own commit. Better to isolate mempool changes from rpc-level ones IMO.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T02:41:59Z",
      "diff_hunk" : "@@ -921,56 +920,78 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    MempoolAcceptResult accept_result(std::move(tx));\n-    {\n-        LOCK(cs_main);\n-        accept_result = AcceptToMemoryPool(mempool, std::move(tx),\n-            false /* bypass_limits */, true /* test_accept */);\n+    for (unsigned int i = 0; i < transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n-    const bool test_accept_res = accept_result.m_accepted;\n-    const TxValidationState state = accept_result.m_state;\n-    const CAmount fee = accept_result.m_fee;\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (transactions.size() == 1) {\n+        {\n+            LOCK(cs_main);\n+            validation_results.emplace_back(\n+                AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */));\n+        }\n+    } else {\n+        {\n+            LOCK(cs_main);\n+            validation_results = ProcessNewPackage(mempool, txns, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559288304",
      "id" : 559288304,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTI4ODMwNA==",
      "original_commit_id" : "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "original_line" : 950,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 570114670,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559288304",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard i think it is only intended to be a convenient way to sanity check for \"static\" standardness bounds, not for testing the whole validity prior to broadcast (which is intractable..). ",
      "created_at" : "2021-01-18T08:34:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762080588",
      "id" : 762080588,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MjA4MDU4OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-18T08:34:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762080588",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559619214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559619214"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Let me try to elaborate a bit: when validating packages, we have each coin in the `m_viewmempool`, which at this point is the `m_view` backend. If we set the backend to dummy, we lose the ability to look up those coins. Typically, the backend allows for going to disk (which would be unnecessary after this line and be the source of a `coins_to_uncache` leak). Since we need the coins in `CheckSequenceLocks` right afterward, and then for `CheckInputScripts` again later, I got rid of it ð¤ maybe a little aggressive oops\r\n\r\nThe lines above for each input:\r\n\r\n```c\r\n        if (!coins_cache.HaveCoinInCache(txin.prevout)) {\r\n            coins_to_uncache.push_back(txin.prevout);\r\n        }\r\n```\r\n\r\nshould catch all of the coins that we need to uncache. It's a belt-and-suspenders check I would prefer not to remove, but we would need to implement a little differently. Perhaps a boolean in `CCoinsViewMemPool` for allowing fetching from disk?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T14:51:11Z",
      "diff_hunk" : "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559619214",
      "id" : 559619214,
      "in_reply_to_id" : 559286531,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYxOTIxNA==",
      "original_commit_id" : "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "original_line" : 699,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 570558793,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559619214",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559722425"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559722425"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah I agree - I just started writing this and I think we should actually put the `TxValidationState` and `m_base_fees` into the `MemPoolAccept::Workspace` (since we need access throughout validation), then return whichever is appropriate at the end.\r\n\r\nHow does this look?\r\n```c\r\n\r\nstruct MempoolAcceptSuccess {\r\n    std::list<CTransactionRef> m_replaced_transactions;\r\n    CAmount m_base_fee;\r\n}\r\n\r\nusing MempoolAcceptResult = std::variant<MempoolAcceptSuccess, TxValidationState>;\r\nusing PackageAcceptResult = std::variant<std::vector<MempoolAcceptSuccess>, std::tuple<uint256, TxValidationState>>;\r\n```\r\n",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T17:45:53Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559722425",
      "id" : 559722425,
      "in_reply_to_id" : 557185885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTcyMjQyNQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 570690922,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559722425",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559745529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559745529"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Looks good",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-18T18:43:50Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559745529",
      "id" : 559745529,
      "in_reply_to_id" : 557185885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc0NTUyOQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 570719254,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559745529",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559772174"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559772174"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oops. I just realized `Workspace` is intended to be const after `PreChecks` populates it, so it can't hold `TxValidationState` since that can mutate during the script checks.\r\nWill do the `std::optional` approach for now, it's actually a bit cleaner I think.",
      "commit_id" : "79e5512206fa91acc09b843bd2962903fb2b6b8d",
      "created_at" : "2021-01-18T19:57:40Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r559772174",
      "id" : 559772174,
      "in_reply_to_id" : 557185885,
      "line" : 205,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc3MjE3NA==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 34,
      "pull_request_review_id" : 570750327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-18T19:57:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559772174",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@darosior Yes but as `testmempoolaccept` result is `{success, failure}` so for e.g if a package tx is time-locked in the future, you will get a failure and wrongly fail your L2 flow ? I don't think \"static\" (or stateless?) standardness bounds is more defined.",
      "created_at" : "2021-01-19T02:05:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762553705",
      "id" : 762553705,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MjU1MzcwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-19T02:07:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762553705",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@ariard i think it would be useful to test the first stage -non timelocked- flow (in specific for Revault, the deposit-emergency, deposit-unvault-cancel, and deposit-unvault-emergency scenarii) without mocking actual tx sending and block generation. I don't think it'd be really useful for \"check at runtime\" either.\r\nAs for the \"static\" bounds, there are for instance the maximum standard witscript size or minimum relay fee that are time (and fee-bumping) independent.",
      "created_at" : "2021-01-19T11:54:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-762794603",
      "id" : 762794603,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2Mjc5NDYwMw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-19T11:54:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/762794603",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/22457751?v=4",
         "events_url" : "https://api.github.com/users/darosior/events{/privacy}",
         "followers_url" : "https://api.github.com/users/darosior/followers",
         "following_url" : "https://api.github.com/users/darosior/following{/other_user}",
         "gists_url" : "https://api.github.com/users/darosior/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/darosior",
         "id" : 22457751,
         "login" : "darosior",
         "node_id" : "MDQ6VXNlcjIyNDU3NzUx",
         "organizations_url" : "https://api.github.com/users/darosior/orgs",
         "received_events_url" : "https://api.github.com/users/darosior/received_events",
         "repos_url" : "https://api.github.com/users/darosior/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/darosior/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/darosior/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/darosior"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560327691"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560327691"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ay @MarcoFalke, the `std::variant` method is a bit hairy... see [this branch](https://github.com/glozow/bitcoin/commit/7d9151afc0d95e232bf1f57e8e052f5dc3bef7e7). It works, but has a larger diff so I'm worried it might encumber reviewers. If you think it's an improvement, I can leave it for a followup or something?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T16:51:46Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560327691",
      "id" : 560327691,
      "in_reply_to_id" : 557185885,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDMyNzY5MQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 571445634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560327691",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560506055"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560506055"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I don't like long lines ð¤· I put it back since it's not too bad",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T21:25:13Z",
      "diff_hunk" : "@@ -50,23 +50,21 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool.\n-        TxValidationState state;\n         if (max_tx_fee > 0) {\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n-            CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n-                nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n-                return HandleATMPError(state, err_string);\n-            } else if (fee > max_tx_fee) {\n+            const MempoolAcceptResult result =\n+                AcceptToMemoryPool(*node.mempool, tx, false /* bypass_limits */, true /* test_accept */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560506055",
      "id" : 560506055,
      "in_reply_to_id" : 559265704,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNjA1NQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 57,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/node/transaction.cpp",
      "position" : null,
      "pull_request_review_id" : 571673426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560506055",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507542"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Right good point. I've removed it since checking inputs is a better way to test duplicates/conflicts. I'll note for the future to do context-free sanitization checks before taking the lock :) ",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T21:27:35Z",
      "diff_hunk" : "@@ -602,6 +605,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n         return state.Invalid(TxValidationResult::TX_CONFLICT, \"txn-already-in-mempool\");\n     }\n \n+    // Check for duplicates in package",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507542",
      "id" : 560507542,
      "in_reply_to_id" : 559287607,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNzU0Mg==",
      "original_commit_id" : "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "original_line" : 608,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 571675057,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "taken",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T21:27:44Z",
      "diff_hunk" : "@@ -921,56 +920,78 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-    const uint256& tx_hash = tx->GetHash();\n-\n+    UniValue transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n \n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx_hash.GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    MempoolAcceptResult accept_result(std::move(tx));\n-    {\n-        LOCK(cs_main);\n-        accept_result = AcceptToMemoryPool(mempool, std::move(tx),\n-            false /* bypass_limits */, true /* test_accept */);\n+    for (unsigned int i = 0; i < transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n-    const bool test_accept_res = accept_result.m_accepted;\n-    const TxValidationState state = accept_result.m_state;\n-    const CAmount fee = accept_result.m_fee;\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (transactions.size() == 1) {\n+        {\n+            LOCK(cs_main);\n+            validation_results.emplace_back(\n+                AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */));\n+        }\n+    } else {\n+        {\n+            LOCK(cs_main);\n+            validation_results = ProcessNewPackage(mempool, txns, true);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560507626",
      "id" : 560507626,
      "in_reply_to_id" : 559288304,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwNzYyNg==",
      "original_commit_id" : "2f36f0743158817635a39f7efb60541fe0c4b31d",
      "original_line" : 950,
      "original_position" : 80,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 571675166,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560507626",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560508663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560508663"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I agree, really, but didn't change it because I'd rather put all my opinion-energy into having a `MempoolAcceptResult` struct ð ",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T21:29:38Z",
      "diff_hunk" : "@@ -48,9 +48,8 @@ static void AssembleBlock(benchmark::Bench& bench)\n         LOCK(::cs_main); // Required for ::AcceptToMemoryPool.\n \n         for (const auto& txr : txs) {\n-            TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n-            assert(ret);\n+            const MempoolAcceptResult res = ::AcceptToMemoryPool(*test_setup.m_node.mempool, txr, false /* bypass_limits */);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560508663",
      "id" : 560508663,
      "in_reply_to_id" : 559265297,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwODY2Mw==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 51,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/bench/block_assemble.cpp",
      "position" : null,
      "pull_request_review_id" : 571676452,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560508663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509157"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509157"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "taken!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T21:30:35Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;\n+    bool m_accepted = false;\n+    TxValidationState m_state;\n+    std::list<CTransactionRef> m_replaced_transactions{};\n+    CAmount m_fee = CAmount(0);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509157",
      "id" : 560509157,
      "in_reply_to_id" : 557163163,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwOTE1Nw==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 205,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 571677074,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509157",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Moved it to the relevant commit. Putting a `CTransactionRef` in the `MempoolAcceptResult` when returning failure so that we know which tx failed; we need it to get the txid and wtxid in `testmempoolaccept`.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-19T21:32:05Z",
      "diff_hunk" : "@@ -194,12 +194,22 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/** Per-transaction result from trying to accept a transaction to the memory pool. */\n+struct MempoolAcceptResult {\n+    MempoolAcceptResult(const CTransactionRef& ptx) : txid(ptx->GetHash()) {}\n+\n+    uint256 txid;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r560509955",
      "id" : 560509955,
      "in_reply_to_id" : 557161651,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDUwOTk1NQ==",
      "original_commit_id" : "c97fae1011c4bd376898af73576756f163eeaf58",
      "original_line" : 201,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 571678081,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/560509955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased, split up the refactoring commit (hopefully now very digestible chunks), and took some of the review suggestions so far. Thanks a ton for your reviews @jnewbery @MarcoFalke @sdaftuar @mjdietzx @darosior @ariard ð¤ hope you take a look again!\r\n\r\n@ariard Re: timelocks, off-chain covenants, etc. yep this obviously has some limitations and I wouldn't consider this a perfect tester for L2 transactions. If we could come up with some test vectors where, for example, the option to ignore timelocks in dry-runs would be extremely useful, I think we could consider it. Regardless, I think a basic package accept like this moves in that direction :)",
      "created_at" : "2021-01-19T21:59:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-763168517",
      "id" : 763168517,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2MzE2ODUxNw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-19T21:59:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/763168517",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562041253"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562041253"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Unless I am mistaken, incorrectly reading this will result in an uninitialized read, which is only detected by valgrind. Wouldn't it be better to make this safe for non-valgrind use via an std::optional at least. Or is that also a bit too verbose (like the std::variant approach)?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-21T16:56:51Z",
      "diff_hunk" : "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562041253",
      "id" : 562041253,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA0MTI1Mw==",
      "original_commit_id" : "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "original_line" : 204,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 573537979,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562041253",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@glozow @darosior I think we need distinctions to understand better what this package-`testmempoolaccept` is achieving for transaction chains. I agree that it lets L2 application devs manually test the mempool validity of a _static_ chain of transactions, and that way avoid to deploy a completely broken stack in production. Just note the caveat, `fRequireStandard` is false for testnet, so be careful to do dry-run in regtest.\r\n\r\nBut beyond, L2s may have _dynamic_ chain of transactions, i.e transactions function of counterparty contributions (e.g LN `update_add_htlc`) or behaviors (e.g a remote commitment broadcast). Asserting mempool validity of this type of chain is irrelevant as soon as you start to be in production, a malicious counterparty might hit a standard bound you forgot or weren't able to test during dry-runs. As a L2 dev what you're aiming for is a _txstandardness verifier_, a tool encapsulating ATMP checks. Maybe with some configurable options like `fRelaxTimelocks` or `fBypassFees` to morph the checks to your protocol flow.\r\n\r\nMy final point, we should be careful to scope this new `testmempoolaccept` to the first usage in the release notes. Just to avoid someone hoping to achieve the second usage after this change and potentially breaking stuff on dumb-or-edge cases :)\r\n\r\nI'll be back to code review soon.",
      "created_at" : "2021-01-22T01:45:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-765057102",
      "id" : 765057102,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NTA1NzEwMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-22T01:45:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765057102",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562779844"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562779844"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah good point, let me whip up the `std::optional` method real quick and get back to you on the verbosity",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-22T17:14:23Z",
      "diff_hunk" : "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r562779844",
      "id" : 562779844,
      "in_reply_to_id" : 562041253,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjc3OTg0NA==",
      "original_commit_id" : "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "original_line" : 204,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 574456709,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/562779844",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@ariard\r\n> Just note the caveat, `fRequireStandard` is false for testnet, so be careful to do dry-run in regtest.\r\n\r\nI think `fRequireStandard` is [true for regtest](https://github.com/bitcoin/bitcoin/blob/32b191fb66e644c690c94cbfdae6ddbc754769d7/src/chainparams.cpp#L424) and [false for testnet](https://github.com/bitcoin/bitcoin/blob/32b191fb66e644c690c94cbfdae6ddbc754769d7/src/chainparams.cpp#L243).\r\n\r\n> My final point, we should be careful to scope this new `testmempoolaccept` to the first usage in the release notes. Just to avoid someone hoping to achieve the second usage after this change and potentially breaking stuff on dumb-or-edge cases :)\r\n\r\nI certainly hope it didn't seem like I was over-promising what this enables, agree about clearly defining the (limited) scope. I'll be sure to tag you for release notes review :)",
      "created_at" : "2021-01-22T17:26:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-765569041",
      "id" : 765569041,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2NTU2OTA0MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-22T17:26:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/765569041",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563150542"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563150542"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Would it be useful to add a short check here that `testmempoolaccept` fails if the transactions aren't sorted? For example:\r\n\r\n```\r\n        self.log.info(\"Test package with unsorted transactions isn't accepted\")\r\n        unsorted_chain = [chain[0], chain[2], chain[1]]\r\n        orphaned = CTransaction()\r\n        orphaned.deserialize(BytesIO(hex_str_to_bytes(unsorted_chain[1])))\r\n        testres_bad = node.testmempoolaccept(rawtxs=unsorted_chain)\r\n        assert_equal(testres_bad, [{\"txid\": orphaned.rehash(), \"wtxid\": orphaned.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}])\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T13:04:29Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_scriptPubKey=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout. Return tuple (transaction id, raw hex).\"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_scriptPubKey,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_scriptPubKey else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx.rehash(), signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        assert_equal(testres_bad, [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}])\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        self.log.info(\"Create a chain of three transactions\")\n+        scriptPubKey = None\n+        txid = first_coin[\"txid\"]\n+        chain = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(3):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (txid, txhex, scriptPubKey) = self.chain_transaction(txid, value, scriptPubKey)\n+            chain.append(txhex)\n+\n+        self.log.info(\"Testmempoolaccept with entire package\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563150542",
      "id" : 563150542,
      "line" : 155,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MDU0Mg==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 155,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 155,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563150542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563151242"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563151242"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Is it worth explicitly mentioning that on failure, the one entry in the result array corresponds to the first transaction in the package that failed validation?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T13:11:27Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563151242",
      "id" : 563151242,
      "line" : 894,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MTI0Mg==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 894,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 14,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563151242",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563152582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563152582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Style nit (feel free to ignore):\r\n\r\nRather than extending `CCoinsViewMemPool`, would it make sense to instead add something like `CCoinsViewPackage : CCoinsViewBacked`? Doing so might have the following advantages:\r\n\r\n* The backing `CCoinsView` doesn't have to be a `CCoinsViewMemPool` (e.g. what if you want to submit a package to a block-relay-only node in the future)\r\n* It separates the concerns of tracking mempool coins and having scratch space\r\n* It makes it more obvious that each time you validate a package, you need a separate instance of `CCoinsViewPackage` (and that you shouldn't reuse an existing `CCoinsViewMemPool`)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T13:26:29Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563152582",
      "id" : 563152582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1MjU4Mg==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 891,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563152582",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563155678"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563155678"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Is it worth saying \"with the **first** failure\"?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T13:57:18Z",
      "diff_hunk" : "@@ -187,12 +187,48 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    CTransactionRef ptx;\n+\n+    // Valid when m_accepted = false\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;\n+\n+    explicit MempoolAcceptResult(const CTransactionRef& tx, const TxValidationState& state) : ptx(tx), m_state(state) {\n+        m_accepted = false;\n+    }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {\n+        m_accepted = true;\n+    }\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.\n+ */\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx,\n+                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+/**\n+* Atomically test acceptance of multiple transactions.\n+* If validation fails for any individual transaction, this returns\n+* a single MempoolAcceptResult with the failure. If all successful,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563155678",
      "id" : 563155678,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1NTY3OA==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 226,
      "original_position" : 62,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563155678",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563156391"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563156391"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: Is `state` still needed here?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T14:04:12Z",
      "diff_hunk" : "@@ -5011,10 +5071,10 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563156391",
      "id" : 563156391,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1NjM5MQ==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 5071,
      "original_position" : 371,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563156391",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563157572"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563157572"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Is it worth keeping some flavor of the \"Make sure the tx has at least one input.\" message that was removed above?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T14:15:43Z",
      "diff_hunk" : "@@ -922,67 +921,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563157572",
      "id" : 563157572,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE1NzU3Mg==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 939,
      "original_position" : 58,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563157572",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563160249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563160249"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just confirming, does the requirement \"either return all successes or just the first failure\" apply to the RPC as a whole, or only to the internal call `ProcessNewPackage`?\r\n\r\nI ask because it looks like you could add rejected transactions inside this loop. For example, if I update `test_chain` in `rpc_packages.py` so that the 2nd transaction in the chain has an unreasonable fee, the RPC response `testres_multiple` is as follows:\r\n\r\n```\r\n[\r\n{'txid': ..., 'wtxid': ..., 'allowed': True, 'vsize': 191, 'fees': {'base': Decimal('0.00010000')}},\r\n{'txid': ..., 'wtxid': ..., 'allowed': False, 'reject-reason': 'max-fee-exceeded'},\r\n{'txid': ..., 'wtxid': ..., 'allowed': True, 'vsize': 191, 'fees': {'base': Decimal('0.00010000')}}\r\n]\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-23T14:40:23Z",
      "diff_hunk" : "@@ -922,67 +921,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563160249",
      "id" : 563160249,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE2MDI0OQ==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 961,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 574845534,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563160249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4276679?v=4",
         "events_url" : "https://api.github.com/users/robot-dreams/events{/privacy}",
         "followers_url" : "https://api.github.com/users/robot-dreams/followers",
         "following_url" : "https://api.github.com/users/robot-dreams/following{/other_user}",
         "gists_url" : "https://api.github.com/users/robot-dreams/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/robot-dreams",
         "id" : 4276679,
         "login" : "robot-dreams",
         "node_id" : "MDQ6VXNlcjQyNzY2Nzk=",
         "organizations_url" : "https://api.github.com/users/robot-dreams/orgs",
         "received_events_url" : "https://api.github.com/users/robot-dreams/received_events",
         "repos_url" : "https://api.github.com/users/robot-dreams/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/robot-dreams/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/robot-dreams/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/robot-dreams"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815372"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Please see [this branch](https://github.com/glozow/bitcoin/commit/408a32b5c70a6c2d657304ae0a874dadb635f4fa), it's not too bad verbosity-wise, I have a couple ternary operators like this:\r\n\r\n```c\r\nconst TxValidationState state = result.m_state == nullopt ? TxValidationState{} : result.m_state.value();\r\n```\r\n\r\nincorrect read throws a `bad optional access`",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T15:32:37Z",
      "diff_hunk" : "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815372",
      "id" : 563815372,
      "in_reply_to_id" : 562041253,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgxNTM3Mg==",
      "original_commit_id" : "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "original_line" : 204,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 575515777,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815372",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815889"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815889"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "good point! will add that test",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T15:33:20Z",
      "diff_hunk" : "@@ -0,0 +1,186 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_scriptPubKey=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout. Return tuple (transaction id, raw hex).\"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_scriptPubKey,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_scriptPubKey else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx.rehash(), signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        assert_equal(testres_bad, [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}])\n+\n+    def test_chain(self):\n+        node = self.nodes[0]\n+        first_coin = self.coins.pop()\n+\n+        self.log.info(\"Create a chain of three transactions\")\n+        scriptPubKey = None\n+        txid = first_coin[\"txid\"]\n+        chain = []\n+        value = first_coin[\"amount\"]\n+\n+        for _ in range(3):\n+            value -= Decimal(\"0.0001\") # Deduct reasonable fee\n+            (txid, txhex, scriptPubKey) = self.chain_transaction(txid, value, scriptPubKey)\n+            chain.append(txhex)\n+\n+        self.log.info(\"Testmempoolaccept with entire package\")",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563815889",
      "id" : 563815889,
      "in_reply_to_id" : 563150542,
      "line" : 155,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgxNTg4OQ==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 155,
      "original_position" : 107,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 155,
      "pull_request_review_id" : 575516497,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563815889",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563828396"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563828396"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cool, thanks for looking. Not sure if the ternary makes sense. It seems `state` is currently assumed to be always properly initialized (redundantly to the boolean return value). So maybe it could make sense to not make this optional. I do like that the other members (fee and replaced txs) are optional in your branch.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T15:48:53Z",
      "diff_hunk" : "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563828396",
      "id" : 563828396,
      "in_reply_to_id" : 562041253,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgyODM5Ng==",
      "original_commit_id" : "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "original_line" : 204,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 575532879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563828396",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563829921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563829921"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note that m_state.IsValid() holds when m_accpeted = *true*, so this comment could be confusing. I think the comment can just be removed.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T15:50:51Z",
      "diff_hunk" : "@@ -187,12 +187,48 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    CTransactionRef ptx;\n+\n+    // Valid when m_accepted = false",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563829921",
      "id" : 563829921,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzgyOTkyMQ==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 201,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 575534904,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563829921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563860484"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563860484"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Ah yeah! That makes sense, leave state as-is, and optional members when they only make sense for valid transactions.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T16:29:48Z",
      "diff_hunk" : "@@ -187,12 +187,34 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    CAmount m_base_fees;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563860484",
      "id" : 563860484,
      "in_reply_to_id" : 562041253,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg2MDQ4NA==",
      "original_commit_id" : "c75f7052921bc15c39d4b4272ef2c18550a51a0d",
      "original_line" : 204,
      "original_position" : 37,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 575574819,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563860484",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563867627"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563867627"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "it applies to the RPC as well, only 1 result on failure",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T16:39:03Z",
      "diff_hunk" : "@@ -922,67 +921,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r563867627",
      "id" : 563867627,
      "in_reply_to_id" : 563160249,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mzg2NzYyNw==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 961,
      "original_position" : 99,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 575584080,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/563867627",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564004706"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564004706"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Rather than extending CCoinsViewMemPool, would it make sense to instead add something like CCoinsViewPackage : CCoinsViewBacked?\r\n\r\nThis is a really interesting idea, and I think it should be the case to have the \"top level\" have the package caches -> \"bottom level\" backend is the `CCoinsViewMemPool`. Let me try to do it this way and see what happens!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T19:57:56Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564004706",
      "id" : 564004706,
      "in_reply_to_id" : 563152582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwNDcwNg==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 891,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 575759633,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564004706",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564005481"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564005481"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Note that `CCoinsViewMemPool` is created with `MemPoolAccept` instances so we don't really reuse an existing one.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-25T19:59:13Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r564005481",
      "id" : 564005481,
      "in_reply_to_id" : 563152582,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDAwNTQ4MQ==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 891,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 575760578,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/564005481",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565391428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565391428"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "@ariard, thanks for the push to look into this. I got a pretty simple solution: we shouldn't do `m_view.SetBackend(dummy)`, we should do `m_viewmempool.SetBackend(dummy)`, since that's the backend that's actually pointing to the coins cache.\r\n\r\nThe hierarchy is `m_view -> m_viewmempool -> coinscache`.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T15:16:27Z",
      "diff_hunk" : "@@ -659,11 +659,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, MempoolAcceptResult& result, Works\n     // Bring the best block into scope\n     m_view.GetBestBlock();\n \n-    // we have all inputs cached now, so switch back to dummy (to protect\n-    // against bugs where we pull more inputs from disk that miss being added\n-    // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565391428",
      "id" : 565391428,
      "in_reply_to_id" : 559286531,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTM5MTQyOA==",
      "original_commit_id" : "4a8e3e1a1767865a32905e8043b7c2e28b0cfd6a",
      "original_line" : 699,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577444676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565391428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409230"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409230"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "good catch, removed ð \r\n(btw, how did you comment on a non-diff line? ð± )",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T15:37:23Z",
      "diff_hunk" : "@@ -5011,10 +5071,10 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409230",
      "id" : 565409230,
      "in_reply_to_id" : 563156391,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQwOTIzMA==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 5071,
      "original_position" : 371,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577468931,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409230",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409820"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409820"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Done!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T15:38:02Z",
      "diff_hunk" : "@@ -889,7 +888,7 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565409820",
      "id" : 565409820,
      "in_reply_to_id" : 563151242,
      "line" : 894,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQwOTgyMA==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 894,
      "original_position" : 13,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 14,
      "pull_request_review_id" : 577469624,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565409820",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565414051"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565414051"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I now have the comment \"Valid when m_accepted = false\" for the tx pointer, not for  the TxValidationState",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T15:42:58Z",
      "diff_hunk" : "@@ -187,12 +187,48 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    CTransactionRef ptx;\n+\n+    // Valid when m_accepted = false",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565414051",
      "id" : 565414051,
      "in_reply_to_id" : 563829921,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQxNDA1MQ==",
      "original_commit_id" : "ebca80d81124fac369e18467e17a1bacfdbfefec",
      "original_line" : 201,
      "original_position" : 35,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 577475332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565414051",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565444091"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565444091"
         }
      },
      "author_association" : "NONE",
      "body" : "I'm not very familiar with `CHECK_NONFATAL` but see it throws an error if either condition here evaluates to false. \r\n\r\nIf `validation_results.size() == 1` that means one of the transactions failed validation, so we want to throw an error. Should this line be changed to `CHECK_NONFATAL(all_valid || validation_results.size() != 1);`?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:19:51Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565444091",
      "id" : 565444091,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0NDA5MQ==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 955,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 577515495,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565444091",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1823216?v=4",
         "events_url" : "https://api.github.com/users/satsie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/satsie/followers",
         "following_url" : "https://api.github.com/users/satsie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/satsie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/satsie",
         "id" : 1823216,
         "login" : "satsie",
         "node_id" : "MDQ6VXNlcjE4MjMyMTY=",
         "organizations_url" : "https://api.github.com/users/satsie/orgs",
         "received_events_url" : "https://api.github.com/users/satsie/received_events",
         "repos_url" : "https://api.github.com/users/satsie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/satsie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/satsie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/satsie"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565449378"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565449378"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a change in behavior. Previously, if `fAddToMempool` is false or `(*it)->IsCoinBase()`, we'd short circuit and not call `AcceptToMemoryPool()`",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:26:32Z",
      "diff_hunk" : "@@ -378,10 +387,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+        const MempoolAcceptResult result = AcceptToMemoryPool(mempool, *it, true /* bypass_limits */);\n+\n+        if (!fAddToMempool || (*it)->IsCoinBase() || !result.m_accepted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565449378",
      "id" : 565449378,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ0OTM3OA==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 392,
      "original_position" : 51,
      "original_start_line" : 390,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565449378",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565450892"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565450892"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it necessary to wrap the `std::shared_ptr` in a `std::optional`? Can you just use a null pointer to mean not present?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:28:12Z",
      "diff_hunk" : "@@ -189,12 +189,52 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = false\n+    std::optional<CTransactionRef> m_ptx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565450892",
      "id" : 565450892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ1MDg5Mg==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 202,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565450892",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565451590"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565451590"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe clean up the style while you're here:\r\n\r\n- `CTransactionRef &tx` -> `CTransactionRef& tx`\r\n- align second line with opening parens",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:28:58Z",
      "diff_hunk" : "@@ -189,12 +189,52 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = false\n+    std::optional<CTransactionRef> m_ptx;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure case */\n+    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) : m_state(state), m_ptx(ptx) {\n+        m_accepted = false;\n+        m_replaced_transactions = nullopt;\n+        m_base_fees = nullopt;\n+    }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state, std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_state(state), m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {\n+        m_accepted = true;\n+        m_ptx = nullopt;\n+    }\n+};\n+\n+/**\n+ * (Try to) add a transaction to the memory pool.\n+ */\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx,\n+                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565451590",
      "id" : 565451590,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ1MTU5MA==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 227,
      "original_position" : 61,
      "original_start_line" : 226,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565451590",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565454965"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565454965"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Try to keep lines below 100-120 chars and align args with opening parens:\r\n\r\n```suggestion\r\nstatic MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool,\r\n                                                      const CTransactionRef& tx, int64_t nAcceptTime,\r\n                                                      bool bypass_limits, bool test_accept)\r\n    EXCLUSIVE_LOCKS_REQUIRED(cs_main)\r\n\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:33:15Z",
      "diff_hunk" : "@@ -1029,46 +1040,84 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        Workspace& workspace = workspaces[i];\n+        if (!PreChecks(args, workspace)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+        Workspace& workspace = workspaces[i];\n+\n+        if (!PolicyScriptChecks(args, workspace, txdata)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+    }\n+    std::vector<MempoolAcceptResult> results;\n+    std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), [](Workspace& ws) {\n+        return MempoolAcceptResult(ws.m_state, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    });\n+    return results;\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, const CTransactionRef &tx,\n+                        int64_t nAcceptTime, bool bypass_limits, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565454965",
      "id" : 565454965,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ1NDk2NQ==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 1114,
      "original_position" : 318,
      "original_start_line" : 1113,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565454965",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467098"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467098"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In commit f14f8b73900d2da4e15119780e19683c8499b700 (_[refactor] return MempoolAcceptResult_), these local vars shouldn't be necessary. You're simply initializing them to default values, then passing them to the `ATMPArgs` initializer which copies them. You can save yourself some typing (and potentially an unnecessary copy) by creating those default values in the initializer itself:\r\n\r\n```diff\r\n@@ -1063,9 +1063,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\r\n {\r\n     TxValidationState state;\r\n     std::vector<COutPoint> coins_to_uncache;\r\n-    CAmount fee = 0;\r\n-    std::list<CTransactionRef> m_replaced_transactions;\r\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, m_replaced_transactions, bypass_limits, coins_to_uncache, test_accept, fee };\r\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, {}, bypass_limits, coins_to_uncache, test_accept, {} };\r\n \r\n     const MempoolAcceptResult result = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\r\n     if (!result.m_accepted) {\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:48:50Z",
      "diff_hunk" : "@@ -1029,46 +1024,51 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(args.m_state);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(args.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(args.m_state, std::move(args.m_replaced_transactions), args.m_fee_out);\n }\n \n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, const CTransactionRef &tx,\n+                        int64_t nAcceptTime, bool bypass_limits, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n+    TxValidationState state;\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n-    if (!res) {\n+    CAmount fee = 0;\n+    std::list<CTransactionRef> m_replaced_transactions;\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, m_replaced_transactions, bypass_limits, coins_to_uncache, test_accept, fee };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467098",
      "id" : 565467098,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2NzA5OA==",
      "original_commit_id" : "f14f8b73900d2da4e15119780e19683c8499b700",
      "original_line" : 1068,
      "original_position" : 117,
      "original_start_line" : 1066,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467098",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467203"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467203"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`CHECK_NONFATAL` (documented in developer notes [here](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#assertions-and-checks)) helps with internal logic bugs. Here, the bug would be a testmempoolaccept thing only (and therefore not be fatal enough to crash the node), but we'd definitely want to address it.\r\n\r\nHere, we are merely making sure that, if there were any errors, the length of `validation_results` should be 1. It's okay for a transaction to be invalid so we don't want to throw an error for that. This check is just to make sure that `ProcessNewPackage()` is adhering to the API we expect. I hope this helps!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:48:56Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565467203",
      "id" : 565467203,
      "in_reply_to_id" : 565444091,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2NzIwMw==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 955,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 577546105,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565467203",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565468063"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565468063"
         }
      },
      "author_association" : "MEMBER",
      "body" : "maintain alignment with parens",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:50:06Z",
      "diff_hunk" : "@@ -5013,13 +5081,12 @@ bool LoadMempool(CTxMemPool& pool)\n             if (amountdelta) {\n                 pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n-            TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n+                const MempoolAcceptResult result = AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\n+                                           false /* bypass_limits */,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565468063",
      "id" : 565468063,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2ODA2Mw==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 5087,
      "original_position" : 381,
      "original_start_line" : 5086,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565468063",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565469529"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565469529"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can be a reference",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:52:03Z",
      "diff_hunk" : "@@ -2177,10 +2177,10 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         if (orphan_it == mapOrphanTransactions.end()) continue;\n \n         const CTransactionRef porphanTx = orphan_it->second.tx;\n-        TxValidationState state;\n-        std::list<CTransactionRef> removed_txn;\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, porphanTx, false /* bypass_limits */);\n+        const TxValidationState state = result.m_state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565469529",
      "id" : 565469529,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ2OTUyOQ==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 2181,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565469529",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565470752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565470752"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This can be a reference.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T16:53:30Z",
      "diff_hunk" : "@@ -3183,10 +3183,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             return;\n         }\n \n-        TxValidationState state;\n-        std::list<CTransactionRef> lRemovedTxn;\n+        const MempoolAcceptResult result = AcceptToMemoryPool(m_mempool, ptx, false /* bypass_limits */);\n+        const TxValidationState state = result.m_state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565470752",
      "id" : 565470752,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTQ3MDc1Mg==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 3187,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/net_processing.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565470752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. A great first step for packages!",
      "created_at" : "2021-01-27T16:56:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-768423929",
      "id" : 768423929,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2ODQyMzkyOQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-27T16:56:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/768423929",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3072149?v=4",
         "events_url" : "https://api.github.com/users/duncandean/events{/privacy}",
         "followers_url" : "https://api.github.com/users/duncandean/followers",
         "following_url" : "https://api.github.com/users/duncandean/following{/other_user}",
         "gists_url" : "https://api.github.com/users/duncandean/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/duncandean",
         "id" : 3072149,
         "login" : "duncandean",
         "node_id" : "MDQ6VXNlcjMwNzIxNDk=",
         "organizations_url" : "https://api.github.com/users/duncandean/orgs",
         "received_events_url" : "https://api.github.com/users/duncandean/received_events",
         "repos_url" : "https://api.github.com/users/duncandean/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/duncandean/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/duncandean/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/duncandean"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565567920"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565567920"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I don't think this local variable is needed. It's only used in one place below (in the if conditional). You could just use `validation_results[i].m_base_fees.value()` there.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T19:14:53Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565567920",
      "id" : 565567920,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU2NzkyMA==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 967,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 577522548,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565567920",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565572115"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565572115"
         }
      },
      "author_association" : "NONE",
      "body" : "Ah! Thanks for linking to that description ð  [This was](https://doxygen.bitcoincore.org/check_8h.html#a46a3e27097aa5e94bbf62075bad7016f) the only one I had been working off of so the link you provided is super helpful for understanding the purpose of CHECK_NONFATAL. \r\n\r\nI was getting hung up on the `||`, or part of the evaluation. I think I understand it now, an error will only be thrown if both `all_valid` and `validation_results.size() == 1` evaluate to false, reason being that these two statements are incompatible (if there is an invalid tx, `validation_results.size()` can't be anything other than 1). Thanks for the clarification! Please mark this guy as resolved when you get a chance! (I don't believe I have permission to)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-27T19:21:33Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565572115",
      "id" : 565572115,
      "in_reply_to_id" : 565444091,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTU3MjExNQ==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 955,
      "original_position" : 94,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 577680431,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565572115",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1823216?v=4",
         "events_url" : "https://api.github.com/users/satsie/events{/privacy}",
         "followers_url" : "https://api.github.com/users/satsie/followers",
         "following_url" : "https://api.github.com/users/satsie/following{/other_user}",
         "gists_url" : "https://api.github.com/users/satsie/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/satsie",
         "id" : 1823216,
         "login" : "satsie",
         "node_id" : "MDQ6VXNlcjE4MjMyMTY=",
         "organizations_url" : "https://api.github.com/users/satsie/orgs",
         "received_events_url" : "https://api.github.com/users/satsie/received_events",
         "repos_url" : "https://api.github.com/users/satsie/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/satsie/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/satsie/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/satsie"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565741093"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565741093"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in f14f8b73900d2da4e15119780e19683c8499b700:\r\n\r\nnit: I slightly prefer\r\n```\r\nBOOST_CHECK(!result.m_accepted);\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-28T00:41:27Z",
      "diff_hunk" : "@@ -30,25 +30,21 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     BOOST_CHECK(CTransaction(coinbaseTx).IsCoinBase());\n \n-    TxValidationState state;\n-\n     LOCK(cs_main);\n \n     unsigned int initialPoolSize = m_node.mempool->size();\n+    const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool, MakeTransactionRef(coinbaseTx),\n+                true /* bypass_limits */);\n \n-    BOOST_CHECK_EQUAL(\n-            false,\n-            AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n-                nullptr /* plTxnReplaced */,\n-                true /* bypass_limits */));\n+    BOOST_CHECK_EQUAL(false, result.m_accepted);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565741093",
      "id" : 565741093,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc0MTA5Mw==",
      "original_commit_id" : "f14f8b73900d2da4e15119780e19683c8499b700",
      "original_line" : 39,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/test/txvalidation_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565741093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565807726"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565807726"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "ah, right",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-28T04:10:08Z",
      "diff_hunk" : "@@ -378,10 +387,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     auto it = disconnectpool.queuedTx.get<insertion_order>().rbegin();\n     while (it != disconnectpool.queuedTx.get<insertion_order>().rend()) {\n         // ignore validation errors in resurrected transactions\n-        TxValidationState stateDummy;\n-        if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n-                                nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n+        const MempoolAcceptResult result = AcceptToMemoryPool(mempool, *it, true /* bypass_limits */);\n+\n+        if (!fAddToMempool || (*it)->IsCoinBase() || !result.m_accepted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r565807726",
      "id" : 565807726,
      "in_reply_to_id" : 565449378,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTgwNzcyNg==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 392,
      "original_position" : 51,
      "original_start_line" : 390,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 577972356,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/565807726",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566521663"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566521663"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also used in `fees.pushKV(\"base\", ValueFromAmount(fee))` if that's better?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-29T01:34:35Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566521663",
      "id" : 566521663,
      "in_reply_to_id" : 565567920,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjUyMTY2Mw==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 967,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 578877473,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566521663",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566527100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566527100"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Mm, I agree that's better. Also renaming it to `m_failed_ptx` to make it more clear.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-29T01:51:10Z",
      "diff_hunk" : "@@ -189,12 +189,52 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = false\n+    std::optional<CTransactionRef> m_ptx;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r566527100",
      "id" : 566527100,
      "in_reply_to_id" : 565450892,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjUyNzEwMA==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 202,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 578883564,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566527100",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for your review @jnewbery, addressed your comments and some other style stuff in the last push!",
      "created_at" : "2021-01-29T02:14:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-769526936",
      "id" : 769526936,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc2OTUyNjkzNg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-29T02:14:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/769526936",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@stackman27 that's a good point, no package limits could be a bit of a footgun even in `testmempoolaccept`. Maybe limit 25, which would be the same as `DEFAULT_DESCENDANT_LIMIT`? Mempool wouldn't consider packages larger than that anyway, and if it's not 1 package then they don't need to put it in one call.",
      "created_at" : "2021-01-29T20:08:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-770023093",
      "id" : 770023093,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3MDAyMzA5Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-29T20:08:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770023093",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567222730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567222730"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in b76910ebd4d8a07534e145c498c7f7d0ce297ccd:\r\n\r\nDo these have to be optional if they are \"guarded\" by `m_accepted` anyway? Especially the list could just be empty anyway.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-30T09:25:58Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567222730",
      "id" : 567222730,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMjczMA==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 199,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567222730",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223369"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223369"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in b76910e:\r\n\r\nStylistically I find it odd to give public members of a struct the m_* prefix. The way we use structs usually, just bundling some data without complex methods, it doesn't seem needed internally to the struct and externally, where the struct is used looks very wrong to me. But there doesn't seem to be a clear rule on this looking at the codebase. I just did it this way in `IndexSummary` and I didn't get complaints. So maybe something to think about.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-30T09:33:04Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223369",
      "id" : 567223369,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMzM2OQ==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 198,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223369",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223619"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223619"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in b76910e:\r\n\r\nI think I would have left `m_accepted` out of the struct and have `AcceptToMemoryPool` return an optional of `MempoolAcceptResult`.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-30T09:36:11Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567223619",
      "id" : 567223619,
      "line" : 191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyMzYxOQ==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 191,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 3,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567223619",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567226540"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567226540"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 048ef0a7e62cca10c588b451c9060e7846ac398b:\r\n\r\nThis looks like an error?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-30T10:06:11Z",
      "diff_hunk" : "@@ -922,60 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n+    }\n+\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n \n     UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    MempoolAcceptResult accept_result = WITH_LOCK(cs_main,\n-\t\t    return AcceptToMemoryPool(mempool, std::move(tx), false /* bypass_limits */, true /* test_accept */));\n-    const bool test_accept_res = accept_result.m_accepted;\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-            result.push_back(std::move(result_0));\n-            return result;\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();\n+            const int64_t virtual_size = GetVirtualTransactionSize(tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            // Check that fee does not exceed maximum fee\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                result_inner.push_back(std::move(result_inner));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567226540",
      "id" : 567226540,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzIyNjU0MA==",
      "original_commit_id" : "048ef0a7e62cca10c588b451c9060e7846ac398b",
      "original_line" : 974,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567226540",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567454265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567454265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in b76910ebd4d8a07534e145c498c7f7d0ce297ccd:\r\n\r\nI guess this result can be `const`, too.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-31T17:02:19Z",
      "diff_hunk" : "@@ -945,32 +945,29 @@ static RPCHelpMan testmempoolaccept()\n     result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n     result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n-    }\n-\n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n-    }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n+    MempoolAcceptResult accept_result = WITH_LOCK(cs_main,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567454265",
      "id" : 567454265,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ1NDI2NQ==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 948,
      "original_position" : 21,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567454265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567459195"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567459195"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8:\r\n\r\nThese members could get an m_* prefix. Also I think they could use some comments explaining what context they are used in. Or the added comments above could be more explicit.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-31T17:41:43Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567459195",
      "id" : 567459195,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ1OTE5NQ==",
      "original_commit_id" : "17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8",
      "original_line" : 891,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567459195",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567471786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567471786"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 2fac0136138012ae26c8e12ef77e9486ad5cd831:\r\n\r\nDo you have to generate these and can't use the cached chain?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-31T19:26:46Z",
      "diff_hunk" : "@@ -0,0 +1,193 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567471786",
      "id" : 567471786,
      "line" : 39,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ3MTc4Ng==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 39,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 39,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567471786",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567475382"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567475382"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in 17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8:\r\n\r\nI am probably missing something but I find it strange that this is ignoring the result of `GetCoin()`. So we don't care at this point that the prevout might already be spent? Might be worth a comment.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-01-31T19:55:51Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CCoinsViewMemPool::AddPackageTransaction(const CTransactionRef& tx) {\n+    package_txids.insert(tx->GetHash());\n+    // Coins spent by this transaction\n+    for (auto input : tx->vin) {\n+        Coin spent_coin;\n+        GetCoin(input.prevout, spent_coin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567475382",
      "id" : 567475382,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzQ3NTM4Mg==",
      "original_commit_id" : "17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8",
      "original_line" : 943,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 577896489,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567475382",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567589472"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567589472"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That wouldn't work, because the error reason couldn't be returned?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T06:30:11Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567589472",
      "id" : 567589472,
      "in_reply_to_id" : 567223619,
      "line" : 191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzU4OTQ3Mg==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 191,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 3,
      "pull_request_review_id" : 580044650,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567589472",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567827106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567827106"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There's no guidance in the style guide on this. I tried to update the style guide to include guidance in https://github.com/bitcoin/bitcoin/pull/19759, but people had *very strong feelings* so I backed off.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T13:32:31Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567827106",
      "id" : 567827106,
      "in_reply_to_id" : 567223369,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgyNzEwNg==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 198,
      "original_position" : 32,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 580354195,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567827106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567837440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567837440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Since these ctors are just initializing members, you could do it all in the initializer list:\r\n\r\n```suggestion\r\n    /** Constructor for failure case */\r\n    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) :\r\n        m_accepted(false), m_state(state), m_failed_ptx(ptx), m_replaced_transactions(nullopt),\r\n        m_base_fees(nullopt) {}\r\n\r\n    /** Constructor for success case */\r\n    explicit MempoolAcceptResult(TxValidationState state, std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\r\n        m_accepted(true), m_state(state), m_failed_ptx(nullptr),\r\n        m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\r\n\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T13:48:08Z",
      "diff_hunk" : "@@ -189,12 +189,53 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Points to failed tx when m_accepted = false\n+    CTransactionRef m_failed_ptx;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    std::optional<CAmount> m_base_fees;\n+\n+    /** Constructor for failure case */\n+    explicit MempoolAcceptResult(TxValidationState state, CTransactionRef ptx) :\n+        m_state(state), m_failed_ptx(ptx) {\n+        m_accepted = false;\n+        m_replaced_transactions = nullopt;\n+        m_base_fees = nullopt;\n+    }\n+\n+    /** Constructor for success case */\n+    explicit MempoolAcceptResult(TxValidationState state, std::list<CTransactionRef>&& replaced_txns, CAmount fees) :\n+        m_state(state), m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {\n+        m_accepted = true;\n+        m_failed_ptx = nullptr;\n+    }\n+};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567837440",
      "id" : 567837440,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgzNzQ0MA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 223,
      "original_position" : 56,
      "original_start_line" : 208,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 580367672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567837440",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567839245"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567839245"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider joining these lines:\r\n\r\n```suggestion\r\n                if (AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\r\n                                               false /* bypass_limits */,\r\n                                               false /* test_accept */).m_accepted) {\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T13:50:44Z",
      "diff_hunk" : "@@ -5013,13 +5084,12 @@ bool LoadMempool(CTxMemPool& pool)\n             if (amountdelta) {\n                 pool.PrioritiseTransaction(tx->GetHash(), amountdelta);\n             }\n-            TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n-                                           nullptr /* plTxnReplaced */, false /* bypass_limits */,\n-                                           false /* test_accept */);\n-                if (state.IsValid()) {\n+                const MempoolAcceptResult result = AcceptToMemoryPoolWithTime(chainparams, pool, tx, nTime,\n+                                                                                false /* bypass_limits */,\n+                                                                                false /* test_accept */);\n+                if (result.m_accepted) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567839245",
      "id" : 567839245,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzgzOTI0NQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 5092,
      "original_position" : 387,
      "original_start_line" : 5089,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580367672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567839245",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567843710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567843710"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Oops. You're right. Ignore this!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T13:57:25Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567843710",
      "id" : 567843710,
      "in_reply_to_id" : 565567920,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg0MzcxMA==",
      "original_commit_id" : "70f84b22199cd0afffd12ea8e8934d22b0f0c7f4",
      "original_line" : 967,
      "original_position" : 106,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 580367672,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567843710",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567852656"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567852656"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:10:32Z",
      "diff_hunk" : "@@ -556,12 +568,12 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     const uint256& hash = ws.m_hash;\n \n     // Copy/alias what we need out of args\n-    TxValidationState &state = args.m_state;\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n     std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n+    TxValidationState &state = ws.m_state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567852656",
      "id" : 567852656,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MjY1Ng==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 576,
      "original_position" : 131,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567852656",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853147"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:11:12Z",
      "diff_hunk" : "@@ -923,11 +938,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::PolicyScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n-\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853147",
      "id" : 567853147,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MzE0Nw==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 944,
      "original_position" : 190,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853147",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853236"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853236"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:11:21Z",
      "diff_hunk" : "@@ -950,12 +964,11 @@ bool MemPoolAccept::PolicyScriptChecks(ATMPArgs& args, const Workspace& ws, Prec\n     return true;\n }\n \n-bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, PrecomputedTransactionData& txdata)\n+bool MemPoolAccept::ConsensusScriptChecks(const ATMPArgs& args, Workspace& ws, PrecomputedTransactionData& txdata)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853236",
      "id" : 567853236,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MzIzNg==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 971,
      "original_position" : 205,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853236",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853513"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853513"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```suggestion\r\n    TxValidationState& state = ws.m_state;\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:11:48Z",
      "diff_hunk" : "@@ -982,11 +995,11 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, P\n     return true;\n }\n \n-bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n+bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransaction& tx = *ws.m_ptx;\n     const uint256& hash = ws.m_hash;\n-    TxValidationState &state = args.m_state;\n+    TxValidationState &state = ws.m_state;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567853513",
      "id" : 567853513,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1MzUxMw==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 1002,
      "original_position" : 219,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567853513",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567854054"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567854054"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider changing this to `ws` to match parameter names in the other functions.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:12:34Z",
      "diff_hunk" : "@@ -1029,46 +1041,86 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567854054",
      "id" : 567854054,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1NDA1NA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 1049,
      "original_position" : 243,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567854054",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567856457"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567856457"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This seems to be the odd one out in ATMPArgs, now that all of the others are const. Any reason that this one shouldn't live in Workspace?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:16:09Z",
      "diff_hunk" : "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567856457",
      "id" : 567856457,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg1NjQ1Nw==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 600,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567856457",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567860224"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567860224"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There's no need to set `coin` in this failure case. From the interface definition in `CCoinsView::GetCoin`:\r\n\r\n> When false is returned, coin's value is unspecified.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:21:19Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567860224",
      "id" : 567860224,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2MDIyNA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 912,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567860224",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567861603"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567861603"
         }
      },
      "author_association" : "MEMBER",
      "body" : "You can just use `std::map.count()` here since you don't actually need the value of the coin.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:23:18Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567861603",
      "id" : 567861603,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2MTYwMw==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 911,
      "original_position" : 7,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567861603",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567863028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567863028"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove \", and it cannot have spent entries\". That's vestigial from when a `CCoins` objects was returned for the full transaction.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:25:15Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567863028",
      "id" : 567863028,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2MzAyOA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 924,
      "original_position" : 22,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567863028",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867011"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867011"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Switching the logic ordering here is a little confusing. I'd suggest leaving it as it was.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:30:16Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867011",
      "id" : 567867011,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2NzAxMQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 936,
      "original_position" : 41,
      "original_start_line" : 927,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867011",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867414"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Presumably `tx->IsCoinBase()` will always be false here? We can't accept coinbase transactions into our mempool.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:30:48Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CCoinsViewMemPool::AddPackageTransaction(const CTransactionRef& tx) {\n+    package_txids.insert(tx->GetHash());\n+    // Coins spent by this transaction\n+    for (auto input : tx->vin) {\n+        Coin spent_coin;\n+        GetCoin(input.prevout, spent_coin);\n+        cache_package_remove.emplace(input.prevout, spent_coin);\n+    }\n+    // Coins added by this transaction\n+    for (unsigned int i = 0; i < tx->vout.size(); ++i) {\n+        cache_package_add.emplace(COutPoint(tx->GetHash(), i), Coin(tx->vout[i], MEMPOOL_HEIGHT, tx->IsCoinBase()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567867414",
      "id" : 567867414,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2NzQxNA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 948,
      "original_position" : 53,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567867414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567868462"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567868462"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It looks like this (and by extension, `package_txids`) is unused.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:32:24Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;\n+    std::map<COutPoint, Coin> cache_package_remove;\n+    std::set<uint256> package_txids;\n \n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n-    bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override;\n+    void AddPackageTransaction(const CTransactionRef& tx);\n+    bool PackageContains(uint256 txid) const {\n+        return package_txids.count(txid) != 0;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567868462",
      "id" : 567868462,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2ODQ2Mg==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 901,
      "original_position" : 23,
      "original_start_line" : 899,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567868462",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567869882"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567869882"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What's the reason for having two maps here? Why not just keep one, add to it when a new coin is created and remove from it when the coin is spent?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:34:17Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567869882",
      "id" : 567869882,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg2OTg4Mg==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 891,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567869882",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567875231"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567875231"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems a bit odd that the first time `PreChecks()` is called, we're calling `SetBackend()` when the backend is already set in the constructor for `MemPoolAccept`, and that we repeatedly call `m_view.SetBackend(m_viewmempool)`\r\n\r\nI suggest that in `MemPoolAccept::MemPoolAccept()`:\r\n\r\n- set `m_viewmempool` to be backed by `m_dummy`\r\n- set `m_view` to be backed by `m_viewmempool`\r\n\r\nand then here, remove the `m_view.SetBackend(m_viewmempool)` call.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:41:34Z",
      "diff_hunk" : "@@ -641,6 +653,14 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n+    m_viewmempool.SetBackend(::ChainstateActive().CoinsTip());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567875231",
      "id" : 567875231,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3NTIzMQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 656,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567875231",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567887448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567887448"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think this whole comment about \"must keep pool.cs\" is obsolete, since `pool.cs` is kept throughout the `MemPoolAccept` run.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T14:57:05Z",
      "diff_hunk" : "@@ -671,25 +691,20 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // we have all inputs cached now, so switch back to dummy (to protect\n     // against bugs where we pull more inputs from disk that miss being added\n     // to coins_to_uncache)\n-    m_view.SetBackend(m_dummy);\n+    m_viewmempool.SetBackend(m_dummy);\n \n     // Only accept BIP68 sequence locked transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n-    // be mined yet.\n-    // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n-    // CoinsViewCache instead of create its own\n-    if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    // be mined yet. Must keep pool.cs because this uses a CCoinsViewMemPool.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567887448",
      "id" : 567887448,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg4NzQ0OA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 698,
      "original_position" : 163,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567887448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567911483"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567911483"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "woah o.O nice catch. I should add a test for absurd fees in package ð ",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T15:27:46Z",
      "diff_hunk" : "@@ -922,60 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+    std::vector<CTransactionRef> txns;\n+\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n+    }\n+\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n+    }\n+\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n \n     UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n-\n-    MempoolAcceptResult accept_result = WITH_LOCK(cs_main,\n-\t\t    return AcceptToMemoryPool(mempool, std::move(tx), false /* bypass_limits */, true /* test_accept */));\n-    const bool test_accept_res = accept_result.m_accepted;\n-\n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        const CAmount fee = accept_result.m_base_fees.value();\n-        // Check that fee does not exceed maximum fee\n-        if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n-            result_0.pushKV(\"allowed\", false);\n-            result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-            result.push_back(std::move(result_0));\n-            return result;\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();\n+            const int64_t virtual_size = GetVirtualTransactionSize(tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            // Check that fee does not exceed maximum fee\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                result_inner.push_back(std::move(result_inner));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567911483",
      "id" : 567911483,
      "in_reply_to_id" : 567226540,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkxMTQ4Mw==",
      "original_commit_id" : "048ef0a7e62cca10c588b451c9060e7846ac398b",
      "original_line" : 974,
      "original_position" : 101,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 580468003,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567911483",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567916643"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567916643"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah I'm mostly trying to replicate the current usage, which is:\r\n1. ATMP returns a boolean. we check that first. (equivalent = `m_accepted`)\r\n2. if the boolean is false, we care about the TxValidationState `state`. I'm not sure if `state.IsValid()` is ever true when the boolean is false, but there is a [code path](https://github.com/bitcoin/bitcoin/blob/2c0fc856a6b0c82c5dddbbaee417171577514507/src/node/transaction.cpp#L24) for it, so I don't want to try to change it in a refactor.\r\n3. If boolean true, we sometimes look at fees and stuff.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T15:34:14Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567916643",
      "id" : 567916643,
      "in_reply_to_id" : 567223619,
      "line" : 191,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkxNjY0Mw==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 191,
      "original_position" : 31,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : 3,
      "pull_request_review_id" : 580474837,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567916643",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567918360"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567918360"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I want to generate to deterministic address so I don't need to use wallet",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T15:36:24Z",
      "diff_hunk" : "@@ -0,0 +1,193 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567918360",
      "id" : 567918360,
      "in_reply_to_id" : 567471786,
      "line" : 39,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkxODM2MA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 39,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 39,
      "pull_request_review_id" : 580477162,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567918360",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567928002"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567928002"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We had a short discussion about it [here](https://github.com/bitcoin/bitcoin/pull/20833#discussion_r557185885). I think the main idea is to distinguish between a meaningless `fee`/`replaced_transactions` and a 0/empty one. It is \"guarded\" but technically the caller could still access them ð don't want them to do that by accident.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T15:48:00Z",
      "diff_hunk" : "@@ -189,12 +189,38 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n /** Prune block files up to a given height */\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n-/** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool\n- * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+/**\n+* Validation result for a single transaction mempool acceptance.\n+* When m_accepted = true, m_replaced_transactions contains a list\n+* of replaced transactions and m_base_fees contains the tx fees.\n+*/\n+struct MempoolAcceptResult {\n+    bool m_accepted;\n+    TxValidationState m_state;\n+\n+    // Valid when m_accepted = true\n+    std::optional<std::list<CTransactionRef>> m_replaced_transactions;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567928002",
      "id" : 567928002,
      "in_reply_to_id" : 567222730,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkyODAwMg==",
      "original_commit_id" : "b76910ebd4d8a07534e145c498c7f7d0ce297ccd",
      "original_line" : 199,
      "original_position" : 36,
      "original_start_line" : null,
      "path" : "src/validation.h",
      "position" : null,
      "pull_request_review_id" : 580489635,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567928002",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567938951"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567938951"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Consider using range based loops here:\r\n\r\n```suggestion\r\n    for (Workspace& ws : workspaces) {\r\n        if (!PreChecks(args, ws)) {\r\n            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(ws.m_state, ws.m_ptx) };\r\n        }\r\n        m_viewmempool.AddPackageTransaction(ws.m_ptx);\r\n    }\r\n\r\n    // TODO: Enforce package-level feerate and other policies before script checks.\r\n    for (Workspace& ws : workspaces) {\r\n        PrecomputedTransactionData txdata;\r\n\r\n        if (!PolicyScriptChecks(args, ws, txdata)) {\r\n            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(ws.m_state, ws.m_ptx) };\r\n        }\r\n    }\r\n```",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T16:01:12Z",
      "diff_hunk" : "@@ -1029,46 +1041,86 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n \n     Workspace workspace(ptx);\n \n-    if (!PreChecks(args, workspace)) return false;\n+    if (!PreChecks(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, workspace, txdata)) return false;\n+    if (!PolicyScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n-    if (!ConsensusScriptChecks(args, workspace, txdata)) return false;\n+    if (!ConsensusScriptChecks(args, workspace, txdata)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     // Tx was accepted, but not added\n-    if (args.m_test_accept) return true;\n+    if (args.m_test_accept) {\n+        return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+    }\n \n-    if (!Finalize(args, workspace)) return false;\n+    if (!Finalize(args, workspace)) return MempoolAcceptResult(workspace.m_state, workspace.m_ptx);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return true;\n+    return MempoolAcceptResult(workspace.m_state, std::move(workspace.m_replaced_transactions), workspace.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script\n+    // checks when unnecessary.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        Workspace& workspace = workspaces[i];\n+        if (!PreChecks(args, workspace)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+        m_viewmempool.AddPackageTransaction(txns[i]);\n+    }\n+\n+    // TODO: Enforce package-level feerate and other policies before script checks.\n+    for (unsigned int i = 0; i < txns.size(); ++i) {\n+        PrecomputedTransactionData txdata;\n+        Workspace& workspace = workspaces[i];\n+\n+        if (!PolicyScriptChecks(args, workspace, txdata)) {\n+            return std::vector<MempoolAcceptResult> { MempoolAcceptResult(workspace.m_state, workspace.m_ptx) };\n+        }\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567938951",
      "id" : 567938951,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzODk1MQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 1259,
      "original_position" : 303,
      "original_start_line" : 1087,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567938951",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567942595"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567942595"
         }
      },
      "author_association" : "MEMBER",
      "body" : "No need for the local temporary `chainparams`:\r\n\r\n```suggestion\r\n    MemPoolAccept::ATMPArgs args { Params(), GetTime(), false, coins_to_uncache, test_accept };\r\n```\r\n\r\nSame goes for `chainparams` var in `AcceptToMemoryPool()` if you want to change it.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T16:05:55Z",
      "diff_hunk" : "@@ -1080,15 +1132,34 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n     ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n-    return res;\n+    return result;\n+}\n+\n+MempoolAcceptResult AcceptToMemoryPool(CTxMemPool& pool, const CTransactionRef &tx, bool bypass_limits, bool test_accept)\n+{\n+    const CChainParams& chainparams = Params();\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, tx, GetTime(), bypass_limits, test_accept);\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out)\n+std::vector<MempoolAcceptResult> ProcessNewPackage(CTxMemPool& pool, std::vector<CTransactionRef>& txns, bool test_accept)\n {\n+    AssertLockHeld(cs_main);\n+    assert(test_accept); // Only allow package accept dry-runs (testmempoolaccept RPC).\n+\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+    std::vector<COutPoint> coins_to_uncache;\n+    MemPoolAccept::ATMPArgs args { chainparams, GetTime(), false, coins_to_uncache, test_accept };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567942595",
      "id" : 567942595,
      "line" : 1315,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzk0MjU5NQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 1315,
      "original_position" : 358,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 308,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567942595",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567952639"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm not sure that I like the interface of passing back a CTransactionRef just for this failure case. I wonder if we should:\r\n\r\n- allow `m_accepted` to be tri-state {accepted, failed, not_fully_validated}. That can be achieved with a `std::optional<bool>`\r\n- return a `MempoolAcceptResult` for all transactions in the package where either:\r\n  - all are success\r\n  - one is fail and the rest are not_fully_validated\r\n- work out the txid of the failing transaction from its index in the vector.\r\n\r\nWhat do you think?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T16:18:26Z",
      "diff_hunk" : "@@ -922,67 +924,77 @@ static RPCHelpMan testmempoolaccept()\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n \n-    if (request.params[0].get_array().size() != 1) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Array must contain exactly one raw transaction for now\");\n-    }\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_array()[0].get_str())) {\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed. Make sure the tx has at least one input.\");\n-    }\n-    CTransactionRef tx(MakeTransactionRef(std::move(mtx)));\n-\n+    const UniValue raw_transactions = request.params[0].get_array();\n     const CFeeRate max_raw_tx_fee_rate = request.params[1].isNull() ?\n                                              DEFAULT_MAX_RAW_TX_FEE_RATE :\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     CTxMemPool& mempool = EnsureMemPool(request.context);\n-    int64_t virtual_size = GetVirtualTransactionSize(*tx);\n-    CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n-\n-    UniValue result(UniValue::VARR);\n-    UniValue result_0(UniValue::VOBJ);\n-    result_0.pushKV(\"txid\", tx->GetHash().GetHex());\n-    result_0.pushKV(\"wtxid\", tx->GetWitnessHash().GetHex());\n+    std::vector<CTransactionRef> txns;\n \n-    TxValidationState state;\n-    bool test_accept_res;\n-    CAmount fee{0};\n-    {\n-        LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n+    for (unsigned int i = 0; i < raw_transactions.size(); ++i) {\n+        CMutableTransaction mtx;\n+        if (!DecodeHexTx(mtx, raw_transactions[i].get_str())) {\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+        }\n+        txns.emplace_back(MakeTransactionRef(std::move(mtx)));\n     }\n \n-    // Check that fee does not exceed maximum fee\n-    if (test_accept_res && max_raw_tx_fee && fee > max_raw_tx_fee) {\n-        result_0.pushKV(\"allowed\", false);\n-        result_0.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n-        result.push_back(std::move(result_0));\n-        return result;\n+    std::vector<MempoolAcceptResult> validation_results;\n+    if (txns.size() == 1) {\n+        validation_results.emplace_back(WITH_LOCK(cs_main,\n+            return AcceptToMemoryPool(mempool, txns[0], false /* bypass_limits */, true /* test_accept */)));\n+    } else {\n+        validation_results = WITH_LOCK(cs_main, return ProcessNewPackage(mempool, txns, true));\n     }\n-    result_0.pushKV(\"allowed\", test_accept_res);\n \n-    // Only return the fee and vsize if the transaction would pass ATMP.\n-    // These can be used to calculate the feerate.\n-    if (test_accept_res) {\n-        result_0.pushKV(\"vsize\", virtual_size);\n-        UniValue fees(UniValue::VOBJ);\n-        fees.pushKV(\"base\", ValueFromAmount(fee));\n-        result_0.pushKV(\"fees\", fees);\n-    } else {\n-        if (state.IsInvalid()) {\n-            if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n-                result_0.pushKV(\"reject-reason\", \"missing-inputs\");\n+    auto tx_accepted = [](MempoolAcceptResult& res) { return res.m_accepted; };\n+    const bool all_valid = std::all_of(validation_results.begin(), validation_results.end(), tx_accepted);\n+    // ProcessNewPackage should return a MempoolAcceptResult per transaction\n+    // or exactly 1 for the first error that occurs.\n+    CHECK_NONFATAL(all_valid || validation_results.size() == 1);\n+\n+    // TODO: Report absurd fees for packages.\n+\n+    UniValue result(UniValue::VARR);\n+    if (all_valid) {\n+        for (unsigned int i = 0; i < validation_results.size(); ++i) {\n+            UniValue result_inner(UniValue::VOBJ);\n+            const CTransaction tx = *txns[i];\n+            result_inner.pushKV(\"txid\", tx.GetHash().GetHex());\n+            result_inner.pushKV(\"wtxid\", tx.GetWitnessHash().GetHex());\n+\n+            const CAmount fee = validation_results[i].m_base_fees.value();\n+            const int64_t virtual_size = GetVirtualTransactionSize(tx);\n+            const CAmount max_raw_tx_fee = max_raw_tx_fee_rate.GetFee(virtual_size);\n+            // Check that fee does not exceed maximum fee\n+            if (max_raw_tx_fee && fee > max_raw_tx_fee) {\n+                result_inner.pushKV(\"allowed\", false);\n+                result_inner.pushKV(\"reject-reason\", \"max-fee-exceeded\");\n+                result_inner.push_back(std::move(result_inner));\n             } else {\n-                result_0.pushKV(\"reject-reason\", strprintf(\"%s\", state.GetRejectReason()));\n+                result_inner.pushKV(\"allowed\", true);\n+                result_inner.pushKV(\"vsize\", virtual_size);\n+                UniValue fees(UniValue::VOBJ);\n+                fees.pushKV(\"base\", ValueFromAmount(fee));\n+                result_inner.pushKV(\"fees\", fees);\n             }\n+            result.push_back(std::move(result_inner));\n+        }\n+    } else {\n+        Assume(validation_results[0].m_failed_ptx);\n+        UniValue result_0(UniValue::VOBJ);\n+        result_0.pushKV(\"txid\", validation_results[0].m_failed_ptx->GetHash().GetHex());\n+        result_0.pushKV(\"wtxid\", validation_results[0].m_failed_ptx->GetWitnessHash().GetHex());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567952639",
      "id" : 567952639,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzk1MjYzOQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 988,
      "original_position" : 128,
      "original_start_line" : 987,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 580388483,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567952639",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567998921"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567998921"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yes, I don't like it either. The lifetime of `Workspace` ends when `MemPoolAccept::AcceptSingleTransaction()` returns, but the coins in `coins_to_uncache` are uncached in ATMP afterward. If it's appropriate to do coin-uncaching inside `MemPoolAccept::Accept()` functions, then we can move it?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T17:17:42Z",
      "diff_hunk" : "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r567998921",
      "id" : 567998921,
      "in_reply_to_id" : 567856457,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzk5ODkyMQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 600,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580583759,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/567998921",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003551"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003551"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "We wouldn't be able to distinguish between a `missing-inputs` and a `conflict-in-package`. Perhaps that's desirable, but I felt this was simpler?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T17:24:24Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003551",
      "id" : 568003551,
      "in_reply_to_id" : 567869882,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzU1MQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 891,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 580589882,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003551",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003927"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003927"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Agreed ð§  will update",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T17:25:01Z",
      "diff_hunk" : "@@ -641,6 +653,14 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n+    m_viewmempool.SetBackend(::ChainstateActive().CoinsTip());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568003927",
      "id" : 568003927,
      "in_reply_to_id" : 567875231,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAwMzkyNw==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 656,
      "original_position" : 139,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580590426,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568003927",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Perhaps they could be uncached in `MemPoolAccept`'s destructor? That's similar to an RAII pattern where the object releases any resources as it goes out of scope.\r\n\r\nI don't think this needs to be done as part of this PR. Could be a follow up if it sounds like an improvement to you.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T17:34:12Z",
      "diff_hunk" : "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010215",
      "id" : 568010215,
      "in_reply_to_id" : 567856457,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAxMDIxNQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 600,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580598683,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010215",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Ah, great point. Maybe add a code comment to say that?",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-01T17:35:11Z",
      "diff_hunk" : "@@ -880,15 +880,28 @@ class CTxMemPool\n  * It also allows you to sign a double-spend directly in\n  * signrawtransactionwithkey and signrawtransactionwithwallet,\n  * as long as the conflicting transaction is not yet confirmed.\n+ * It can also serve as temporary scratch space for some set\n+ * of transactions (i.e. as a member of MemPoolAccept to validate\n+ * packages) and tracks the Coins added and removed by them.\n  */\n class CCoinsViewMemPool : public CCoinsViewBacked\n {\n protected:\n     const CTxMemPool& mempool;\n+    std::map<COutPoint, Coin> cache_package_add;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568010841",
      "id" : 568010841,
      "in_reply_to_id" : 567869882,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODAxMDg0MQ==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 891,
      "original_position" : 12,
      "original_start_line" : null,
      "path" : "src/txmempool.h",
      "position" : null,
      "pull_request_review_id" : 580599512,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568010841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568228020"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568228020"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Yeah, maybe for a future PR ð¤ would be nice. The only complication is that we only uncache if the validation failed, so `MemPoolAccept` would need to know that when it's destructing...",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-02T00:04:51Z",
      "diff_hunk" : "@@ -474,11 +481,13 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568228020",
      "id" : 568228020,
      "in_reply_to_id" : 567856457,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODIyODAyMA==",
      "original_commit_id" : "2fac0136138012ae26c8e12ef77e9486ad5cd831",
      "original_line" : 600,
      "original_position" : 67,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 580876636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568228020",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568246712"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568246712"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "You're right, I'll add an `Assume()` so we get a debug error if it's spent.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-02-02T00:52:24Z",
      "diff_hunk" : "@@ -905,19 +905,48 @@ bool CTxMemPool::HasNoInputsOf(const CTransaction &tx) const\n CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // Check to see if the inputs are spent by a tx being considered for a package.\n+    // It's possible that a package spends entries in the mempool, and this would\n+    // only be reflected in the cache_package_remove.\n+    if (auto it = cache_package_remove.find(outpoint); it != cache_package_remove.end()) {\n+        coin = it->second;\n+        return false;\n+    }\n+\n+    // Check to see if the inputs are in a tx being considered for a package.\n+    // These Coins would not be available in the mempool or underlying CoinsView.\n+    if (auto it = cache_package_add.find(outpoint); it != cache_package_add.end()) {\n+        coin = it->second;\n+        return true;\n+    }\n+\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n-    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n-    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n+    // conflict with the underlying cache, and it cannot have spent entries.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n-    if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+\n+    // Check the underlying CoinsView.\n+    if (!ptx) return base->GetCoin(outpoint, coin);\n+\n+    // \"Create\" a Coin from a mempool transaction output.\n+    if (outpoint.n < ptx->vout.size()) {\n+        coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+void CCoinsViewMemPool::AddPackageTransaction(const CTransactionRef& tx) {\n+    package_txids.insert(tx->GetHash());\n+    // Coins spent by this transaction\n+    for (auto input : tx->vin) {\n+        Coin spent_coin;\n+        GetCoin(input.prevout, spent_coin);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r568246712",
      "id" : 568246712,
      "in_reply_to_id" : 567475382,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODI0NjcxMg==",
      "original_commit_id" : "17ca2d8e72bc5d9249e4a01a2dbc2bb362dbd9d8",
      "original_line" : 943,
      "original_position" : 48,
      "original_start_line" : null,
      "path" : "src/txmempool.cpp",
      "position" : null,
      "pull_request_review_id" : 580898285,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/568246712",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "To all the lovely reviewers, as @jnewbery [pointed out](https://github.com/bitcoin/bitcoin/pull/20833#pullrequestreview-580388483), this PR is getting a little big ð so I've split off the refactoring commits to #21062.\r\n\r\nThanks a ton for the review @fjahr ð I think I've addressed all your comments/questions.\r\n\r\n@jnewbery I've addressed most of your comments - I agree with you on returning a vector (all success) || (maybe some succeeded, one failed, and all others not-fully-validated) from `ProcessNewPackage`. Do you also recommend doing that for the `testmempoolaccept` API? Marking this as a draft so I can figure this out while the refactors are cooking, heh.",
      "created_at" : "2021-02-02T02:07:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-771294064",
      "id" : 771294064,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3MTI5NDA2NA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-02-03T19:01:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/771294064",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "To reviewers: #21062 is merged.\r\n~Next chunk is #21146, which is centered around `MemPoolAccept`'s interaction with the coins cache.\r\nThis PR is up-to-date so feel free to review, but we need #21146 first ð~",
      "created_at" : "2021-02-11T22:26:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-777833961",
      "id" : 777833961,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc3NzgzMzk2MQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-02T18:28:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/777833961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "This is ready for review ð  no blockers anymore\r\nThe approach has slightly changed - I'm now extending `CCoinsViewCache` to create a `CCoinsViewTemporary` (used only in mempool validation) to track package coins. They're stored at the top layer of the `MemPoolAccept` coins hierarchy, in `m_view` instead of `m_viewmempool`. And we can clear the temporary coins to reset the state without deleting`cacheCoins` :)",
      "created_at" : "2021-03-02T18:41:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-789126577",
      "id" : 789126577,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4OTEyNjU3Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-02T18:41:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789126577",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585817249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585817249"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Nit: I would write mempool as a single word at this point in the lingo evolution. :)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-02T18:43:07Z",
      "diff_hunk" : "@@ -28,7 +28,8 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n+        CCoinsViewMemPool viewMemPool(&::ChainstateActive().CoinsTip(), *m_node.mempool);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585817249",
      "id" : 585817249,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTgxNzI0OQ==",
      "original_commit_id" : "4b891df74160a8df0ca69ef35eedf22bf5f39a93",
      "original_line" : 31,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/test/miner_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585817249",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585825994"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585825994"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Optionally add an introductory comment for `coin_empty`. Perhaps `spent_coin` is more speaking.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-02T18:55:55Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r585825994",
      "id" : 585825994,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTgyNTk5NA==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 466,
      "original_position" : 4,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585825994",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Fixed CI failure",
      "created_at" : "2021-03-03T02:59:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-789389804",
      "id" : 789389804,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc4OTM4OTgwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-03T02:59:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789389804",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586764973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586764973"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Slightly surprised that the function's name is `getâ¦` but it returns a boolean on whether the retrieval was successful. I'd kinda expect a `getâ¦` function to return the object.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-03T20:44:04Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586764973",
      "id" : 586764973,
      "line" : 502,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc2NDk3Mw==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 502,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 64,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586764973",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586775962"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586775962"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "If this is is supposed to mean that there are two conflicting transactions in the package, this could be phrased a bit more clearly. How about:\r\n\r\n\"Check if another transaction in the package has already spent the given UTXO. UTXO consumed by this package are only tracked in `m_temp_spent`.\"",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-03T21:01:52Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586775962",
      "id" : 586775962,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc3NTk2Mg==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 506,
      "original_position" : 44,
      "original_start_line" : 504,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586775962",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586777630"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586777630"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Isn't only a single package under review here? How about:\r\n\r\n\"Check whether the input was created by another transaction in the package under review.\"",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-03T21:04:48Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return coin_empty;\n+        }\n+\n+        // Check to see if the inputs are in a tx being considered for a package.\n+        // These Coins would not be available in the underlying CoinsView.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586777630",
      "id" : 586777630,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc3NzYzMA==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 513,
      "original_position" : 50,
      "original_start_line" : 510,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586777630",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586778515"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586778515"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would make more sense to me if the names of `GetCoin` and `AccessCoin` were swappedâ¦ :confounded:",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-03T21:06:24Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return coin_empty;\n+        }\n+\n+        // Check to see if the inputs are in a tx being considered for a package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r586778515",
      "id" : 586778515,
      "line" : 518,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njc3ODUxNQ==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 518,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 80,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586778515",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587883103"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587883103"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would have helped me if this comment had stated what assumptions the transaction package underlies if any,  (e.g. whether they are all part of a connected set or not). I might have expected such assumptions to be explicitly stated in the parameter descriptions of a function in another codebase.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-04T22:47:45Z",
      "diff_hunk" : "@@ -603,6 +603,9 @@ class MemPoolAccept\n     // Single transaction acceptance\n     MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    // Multiple transaction acceptance\n+    std::vector<MempoolAcceptResult> AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587883103",
      "id" : 587883103,
      "line" : 611,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg4MzEwMw==",
      "original_commit_id" : "390574584a5798c06014ca045020b1d46e22ce31",
      "original_line" : 611,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 147,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587883103",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587889697"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587889697"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This sounds like you're assuming that you're getting the transactions in topological order. If that's a requirement, it would be good to list that above as mentioned.\r\n\r\nAlso, you may want to make your API input checks as lenient as possible and a specific order does not seem necessary to me.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-04T22:56:02Z",
      "diff_hunk" : "@@ -1165,28 +1172,93 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     Workspace ws(ptx);\n \n-    if (!PreChecks(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!PreChecks(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Only compute the precomputed transaction data if we need to verify\n     // scripts (ie, other policy checks pass). We perform the inexpensive\n     // checks first and avoid hashing and signature verification unless those\n     // checks pass, to mitigate CPU exhaustion denial-of-service attacks.\n     PrecomputedTransactionData txdata;\n \n-    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!PolicyScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n-    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(ws.m_state);\n+    if (!ConsensusScriptChecks(args, ws, txdata)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     // Tx was accepted, but not added\n     if (args.m_test_accept) {\n-        return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+        return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n     }\n \n-    if (!Finalize(args, ws)) return MempoolAcceptResult(ws.m_state);\n+    if (!Finalize(args, ws)) return MempoolAcceptResult(*ws.m_ptx, ws.m_state);\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n-    return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+    return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+}\n+\n+std::vector<MempoolAcceptResult> MemPoolAccept::AcceptMultipleTransactions(std::vector<CTransactionRef>& txns, ATMPArgs& args)\n+{\n+    AssertLockHeld(cs_main);\n+    std::vector<Workspace> workspaces{};\n+    const int package_size = txns.size();\n+    workspaces.reserve(package_size);\n+    std::transform(txns.begin(), txns.end(), std::back_inserter(workspaces), [](CTransactionRef& tx) {\n+        return Workspace(tx);\n+    });\n+    std::vector<MempoolAcceptResult> results;\n+    results.reserve(package_size);\n+\n+    LOCK(m_pool.cs);\n+    // Do all PreChecks first and fail fast to avoid running expensive script checks when unnecessary.\n+    for (Workspace& ws : workspaces) {\n+        if (!PreChecks(args, ws)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            const auto failed_or_unfinished = [&, failed_ptx = ws.m_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            std::transform(workspaces.begin(), workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        m_view.PackageAddTransaction(ws.m_ptx);\n+    }\n+\n+    // Now that we have verified all inputs are available and there are no conflicts in the package,\n+    // clear the temporary coins (m_temp_added and m_temp_spent), otherwise script checks will error\n+    // on coins that are spent within the package.\n+    m_view.ClearTemporaryCoins();\n+\n+    for (Workspace& ws : workspaces) {\n+        PrecomputedTransactionData txdata;\n+        if (!PolicyScriptChecks(args, ws, txdata)) {\n+            // Exit early to avoid doing pointless work. Return results in the same order as input txns.\n+            CTransactionRef failed_ptx = ws.m_ptx;\n+            const auto failed_or_unfinished = [&failed_ptx](Workspace& ws) {\n+                                              return ws.m_ptx == failed_ptx\n+                                              ? MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ true)\n+                                              : MempoolAcceptResult(*ws.m_ptx, ws.m_state, /* finished */ false);\n+            };\n+            auto it_curr = std::find_if(workspaces.begin(), workspaces.end(),\n+                                        [& failed_ptx](Workspace& ws) { return ws.m_ptx == failed_ptx; });\n+            // When test_accept=true, transactions that pass PolicyScriptChecks are valid because there are\n+            // no further mempool checks (passing PolicyScriptChecks implies passing ConsensusScriptChecks).\n+            std::transform(workspaces.begin(), it_curr, std::back_inserter(results), [](Workspace& ws) {\n+                           return MempoolAcceptResult(*ws.m_ptx, std::move(ws.m_replaced_transactions), ws.m_base_fees);\n+            });\n+            std::transform(it_curr, workspaces.end(), std::back_inserter(results), failed_or_unfinished);\n+            return results;\n+        }\n+        // Add the coins back because subsequent transaction(s) in the package may need them for",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587889697",
      "id" : 587889697,
      "line" : 1256,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg4OTY5Nw==",
      "original_commit_id" : "390574584a5798c06014ca045020b1d46e22ce31",
      "original_line" : 1256,
      "original_position" : 108,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 273,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587889697",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587893955"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587893955"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I thought this RPC was supposed to generally fail if any transactions fail.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-04T23:04:07Z",
      "diff_hunk" : "@@ -890,13 +892,15 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587893955",
      "id" : 587893955,
      "line" : 896,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Nzg5Mzk1NQ==",
      "original_commit_id" : "a3264ac359a62b6a4fb0bae8976f8a363652d934",
      "original_line" : 896,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 17,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587893955",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587905367"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587905367"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Optional additional tests:\r\nâ¢ parent with two distinct child transactions\r\nâ¢ child with two parent transactions",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-04T23:25:25Z",
      "diff_hunk" : "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587905367",
      "id" : 587905367,
      "line" : 132,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNTM2Nw==",
      "original_commit_id" : "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "original_line" : 132,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 132,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587905367",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587906781"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587906781"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe I'm just overlooking it, but what about a valid set of independent transactions? That should be accepted now, but later fail when you require packages to consist of dependent transactions. Especially, I would be interested in seeing that the connectedness test properly recognizes two independent parent-child pairs as unconnected.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-04T23:28:27Z",
      "diff_hunk" : "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r587906781",
      "id" : 587906781,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzkwNjc4MQ==",
      "original_commit_id" : "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "original_line" : 89,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 89,
      "pull_request_review_id" : 602147210,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/587906781",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4060799?v=4",
         "events_url" : "https://api.github.com/users/Xekyo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Xekyo/followers",
         "following_url" : "https://api.github.com/users/Xekyo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Xekyo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Xekyo",
         "id" : 4060799,
         "login" : "Xekyo",
         "node_id" : "MDQ6VXNlcjQwNjA3OTk=",
         "organizations_url" : "https://api.github.com/users/Xekyo/orgs",
         "received_events_url" : "https://api.github.com/users/Xekyo/received_events",
         "repos_url" : "https://api.github.com/users/Xekyo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Xekyo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Xekyo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Xekyo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r588925773"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588925773"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I changed my mind on it because it seemed like the 1-if-failure API was confusing and less helpful",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-06T20:14:55Z",
      "diff_hunk" : "@@ -890,13 +892,15 @@ static RPCHelpMan testmempoolaccept()\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n-                        \"Length is exactly one for now.\",\n+                        \"Returns results for each transaction in the same order they were passed in.\\n\"\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r588925773",
      "id" : 588925773,
      "in_reply_to_id" : 587893955,
      "line" : 896,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4ODkyNTc3Mw==",
      "original_commit_id" : "a3264ac359a62b6a4fb0bae8976f8a363652d934",
      "original_line" : 896,
      "original_position" : 17,
      "original_start_line" : null,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 17,
      "pull_request_review_id" : 605784646,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/588925773",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631384"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631384"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Marking as resolved because this wouldn't be a change for this PR, but yes I agree the CoinsView API is not the most aptly named :)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-08T17:58:45Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631384",
      "id" : 589631384,
      "in_reply_to_id" : 586764973,
      "line" : 502,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTYzMTM4NA==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 502,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 64,
      "pull_request_review_id" : 606559339,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631384",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631544"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631544"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Marking as resolved because this wouldn't be a change for this PR, but yes I agree the CoinsView API is not the most aptly named :)",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-08T17:58:58Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();\n+    }\n+\n+    const Coin& AccessCoin(const COutPoint& outpoint) const override {\n+        // Check to see if the inputs are spent by a tx being considered for a package. When a\n+        // package transaction spends coins from the mempool, it is only reflected in m_temp_spent.\n+        if (m_temp_spent.count(outpoint)) {\n+            return coin_empty;\n+        }\n+\n+        // Check to see if the inputs are in a tx being considered for a package.\n+        // These Coins would not be available in the underlying CoinsView.\n+        if (auto it = m_temp_added.find(outpoint); it != m_temp_added.end()) {\n+            assert(!it->second.IsSpent());\n+            return it->second;\n+        }\n+        return CCoinsViewCache::AccessCoin(outpoint);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589631544",
      "id" : 589631544,
      "in_reply_to_id" : 586778515,
      "line" : 518,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTYzMTU0NA==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 518,
      "original_position" : 55,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 80,
      "pull_request_review_id" : 606559526,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589631544",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589653414"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589653414"
         }
      },
      "author_association" : "MEMBER",
      "body" : "FWIW, there is a historical reason why there are lots of `bool Get*(....,&return_object)` functions in the codebase. Before C++11's move semantics it was hard to avoid copies in many cases (needing `swap`s all over the place...). [copy elision](https://en.cppreference.com/w/cpp/language/copy_elision) existed in C++98, but has been expanded greatly since (and is now mandatory in C++17). It's also only since C++17 that `std::optional` exists so there is a clean way of returning an optional value; before that you'd sometimes see an idiom of functions returning a `std::pair<value, bool>` (e.g. `std::set::insert`), but without structured binding (also C++17) or even `std::tie` (C++11) that's pretty annoying to use too.\r\n\r\nTL;DR: there used to not really be a great way of having getters that are both efficient and can fail. With the current language, I think it'd just return `std::optional<Coin>`.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-08T18:31:59Z",
      "diff_hunk" : "@@ -462,6 +462,113 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n     return CheckInputScripts(tx, state, view, flags, /* cacheSigStore = */ true, /* cacheFullSciptStore = */ true, txdata);\n }\n \n+static const Coin coin_empty;\n+/**\n+ * A CoinsView that adds a memory cache to another CoinsView and serves as temporary scratch space.\n+ * Used by MemPoolAccept class to validate transactions and packages before submitting to mempool.\n+ * A backend can be set to provide read access to chainstate and/or mempool coins, but writing to\n+ * the backend is disabled. Avoid using a CCoinsViewTemporary in consensus-critical paths such\n+ * as writing to the script cache. See CheckInputsFromMempoolAndCache as an example. When not being\n+ * used to validate a package (m_temp_added and m_temp_spent are empty), a CCoinsViewTemporary\n+ * behaves exactly like a CCoinsViewCache.\n+ */\n+class CCoinsViewTemporary : public CCoinsViewCache\n+{\n+protected:\n+    /**\n+    * Coins made available by transactions being validated. Tracking these allows for package\n+    * validation, since we can access transaction outputs without submitting them to mempool.\n+    */\n+    std::map<COutPoint, Coin> m_temp_added;\n+\n+    /**\n+    * Coins spent by transactions being validated. When there are multiple, we need to track these\n+    * in order to distinguish between missing/spent coins and conflicts within a package.\n+    */\n+    std::set<COutPoint> m_temp_spent;\n+\n+public:\n+\n+    CCoinsViewTemporary(CCoinsView* baseIn) : CCoinsViewCache(baseIn) {}\n+\n+    // Delete the copy constructor to prevent accidentally using it when one intends to create a\n+    // CCoinsViewTemporary on top of a base cache.\n+    CCoinsViewTemporary(const CCoinsViewTemporary &) = delete;\n+\n+    bool GetCoin(const COutPoint& outpoint, Coin& coin) const override {\n+        coin = AccessCoin(outpoint);\n+        return !coin.IsSpent();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589653414",
      "id" : 589653414,
      "in_reply_to_id" : 586764973,
      "line" : 502,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTY1MzQxNA==",
      "original_commit_id" : "6bf3ff6b0514b2ba199f502efd2953afdaf428a6",
      "original_line" : 502,
      "original_position" : 39,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 64,
      "pull_request_review_id" : 606587811,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589653414",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589746428"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589746428"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> â¢ parent with two distinct child transactions\r\n> â¢ child with two parent transactions\r\n\r\nAdded both tests. Thanks for the suggestion!",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-08T21:03:35Z",
      "diff_hunk" : "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):\n+        self.log.info(\"Test multiple independent transactions in a package\")\n+        node = self.nodes[0]\n+        assert_equal(self.independent_txns_testres, node.testmempoolaccept(rawtxs=self.independent_txns_hex))\n+\n+        self.log.info(\"Test a valid package with garbage inserted\")\n+        garbage_tx = node.createrawtransaction([{\"txid\": \"00\" * 32, \"vout\": 5}], {self.address: 1})\n+        tx = CTransaction()\n+        tx.deserialize(BytesIO(hex_str_to_bytes(garbage_tx)))\n+        testres_bad = node.testmempoolaccept(self.independent_txns_hex + [garbage_tx])\n+        testres_independent_ids = [{\"txid\": res[\"txid\"], \"wtxid\": res[\"wtxid\"]} for res in self.independent_txns_testres]\n+        assert_equal(testres_bad, testres_independent_ids + [\n+            {\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"missing-inputs\"}\n+        ])\n+\n+        self.log.info(\"Check testmempoolaccept tells us when some transactions completed validation successfully\")\n+        coin = self.coins.pop()\n+        tx_bad_sig_hex = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+        tx_bad_sig = CTransaction()\n+        tx_bad_sig.deserialize(BytesIO(hex_str_to_bytes(tx_bad_sig_hex)))\n+        testres_bad_sig = node.testmempoolaccept(self.independent_txns_hex + [tx_bad_sig_hex])\n+        assert_equal(testres_bad_sig, self.independent_txns_testres + [{\n+            \"txid\": tx_bad_sig.rehash(),\n+            \"wtxid\": tx_bad_sig.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"mandatory-script-verify-flag-failed (Operation not valid with the current stack size)\"\n+        }])\n+\n+        self.log.info(\"Check testmempoolaccept reports txns in packages that exceed max feerate\")\n+        coin = self.coins.pop()\n+        tx_high_fee_raw = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                                           {self.address : coin[\"amount\"] - Decimal(\"0.999\")})\n+        tx_high_fee_signed = node.signrawtransactionwithkey(hexstring=tx_high_fee_raw, privkeys=self.privkeys)\n+        assert tx_high_fee_signed[\"complete\"]\n+        tx_high_fee = CTransaction()\n+        tx_high_fee.deserialize(BytesIO(hex_str_to_bytes(tx_high_fee_signed[\"hex\"])))\n+        testres_high_fee = node.testmempoolaccept([tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_high_fee, [\n+            {\"txid\": tx_high_fee.rehash(), \"wtxid\": tx_high_fee.getwtxid(), \"allowed\": False, \"reject-reason\": \"max-fee-exceeded\"}\n+        ])\n+        testres_package_high_fee = node.testmempoolaccept(self.independent_txns_hex + [tx_high_fee_signed[\"hex\"]])\n+        assert_equal(testres_package_high_fee, self.independent_txns_testres + testres_high_fee)\n+\n+    def test_chain(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589746428",
      "id" : 589746428,
      "in_reply_to_id" : 587905367,
      "line" : 132,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc0NjQyOA==",
      "original_commit_id" : "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "original_line" : 132,
      "original_position" : 125,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 132,
      "pull_request_review_id" : 606705865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:03:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589746428",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589749652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589749652"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I've been thinking about your comment about making the API more lenient, and I agree that I should always let `testmempoolaccept` accept lists of transactions that aren't necessarily connected. My plan for now is to return a `depends` list for each transaction, which will allow us to test the package-ness of the transactions passed in.",
      "commit_id" : "06f8fce092edf62f5bbabc5de41b2b499046b965",
      "created_at" : "2021-03-08T21:09:04Z",
      "diff_hunk" : "@@ -0,0 +1,245 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"RPCs that handle raw transaction packages.\"\"\"\n+\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    BIP125_SEQUENCE_NUMBER,\n+    COIN,\n+    CTransaction,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+)\n+\n+class RPCPackagesTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(120, self.address)[:20]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        # Create some transactions that can be reused throughout the test. Never submit these to mempool.\n+        self.independent_txns_hex = []\n+        self.independent_txns_testres = []\n+        for _ in range(3):\n+            coin = self.coins.pop()\n+            rawtx = node.createrawtransaction([{\"txid\" : coin[\"txid\"], \"vout\" : 0}],\n+                {self.address : coin[\"amount\"] - Decimal(\"0.0001\")})\n+            signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+            assert signedtx[\"complete\"]\n+            testres = node.testmempoolaccept([signedtx[\"hex\"]])\n+            assert testres[0][\"allowed\"]\n+            self.independent_txns_hex.append(signedtx[\"hex\"])\n+            # testmempoolaccept returns a list of length one, avoid creating a 2D list\n+            self.independent_txns_testres.append(testres[0])\n+\n+        self.test_independent()\n+        self.test_chain()\n+        self.test_conflicting()\n+        self.test_rbf()\n+\n+    def chain_transaction(self, parent_txid, value, parent_locking_script=None):\n+        \"\"\"Build a transaction that spends parent_txid:vout.\n+        Return tuple (CTransaction object, raw hex, scriptPub).\n+        \"\"\"\n+        node = self.nodes[0]\n+        inputs = [{\"txid\" : parent_txid, \"vout\" : 0}]\n+        outputs = {self.address : value}\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        prevtxs = [{\n+            \"txid\": parent_txid,\n+            \"vout\": 0,\n+            \"scriptPubKey\": parent_locking_script,\n+            \"amount\": value + Decimal(\"0.0001\"),\n+        }] if parent_locking_script else None\n+        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n+        tx = CTransaction()\n+        assert signedtx[\"complete\"]\n+        tx.deserialize(BytesIO(hex_str_to_bytes(signedtx[\"hex\"])))\n+        return (tx, signedtx[\"hex\"], tx.vout[0].scriptPubKey.hex())\n+\n+    def test_independent(self):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#discussion_r589749652",
      "id" : 589749652,
      "in_reply_to_id" : 587906781,
      "line" : 89,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc0OTY1Mg==",
      "original_commit_id" : "61d54b613d4bfbfcdd16239a73c500c5fd89ff49",
      "original_line" : 89,
      "original_position" : 82,
      "original_start_line" : null,
      "path" : "test/functional/rpc_packages.py",
      "position" : 89,
      "pull_request_review_id" : 606709912,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20833",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-03-08T21:09:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589749652",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Addressed @Xekyo's comments, added more tests",
      "created_at" : "2021-03-08T21:10:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20833#issuecomment-793080147",
      "id" : 793080147,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20833",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc5MzA4MDE0Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-03-08T21:10:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793080147",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
