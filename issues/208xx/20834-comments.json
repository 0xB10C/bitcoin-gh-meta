[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n* #20750 ([Bundle 2/n] Prune g_chainman usage in mempool-related validation functions by dongcarl)\n* #20749 ([Bundle 1/n] Prune g_chainman usage related to ::LookupBlockIndex by dongcarl)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-03T11:28:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753602797",
      "id" : 753602797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwMjc5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T22:15:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602797",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Great PR description, really informative. \r\n\r\nIs there anything in particular you'd recommend a reviewer do to assure themselves that removing this code doesn't cause any problems beyond the usual building, running tests etc?",
      "created_at" : "2021-01-03T13:51:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753620266",
      "id" : 753620266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYyMDI2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T13:51:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753620266",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551031030"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assumed this was protecting against corruption of the utxo set on disk, but that doesn't seem to be the case. `coin` will be from disk as well.",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-03T17:13:08Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030",
      "id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzMTAzMA==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 45,
      "pull_request_review_id" : 560712203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T21:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551031030",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@michaelfolkson good question. You could go line-by-line in the function and verify that what I said in the description is true, i.e. that each one is done earlier in ATMP. And then you can also look at what `cs_main` and `pool.cs` guarantee wrt consistency so you can say \"yeah, this wouldn't change.\" Might be fun to trace the coinsview through ATMP with some logs. If you prefer writing code, you can try to break it, e.g. with a [functional test](https://github.com/bitcoin/bitcoin/pull/20833/files#diff-2757e99ad43064441a6401f5002232a6a311d92d16b49df66f51d427ce448a68R86) with badly formed/similar but conflicting Coins. ",
      "created_at" : "2021-01-03T18:48:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753660173",
      "id" : 753660173,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzY2MDE3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T18:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753660173",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551917492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is that true? `AccessCoin()` doesn't necessarily hit the disk. It could be pulling the coin from the cache.",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-05T13:01:14Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492",
      "id" : 551917492,
      "in_reply_to_id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNzQ5Mg==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 45,
      "pull_request_review_id" : 561768425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T21:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551917492",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This code was added in commit https://github.com/bitcoin/bitcoin/commit/b014668e27b496bd6ad30985294f3d6971311910, specifically in response to this review comment: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-295316813.\r\n\r\nThe code was added here: https://github.com/bitcoin/bitcoin/pull/10192#event-1049081888 before the change to per-txout db and later rebased: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306359178.\r\n\r\nI believe the reasoning is as follows:\r\n\r\n- if there's a bug in CCoinsViewMempool (e.g. returning the wrong coin when looking up by txid), then the script cache could cache an incorrect outcome for script validation. That is then used as an input to validating a block, meaning that CCoinsViewMempool has become part of consensus.\r\n- therefore, explicitly check that the hash of scriptPubKey returned by CCoinsViewMempool for this outpoint is correct. Either:\r\n  - fetch the entire transaction from the mempool via `pool.get()` and check that the hash is committing to the scriptPubKey; or\r\n  - lookup the coin in the UTXO set (pcoinsTip) and check that the scriptPubKey matches. Despite the name `coinFromDisk`, I believe that the coin could be fetched either from disk or the in-memory pcoinsTip cache. pcoinsTip is already part of consensus, so if it's returning bad data, then we're already in trouble.\r\n\r\nI'm not sure we really need this. We could move these checks to immediately after the coins are fetched from CCoinsViewMempool. At that point we're basically adding duplicate code to ensure that there isn't a bug in CCoinsViewMempool, which itself is only a few lines of code. We may as well just move CCoinsViewMempool into validation.cpp as suggested in the original PR by @sdaftuar:\r\n\r\n> as per offline discussion, perhaps just move CCoinsViewMemPool into validation.cpp to make it clear it's part of consensus, and sanity check the results from the mempool.\r\n\r\nAnother interesting thing to note is that at the time this was introduced, the mempool lock was not held for the duration of ATMP (e.g. it'd be released after this block: https://github.com/bitcoin/bitcoin/blob/b014668e27b496bd6ad30985294f3d6971311910/src/validation.cpp#L528-L572). That was added later in #12368. I don't think it actually changes anything for the purposes of ATMP (since cs_main was held for the duration), but it does make expectations clearer.",
      "created_at" : "2021-01-05T14:00:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998",
      "id" : 754652998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDY1Mjk5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T14:00:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754652998",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm pretty skeptical of this change.  I think the OP downplays the consensus risk if a bug is introduced in the CCoinsViewMempool or the mempool (which CCoinsViewMempool relies on).\r\n\r\nI also took a quick look at #20833, and it seems to make that code much higher risk if we would be turning CCoinsViewMempool into something consensus critical and then make a bunch of changes to it.  Is there a method for implementing #20833 that does not require this?\r\n\r\n(I was going to suggest looking at what I proposed in #16401, which faced the same issue, but now I suspect there may be a ~~consensus~~ bug there as well -- yikes.  EDIT: Looked into this a bit more, I believe #16401 had a bug relating to packages of transactions that conflict with themselves, because the duplicate inputs check only occurs on a per-transaction basis, so when processing a package we need to check for duplicate inputs across the whole package.  But that seems like an easy fix (and #20833 seems to address this exact issue already), so now I think that the structure/usage of CCoinsViewMempool and CIFMAC implemented there may work after all?)",
      "created_at" : "2021-01-05T15:31:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754708905",
      "id" : 754708905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDcwODkwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T17:52:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754708905",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552148046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552148046"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Everything after \", and it cannot have pruned ...\" can be removed. There's no such thing as pruned coins cache entries since per-txout db.",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-05T19:32:12Z",
      "diff_hunk" : "@@ -167,6 +167,24 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n+    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n+    // transactions. First checking the underlying cache risks returning a pruned entry instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552148046",
      "id" : 552148046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0ODA0Ng==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 175,
      "original_position" : 9,
      "original_start_line" : 174,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562072263,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-06T21:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552148046",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@jnewbery @sdaftuar Thanks for your input and for digging into things! I agree that a bug here would be awful as we could potentially cache incorrect script checks, affecting consensus. I think these lines from CIFMAC are a nice sanity check:\r\n``` c\r\n        const CTransactionRef& txFrom = m_pool.get(txin.prevout.hash);\r\n        if (txFrom) {\r\n            assert(txFrom->GetHash() == txin.prevout.hash);\r\n            assert(txFrom->vout.size() > txin.prevout.n);\r\n            assert(txFrom->vout[txin.prevout.n] == coin.out);\r\n        } else {\r\n            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\r\n            assert(!coinFromDisk.IsSpent());\r\n            assert(coinFromDisk.out == coin.out);\r\n        }\r\n```\r\n\r\nThe main issues are with them being so late in ATMP.\r\n> > as per offline discussion, perhaps just move CCoinsViewMemPool into validation.cpp to make it clear it's part of consensus, and sanity check the results from the mempool.\r\n\r\n> We could move these checks to immediately after the coins are fetched from CCoinsViewMempool.\r\n\r\nI've moved `CCoinsViewMemPool` to validation and moved the sanity checks to `PreChecks` (instead of removing them), right after we get the coins. Now that we hold the lock throughout ATMP, I hope it's clear we don't need to do these exact same checks again later.\r\n> I believe #16401 had a bug relating to packages of transactions that conflict with themselves, because the duplicate inputs check only occurs on a per-transaction basis, so when processing a package we need to check for duplicate inputs across the whole package. But that seems like an easy fix (and #20833 seems to address this exact issue already)\r\n\r\nYes exactly, this cleanup came up while I was trying to figure out conflicting transactions. I did a light rebase of #20833 on top of this and [this condition](https://github.com/glozow/bitcoin/commit/df88ce2761d3b9ff16949864c3f710b3ad5761ee#) needs to be added, but otherwise it still works.\r\n\r\n\r\n\r\n",
      "created_at" : "2021-01-05T19:33:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754851634",
      "id" : 754851634,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDg1MTYzNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T19:33:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754851634",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552150626"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552150626"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Oh true. I do fix this in #20833... should I do it here instead?",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-05T19:37:12Z",
      "diff_hunk" : "@@ -167,6 +167,24 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n+    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n+    // transactions. First checking the underlying cache risks returning a pruned entry instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552150626",
      "id" : 552150626,
      "in_reply_to_id" : 552148046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE1MDYyNg==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 175,
      "original_position" : 9,
      "original_start_line" : 174,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562075598,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-06T21:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552150626",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552166146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Up to you. I only mention it here because you're touching this code, but if you want to keep this move-only, then that's fine as well.",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-05T20:07:47Z",
      "diff_hunk" : "@@ -167,6 +167,24 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+\n+bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n+    // If an entry in the mempool exists, always return that one, as it's guaranteed to never\n+    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n+    // transactions. First checking the underlying cache risks returning a pruned entry instead.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146",
      "id" : 552166146,
      "in_reply_to_id" : 552148046,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2NjE0Ng==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 175,
      "original_position" : 9,
      "original_start_line" : 174,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562095545,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : "RIGHT",
      "updated_at" : "2021-01-06T21:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552166146",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I am not sure if this message is for me ,However I wont touch anything\nuntil you return a pruned entry.\n\n\nOn Tue, Jan 5, 2021 at 3:10 PM John Newbery <notifications@github.com>\nwrote:\n\n> *@jnewbery* commented on this pull request.\n> ------------------------------\n>\n> In src/validation.cpp\n> <https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146>:\n>\n> > +    // conflict with the underlying cache, and it cannot have pruned entries (as it contains full)\n> +    // transactions. First checking the underlying cache risks returning a pruned entry instead.\n>\n> Up to you. I only mention it here because you're touching this code, but\n> if you want to keep this move-only, then that's fine as well.\n>\n> â\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552166146>, or\n> unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AJ3ZHMOQG7YAFUBPVIQQI5TSYNW2BANCNFSM4VRU5IHQ>\n> .\n>\n",
      "created_at" : "2021-01-05T20:49:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754890832",
      "id" : 754890832,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDg5MDgzMg==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T20:49:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754890832",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/41391025?v=4",
         "events_url" : "https://api.github.com/users/sheffine/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sheffine/followers",
         "following_url" : "https://api.github.com/users/sheffine/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sheffine/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sheffine",
         "id" : 41391025,
         "login" : "sheffine",
         "node_id" : "MDQ6VXNlcjQxMzkxMDI1",
         "organizations_url" : "https://api.github.com/users/sheffine/orgs",
         "received_events_url" : "https://api.github.com/users/sheffine/received_events",
         "repos_url" : "https://api.github.com/users/sheffine/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sheffine/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sheffine/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sheffine"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552403127"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552403127"
         }
      },
      "author_association" : "MEMBER",
      "body" : "in which case `coin` would also be from the cache, no?",
      "commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "created_at" : "2021-01-06T07:01:53Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552403127",
      "id" : 552403127,
      "in_reply_to_id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQwMzEyNw==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 58,
      "pull_request_review_id" : 562364827,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T07:01:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552403127",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I like the way this is going. CCoinsViewMempool should live in validation.cpp and be considered consensus critical since script caching was introduced. Making that clear by reflecting it in the code structure, rather than working around it by double checking the results returned from CCoinsViewCache seems like an improvement.\r\n\r\nAs far as I'm aware, CTxMemPool is not consensus critical, since any bugs in there would not cause us to incorrectly validate a block. Making the boundary between consensus-critical and non-consensus-critical code clearer is a good goal and fits with the current direction of the project (eg see #20158).\r\n\r\nIt'd be nice to eventually have ChainstateActive expose a GetCoin() method that returns a coin from the UTXO set or mempool so that callers (rpc, rest, etc) don't need to concern themselves with locking cs_main/mempool.cs and setting the coins view. After that happens, CCoinsViewMempool can exist just in validation.cpp and not be exposed in the header.",
      "created_at" : "2021-01-06T12:09:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755263880",
      "id" : 755263880,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTI2Mzg4MA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T12:09:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755263880",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552628862"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552628862"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit: Could explain a bit more what this sanity check is doing? Maybe a oneline summary of https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998 ?",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-06T13:49:14Z",
      "diff_hunk" : "@@ -658,6 +639,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n             return state.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n         }\n+        // Sanity check each input.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552628862",
      "id" : 552628862,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjYyODg2Mg==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 642,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 562719983,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T21:56:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552628862",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept NACK.  I think the current structure of using CIFMAC to encapsulate the consensus requirements of the script cache is better than spreading the checks out across validation, where it is less clear why these checks exist and what they protect against.  Moreover, I don't believe this change is necessary (or desired) for #20833, as I commented here: https://github.com/bitcoin/bitcoin/pull/20833#discussion_r552684985",
      "created_at" : "2021-01-06T14:59:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755348055",
      "id" : 755348055,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTM0ODA1NQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T14:59:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755348055",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552984141"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552984141"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Made big effort to improve the documentation :D ",
      "commit_id" : "89da5ed578b4839c426151960594bd4a9bf6d4f7",
      "created_at" : "2021-01-06T22:05:19Z",
      "diff_hunk" : "@@ -658,6 +639,19 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n             // Otherwise assume this might be an orphan tx for which we just haven't seen parents yet\n             return state.Invalid(TxValidationResult::TX_MISSING_INPUTS, \"bad-txns-inputs-missingorspent\");\n         }\n+        // Sanity check each input.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r552984141",
      "id" : 552984141,
      "in_reply_to_id" : 552628862,
      "line" : null,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjk4NDE0MQ==",
      "original_commit_id" : "747ae56cf7ffe3f7df570e02db36bb5953b9fa53",
      "original_line" : 642,
      "original_position" : 89,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : null,
      "pull_request_review_id" : 563068702,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-06T22:05:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/552984141",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@sdaftuar Thanks for your thorough review - I'm no longer removing CIFMAC. I think the lock annotations are still helpful, though, and in general would like to update the documentation to clarify what this function does.",
      "created_at" : "2021-01-06T22:09:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-755743904",
      "id" : 755743904,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NTc0MzkwNA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-06T22:09:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/755743904",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   }
]
