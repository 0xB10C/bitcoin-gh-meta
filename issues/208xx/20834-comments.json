[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20750 ([Bundle 2/n] Prune g_chainman usage in mempool-related validation functions by dongcarl)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2021-01-03T11:28:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753602797",
      "id" : 753602797,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYwMjc5Nw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T11:28:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753602797",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Concept ACK. Great PR description, really informative. \r\n\r\nIs there anything in particular you'd recommend a reviewer do to assure themselves that removing this code doesn't cause any problems beyond the usual building, running tests etc?",
      "created_at" : "2021-01-03T13:51:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753620266",
      "id" : 753620266,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzYyMDI2Ng==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T13:51:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753620266",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/16323900?v=4",
         "events_url" : "https://api.github.com/users/michaelfolkson/events{/privacy}",
         "followers_url" : "https://api.github.com/users/michaelfolkson/followers",
         "following_url" : "https://api.github.com/users/michaelfolkson/following{/other_user}",
         "gists_url" : "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/michaelfolkson",
         "id" : 16323900,
         "login" : "michaelfolkson",
         "node_id" : "MDQ6VXNlcjE2MzIzOTAw",
         "organizations_url" : "https://api.github.com/users/michaelfolkson/orgs",
         "received_events_url" : "https://api.github.com/users/michaelfolkson/received_events",
         "repos_url" : "https://api.github.com/users/michaelfolkson/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/michaelfolkson/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/michaelfolkson"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551031030"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I assumed this was protecting against corruption of the utxo set on disk, but that doesn't seem to be the case. `coin` will be from disk as well.",
      "commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "created_at" : "2021-01-03T17:13:08Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551031030",
      "id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAzMTAzMA==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 33,
      "pull_request_review_id" : 560712203,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-03T17:14:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551031030",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@michaelfolkson good question. You could go line-by-line in the function and verify that what I said in the description is true, i.e. that each one is done earlier in ATMP. And then you can also look at what `cs_main` and `pool.cs` guarantee wrt consistency so you can say \"yeah, this wouldn't change.\" Might be fun to trace the coinsview through ATMP with some logs. If you prefer writing code, you can try to break it, e.g. with a [functional test](https://github.com/bitcoin/bitcoin/pull/20833/files#diff-2757e99ad43064441a6401f5002232a6a311d92d16b49df66f51d427ce448a68R86) with badly formed/similar but conflicting Coins. ",
      "created_at" : "2021-01-03T18:48:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-753660173",
      "id" : 753660173,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1MzY2MDE3Mw==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-03T18:48:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/753660173",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/25183001?v=4",
         "events_url" : "https://api.github.com/users/glozow/events{/privacy}",
         "followers_url" : "https://api.github.com/users/glozow/followers",
         "following_url" : "https://api.github.com/users/glozow/following{/other_user}",
         "gists_url" : "https://api.github.com/users/glozow/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/glozow",
         "id" : 25183001,
         "login" : "glozow",
         "node_id" : "MDQ6VXNlcjI1MTgzMDAx",
         "organizations_url" : "https://api.github.com/users/glozow/orgs",
         "received_events_url" : "https://api.github.com/users/glozow/received_events",
         "repos_url" : "https://api.github.com/users/glozow/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/glozow/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/glozow/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/glozow"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551917492"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is that true? `AccessCoin()` doesn't necessarily hit the disk. It could be pulling the coin from the cache.",
      "commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "created_at" : "2021-01-05T13:01:14Z",
      "diff_hunk" : "@@ -404,43 +404,6 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n-// Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n-// were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n-    // pool.cs should be locked already, but go ahead and re-take the lock here\n-    // to enforce that mempool doesn't change between when we check the view\n-    // and when we actually call through to CheckInputScripts\n-    LOCK(pool.cs);\n-\n-    assert(!tx.IsCoinBase());\n-    for (const CTxIn& txin : tx.vin) {\n-        const Coin& coin = view.AccessCoin(txin.prevout);\n-\n-        // AcceptToMemoryPoolWorker has already checked that the coins are\n-        // available, so this shouldn't fail. If the inputs are not available\n-        // here then return false.\n-        if (coin.IsSpent()) return false;\n-\n-        // Check equivalence for available inputs.\n-        const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n-        if (txFrom) {\n-            assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n-        } else {\n-            const Coin& coinFromDisk = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n-            assert(!coinFromDisk.IsSpent());\n-            assert(coinFromDisk.out == coin.out);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#discussion_r551917492",
      "id" : 551917492,
      "in_reply_to_id" : 551031030,
      "line" : 436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNzQ5Mg==",
      "original_commit_id" : "bf995d8267019c0ecec8651186ffadb008121a6e",
      "original_line" : 436,
      "original_position" : 33,
      "original_start_line" : null,
      "path" : "src/validation.cpp",
      "position" : 33,
      "pull_request_review_id" : 561768425,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/20834",
      "side" : "LEFT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2021-01-05T13:01:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/551917492",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "This code was added in commit https://github.com/bitcoin/bitcoin/commit/b014668e27b496bd6ad30985294f3d6971311910, specifically in response to this review comment: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-295316813.\r\n\r\nThe code was added here: https://github.com/bitcoin/bitcoin/pull/10192#event-1049081888 before the change to per-txout db and later rebased: https://github.com/bitcoin/bitcoin/pull/10192#issuecomment-306359178.\r\n\r\nI believe the reasoning is as follows:\r\n\r\n- if there's a bug in CCoinsViewMempool (e.g. returning the wrong coin when looking up by txid), then the script cache could cache an incorrect outcome for script validation. That is then used as an input to validating a block, meaning that CCoinsViewMempool has become part of consensus.\r\n- therefore, explicitly check that the hash of scriptPubKey returned by CCoinsViewMempool for this outpoint is correct. Either:\r\n  - fetch the entire transaction from the mempool via `pool.get()` and check that the hash is committing to the scriptPubKey; or\r\n  - lookup the coin in the UTXO set (pcoinsTip) and check that the scriptPubKey matches. Despite the name `coinFromDisk`, I believe that the coin could be fetched either from disk or the in-memory pcoinsTip cache. pcoinsTip is already part of consensus, so if it's returning bad data, then we're already in trouble.\r\n\r\nI'm not sure we really need this. We could move these checks to immediately after the coins are fetched from CCoinsViewMempool. At that point we're basically adding duplicate code to ensure that there isn't a bug in CCoinsViewMempool, which itself is only a few lines of code. We may as well just move CCoinsViewMempool into validation.cpp as suggested in the original PR by @sdaftuar:\r\n\r\n> as per offline discussion, perhaps just move CCoinsViewMemPool into validation.cpp to make it clear it's part of consensus, and sanity check the results from the mempool.\r\n\r\nAnother interesting thing to note is that at the time this was introduced, the mempool lock was not held for the duration of ATMP (e.g. it'd be released after this block: https://github.com/bitcoin/bitcoin/blob/b014668e27b496bd6ad30985294f3d6971311910/src/validation.cpp#L528-L572). That was added later in #12368. I don't think it actually changes anything for the purposes of ATMP (since cs_main was held for the duration), but it does make expectations clearer.",
      "created_at" : "2021-01-05T14:00:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754652998",
      "id" : 754652998,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDY1Mjk5OA==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T14:00:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754652998",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/1063656?v=4",
         "events_url" : "https://api.github.com/users/jnewbery/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jnewbery/followers",
         "following_url" : "https://api.github.com/users/jnewbery/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jnewbery/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jnewbery",
         "id" : 1063656,
         "login" : "jnewbery",
         "node_id" : "MDQ6VXNlcjEwNjM2NTY=",
         "organizations_url" : "https://api.github.com/users/jnewbery/orgs",
         "received_events_url" : "https://api.github.com/users/jnewbery/received_events",
         "repos_url" : "https://api.github.com/users/jnewbery/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jnewbery/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jnewbery"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I'm pretty skeptical of this change.  I think the OP downplays the consensus risk if a bug is introduced in the CCoinsViewMempool or the mempool (which CCoinsViewMempool relies on).\r\n\r\nI also took a quick look at #20833, and it seems to make that code much higher risk if we would be turning CCoinsViewMempool into something consensus critical and then make a bunch of changes to it.  Is there a method for implementing #20833 that does not require this?\r\n\r\n(I was going to suggest looking at what I proposed in #16401, which faced the same issue, but now I suspect there may be a consensus bug there as well -- yikes.)",
      "created_at" : "2021-01-05T15:31:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/20834#issuecomment-754708905",
      "id" : 754708905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/20834",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDc1NDcwODkwNQ==",
      "performed_via_github_app" : null,
      "updated_at" : "2021-01-05T15:31:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/754708905",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/7463573?v=4",
         "events_url" : "https://api.github.com/users/sdaftuar/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sdaftuar/followers",
         "following_url" : "https://api.github.com/users/sdaftuar/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sdaftuar/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sdaftuar",
         "id" : 7463573,
         "login" : "sdaftuar",
         "node_id" : "MDQ6VXNlcjc0NjM1NzM=",
         "organizations_url" : "https://api.github.com/users/sdaftuar/orgs",
         "received_events_url" : "https://api.github.com/users/sdaftuar/received_events",
         "repos_url" : "https://api.github.com/users/sdaftuar/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sdaftuar/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sdaftuar"
      }
   }
]
