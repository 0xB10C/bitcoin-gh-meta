[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#20892](https://github.com/bitcoin/bitcoin/pull/20892) (tests: Run both descriptor and legacy tests within a single test invocation by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-03-06T21:37:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#issuecomment-1457038403",
      "id" : 1457038403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27216",
      "node_id" : "IC_kwDOABII585W2KRD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457038403/reactions"
      },
      "updated_at" : "2023-03-10T04:03:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457038403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1127978416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127978416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://cirrus-ci.com/task/6502838134636544:\r\n```bash\r\nwallet/test/scriptpubkeyman_tests.cpp:142:48: error: argument name 'index' in comment does not match parameter name 'pos' [bugprone-argument-comment,-warnings-as-errors]\r\n        descriptor.descriptor->ExpandFromCache(/*index=*/10, descriptor.cache, scripts3, provider);\r\n                                               ^\r\n./script/descriptor.h:137:38: note: 'pos' declared here\r\n    virtual bool ExpandFromCache(int pos, const DescriptorCache& read_cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\r\n```",
      "commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "created_at" : "2023-03-07T14:45:05Z",
      "diff_hunk" : "@@ -39,5 +40,146 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n }\n \n+BOOST_AUTO_TEST_CASE(Legacy_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    LegacyScriptPubKeyMan& spkm = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Start off empty\n+    BOOST_CHECK(spkm.GetScriptPubKeys().empty());\n+\n+    // Generate 1000 external keys\n+    // (HD wallet change addresses are not pre-generated)\n+    spkm.TopUp();\n+\n+    // 2000 Scripts (P2PK and P2PKH): DEFAULT_KEYPOOL_SIZE * 2\n+    auto scripts1 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 2000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm.IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm.GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm.IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 2000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm.cs_KeyStore);\n+        spkm.MarkReserveKeysAsUsed(10);\n+    }\n+\n+    // Key pool size did not change\n+    auto scripts3 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts3.size() == 2000);\n+\n+    // All keys up to and including that key are removed from pool\n+    int num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 20);\n+\n+    // When user encrypts wallet for the first time,\n+    // all existing keys are removed from pool\n+    spkm.NewKeyPool(); // called by EncryptWallet()->SetupGeneration()\n+    num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 2000);\n+\n+    // 1000 new keys were added\n+    auto scripts4 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts4.size() == 4000);\n+}\n+\n+BOOST_AUTO_TEST_CASE(Descriptor_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+    DescriptorScriptPubKeyMan* spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, /*internal=*/false));\n+\n+    // Start off with 1000 pre-generated keys, 1 script each\n+    auto scripts1 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 1000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm->IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm->GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm->IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 1000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm->cs_desc_man);\n+        WalletDescriptor descriptor = spkm->GetWalletDescriptor();\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts3;\n+        descriptor.descriptor->ExpandFromCache(/*index=*/10, descriptor.cache, scripts3, provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1127978416",
      "id" : 1127978416,
      "line" : 142,
      "node_id" : "PRRC_kwDOABII585DO5Ww",
      "original_commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "original_line" : 142,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/test/scriptpubkeyman_tests.cpp",
      "position" : 111,
      "pull_request_review_id" : 1328671625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127978416/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-07T14:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127978416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/27216/checks?check_run_id=11804958852\r\n```bash\r\nAssertion failed: lock cs_wallet not held in ./wallet/wallet.h:444; locks held:\r\n'cs_KeyStore' in wallet/scriptpubkeyman.cpp:1185 (in thread 'test')\r\n```",
      "created_at" : "2023-03-07T14:46:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#issuecomment-1458300719",
      "id" : 1458300719,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27216",
      "node_id" : "IC_kwDOABII585W6-cv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458300719/reactions"
      },
      "updated_at" : "2023-03-07T14:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458300719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1128006272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128006272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oooh thanks, didn't realize those comments were parsed by anything!",
      "commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "created_at" : "2023-03-07T15:01:49Z",
      "diff_hunk" : "@@ -39,5 +40,146 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n }\n \n+BOOST_AUTO_TEST_CASE(Legacy_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    LegacyScriptPubKeyMan& spkm = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Start off empty\n+    BOOST_CHECK(spkm.GetScriptPubKeys().empty());\n+\n+    // Generate 1000 external keys\n+    // (HD wallet change addresses are not pre-generated)\n+    spkm.TopUp();\n+\n+    // 2000 Scripts (P2PK and P2PKH): DEFAULT_KEYPOOL_SIZE * 2\n+    auto scripts1 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 2000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm.IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm.GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm.IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 2000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm.cs_KeyStore);\n+        spkm.MarkReserveKeysAsUsed(10);\n+    }\n+\n+    // Key pool size did not change\n+    auto scripts3 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts3.size() == 2000);\n+\n+    // All keys up to and including that key are removed from pool\n+    int num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 20);\n+\n+    // When user encrypts wallet for the first time,\n+    // all existing keys are removed from pool\n+    spkm.NewKeyPool(); // called by EncryptWallet()->SetupGeneration()\n+    num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 2000);\n+\n+    // 1000 new keys were added\n+    auto scripts4 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts4.size() == 4000);\n+}\n+\n+BOOST_AUTO_TEST_CASE(Descriptor_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+    DescriptorScriptPubKeyMan* spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, /*internal=*/false));\n+\n+    // Start off with 1000 pre-generated keys, 1 script each\n+    auto scripts1 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 1000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm->IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm->GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm->IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 1000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm->cs_desc_man);\n+        WalletDescriptor descriptor = spkm->GetWalletDescriptor();\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts3;\n+        descriptor.descriptor->ExpandFromCache(/*index=*/10, descriptor.cache, scripts3, provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1128006272",
      "id" : 1128006272,
      "in_reply_to_id" : 1127978416,
      "line" : 142,
      "node_id" : "PRRC_kwDOABII585DPAKA",
      "original_commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "original_line" : 142,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/test/scriptpubkeyman_tests.cpp",
      "position" : 111,
      "pull_request_review_id" : 1328722903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128006272/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-07T15:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128006272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased on master and addressed some nits from follow-up PR https://github.com/bitcoin-core/gui/pull/723",
      "created_at" : "2023-04-05T16:01:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#issuecomment-1497746671",
      "id" : 1497746671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27216",
      "node_id" : "IC_kwDOABII585ZRczv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497746671/reactions"
      },
      "updated_at" : "2023-04-05T16:01:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497746671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1159068107"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1159068107"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "45d565073cab12b6107aae9d08048 nit, remove unnecessary local object while still keeping code readability.\r\n\r\n(Also if we're not sure the element exists or its absence would be a logic error, maybe `s/keys[0]/keys.at(0)` to have bounds checks, as accessing a nonexistent element with `vector#operator[]` is UB).\r\n\r\n```diff\r\n-        CKeyID id = keys[0].GetID();\r\n-        out.pubkeys.emplace(id, keys[0]);\r\n+        out.pubkeys.emplace(/*CKeyID=*/keys[0].GetID(), /*CPubKey=*/keys[0]);\r\n```\r\n",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-05T22:02:48Z",
      "diff_hunk" : "@@ -730,8 +730,11 @@ class PKDescriptor final : public DescriptorImpl\n private:\n     const bool m_xonly;\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider& out) const override\n     {\n+        CKeyID id = keys[0].GetID();\n+        out.pubkeys.emplace(id, keys[0]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1159068107",
      "id" : 1159068107,
      "line" : 736,
      "node_id" : "PRRC_kwDOABII585FFfnL",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 736,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/script/descriptor.cpp",
      "position" : 8,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1159068107/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1159068107",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160257900"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160257900"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/commit/45d565073cab12b6107aae9d08048d5310d752d4 If they are thread-safe, should the `IsKeyActive` member functions be `const`?\r\n\r\n<details><summary>diff</summary><p>\r\n\r\n```diff\r\ndiff --git a/src/wallet/scriptpubkeyman.cpp b/src/wallet/scriptpubkeyman.cpp\r\nindex 9afd2538b0c..87ab7cc034b 100644\r\n--- a/src/wallet/scriptpubkeyman.cpp\r\n+++ b/src/wallet/scriptpubkeyman.cpp\r\n \r\n-bool LegacyScriptPubKeyMan::IsKeyActive(const CScript& script)\r\n+bool LegacyScriptPubKeyMan::IsKeyActive(const CScript& script) const\r\n@@ -2228,7 +2226,7 @@ std::vector<WalletDestination> DescriptorScriptPubKeyMan::MarkUnusedAddresses(co\r\n \r\n-bool DescriptorScriptPubKeyMan::IsKeyActive(const CScript& script)\r\n+bool DescriptorScriptPubKeyMan::IsKeyActive(const CScript& script) const\r\n\r\ndiff --git a/src/wallet/scriptpubkeyman.h b/src/wallet/scriptpubkeyman.h\r\nindex 4b2a6c5b177..aeef722d31f 100644\r\n--- a/src/wallet/scriptpubkeyman.h\r\n+++ b/src/wallet/scriptpubkeyman.h\r\n     /* Determines if address is derived from active key manager */\r\n-    virtual bool IsKeyActive(const CScript& script) { return false; };\r\n+    virtual bool IsKeyActive(const CScript& script) const { return false; };\r\n \r\n@@ -385,7 +385,7 @@ public:\r\n \r\n-    bool IsKeyActive(const CScript& script) override;\r\n+    bool IsKeyActive(const CScript& script) const override;\r\n \r\n@@ -612,7 +612,7 @@ public:\r\n \r\n-    bool IsKeyActive(const CScript& script) override;\r\n+    bool IsKeyActive(const CScript& script) const override;\r\n```\r\n</p></details>\r\n",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T21:04:35Z",
      "diff_hunk" : "@@ -198,6 +198,9 @@ class ScriptPubKeyMan\n      */\n     virtual std::vector<WalletDestination> MarkUnusedAddresses(const CScript& script) { return {}; }\n \n+    /* Determines if address is derived from active key manager */\n+    virtual bool IsKeyActive(const CScript& script) { return false; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160257900",
      "id" : 1160257900,
      "line" : 202,
      "node_id" : "PRRC_kwDOABII585FKCFs",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 202,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : 5,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160257900/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160257900",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160261941"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160261941"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/commit/45d565073cab12b6107aae9d08048d5310d752d4\r\n\r\n- add missing conditional brackets (see developer notes)\r\n- avoid unneeded `const CKeyMetadata& meta` overhead in the loop, or...\r\n\r\n```diff\r\n     LOCK(cs_KeyStore);\r\n-\r\n-    // Not in the keystore at all\r\n-    if (!IsMine(script)) return false;\r\n+    if (!IsMine(script)) return false; // not in the keystore at all\r\n \r\n     for (const auto& key_id : GetAffectedKeys(script, *this)) {\r\n-        auto it = mapKeyMetadata.find(key_id);\r\n+        const auto it{mapKeyMetadata.find(key_id)};\r\n         if (it == mapKeyMetadata.end()) {\r\n             // This key must be really old\r\n             return false;\r\n         }\r\n-        const CKeyMetadata& meta = it->second;\r\n-        if (m_hd_chain.seed_id == meta.hd_seed_id)\r\n+        if (m_hd_chain.seed_id == it->second.hd_seed_id) {\r\n             return true;\r\n+        }\r\n     }\r\n```\r\n\r\n...or alternately, do we need a null check here?\r\n\r\n```diff\r\n         const CKeyMetadata& meta = it->second;\r\n-        if (m_hd_chain.seed_id == meta.hd_seed_id)\r\n+        if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id == m_hd_chain.seed_id) {\r\n```\r\n",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T21:10:54Z",
      "diff_hunk" : "@@ -392,6 +392,28 @@ std::vector<WalletDestination> LegacyScriptPubKeyMan::MarkUnusedAddresses(const\n     return result;\n }\n \n+bool LegacyScriptPubKeyMan::IsKeyActive(const CScript& script)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    // Not in the keystore at all\n+    if (!IsMine(script)) return false;\n+\n+    for (const auto& key_id : GetAffectedKeys(script, *this)) {\n+        auto it = mapKeyMetadata.find(key_id);\n+        if (it == mapKeyMetadata.end()) {\n+            // This key must be really old\n+            return false;\n+        }\n+        const CKeyMetadata& meta = it->second;\n+        if (m_hd_chain.seed_id == meta.hd_seed_id)\n+            return true;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160261941",
      "id" : 1160261941,
      "line" : 411,
      "node_id" : "PRRC_kwDOABII585FKDE1",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 411,
      "original_position" : 20,
      "original_start_line" : null,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 20,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160261941/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160261941",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160272170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160272170"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "81f29f03a607cbfb7162705 I'm not sure if or when legacy wallet support is expected to be phased out, but if isactive is only different from ismine in legacy wallets, is it worth adding a field (and all the new methods), versus just updating the ismine field documentation in the help for descriptor wallets? (When I'm double-checking an address with getaddressinfo before using it to receive, ismine is a field I'm already checking.)\r\n\r\nOtherwise, it might be handy for cli users to order isactive just after ismine, and in general group the \"is\" type of fields together in the RPC help and output, i.e. an order along the lines of ismine, isactive, iswatchonly, iswitness, isscript.",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T21:27:06Z",
      "diff_hunk" : "@@ -602,6 +603,7 @@ RPCHelpMan getaddressinfo()\n     ret.pushKVs(detail);\n \n     ret.pushKV(\"ischange\", ScriptIsChange(*pwallet, scriptPubKey));\n+    ret.pushKV(\"isactive\", pwallet->IsDestinationActive(dest));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160272170",
      "id" : 1160272170,
      "line" : 606,
      "node_id" : "PRRC_kwDOABII585FKFkq",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 606,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : 14,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160272170/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:24:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160272170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160291829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160291829"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "in general can use `BOOST_CHECK_EQUAL` for equality checks, if you prefer\r\n```suggestion\r\n    BOOST_CHECK_EQUAL(scripts1.size(), 84);\r\n```",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T22:01:28Z",
      "diff_hunk" : "@@ -39,5 +40,159 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n }\n \n+BOOST_AUTO_TEST_CASE(Legacy_IsKeyActive)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetMinVersion(FEATURE_LATEST);\n+        wallet.m_keypool_size = 10;\n+    }\n+    LegacyScriptPubKeyMan& spkm = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Start off empty\n+    BOOST_CHECK(spkm.GetScriptPubKeys().empty());\n+\n+    // Generate 20 keypool keys (10 internal, 10 external)\n+    {\n+        LOCK(wallet.cs_wallet);\n+        spkm.SetupGeneration();\n+    }\n+\n+    // 4 scripts per keypool key (P2PK, P2PKH, P2WPKH, P2SH-P2WPKH)\n+    // Plus 4 scripts for the seed key\n+    auto scripts1 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 84);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160291829",
      "id" : 1160291829,
      "line" : 65,
      "node_id" : "PRRC_kwDOABII585FKKX1",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 65,
      "original_position" : 34,
      "original_start_line" : null,
      "path" : "src/wallet/test/scriptpubkeyman_tests.cpp",
      "position" : 34,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160291829/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160291829",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160298313"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160298313"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "81f29f03a607cbfb7162705 conditional brackets and prefix increment operator per developer notes, drop unneeded localvar\r\n\r\n```diff\r\n-        WitnessV0ScriptHash scripthash(script);\r\n-        if (!wallet.IsDestinationActive(scripthash))\r\n-            num_script_keys_not_found++;\r\n+        if (!wallet.IsDestinationActive(WitnessV0ScriptHash(script))) {\r\n+            ++num_script_keys_not_found;\r\n+        }\r\n```\r\n",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T22:13:19Z",
      "diff_hunk" : "@@ -39,5 +40,159 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n }\n \n+BOOST_AUTO_TEST_CASE(Legacy_IsKeyActive)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetMinVersion(FEATURE_LATEST);\n+        wallet.m_keypool_size = 10;\n+    }\n+    LegacyScriptPubKeyMan& spkm = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Start off empty\n+    BOOST_CHECK(spkm.GetScriptPubKeys().empty());\n+\n+    // Generate 20 keypool keys (10 internal, 10 external)\n+    {\n+        LOCK(wallet.cs_wallet);\n+        spkm.SetupGeneration();\n+    }\n+\n+    // 4 scripts per keypool key (P2PK, P2PKH, P2WPKH, P2SH-P2WPKH)\n+    // Plus 4 scripts for the seed key\n+    auto scripts1 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 84);\n+\n+    // All keys are active\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm.IsKeyActive(script));\n+    }\n+\n+    // Requesting single from spkm should not deactivate key\n+    CTxDestination dest1;\n+    {\n+        LOCK(wallet.cs_wallet);\n+        auto result = spkm.GetNewDestination(OutputType::BECH32);\n+        dest1 = result.value();\n+    }\n+    CScript script = GetScriptForDestination(dest1);\n+    BOOST_CHECK(spkm.IsKeyActive(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 84);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(wallet.cs_wallet);\n+        LOCK(spkm.cs_KeyStore);\n+        auto keys = spkm.MarkReserveKeysAsUsed(5);\n+        BOOST_CHECK(keys.size() == 4); // Because we already used one with GetNewDestination\n+    }\n+\n+    // Key pool size did not change\n+    auto scripts3 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts3.size() == 84);\n+\n+    // All keys are still active\n+    for (const CScript& script : scripts3) {\n+        BOOST_CHECK(spkm.IsKeyActive(script));\n+    }\n+\n+    // When user encrypts wallet for the first time,\n+    // all existing keys are removed from active keypool\n+    {\n+        LOCK(wallet.cs_wallet);\n+        // called by EncryptWallet()\n+        spkm.SetupGeneration(true);\n+    }\n+\n+    // 20 new keys were added\n+    auto scripts4 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts4.size() == 84 * 2);\n+\n+    // All 10 original keys are now inactive\n+    for (const CScript& script : scripts3) {\n+        BOOST_CHECK(!spkm.IsKeyActive(script));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(Descriptor_IsKeyActive)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.LoadMinVersion(FEATURE_LATEST);\n+        wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+        wallet.m_keypool_size = 10;\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+    DescriptorScriptPubKeyMan* spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, /*internal=*/false));\n+\n+    // Start off with 10 pre-generated keys, 1 script each\n+    auto scripts1 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 10);\n+\n+    // All keys are active\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm->IsKeyActive(script));\n+    }\n+\n+    // Requesting single key from spkm should not deactivate key\n+    auto dest1 = spkm->GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(spkm->IsKeyActive(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 10);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm->cs_desc_man);\n+        WalletDescriptor descriptor = spkm->GetWalletDescriptor();\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts3;\n+        descriptor.descriptor->ExpandFromCache(/*pos=*/5, descriptor.cache, scripts3, provider);\n+\n+        BOOST_CHECK(scripts3.size() == 1);\n+        spkm->MarkUnusedAddresses(scripts3.front());\n+    }\n+\n+    // Key pool size increased to replace used keys\n+    auto scripts4 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts4.size() == 16);\n+\n+    // All keys are still active\n+    for (const CScript& script : scripts4) {\n+        BOOST_CHECK(spkm->IsKeyActive(script));\n+    }\n+\n+    // When user encrypts wallet for the first time,\n+    // all existing keys are removed from active keypool\n+    {\n+        LOCK(wallet.cs_wallet);\n+        // called by EncryptWallet()\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+\n+    // This SPKM is not affected\n+    for (const CScript& script : scripts4) {\n+        BOOST_CHECK(spkm->IsKeyActive(script));\n+    }\n+\n+    // ...but at the wallet level all the keys from that SPKM are deactivated\n+    int num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts4) {\n+        WitnessV0ScriptHash scripthash(script);\n+        if (!wallet.IsDestinationActive(scripthash))\n+            num_script_keys_not_found++;\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160298313",
      "id" : 1160298313,
      "line" : 193,
      "node_id" : "PRRC_kwDOABII585FKL9J",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 193,
      "original_position" : 162,
      "original_start_line" : null,
      "path" : "src/wallet/test/scriptpubkeyman_tests.cpp",
      "position" : 162,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160298313/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160298313",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160313284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160313284"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/commit/81f29f03a607cbfb7162705c1c1618ca7b59640e \r\n\r\n- avoid copy\r\n\r\n```suggestion\r\n    const CScript& script{GetScriptForDestination(dest)};\r\n```\r\n\r\n- remove extra newline, and another implementation for the fun of it\r\n\r\n```diff\r\n bool CWallet::IsDestinationActive(const CTxDestination& dest) const\r\n {\r\n-    CScript script = GetScriptForDestination(dest);\r\n-    for (const auto& spk_man : GetActiveScriptPubKeyMans()) {\r\n-        if (spk_man->IsKeyActive(script)) return true;\r\n-    }\r\n-    return false;\r\n+    const CScript& script{GetScriptForDestination(dest)};\r\n+    const std::set<ScriptPubKeyMan*>& spkms{GetActiveScriptPubKeyMans()};\r\n+    return std::any_of(spkms.cbegin(), spkms.cend(), [&script](const auto& spkm) { return spkm->IsKeyActive(script); });\r\n }\r\n-\r\n\r\n```\r\n",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T22:41:50Z",
      "diff_hunk" : "@@ -2557,6 +2557,16 @@ void CWallet::ForEachAddrBookEntry(const ListAddrBookFunc& func) const\n     }\n }\n \n+bool CWallet::IsDestinationActive(const CTxDestination& dest) const\n+{\n+    CScript script = GetScriptForDestination(dest);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160313284",
      "id" : 1160313284,
      "line" : 2562,
      "node_id" : "PRRC_kwDOABII585FKPnE",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 2562,
      "original_position" : 6,
      "original_start_line" : null,
      "path" : "src/wallet/wallet.cpp",
      "position" : 6,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160313284/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160313284",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160327631"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160327631"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/bitcoin/bitcoin/commit/81f29f03a607cbfb7162705c1c1618ca7b59640e style nit, either omit the `== False` and the 3 `== True` above, or use `assert_equal`",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T23:16:11Z",
      "diff_hunk" : "@@ -4,32 +4,107 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n+import os\n+import re\n import time\n from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n+from test_framework.descriptors import descsum_create\n+\n+TEST_KEYPOOL_SIZE = 10\n+TEST_NEW_KEYPOOL_SIZE = TEST_KEYPOOL_SIZE + 2\n \n class KeyPoolTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         self.add_wallet_options(parser)\n \n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [[f\"-keypool={TEST_KEYPOOL_SIZE}\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n         nodes = self.nodes\n+\n+        # Derive addresses from the wallet without removing them from keypool\n+        addrs = []\n+        if not self.options.descriptors:\n+            path = os.path.join(self.nodes[0].datadir, 'wallet.dump')\n+            nodes[0].dumpwallet(path)\n+            file = open(path, \"r\", encoding=\"utf8\")\n+            m = re.search(r\"masterkey: (\\w+)\", file.read())\n+            file.close()\n+            xpriv = m.group(1)\n+            desc = descsum_create(f\"wpkh({xpriv}/0h/0h/*h)\")\n+            addrs = nodes[0].deriveaddresses(desc, [0, 9])\n+        else:\n+            list_descriptors = nodes[0].listdescriptors()\n+            for desc in list_descriptors[\"descriptors\"]:\n+                if desc['active'] and not desc[\"internal\"] and desc[\"desc\"][:4] == \"wpkh\":\n+                    addrs = nodes[0].deriveaddresses(desc[\"desc\"], [0, 9])\n+\n+        addr0 = addrs[0]\n+        addr9 = addrs[9] # arbitrary future address index\n+\n+        # Address is active before it is removed from keypool by getnewaddress\n+        addr0_before_getting_data = nodes[0].getaddressinfo(addr0)\n+        assert addr0_before_getting_data['isactive'] == True\n+\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n+        assert addr0 == addr_before_encrypting\n+        # Address is still active even after being removed from keypool\n+        assert addr_before_encrypting_data['isactive'] == True\n+\n         wallet_info_old = nodes[0].getwalletinfo()\n         if not self.options.descriptors:\n             assert addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid']\n \n+        # Address is active before wallet is encrypted (resetting keypool)\n+        addr9_before_encrypting_data = nodes[0].getaddressinfo(addr9)\n+        assert addr9_before_encrypting_data['isactive'] == True\n+\n+        # Imported things are never considered active, no need to rescan\n+        if self.options.descriptors:\n+            nodes[0].importdescriptors([{\n+                \"desc\": \"addr(bcrt1q95gp4zeaah3qcerh35yhw02qeptlzasdtst55v)\",\n+                \"timestamp\": \"now\"\n+            }])\n+        else:\n+            nodes[0].importaddress(\"bcrt1q95gp4zeaah3qcerh35yhw02qeptlzasdtst55v\", \"label\", False)\n+        import_addr_data = nodes[0].getaddressinfo(\"bcrt1q95gp4zeaah3qcerh35yhw02qeptlzasdtst55v\")\n+        assert not import_addr_data[\"ismine\"]\n+        assert import_addr_data[\"iswatchonly\"] is not self.options.descriptors\n+        assert not import_addr_data[\"isactive\"]\n+\n+        if self.options.descriptors:\n+            nodes[0].importdescriptors([{\n+                \"desc\": \"pk(02f893ca95b0d55b4ce4e72ae94982eb679158cb2ebc120ff62c17fedfd1f0700e)\",\n+                \"timestamp\": \"now\"\n+            }])\n+        else:\n+            nodes[0].importpubkey(\"02f893ca95b0d55b4ce4e72ae94982eb679158cb2ebc120ff62c17fedfd1f0700e\", \"label\", False)\n+        import_pub_data = nodes[0].getaddressinfo(\"bcrt1q4v7a8wn5vqd6fk4026s5gzzxyu7cfzz23n576h\")\n+        assert not import_pub_data[\"ismine\"]\n+        assert import_pub_data[\"iswatchonly\"] is not self.options.descriptors\n+        assert not import_pub_data[\"isactive\"]\n+\n+        nodes[0].importprivkey(\"cPMX7v5CNV1zCphFSq2hnR5rCjzAhA1GsBfD1qrJGdj4QEfu38Qx\", \"label\", False)\n+        import_priv_data = nodes[0].getaddressinfo(\"bcrt1qa985v5d53qqtrfujmzq2zrw3r40j6zz4ns02kj\")\n+        assert import_priv_data[\"ismine\"]\n+        assert not import_priv_data[\"iswatchonly\"]\n+        assert not import_priv_data[\"isactive\"]\n+\n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n+        addr9_after_encrypting_data = nodes[0].getaddressinfo(addr9)\n+        # Key is from unencrypted seed, no longer considered active\n+        assert addr9_after_encrypting_data['isactive'] == False",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160327631",
      "id" : 1160327631,
      "line" : 106,
      "node_id" : "PRRC_kwDOABII585FKTHP",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 106,
      "original_position" : 103,
      "original_start_line" : null,
      "path" : "test/functional/wallet_keypool.py",
      "position" : 103,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160327631/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160327631",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160329162"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160329162"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Might be good to explain this \"or will be\" change.",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-06T23:20:18Z",
      "diff_hunk" : "@@ -506,7 +506,8 @@ RPCHelpMan getaddressinfo()\n                         {RPCResult::Type::STR, \"desc\", /*optional=*/true, \"A descriptor for spending coins sent to this address (only when solvable).\"},\n                         {RPCResult::Type::STR, \"parent_desc\", /*optional=*/true, \"The descriptor used to derive this address if this is a descriptor wallet\"},\n                         {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script.\"},\n-                        {RPCResult::Type::BOOL, \"ischange\", \"If the address was used for change output.\"},\n+                        {RPCResult::Type::BOOL, \"ischange\", \"If the address was or will be used for change output.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1160329162",
      "id" : 1160329162,
      "line" : 509,
      "node_id" : "PRRC_kwDOABII585FKTfK",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 509,
      "original_position" : 5,
      "original_start_line" : null,
      "path" : "src/wallet/rpc/addresses.cpp",
      "position" : 5,
      "pull_request_review_id" : 1373758349,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160329162/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-06T23:23:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1160329162",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1161121018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1161121018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The style here matches the neighboring descriptors but I see your point about using `.at(0)` -- do you think all the `descriptor::MakeScripts()` should be cleaned up like this?\r\n\r\nAlso this chunk is the patch alluded to in the comment\r\n> This PR also patches PKDescriptor from https://github.com/bitcoin/bitcoin/pull/22051 where matching public keys were not returned.\r\n\r\nWhen we expand a bare pubkey descriptor we weren't populating `out.pubkeys` and so `GetAffectedKeys()` wouldn't return anything",
      "commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "created_at" : "2023-04-08T14:48:38Z",
      "diff_hunk" : "@@ -730,8 +730,11 @@ class PKDescriptor final : public DescriptorImpl\n private:\n     const bool m_xonly;\n protected:\n-    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider&) const override\n+    std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, Span<const CScript>, FlatSigningProvider& out) const override\n     {\n+        CKeyID id = keys[0].GetID();\n+        out.pubkeys.emplace(id, keys[0]);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1161121018",
      "id" : 1161121018,
      "in_reply_to_id" : 1159068107,
      "line" : 736,
      "node_id" : "PRRC_kwDOABII585FNUz6",
      "original_commit_id" : "81f29f03a607cbfb7162705c1c1618ca7b59640e",
      "original_line" : 736,
      "original_position" : 8,
      "original_start_line" : null,
      "path" : "src/script/descriptor.cpp",
      "position" : 8,
      "pull_request_review_id" : 1376771630,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1161121018/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-04-08T14:48:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1161121018",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   }
]
