[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#20892](https://github.com/bitcoin/bitcoin/pull/20892) (tests: Run both descriptor and legacy tests within a single test invocation by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-03-06T21:37:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#issuecomment-1457038403",
      "id" : 1457038403,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27216",
      "node_id" : "IC_kwDOABII585W2KRD",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457038403/reactions"
      },
      "updated_at" : "2023-03-10T04:03:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457038403",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1127978416"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127978416"
         }
      },
      "author_association" : "MEMBER",
      "body" : "https://cirrus-ci.com/task/6502838134636544:\r\n```bash\r\nwallet/test/scriptpubkeyman_tests.cpp:142:48: error: argument name 'index' in comment does not match parameter name 'pos' [bugprone-argument-comment,-warnings-as-errors]\r\n        descriptor.descriptor->ExpandFromCache(/*index=*/10, descriptor.cache, scripts3, provider);\r\n                                               ^\r\n./script/descriptor.h:137:38: note: 'pos' declared here\r\n    virtual bool ExpandFromCache(int pos, const DescriptorCache& read_cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\r\n```",
      "commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "created_at" : "2023-03-07T14:45:05Z",
      "diff_hunk" : "@@ -39,5 +40,146 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n }\n \n+BOOST_AUTO_TEST_CASE(Legacy_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    LegacyScriptPubKeyMan& spkm = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Start off empty\n+    BOOST_CHECK(spkm.GetScriptPubKeys().empty());\n+\n+    // Generate 1000 external keys\n+    // (HD wallet change addresses are not pre-generated)\n+    spkm.TopUp();\n+\n+    // 2000 Scripts (P2PK and P2PKH): DEFAULT_KEYPOOL_SIZE * 2\n+    auto scripts1 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 2000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm.IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm.GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm.IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 2000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm.cs_KeyStore);\n+        spkm.MarkReserveKeysAsUsed(10);\n+    }\n+\n+    // Key pool size did not change\n+    auto scripts3 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts3.size() == 2000);\n+\n+    // All keys up to and including that key are removed from pool\n+    int num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 20);\n+\n+    // When user encrypts wallet for the first time,\n+    // all existing keys are removed from pool\n+    spkm.NewKeyPool(); // called by EncryptWallet()->SetupGeneration()\n+    num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 2000);\n+\n+    // 1000 new keys were added\n+    auto scripts4 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts4.size() == 4000);\n+}\n+\n+BOOST_AUTO_TEST_CASE(Descriptor_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+    DescriptorScriptPubKeyMan* spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, /*internal=*/false));\n+\n+    // Start off with 1000 pre-generated keys, 1 script each\n+    auto scripts1 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 1000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm->IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm->GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm->IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 1000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm->cs_desc_man);\n+        WalletDescriptor descriptor = spkm->GetWalletDescriptor();\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts3;\n+        descriptor.descriptor->ExpandFromCache(/*index=*/10, descriptor.cache, scripts3, provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1127978416",
      "id" : 1127978416,
      "line" : 142,
      "node_id" : "PRRC_kwDOABII585DO5Ww",
      "original_commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "original_line" : 142,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/test/scriptpubkeyman_tests.cpp",
      "position" : 111,
      "pull_request_review_id" : 1328671625,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127978416/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-07T14:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1127978416",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "https://github.com/bitcoin/bitcoin/pull/27216/checks?check_run_id=11804958852\r\n```bash\r\nAssertion failed: lock cs_wallet not held in ./wallet/wallet.h:444; locks held:\r\n'cs_KeyStore' in wallet/scriptpubkeyman.cpp:1185 (in thread 'test')\r\n```",
      "created_at" : "2023-03-07T14:46:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#issuecomment-1458300719",
      "id" : 1458300719,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27216",
      "node_id" : "IC_kwDOABII585W6-cv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458300719/reactions"
      },
      "updated_at" : "2023-03-07T14:46:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458300719",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1128006272"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128006272"
         }
      },
      "author_association" : "MEMBER",
      "body" : "oooh thanks, didn't realize those comments were parsed by anything!",
      "commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "created_at" : "2023-03-07T15:01:49Z",
      "diff_hunk" : "@@ -39,5 +40,146 @@ BOOST_AUTO_TEST_CASE(CanProvide)\n     BOOST_CHECK(keyman.CanProvide(p2sh_script, data));\n }\n \n+BOOST_AUTO_TEST_CASE(Legacy_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    LegacyScriptPubKeyMan& spkm = *wallet.GetOrCreateLegacyScriptPubKeyMan();\n+\n+    // Start off empty\n+    BOOST_CHECK(spkm.GetScriptPubKeys().empty());\n+\n+    // Generate 1000 external keys\n+    // (HD wallet change addresses are not pre-generated)\n+    spkm.TopUp();\n+\n+    // 2000 Scripts (P2PK and P2PKH): DEFAULT_KEYPOOL_SIZE * 2\n+    auto scripts1 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 2000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm.IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm.GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm.IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 2000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm.cs_KeyStore);\n+        spkm.MarkReserveKeysAsUsed(10);\n+    }\n+\n+    // Key pool size did not change\n+    auto scripts3 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts3.size() == 2000);\n+\n+    // All keys up to and including that key are removed from pool\n+    int num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 20);\n+\n+    // When user encrypts wallet for the first time,\n+    // all existing keys are removed from pool\n+    spkm.NewKeyPool(); // called by EncryptWallet()->SetupGeneration()\n+    num_script_keys_not_found = 0;\n+    for (const CScript& script : scripts3) {\n+        if (!spkm.IsKeyInKeypool(script))\n+            num_script_keys_not_found++;\n+    }\n+    BOOST_CHECK(num_script_keys_not_found == 2000);\n+\n+    // 1000 new keys were added\n+    auto scripts4 = spkm.GetScriptPubKeys();\n+    BOOST_CHECK(scripts4.size() == 4000);\n+}\n+\n+BOOST_AUTO_TEST_CASE(Descriptor_isKeyInPool)\n+{\n+    CWallet wallet(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n+    wallet.SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n+    {\n+        LOCK(wallet.cs_wallet);\n+        wallet.SetupDescriptorScriptPubKeyMans();\n+    }\n+    DescriptorScriptPubKeyMan* spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(wallet.GetScriptPubKeyMan(OutputType::BECH32, /*internal=*/false));\n+\n+    // Start off with 1000 pre-generated keys, 1 script each\n+    auto scripts1 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts1.size() == 1000);\n+\n+    // All 1000 keys are in keypool\n+    for (const CScript& script : scripts1) {\n+        BOOST_CHECK(spkm->IsKeyInKeypool(script));\n+    }\n+\n+    // Requesting single key from spkm should remove that key from pool\n+    auto dest1 = spkm->GetNewDestination(OutputType::BECH32);\n+    CScript script = GetScriptForDestination(dest1.value());\n+    BOOST_CHECK(!spkm->IsKeyInKeypool(script));\n+\n+    // Key pool size did not change\n+    auto scripts2 = spkm->GetScriptPubKeys();\n+    BOOST_CHECK(scripts2.size() == 1000);\n+\n+    // Use key that is not the next key\n+    // (i.e. address gap in wallet recovery)\n+    {\n+        LOCK(spkm->cs_desc_man);\n+        WalletDescriptor descriptor = spkm->GetWalletDescriptor();\n+        FlatSigningProvider provider;\n+        std::vector<CScript> scripts3;\n+        descriptor.descriptor->ExpandFromCache(/*index=*/10, descriptor.cache, scripts3, provider);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#discussion_r1128006272",
      "id" : 1128006272,
      "in_reply_to_id" : 1127978416,
      "line" : 142,
      "node_id" : "PRRC_kwDOABII585DPAKA",
      "original_commit_id" : "63f1d1e56a7a90160c9610a68b990ff27d3dc451",
      "original_line" : 142,
      "original_position" : 111,
      "original_start_line" : null,
      "path" : "src/wallet/test/scriptpubkeyman_tests.cpp",
      "position" : 111,
      "pull_request_review_id" : 1328722903,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27216",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128006272/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "updated_at" : "2023-03-07T15:01:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1128006272",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "rebased on master and addressed some nits from follow-up PR https://github.com/bitcoin-core/gui/pull/723",
      "created_at" : "2023-04-05T16:01:20Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27216#issuecomment-1497746671",
      "id" : 1497746671,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27216",
      "node_id" : "IC_kwDOABII585ZRczv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497746671/reactions"
      },
      "updated_at" : "2023-04-05T16:01:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497746671",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2084648?v=4",
         "events_url" : "https://api.github.com/users/pinheadmz/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pinheadmz/followers",
         "following_url" : "https://api.github.com/users/pinheadmz/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pinheadmz/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pinheadmz",
         "id" : 2084648,
         "login" : "pinheadmz",
         "node_id" : "MDQ6VXNlcjIwODQ2NDg=",
         "organizations_url" : "https://api.github.com/users/pinheadmz/orgs",
         "received_events_url" : "https://api.github.com/users/pinheadmz/received_events",
         "repos_url" : "https://api.github.com/users/pinheadmz/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pinheadmz/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pinheadmz/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pinheadmz"
      }
   }
]
