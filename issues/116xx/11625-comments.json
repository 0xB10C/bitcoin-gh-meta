[
   {
      "author_association" : "MEMBER",
      "body" : "Travis failures:\r\n```\r\nIn file included from /usr/include/qt4/QtGui/QLineEdit:1:0,\r\n                 from qt/test/apptests.cpp:20:\r\n/usr/include/qt4/QtGui/qlineedit.h: In function Ã¢ÂÂvoid {anonymous}::TestRpcCommand(RPCConsole*)Ã¢ÂÂ:\r\n/usr/include/qt4/QtGui/qlineedit.h:198:10: error: Ã¢ÂÂvoid QLineEdit::returnPressed()Ã¢ÂÂ is protected\r\n     void returnPressed();\r\n          ^\r\nqt/test/apptests.cpp:34:29: error: within this context\r\n     lineEdit->returnPressed();\r\n                             ^\r\nmake[2]: *** [qt/test/qt_test_test_bitcoin_qt-apptests.o] Error 1\r\n```\r\n```\r\nFAIL: qt/test/test_bitcoin-qt\r\n=============================\r\n********* Start testing of AppTests *********\r\nConfig: Using QtTest library 5.7.1, Qt 5.7.1 (x86_64-little_endian-lp64 static release build; by GCC 4.8.4)\r\nPASS   : AppTests::initTestCase()\r\nQWARN  : AppTests::appTests() Backing up GUI settings to \"/tmp/test_bitcoin-qt_1510018491_71945/regtest/guisettings.ini.bak\"\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQWARN  : AppTests::appTests() QFont::setPointSizeF: Point size <= 0 (-1.000000), must be greater than 0\r\nQDEBUG : AppTests::appTests() requestInitialize : Requesting initialize\r\nQDEBUG : AppTests::appTests() initialize : Running initialization in thread\r\nQDEBUG : AppTests::appTests() initializeResult : Initialization result:  true\r\nQWARN  : AppTests::appTests() Platform customization: \"other\"\r\n========= Received signal, dumping stack ==============\r\n========= End of stack trace ==============\r\nQFATAL : AppTests::appTests() Received signal 11\r\n         Function time: 267ms Total time: 272ms\r\nFAIL!  : AppTests::appTests() Received a fatal error.\r\n   Loc: [Unknown file(0)]\r\nTotals: 1 passed, 1 failed, 0 skipped, 0 blacklisted, 284ms\r\n********* Finished testing of AppTests *********\r\n```",
      "created_at" : "2017-11-07T01:49:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-342349306",
      "id" : 342349306,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11625",
      "updated_at" : "2017-11-07T01:49:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/342349306",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Cool, will review.",
      "created_at" : "2017-11-07T13:46:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#issuecomment-342486574",
      "id" : 342486574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/11625",
      "updated_at" : "2017-11-07T13:46:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/342486574",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149379211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149379211"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```cpp\r\nbitdb.Close();\r\nbitdb.Reset();\r\n```",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T14:19:15Z",
      "diff_hunk" : "@@ -0,0 +1,92 @@\n+#include \"apptests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"init.h\"\n+#include \"qt/bitcoin.h\"\n+#include \"qt/bitcoingui.h\"\n+#include \"qt/networkstyle.h\"\n+#include \"qt/rpcconsole.h\"\n+#include \"validation.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+#ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n+#endif\n+\n+#include <QAction>\n+#include <QEventLoop>\n+#include <QLineEdit>\n+#include <QScopedPointer>\n+#include <QTest>\n+#include <QTextEdit>\n+#include <new>\n+#include <string>\n+#include <univalue.h>\n+\n+namespace {\n+//! Call getblockchaininfo RPC and check first field of JSON output.\n+void TestRpcCommand(RPCConsole* console)\n+{\n+    QLineEdit* lineEdit = console->findChild<QLineEdit*>(\"lineEdit\");\n+    lineEdit->setText(\"getblockchaininfo\");\n+    lineEdit->returnPressed();\n+    QEventLoop loop;\n+    QTextEdit* messagesWidget = console->findChild<QTextEdit*>(\"messagesWidget\");\n+    QObject::connect(messagesWidget, SIGNAL(textChanged()), &loop, SLOT(quit()));\n+    loop.exec();\n+    QString output = messagesWidget->toPlainText();\n+    UniValue value;\n+    value.read(output.right(output.size() - output.lastIndexOf(u8\"\\uFFFC\") - 1).toStdString());\n+    QCOMPARE(value[\"chain\"].get_str(), std::string(\"regtest\"));\n+}\n+}\n+\n+//! Entry point for BitcoinApplication tests.\n+void AppTests::appTests()\n+{\n+    m_app.parameterSetup();\n+    m_app.createOptionsModel(true /* reset settings */);\n+    QScopedPointer<const NetworkStyle> style(\n+        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    m_app.createWindow(style.data());\n+    BitcoinCore::baseInitialize();\n+    expectCallback(); // windowShown\n+    connect(&m_app, SIGNAL(windowShown(BitcoinGUI*)), this, SLOT(guiTests(BitcoinGUI*)));\n+    m_app.requestInitialize();\n+    m_app.exec();\n+\n+    // Reset some global state to avoid interfering with later tests.\n+    ResetShutdownRequested();\n+#ifdef ENABLE_WALLET\n+    ::bitdb.~CDBEnv();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149379211",
      "id" : 149379211,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 63,
      "path" : "src/qt/test/apptests.cpp",
      "position" : null,
      "pull_request_review_id" : 74761614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:02:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149379211",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149392737"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149392737"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "How about storing the name? Is this supposed to be stack like?",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T14:59:16Z",
      "diff_hunk" : "@@ -0,0 +1,92 @@\n+#include \"apptests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"init.h\"\n+#include \"qt/bitcoin.h\"\n+#include \"qt/bitcoingui.h\"\n+#include \"qt/networkstyle.h\"\n+#include \"qt/rpcconsole.h\"\n+#include \"validation.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+#ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n+#endif\n+\n+#include <QAction>\n+#include <QEventLoop>\n+#include <QLineEdit>\n+#include <QScopedPointer>\n+#include <QTest>\n+#include <QTextEdit>\n+#include <new>\n+#include <string>\n+#include <univalue.h>\n+\n+namespace {\n+//! Call getblockchaininfo RPC and check first field of JSON output.\n+void TestRpcCommand(RPCConsole* console)\n+{\n+    QLineEdit* lineEdit = console->findChild<QLineEdit*>(\"lineEdit\");\n+    lineEdit->setText(\"getblockchaininfo\");\n+    lineEdit->returnPressed();\n+    QEventLoop loop;\n+    QTextEdit* messagesWidget = console->findChild<QTextEdit*>(\"messagesWidget\");\n+    QObject::connect(messagesWidget, SIGNAL(textChanged()), &loop, SLOT(quit()));\n+    loop.exec();\n+    QString output = messagesWidget->toPlainText();\n+    UniValue value;\n+    value.read(output.right(output.size() - output.lastIndexOf(u8\"\\uFFFC\") - 1).toStdString());\n+    QCOMPARE(value[\"chain\"].get_str(), std::string(\"regtest\"));\n+}\n+}\n+\n+//! Entry point for BitcoinApplication tests.\n+void AppTests::appTests()\n+{\n+    m_app.parameterSetup();\n+    m_app.createOptionsModel(true /* reset settings */);\n+    QScopedPointer<const NetworkStyle> style(\n+        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    m_app.createWindow(style.data());\n+    BitcoinCore::baseInitialize();\n+    expectCallback(); // windowShown\n+    connect(&m_app, SIGNAL(windowShown(BitcoinGUI*)), this, SLOT(guiTests(BitcoinGUI*)));\n+    m_app.requestInitialize();\n+    m_app.exec();\n+\n+    // Reset some global state to avoid interfering with later tests.\n+    ResetShutdownRequested();\n+#ifdef ENABLE_WALLET\n+    ::bitdb.~CDBEnv();\n+    new (&::bitdb) CDBEnv;\n+#endif\n+    UnloadBlockIndex();\n+}\n+\n+//! Entry point for BitcoinGUI tests.\n+void AppTests::guiTests(BitcoinGUI* window)\n+{\n+    HandleCallback windowShown{*this};\n+    expectCallback(); // consoleShown",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149392737",
      "id" : 149392737,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 73,
      "path" : "src/qt/test/apptests.cpp",
      "position" : 81,
      "pull_request_review_id" : 74761614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:02:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149392737",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149393582"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149393582"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`QStack<QString> m_callbacks;`. See above.",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T15:01:11Z",
      "diff_hunk" : "@@ -0,0 +1,39 @@\n+#ifndef BITCOIN_QT_TEST_APPTESTS_H\n+#define BITCOIN_QT_TEST_APPTESTS_H\n+\n+#include <QObject>\n+\n+class BitcoinApplication;\n+class BitcoinGUI;\n+class RPCConsole;\n+\n+class AppTests : public QObject\n+{\n+    Q_OBJECT\n+public:\n+    AppTests(BitcoinApplication& app) : m_app(app) {}\n+\n+private Q_SLOTS:\n+    void appTests();\n+    void guiTests(BitcoinGUI* window);\n+    void consoleTests(RPCConsole* console);\n+\n+private:\n+    //! Increment number of pending callbacks.\n+    void expectCallback() { ++m_callbacks; }\n+\n+    //! RAII helper to decrement number of pending callbacks.\n+    struct HandleCallback\n+    {\n+        AppTests& m_app_tests;\n+        ~HandleCallback();\n+    };\n+\n+    //! Bitcoin application.\n+    BitcoinApplication& m_app;\n+\n+    //! Number of expected callbacks pending.\n+    int m_callbacks = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149393582",
      "id" : 149393582,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 36,
      "path" : "src/qt/test/apptests.h",
      "position" : 36,
      "pull_request_review_id" : 74761614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:02:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149393582",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149531077"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> How about storing the name? Is this supposed to be stack like?\r\n\r\nKind of, but it's a pool, not a stack. The idea is just for AppTests to just create a bunch of windows and let appropriate tests run as the windows are created, without having to worry about the order events happen. To track names instead of using a counter, `int m_callbacks` could be replaced with `std::multiset<std::string> m_callbacks`, and `++` `--` replaced by `insert` and `erase`. It seems like this might just be more verbose and error prone without being more readable than current comments, but I could change it if you think it would be better.",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T23:01:55Z",
      "diff_hunk" : "@@ -0,0 +1,92 @@\n+#include \"apptests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"init.h\"\n+#include \"qt/bitcoin.h\"\n+#include \"qt/bitcoingui.h\"\n+#include \"qt/networkstyle.h\"\n+#include \"qt/rpcconsole.h\"\n+#include \"validation.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+#ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n+#endif\n+\n+#include <QAction>\n+#include <QEventLoop>\n+#include <QLineEdit>\n+#include <QScopedPointer>\n+#include <QTest>\n+#include <QTextEdit>\n+#include <new>\n+#include <string>\n+#include <univalue.h>\n+\n+namespace {\n+//! Call getblockchaininfo RPC and check first field of JSON output.\n+void TestRpcCommand(RPCConsole* console)\n+{\n+    QLineEdit* lineEdit = console->findChild<QLineEdit*>(\"lineEdit\");\n+    lineEdit->setText(\"getblockchaininfo\");\n+    lineEdit->returnPressed();\n+    QEventLoop loop;\n+    QTextEdit* messagesWidget = console->findChild<QTextEdit*>(\"messagesWidget\");\n+    QObject::connect(messagesWidget, SIGNAL(textChanged()), &loop, SLOT(quit()));\n+    loop.exec();\n+    QString output = messagesWidget->toPlainText();\n+    UniValue value;\n+    value.read(output.right(output.size() - output.lastIndexOf(u8\"\\uFFFC\") - 1).toStdString());\n+    QCOMPARE(value[\"chain\"].get_str(), std::string(\"regtest\"));\n+}\n+}\n+\n+//! Entry point for BitcoinApplication tests.\n+void AppTests::appTests()\n+{\n+    m_app.parameterSetup();\n+    m_app.createOptionsModel(true /* reset settings */);\n+    QScopedPointer<const NetworkStyle> style(\n+        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    m_app.createWindow(style.data());\n+    BitcoinCore::baseInitialize();\n+    expectCallback(); // windowShown\n+    connect(&m_app, SIGNAL(windowShown(BitcoinGUI*)), this, SLOT(guiTests(BitcoinGUI*)));\n+    m_app.requestInitialize();\n+    m_app.exec();\n+\n+    // Reset some global state to avoid interfering with later tests.\n+    ResetShutdownRequested();\n+#ifdef ENABLE_WALLET\n+    ::bitdb.~CDBEnv();\n+    new (&::bitdb) CDBEnv;\n+#endif\n+    UnloadBlockIndex();\n+}\n+\n+//! Entry point for BitcoinGUI tests.\n+void AppTests::guiTests(BitcoinGUI* window)\n+{\n+    HandleCallback windowShown{*this};\n+    expectCallback(); // consoleShown",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531077",
      "id" : 149531077,
      "in_reply_to_id" : 149392737,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 73,
      "path" : "src/qt/test/apptests.cpp",
      "position" : 81,
      "pull_request_review_id" : 74940332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:25:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149531077",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531095"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149531095"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Responded above, would have to be a multiset instead of a stack.",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T23:02:00Z",
      "diff_hunk" : "@@ -0,0 +1,39 @@\n+#ifndef BITCOIN_QT_TEST_APPTESTS_H\n+#define BITCOIN_QT_TEST_APPTESTS_H\n+\n+#include <QObject>\n+\n+class BitcoinApplication;\n+class BitcoinGUI;\n+class RPCConsole;\n+\n+class AppTests : public QObject\n+{\n+    Q_OBJECT\n+public:\n+    AppTests(BitcoinApplication& app) : m_app(app) {}\n+\n+private Q_SLOTS:\n+    void appTests();\n+    void guiTests(BitcoinGUI* window);\n+    void consoleTests(RPCConsole* console);\n+\n+private:\n+    //! Increment number of pending callbacks.\n+    void expectCallback() { ++m_callbacks; }\n+\n+    //! RAII helper to decrement number of pending callbacks.\n+    struct HandleCallback\n+    {\n+        AppTests& m_app_tests;\n+        ~HandleCallback();\n+    };\n+\n+    //! Bitcoin application.\n+    BitcoinApplication& m_app;\n+\n+    //! Number of expected callbacks pending.\n+    int m_callbacks = 0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531095",
      "id" : 149531095,
      "in_reply_to_id" : 149393582,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 36,
      "path" : "src/qt/test/apptests.h",
      "position" : 36,
      "pull_request_review_id" : 74940332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149531095",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149531172"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks, switched.",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T23:02:24Z",
      "diff_hunk" : "@@ -0,0 +1,92 @@\n+#include \"apptests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"init.h\"\n+#include \"qt/bitcoin.h\"\n+#include \"qt/bitcoingui.h\"\n+#include \"qt/networkstyle.h\"\n+#include \"qt/rpcconsole.h\"\n+#include \"validation.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+#ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n+#endif\n+\n+#include <QAction>\n+#include <QEventLoop>\n+#include <QLineEdit>\n+#include <QScopedPointer>\n+#include <QTest>\n+#include <QTextEdit>\n+#include <new>\n+#include <string>\n+#include <univalue.h>\n+\n+namespace {\n+//! Call getblockchaininfo RPC and check first field of JSON output.\n+void TestRpcCommand(RPCConsole* console)\n+{\n+    QLineEdit* lineEdit = console->findChild<QLineEdit*>(\"lineEdit\");\n+    lineEdit->setText(\"getblockchaininfo\");\n+    lineEdit->returnPressed();\n+    QEventLoop loop;\n+    QTextEdit* messagesWidget = console->findChild<QTextEdit*>(\"messagesWidget\");\n+    QObject::connect(messagesWidget, SIGNAL(textChanged()), &loop, SLOT(quit()));\n+    loop.exec();\n+    QString output = messagesWidget->toPlainText();\n+    UniValue value;\n+    value.read(output.right(output.size() - output.lastIndexOf(u8\"\\uFFFC\") - 1).toStdString());\n+    QCOMPARE(value[\"chain\"].get_str(), std::string(\"regtest\"));\n+}\n+}\n+\n+//! Entry point for BitcoinApplication tests.\n+void AppTests::appTests()\n+{\n+    m_app.parameterSetup();\n+    m_app.createOptionsModel(true /* reset settings */);\n+    QScopedPointer<const NetworkStyle> style(\n+        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    m_app.createWindow(style.data());\n+    BitcoinCore::baseInitialize();\n+    expectCallback(); // windowShown\n+    connect(&m_app, SIGNAL(windowShown(BitcoinGUI*)), this, SLOT(guiTests(BitcoinGUI*)));\n+    m_app.requestInitialize();\n+    m_app.exec();\n+\n+    // Reset some global state to avoid interfering with later tests.\n+    ResetShutdownRequested();\n+#ifdef ENABLE_WALLET\n+    ::bitdb.~CDBEnv();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149531172",
      "id" : 149531172,
      "in_reply_to_id" : 149379211,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 63,
      "path" : "src/qt/test/apptests.cpp",
      "position" : null,
      "pull_request_review_id" : 74940332,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:23:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149531172",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149538105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149538105"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I see 2 advantages over counting:\r\n - the comment is optional but the argument is not;\r\n - better hint if the set is not empty at the end.\r\n\r\nBTW, have you thought using QSignalSpy?",
      "commit_id" : "4bf5ecd0ff2f588ada7d2a4ad3f2c9ef4d3a75b1",
      "created_at" : "2017-11-07T23:39:21Z",
      "diff_hunk" : "@@ -0,0 +1,92 @@\n+#include \"apptests.h\"\n+\n+#include \"chainparams.h\"\n+#include \"init.h\"\n+#include \"qt/bitcoin.h\"\n+#include \"qt/bitcoingui.h\"\n+#include \"qt/networkstyle.h\"\n+#include \"qt/rpcconsole.h\"\n+#include \"validation.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+#ifdef ENABLE_WALLET\n+#include \"wallet/db.h\"\n+#endif\n+\n+#include <QAction>\n+#include <QEventLoop>\n+#include <QLineEdit>\n+#include <QScopedPointer>\n+#include <QTest>\n+#include <QTextEdit>\n+#include <new>\n+#include <string>\n+#include <univalue.h>\n+\n+namespace {\n+//! Call getblockchaininfo RPC and check first field of JSON output.\n+void TestRpcCommand(RPCConsole* console)\n+{\n+    QLineEdit* lineEdit = console->findChild<QLineEdit*>(\"lineEdit\");\n+    lineEdit->setText(\"getblockchaininfo\");\n+    lineEdit->returnPressed();\n+    QEventLoop loop;\n+    QTextEdit* messagesWidget = console->findChild<QTextEdit*>(\"messagesWidget\");\n+    QObject::connect(messagesWidget, SIGNAL(textChanged()), &loop, SLOT(quit()));\n+    loop.exec();\n+    QString output = messagesWidget->toPlainText();\n+    UniValue value;\n+    value.read(output.right(output.size() - output.lastIndexOf(u8\"\\uFFFC\") - 1).toStdString());\n+    QCOMPARE(value[\"chain\"].get_str(), std::string(\"regtest\"));\n+}\n+}\n+\n+//! Entry point for BitcoinApplication tests.\n+void AppTests::appTests()\n+{\n+    m_app.parameterSetup();\n+    m_app.createOptionsModel(true /* reset settings */);\n+    QScopedPointer<const NetworkStyle> style(\n+        NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    m_app.createWindow(style.data());\n+    BitcoinCore::baseInitialize();\n+    expectCallback(); // windowShown\n+    connect(&m_app, SIGNAL(windowShown(BitcoinGUI*)), this, SLOT(guiTests(BitcoinGUI*)));\n+    m_app.requestInitialize();\n+    m_app.exec();\n+\n+    // Reset some global state to avoid interfering with later tests.\n+    ResetShutdownRequested();\n+#ifdef ENABLE_WALLET\n+    ::bitdb.~CDBEnv();\n+    new (&::bitdb) CDBEnv;\n+#endif\n+    UnloadBlockIndex();\n+}\n+\n+//! Entry point for BitcoinGUI tests.\n+void AppTests::guiTests(BitcoinGUI* window)\n+{\n+    HandleCallback windowShown{*this};\n+    expectCallback(); // consoleShown",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/11625#discussion_r149538105",
      "id" : 149538105,
      "in_reply_to_id" : 149392737,
      "original_commit_id" : "5be833cf92cddedd4c52c3e101ec8bc7dbcdafa6",
      "original_position" : 73,
      "path" : "src/qt/test/apptests.cpp",
      "position" : 81,
      "pull_request_review_id" : 74948265,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/11625",
      "updated_at" : "2017-11-07T23:40:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/149538105",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   }
]
