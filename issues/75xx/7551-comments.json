[
   {
      "body" : "Concept ACK",
      "created_at" : "2016-02-17T18:22:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185334798",
      "id" : 185334798,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-17T18:22:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/185334798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53225824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53225824"
         }
      },
      "body" : "@laanwj should we catch specific exceptions to return the error?",
      "commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "created_at" : "2016-02-17T20:24:48Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));\n+\n+    const UniValue& request = params[0];\n+    bool fRescan = params.size() > 1 ? params[1].get_bool() : true;\n+\n+    UniValue response(UniValue::VARR);\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+\n+    bool fRunScan = false;\n+    int64_t nLowestTimestamp = 0;\n+\n+    if (fRescan && chainActive.Tip())\n+        nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n+    else\n+        fRescan = false;\n+\n+\n+    BOOST_FOREACH (const UniValue& data, request.getValues()) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        try {\n+            if (nLowestTimestamp > 0) {\n+                int64_t timestamp = data.exists(\"timestamp\") ? data[\"timestamp\"].get_int64() : 0;\n+\n+                if (timestamp < nLowestTimestamp)\n+                    nLowestTimestamp = timestamp;\n+            }\n+\n+            const string& strType = data[\"type\"].get_str();\n+            const string& strValue = data[\"value\"].get_str();\n+            string strLabel = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+            if (strType == \"privkey\")\n+                ImportPrivateKey(strValue, strLabel);\n+            else if (strType == \"pubkey\")\n+                ImportPublicKey(strValue, strLabel);\n+            else if (strType == \"address\") {\n+                bool fP2SH = data.exists(\"p2sh\") ? data[\"p2sh\"].get_bool() : false;\n+                ImportAddressKey(strValue, strLabel, fP2SH);\n+            } else\n+                throw;\n+\n+            result.pushKV(\"result\", UniValue(true));\n+            fRunScan = true;\n+        } catch (...) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53225824",
      "id" : 53225824,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 272,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 272,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-02-17T20:24:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53225824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53226022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53226022"
         }
      },
      "body" : "Only this line is necessary because RPCTypeCheck doesn't enforce the length. See implementation.",
      "commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "created_at" : "2016-02-17T20:26:18Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53226022",
      "id" : 53226022,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 227,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-02-17T20:26:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53226022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53239448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53239448"
         }
      },
      "body" : "Will fix.",
      "commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "created_at" : "2016-02-17T22:09:45Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53239448",
      "id" : 53239448,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 227,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 227,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-02-17T22:29:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53239448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53243961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53243961"
         }
      },
      "body" : "What about the second argument be a JSON object? Here it would be `{ \"rescan\": true }`. But it could have more options, for instance, one that would rejects addresses with timestamps belonging to pruned blocks.",
      "commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "created_at" : "2016-02-17T22:42:31Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53243961",
      "id" : 53243961,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 194,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 194,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-02-17T22:42:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53243961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53244140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53244140"
         }
      },
      "body" : "I would move up all auxiliary functions (the ones in title case), then the RPC handlers. WDYT?",
      "commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "created_at" : "2016-02-17T22:43:52Z",
      "diff_hunk" : "@@ -72,6 +73,40 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool ImportPrivateKey(const string& strPrivkey, const string& strLabel)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53244140",
      "id" : 53244140,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 12,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 12,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-02-17T22:43:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53244140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "body" : "concept ACK\r\n\r\nI have implemented a method to also simply just import an spv proof + transaction rather than rescan. Would be nice to include that in this as well. (need to add tests and PR...)",
      "created_at" : "2016-02-18T02:39:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185516219",
      "id" : 185516219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-18T02:42:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/185516219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
