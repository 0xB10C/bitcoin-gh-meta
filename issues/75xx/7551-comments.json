[
   {
      "body" : "Concept ACK",
      "created_at" : "2016-02-17T18:22:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185334798",
      "id" : 185334798,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-17T18:22:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/185334798",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53225824"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53225824"
         }
      },
      "body" : "@laanwj should we catch specific exceptions to return the error?",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-17T20:24:48Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));\n+\n+    const UniValue& request = params[0];\n+    bool fRescan = params.size() > 1 ? params[1].get_bool() : true;\n+\n+    UniValue response(UniValue::VARR);\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+\n+    bool fRunScan = false;\n+    int64_t nLowestTimestamp = 0;\n+\n+    if (fRescan && chainActive.Tip())\n+        nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n+    else\n+        fRescan = false;\n+\n+\n+    BOOST_FOREACH (const UniValue& data, request.getValues()) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        try {\n+            if (nLowestTimestamp > 0) {\n+                int64_t timestamp = data.exists(\"timestamp\") ? data[\"timestamp\"].get_int64() : 0;\n+\n+                if (timestamp < nLowestTimestamp)\n+                    nLowestTimestamp = timestamp;\n+            }\n+\n+            const string& strType = data[\"type\"].get_str();\n+            const string& strValue = data[\"value\"].get_str();\n+            string strLabel = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+            if (strType == \"privkey\")\n+                ImportPrivateKey(strValue, strLabel);\n+            else if (strType == \"pubkey\")\n+                ImportPublicKey(strValue, strLabel);\n+            else if (strType == \"address\") {\n+                bool fP2SH = data.exists(\"p2sh\") ? data[\"p2sh\"].get_bool() : false;\n+                ImportAddressKey(strValue, strLabel, fP2SH);\n+            } else\n+                throw;\n+\n+            result.pushKV(\"result\", UniValue(true));\n+            fRunScan = true;\n+        } catch (...) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53225824",
      "id" : 53225824,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 272,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53225824",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53226022"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53226022"
         }
      },
      "body" : "Only this line is necessary because RPCTypeCheck doesn't enforce the length. See implementation.",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-17T20:26:18Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53226022",
      "id" : 53226022,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 227,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53226022",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53239448"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53239448"
         }
      },
      "body" : "Will fix.",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-17T22:09:45Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53239448",
      "id" : 53239448,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 227,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53239448",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53243961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53243961"
         }
      },
      "body" : "What about the second argument be a JSON object? Here it would be `{ \"rescan\": true }`. But it could have more options, for instance, one that would rejects addresses with timestamps belonging to pruned blocks.",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-17T22:42:31Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53243961",
      "id" : 53243961,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 194,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53243961",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53244140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53244140"
         }
      },
      "body" : "I would move up all auxiliary functions (the ones in title case), then the RPC handlers. WDYT?",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-17T22:43:52Z",
      "diff_hunk" : "@@ -72,6 +73,40 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool ImportPrivateKey(const string& strPrivkey, const string& strLabel)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53244140",
      "id" : 53244140,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 12,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 12,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53244140",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "body" : "concept ACK\r\n\r\nI have implemented a method to also simply just import an spv proof + transaction rather than rescan. Would be nice to include that in this as well. (need to add tests and PR...)",
      "created_at" : "2016-02-18T02:39:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185516219",
      "id" : 185516219,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-18T02:42:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/185516219",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "Concept ACK.\r\nIIRC, this would be the first RPC command that accept a associative array parameter list (`json options (json, optional) Options`). IMO this is good but I would prefer a general way of providing key/value parameters for RPC commands (probably out-of-scope for this PR).",
      "created_at" : "2016-02-18T14:33:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-185747197",
      "id" : 185747197,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-18T14:33:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/185747197",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/178464?v=3",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53373673"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53373673"
         }
      },
      "body" : "This is never used?",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-18T20:00:30Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53373673",
      "id" : 53373673,
      "original_commit_id" : "3f2e87ef7d9e3e6c277511610dd3d99855d83e2b",
      "original_position" : 11,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53373673",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53374368"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53374368"
         }
      },
      "body" : "True,  i will remove.",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-18T20:05:36Z",
      "diff_hunk" : "@@ -0,0 +1,143 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53374368",
      "id" : 53374368,
      "original_commit_id" : "3f2e87ef7d9e3e6c277511610dd3d99855d83e2b",
      "original_position" : 11,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53374368",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "body" : "> IIRC, this would be the first RPC command that accept a associative array parameter list\r\n\r\nI agree. Though I've done a similar thing in #7552. Use positional arguments only for the 'invariant' arguments, and an associative array for everything optional or future-extensible.\r\n\r\nMuch less hassle and confusing than APIs with tons of positional arguments, especially optional ones.\r\n",
      "created_at" : "2016-02-19T09:51:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-186143004",
      "id" : 186143004,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-19T09:52:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/186143004",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "body" : "@jonasschnelli there is also https://github.com/bitcoin/bitcoin/pull/7518 that accepts options as a JSON object.",
      "created_at" : "2016-02-19T10:29:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-186160708",
      "id" : 186160708,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-19T10:30:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/186160708",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3534524?v=3",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53466842"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53466842"
         }
      },
      "body" : "IMO should catch the `JSONRPCError` and be included on the response, something like:\r\n```bash\r\noutput: [\r\n  {\r\n    \"result\": true\r\n  },\r\n  {\r\n    \"result\": false,\r\n    \"error\": {\r\n      \"code\": -5,\r\n      \"message\": \"Invalid Bitcoin address\"\r\n    }\r\n  }\r\n]\r\n```\r\nand catch other exceptions as \"missing required fields\" (runtime_error). Also maybe changing from \"result\" to \"success\".",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-02-19T14:33:12Z",
      "diff_hunk" : "@@ -510,3 +534,105 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue importmulti(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[{\\\"type\\\":\\\"privkey\\\",\\\"value\\\":\\\"mkjjX...\\\"},...]' (rescan) \\n\\n\"\n+            \"Import several types of addresses (private and public keys, transaction addresses/scripts) with only one rescan\\n\"\n+\n+            \"Arguments:\\n\"\n+            \"1. json request array     (json, required) Data to be imported\\n\"\n+            \"  [     (json array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"type\\\": \\\"privkey | pubkey | address\\\", (string, required) Type of address\\n\"\n+            \"      \\\"value\\\": \\\"...\\\",                       (string, required) Value of the address\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                (integer, optional) Timestamp\\n\"\n+            \"      \\\"label\\\": \\\"...\\\"                        (string, optional) Label\\n\"\n+            \"      \\\"p2sh\\\": true | false                    (bool, optional, default=false) Value is a P2SH\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. rescan                 (boolean, optional, default=true)\\n\"\n+\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\", \\\"timestamp\\\":1455191478 },\"\n+                                          \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ]' true\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]' false\") + HelpExampleRpc(\"importmulti\", \"[ { \\\"type\\\":\\\"privkey\\\", \\\"value\\\":\\\"<my private key>\\\" },\"\n+                                                                                                                                                                                                  \"{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191480 } ], true\") +\n+            HelpExampleRpc(\"importmulti\", \"'[{ \\\"type\\\":\\\"pubkey\\\", \\\"value\\\":\\\"<my public key>\\\", \\\"label\\\":\\\"example 1\\\", \\\"timestamp\\\":1455191464 } ]', false\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [ { \\\"result\\\": true | false } , ... ]\\n\");\n+\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (params.size() == 1)\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR));\n+    else\n+        RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VBOOL));\n+\n+    const UniValue& request = params[0];\n+    bool fRescan = params.size() > 1 ? params[1].get_bool() : true;\n+\n+    UniValue response(UniValue::VARR);\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+\n+    bool fRunScan = false;\n+    int64_t nLowestTimestamp = 0;\n+\n+    if (fRescan && chainActive.Tip())\n+        nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n+    else\n+        fRescan = false;\n+\n+\n+    BOOST_FOREACH (const UniValue& data, request.getValues()) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        try {\n+            if (nLowestTimestamp > 0) {\n+                int64_t timestamp = data.exists(\"timestamp\") ? data[\"timestamp\"].get_int64() : 0;\n+\n+                if (timestamp < nLowestTimestamp)\n+                    nLowestTimestamp = timestamp;\n+            }\n+\n+            const string& strType = data[\"type\"].get_str();\n+            const string& strValue = data[\"value\"].get_str();\n+            string strLabel = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+            if (strType == \"privkey\")\n+                ImportPrivateKey(strValue, strLabel);\n+            else if (strType == \"pubkey\")\n+                ImportPublicKey(strValue, strLabel);\n+            else if (strType == \"address\") {\n+                bool fP2SH = data.exists(\"p2sh\") ? data[\"p2sh\"].get_bool() : false;\n+                ImportAddressKey(strValue, strLabel, fP2SH);\n+            } else\n+                throw;\n+\n+            result.pushKV(\"result\", UniValue(true));\n+            fRunScan = true;\n+        } catch (...) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r53466842",
      "id" : 53466842,
      "original_commit_id" : "b974523012c0497862f312d63607d79ebffc471a",
      "original_position" : 272,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/53466842",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "body" : "GBT also uses an options Object",
      "created_at" : "2016-02-25T11:45:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-188748840",
      "id" : 188748840,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-25T11:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/188748840",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "concept ACK",
      "created_at" : "2016-02-25T23:10:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-189026033",
      "id" : 189026033,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-02-25T23:10:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/189026033",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Replaced the output result from   [ { \"**result**\": true } , ... ] to [ { \"**success**\": true } , ... ].\r\n\r\nIn case of giving a exception should we show any information of the reason in the result? Something like:\r\n[ { \"success\": false , **error** : { \"code\": -5, \"message\": \"Invalid private key encoding\" } } , ... ]\r\n",
      "created_at" : "2016-03-10T14:44:48Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-194880245",
      "id" : 194880245,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-10T14:44:48Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/194880245",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "body" : "Passing along error messages would be hugely helpful, yes.",
      "created_at" : "2016-03-10T14:51:12Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-194884014",
      "id" : 194884014,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-10T14:51:12Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/194884014",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "body" : "I'll have to defer to others on the value of that. I don't see much value-add personally but unsure.",
      "created_at" : "2016-03-14T15:12:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-196361386",
      "id" : 196361386,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-14T15:12:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/196361386",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559090"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559090"
         }
      },
      "body" : "Nit: only need to initialize 2 nodes",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-17T18:55:28Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559090",
      "id" : 56559090,
      "original_commit_id" : "960f08667bd44e7be7fc074073d3fd73db9ee7a9",
      "original_position" : 13,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559090",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559180"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559180"
         }
      },
      "body" : "I don't believe it's necessary to connect the nodes for this test",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-17T18:56:04Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559180",
      "id" : 56559180,
      "original_commit_id" : "960f08667bd44e7be7fc074073d3fd73db9ee7a9",
      "original_position" : 16,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559180",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559211"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559211"
         }
      },
      "body" : "See above, no need to connect/sync",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-17T18:56:18Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559211",
      "id" : 56559211,
      "original_commit_id" : "960f08667bd44e7be7fc074073d3fd73db9ee7a9",
      "original_position" : 18,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559211",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559279"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559279"
         }
      },
      "body" : "Same comment",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-17T18:56:49Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        import time\n+        begintime = int(time.time())\n+\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(1)\n+\n+        # sync\n+        self.sync_all()\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+        # address\n+        address1 = self.nodes[0].getnewaddress()\n+        # pubkey\n+        address2 = self.nodes[0].getnewaddress()\n+        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        # privkey\n+        address3 = self.nodes[0].getnewaddress()\n+        address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n+        # scriptPubKey\n+        address4 = self.nodes[0].getnewaddress()\n+        address4_scriptpubkey = self.nodes[0].validateaddress(address4)['scriptPubKey']     # Using scriptpubkey\n+\n+\n+        #Check only one address\n+        address_info = self.nodes[0].validateaddress(address1)\n+        assert_equal(address_info['ismine'], True)\n+\n+        self.sync_all()",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r56559279",
      "id" : 56559279,
      "original_commit_id" : "960f08667bd44e7be7fc074073d3fd73db9ee7a9",
      "original_position" : 53,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/56559279",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "body" : "Lightly tested ACK.\r\nI made a few nit comments on the python test. \r\nIf you wanted you could add a test that trying to import a private key and scriptpubKey for the same address fails.",
      "created_at" : "2016-03-17T18:59:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-198034632",
      "id" : 198034632,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-17T18:59:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/198034632",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7504522?v=3",
         "events_url" : "https://api.github.com/users/mrbandrews/events{/privacy}",
         "followers_url" : "https://api.github.com/users/mrbandrews/followers",
         "following_url" : "https://api.github.com/users/mrbandrews/following{/other_user}",
         "gists_url" : "https://api.github.com/users/mrbandrews/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/mrbandrews",
         "id" : 7504522,
         "login" : "mrbandrews",
         "organizations_url" : "https://api.github.com/users/mrbandrews/orgs",
         "received_events_url" : "https://api.github.com/users/mrbandrews/received_events",
         "repos_url" : "https://api.github.com/users/mrbandrews/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/mrbandrews/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/mrbandrews"
      }
   },
   {
      "body" : "@mrbandrews Test added.",
      "created_at" : "2016-03-28T13:10:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202385808",
      "id" : 202385808,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-28T13:10:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202385808",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57571286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57571286"
         }
      },
      "body" : "Nit: Would be nice to be more verbose here. ~~Maybe move the comment from above into an `AssertionError`?~~\r\n\r\n\r\n\r\nEdit: Also, I don't like the `pass`. Effectively the current try-except is a noop. Am I missing something?",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-28T13:31:57Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.is_network_split=False\n+\n+    def run_test (self):\n+        import time\n+        begintime = int(time.time())\n+\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(1)\n+        self.nodes[1].generate(1)\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+        # address\n+        address1 = self.nodes[0].getnewaddress()\n+        # pubkey\n+        address2 = self.nodes[0].getnewaddress()\n+        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        # privkey\n+        address3 = self.nodes[0].getnewaddress()\n+        address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n+        # scriptPubKey\n+        address4 = self.nodes[0].getnewaddress()\n+        address4_scriptpubkey = self.nodes[0].validateaddress(address4)['scriptPubKey']     # Using scriptpubkey\n+\n+\n+        #Check only one address\n+        address_info = self.nodes[0].validateaddress(address1)\n+        assert_equal(address_info['ismine'], True)\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),1)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        # import multi\n+        result1 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": address1 , \"label\":\"new account 1\" , \"timestamp\": begintime } ,\n+            { \"type\": PUB_KEY , \"value\": address2_pubkey , \"label\":\"new account 1\", \"timestamp\": begintime},\n+            { \"type\": PRIV_KEY , \"value\": address3_privkey , \"timestamp\": begintime},\n+            { \"type\": SCRIPT_KEY , \"value\": address4_scriptpubkey , \"timestamp\": begintime},\n+            ])\n+\n+        #Addresses Test - after import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], True)\n+        address_info = self.nodes[1].validateaddress(address4)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+\n+        assert_equal(result1[0]['success'], True)\n+        assert_equal(result1[1]['success'], True)\n+        assert_equal(result1[2]['success'], True)\n+        assert_equal(result1[3]['success'], True)\n+\n+        #importmulti without rescan\n+        result2 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() , \"label\":\"random account\" } ,\n+            { \"type\": PUB_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['pubkey'] } ,\n+            { \"type\": SCRIPT_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['scriptPubKey'] },\n+            ], { \"rescan\":False } )\n+\n+        # all succeed\n+        assert_equal(result2[0]['success'], True)\n+        assert_equal(result2[1]['success'], True)\n+        assert_equal(result2[2]['success'], True)\n+        assert_equal(result2[3]['success'], True)\n+        assert_equal(result2[4]['success'], True)\n+\n+        # empty json case\n+        try:\n+            self.nodes[1].importmulti()\n+            raise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57571286",
      "id" : 57571286,
      "original_commit_id" : "7fd4248fa34344ef7d38464be79375b40ca67177",
      "original_position" : 111,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57571286",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57578347"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57578347"
         }
      },
      "body" : "This is indeed a noop, please remove the code or replace it with something else. Maybe?\r\n\r\n```diff\r\ndiff --git a/qa/rpc-tests/importmulti.py b/qa/rpc-tests/importmulti.py\r\nindex 845bcfe..243e70e 100755\r\n--- a/qa/rpc-tests/importmulti.py\r\n+++ b/qa/rpc-tests/importmulti.py\r\n@@ -108,7 +108,3 @@ class ImportMultiTest (BitcoinTestFramework):\r\n         # empty json case\r\n-        try:\r\n-            self.nodes[1].importmulti()\r\n-            raise\r\n-        except:\r\n-            pass\r\n+        assert_raises(JSONRPCException, self.nodes[1].importmulti)\r\n \r\n",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-28T14:41:37Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.is_network_split=False\n+\n+    def run_test (self):\n+        import time\n+        begintime = int(time.time())\n+\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(1)\n+        self.nodes[1].generate(1)\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+        # address\n+        address1 = self.nodes[0].getnewaddress()\n+        # pubkey\n+        address2 = self.nodes[0].getnewaddress()\n+        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        # privkey\n+        address3 = self.nodes[0].getnewaddress()\n+        address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n+        # scriptPubKey\n+        address4 = self.nodes[0].getnewaddress()\n+        address4_scriptpubkey = self.nodes[0].validateaddress(address4)['scriptPubKey']     # Using scriptpubkey\n+\n+\n+        #Check only one address\n+        address_info = self.nodes[0].validateaddress(address1)\n+        assert_equal(address_info['ismine'], True)\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),1)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        # import multi\n+        result1 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": address1 , \"label\":\"new account 1\" , \"timestamp\": begintime } ,\n+            { \"type\": PUB_KEY , \"value\": address2_pubkey , \"label\":\"new account 1\", \"timestamp\": begintime},\n+            { \"type\": PRIV_KEY , \"value\": address3_privkey , \"timestamp\": begintime},\n+            { \"type\": SCRIPT_KEY , \"value\": address4_scriptpubkey , \"timestamp\": begintime},\n+            ])\n+\n+        #Addresses Test - after import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], True)\n+        address_info = self.nodes[1].validateaddress(address4)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+\n+        assert_equal(result1[0]['success'], True)\n+        assert_equal(result1[1]['success'], True)\n+        assert_equal(result1[2]['success'], True)\n+        assert_equal(result1[3]['success'], True)\n+\n+        #importmulti without rescan\n+        result2 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() , \"label\":\"random account\" } ,\n+            { \"type\": PUB_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['pubkey'] } ,\n+            { \"type\": SCRIPT_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['scriptPubKey'] },\n+            ], { \"rescan\":False } )\n+\n+        # all succeed\n+        assert_equal(result2[0]['success'], True)\n+        assert_equal(result2[1]['success'], True)\n+        assert_equal(result2[2]['success'], True)\n+        assert_equal(result2[3]['success'], True)\n+        assert_equal(result2[4]['success'], True)\n+\n+        # empty json case\n+        try:\n+            self.nodes[1].importmulti()\n+            raise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57578347",
      "id" : 57578347,
      "original_commit_id" : "7fd4248fa34344ef7d38464be79375b40ca67177",
      "original_position" : 111,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57578347",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57579066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57579066"
         }
      },
      "body" : "Nit: Some more dead code",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-28T14:47:35Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.is_network_split=False\n+\n+    def run_test (self):\n+        import time\n+        begintime = int(time.time())\n+\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(1)\n+        self.nodes[1].generate(1)\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+        # address\n+        address1 = self.nodes[0].getnewaddress()\n+        # pubkey\n+        address2 = self.nodes[0].getnewaddress()\n+        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        # privkey\n+        address3 = self.nodes[0].getnewaddress()\n+        address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n+        # scriptPubKey\n+        address4 = self.nodes[0].getnewaddress()\n+        address4_scriptpubkey = self.nodes[0].validateaddress(address4)['scriptPubKey']     # Using scriptpubkey\n+\n+\n+        #Check only one address\n+        address_info = self.nodes[0].validateaddress(address1)\n+        assert_equal(address_info['ismine'], True)\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),1)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        # import multi\n+        result1 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": address1 , \"label\":\"new account 1\" , \"timestamp\": begintime } ,\n+            { \"type\": PUB_KEY , \"value\": address2_pubkey , \"label\":\"new account 1\", \"timestamp\": begintime},\n+            { \"type\": PRIV_KEY , \"value\": address3_privkey , \"timestamp\": begintime},\n+            { \"type\": SCRIPT_KEY , \"value\": address4_scriptpubkey , \"timestamp\": begintime},\n+            ])\n+\n+        #Addresses Test - after import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], True)\n+        address_info = self.nodes[1].validateaddress(address4)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+\n+        assert_equal(result1[0]['success'], True)\n+        assert_equal(result1[1]['success'], True)\n+        assert_equal(result1[2]['success'], True)\n+        assert_equal(result1[3]['success'], True)\n+\n+        #importmulti without rescan\n+        result2 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() , \"label\":\"random account\" } ,\n+            { \"type\": PUB_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['pubkey'] } ,\n+            { \"type\": SCRIPT_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['scriptPubKey'] },\n+            ], { \"rescan\":False } )\n+\n+        # all succeed\n+        assert_equal(result2[0]['success'], True)\n+        assert_equal(result2[1]['success'], True)\n+        assert_equal(result2[2]['success'], True)\n+        assert_equal(result2[3]['success'], True)\n+        assert_equal(result2[4]['success'], True)\n+\n+        # empty json case\n+        try:\n+            self.nodes[1].importmulti()\n+            raise\n+        except:\n+            pass\n+\n+        # parcial success case\n+        result3 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() },\n+            { \"type\": PUB_KEY },\n+            { \"type\": PUB_KEY , \"value\": \"123456789\"},\n+            ] )\n+\n+        assert_equal(result3[0]['success'], True)\n+        try:    #JSON field \"error\" doesn't exist in success:true\n+            result3[0]['error']\n+            raise\n+        except:\n+            pass",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57579066",
      "id" : 57579066,
      "original_commit_id" : "7fd4248fa34344ef7d38464be79375b40ca67177",
      "original_position" : 127,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57579066",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Concept ACK",
      "created_at" : "2016-03-28T14:49:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202423784",
      "id" : 202423784,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-28T14:49:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202423784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=3",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "body" : "Needs rebase after #7558",
      "created_at" : "2016-03-29T09:16:33Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202794361",
      "id" : 202794361,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-29T09:16:33Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202794361",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/126646?v=3",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57741191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57741191"
         }
      },
      "body" : "Yes.",
      "commit_id" : "1825f46923469705472a6af10d50deef8e981e38",
      "created_at" : "2016-03-29T15:15:39Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.is_network_split=False\n+\n+    def run_test (self):\n+        import time\n+        begintime = int(time.time())\n+\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(1)\n+        self.nodes[1].generate(1)\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+        # address\n+        address1 = self.nodes[0].getnewaddress()\n+        # pubkey\n+        address2 = self.nodes[0].getnewaddress()\n+        address2_pubkey = self.nodes[0].validateaddress(address2)['pubkey']                 # Using pubkey\n+        # privkey\n+        address3 = self.nodes[0].getnewaddress()\n+        address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n+        # scriptPubKey\n+        address4 = self.nodes[0].getnewaddress()\n+        address4_scriptpubkey = self.nodes[0].validateaddress(address4)['scriptPubKey']     # Using scriptpubkey\n+\n+\n+        #Check only one address\n+        address_info = self.nodes[0].validateaddress(address1)\n+        assert_equal(address_info['ismine'], True)\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),1)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+        # import multi\n+        result1 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": address1 , \"label\":\"new account 1\" , \"timestamp\": begintime } ,\n+            { \"type\": PUB_KEY , \"value\": address2_pubkey , \"label\":\"new account 1\", \"timestamp\": begintime},\n+            { \"type\": PRIV_KEY , \"value\": address3_privkey , \"timestamp\": begintime},\n+            { \"type\": SCRIPT_KEY , \"value\": address4_scriptpubkey , \"timestamp\": begintime},\n+            ])\n+\n+        #Addresses Test - after import\n+        address_info = self.nodes[1].validateaddress(address1)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address2)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+        address_info = self.nodes[1].validateaddress(address3)\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], True)\n+        address_info = self.nodes[1].validateaddress(address4)\n+        assert_equal(address_info['iswatchonly'], True)\n+        assert_equal(address_info['ismine'], False)\n+\n+        assert_equal(result1[0]['success'], True)\n+        assert_equal(result1[1]['success'], True)\n+        assert_equal(result1[2]['success'], True)\n+        assert_equal(result1[3]['success'], True)\n+\n+        #importmulti without rescan\n+        result2 = self.nodes[1].importmulti( [\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() } ,\n+            { \"type\": ADDRESS_KEY, \"value\": self.nodes[0].getnewaddress() , \"label\":\"random account\" } ,\n+            { \"type\": PUB_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['pubkey'] } ,\n+            { \"type\": SCRIPT_KEY, \"value\": self.nodes[0].validateaddress(self.nodes[0].getnewaddress())['scriptPubKey'] },\n+            ], { \"rescan\":False } )\n+\n+        # all succeed\n+        assert_equal(result2[0]['success'], True)\n+        assert_equal(result2[1]['success'], True)\n+        assert_equal(result2[2]['success'], True)\n+        assert_equal(result2[3]['success'], True)\n+        assert_equal(result2[4]['success'], True)\n+\n+        # empty json case\n+        try:\n+            self.nodes[1].importmulti()\n+            raise",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#discussion_r57741191",
      "id" : 57741191,
      "original_commit_id" : "7fd4248fa34344ef7d38464be79375b40ca67177",
      "original_position" : 111,
      "path" : "qa/rpc-tests/importmulti.py",
      "position" : null,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7551",
      "updated_at" : "2016-03-29T15:28:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/57741191",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   },
   {
      "body" : "> Nit: Would be nice to be more verbose here.\r\n\r\n@MarcoFalke What do you suggest?\r\n\r\n@laanwj Rebased.",
      "created_at" : "2016-03-29T15:30:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7551#issuecomment-202955265",
      "id" : 202955265,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7551",
      "updated_at" : "2016-03-29T15:30:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/202955265",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4319748?v=3",
         "events_url" : "https://api.github.com/users/pedrobranco/events{/privacy}",
         "followers_url" : "https://api.github.com/users/pedrobranco/followers",
         "following_url" : "https://api.github.com/users/pedrobranco/following{/other_user}",
         "gists_url" : "https://api.github.com/users/pedrobranco/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/pedrobranco",
         "id" : 4319748,
         "login" : "pedrobranco",
         "organizations_url" : "https://api.github.com/users/pedrobranco/orgs",
         "received_events_url" : "https://api.github.com/users/pedrobranco/received_events",
         "repos_url" : "https://api.github.com/users/pedrobranco/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/pedrobranco/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/pedrobranco/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/pedrobranco"
      }
   }
]
