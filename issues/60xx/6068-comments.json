[
   {
      "body" : "Sorry for this little change, but...\r\n\r\n@thuni was concerned about introducing globals in policy.h\r\nfIsBareMultisigStd can be easily turned into an attribute later as shown in https://github.com/jtimon/bitcoin/compare/policy_new...jtimon:policy_moveonly (in fact it could be done more easily not moving AreInputsStandard at the same time as IsStandardTx)\r\nBut minRelayTxFee is in many more places, and after proposing some changes to #5159, I am no longer convinced that I want to move things like IsDust to policy directly. One possibility would be to put all the fee policy stuff in the estimator. Then an interface of the estimator can be returned by CPolicy, for example, making a CPolicy::GetFeePolicy() analogous to CChainParams::GetConsensus().\r\nThe minimum fee can still be configured from the constructor of CStandardPolicy but it can pass it directly to the estimator without storing it redundantly.\r\nIn that case some files could be dependent on policy/fees but not in policy/policy (just like some functions depend on Consensus::Params but not on CChainParams), then some of the 5 includes I just removed would have to be changed for policy/fees later.\r\n\r\nFor all these reasons I'm keeping minRelayTxFee in main for now.\r\n\r\nMoving minRelayTxFee to policy/policy could still prevent it from depending on main temporarily when IsStandardTx is moveonly, but it doesn't seem to be worth it.\r\n",
      "created_at" : "2015-04-27T22:55:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-96843767",
      "id" : 96843767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-04-27T22:55:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/96843767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Nodes can do random things, but why encourage them to adopt diverse relay policies, create custom policies, and define custom parameters for others to create more custom relay policies?  \r\n\r\nShouldn't there just be baked-in policy parameters that have predictable effects when deployed with different values, like resource constraints and settings that influence the strength of preference for higher fees?\r\n\r\nI'm not concerned about miner policies, but something more like CokePolicy and PepsiPolicy disrupting the network with divergent relay rules.  What is the argument in favor?",
      "created_at" : "2015-05-01T15:50:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98163070",
      "id" : 98163070,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-01T15:50:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98163070",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "@dgenr8 Non-centralisation. Authority to decide policy lies with the node operators and miners, and it's not a responsibility/power developers should have. Too much policy monoculture also creates incentives to use bad practices (trusting unconfirmed transactions) and make trouble for the outliers. Also, since the current policy monoculture is mostly *reference* policy, it also causes spam problems since there are no effective reference-suitable spam filters; and this is in partly out of necessity due to policy being intimately mixed in with the reference codebase.",
      "created_at" : "2015-05-01T17:06:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98178713",
      "id" : 98178713,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-01T17:06:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98178713",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "I think there are different issues here.\r\n\r\nOne is that this is a step towards separating out policy code from consensus code. This PR is part of that. Eventually, we should end up with a situation where consensus is clearly separated in the source code (so we know when to be extremely careful in review and tests when someone wants to change it), and likewise have policy separated out (so people changing/forking the code know what can be safely changed).\r\n\r\nAnd yes, I think that the ability to change policy is essential, for the reasons that @luke-jr brings up. For one, relay (and other) policy is constantly changing anyway (pretty much every Bitcoin Core release has changed what is being relayed). You should not rely on it being uniform on the network.\r\n\r\nOf course, I think that we, as maintainers of a particular piece of Bitcoin network software, have a responsibility to make the code do what we think is best for the network - and possibly expose only part of the involved parameters to users. But that doesn't mean that others can't disagree. And separating out policy code makes it explicit exactly which part of the code is a choice.",
      "created_at" : "2015-05-01T18:06:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98189841",
      "id" : 98189841,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-01T18:06:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98189841",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@luke-jr The blockchain is the world's most consistent distributed system.  It makes no sense to promote chaos right up to the assembly point.  If we have CokePolicy and PepsiPolicy, reorgs too become less safe.",
      "created_at" : "2015-05-02T16:09:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98374106",
      "id" : 98374106,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-02T16:09:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98374106",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "dgenr8 differences in consensus code can cause reorgs, differences in policy code can't. That's the main reason why we want to separate them. There are people already maintaining alternative policies and there's nothing wrong about it. Let's just make their implementations safer and cleaner. We will safe A LOT of review work  by clearly separating policy proposals, which tend to be numerous, controversial and are also often uninteresting to many reviewers",
      "created_at" : "2015-05-02T16:21:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98374720",
      "id" : 98374720,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-02T16:21:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98374720",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "@jtimon He means that when there are different mempool acceptance policies present, a reorg can reduce the (apparent) safety of transactions already in the blockchain.\r\n\r\nAnd that is true - but that's just a sign that you shouldn't be relying on having a consistent policy in the first place, and why you should use confirmations to gauge risk, not mere acceptance.\r\n\r\n@dgenr8 And the assembly point matters. There is a significant economic difference before and after. Miners get paid for what happens after, but not before.",
      "created_at" : "2015-05-02T16:27:18Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98375784",
      "id" : 98375784,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-02T16:27:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98375784",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "@jtimon Nothing against code separation, but this mixes in a *multi-relay-policy framework*.\r\n\r\n@sipa Use confirmations to gauge risk, but the system should try to reduce risk at all confirmation levels.  Nobody has shown that lower confirmation levels, including 0-conf, cannot be made safer with easily acceptable tradeoffs.  A multi-relay-policy framework is a step in the other direction.\r\n\r\n\r\n",
      "created_at" : "2015-05-02T17:28:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98381574",
      "id" : 98381574,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-02T17:28:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98381574",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "@dgenr8 \"Unconfirmed\" is *not* a confirmation level at all. It is the absence of any confirmation. You cannot make it \"safe\" except through attempted centralisation and control over others.",
      "created_at" : "2015-05-02T17:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98381767",
      "id" : 98381767,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-02T17:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98381767",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr That's a claim, not a proof, and rather than trying to prove a negative, why not think about how to accomplish the positive?",
      "created_at" : "2015-05-02T17:45:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-98382255",
      "id" : 98382255,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-02T17:45:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/98382255",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/4284124?v=3",
         "events_url" : "https://api.github.com/users/dgenr8/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dgenr8/followers",
         "following_url" : "https://api.github.com/users/dgenr8/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dgenr8/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dgenr8",
         "id" : 4284124,
         "login" : "dgenr8",
         "organizations_url" : "https://api.github.com/users/dgenr8/orgs",
         "received_events_url" : "https://api.github.com/users/dgenr8/received_events",
         "repos_url" : "https://api.github.com/users/dgenr8/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dgenr8/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dgenr8"
      }
   },
   {
      "body" : "@dgenr8 feel free to spend your time on how to accomplish the positive.\r\nIn the meantime, policy diversity is what you get with a decentralized system. Multiple relay policies are already deployed and I don't think we can or should fight that.\r\nIn the meantime there's a lot of noise because we don't have support for different policies and because everybody wants their own favorite policy to be everyone else's policy too. Everyone wants his policy to be the standard one, but that's simply not possible.\r\n",
      "created_at" : "2015-05-07T11:15:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-99818340",
      "id" : 99818340,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-25T19:21:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/99818340",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Built, confirmed `-policy` option exposed, and checked msig tests still pass - ACK\r\n\r\nNote: Had to pull in https://github.com/bitcoin/bitcoin/pull/6114/files, which should be OK as long as you're building with 1.58<",
      "created_at" : "2015-05-10T17:48:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-100674492",
      "id" : 100674492,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-10T17:48:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/100674492",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/2230604?v=3",
         "events_url" : "https://api.github.com/users/faizkhan00/events{/privacy}",
         "followers_url" : "https://api.github.com/users/faizkhan00/followers",
         "following_url" : "https://api.github.com/users/faizkhan00/following{/other_user}",
         "gists_url" : "https://api.github.com/users/faizkhan00/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/faizkhan00",
         "id" : 2230604,
         "login" : "faizkhan00",
         "organizations_url" : "https://api.github.com/users/faizkhan00/orgs",
         "received_events_url" : "https://api.github.com/users/faizkhan00/received_events",
         "repos_url" : "https://api.github.com/users/faizkhan00/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/faizkhan00/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/faizkhan00/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/faizkhan00"
      }
   },
   {
      "body" : "Needed trivial rebase after policy/fees got into the makefile.",
      "created_at" : "2015-05-13T22:49:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-101840610",
      "id" : 101840610,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-13T22:49:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/101840610",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Needed rebase.\r\nAlso, after #5669 minRelayTxFee will be the only dependency from main, so I feel more comfortable moving more code.\r\nAdded a couple of squashme commits and a last commit that removes the global @theuni was concerned about.\r\nIf it is ok to extend the scope of the PR (mostly with moveonly stuff), I will squash all the moveonly/rename commits into luke's commit (Luke-Jr was moving all 3 methods in other branches so I'm sure he will be ok with putting that on his name).\r\n",
      "created_at" : "2015-05-27T15:52:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-105970969",
      "id" : 105970969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-05-27T15:52:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/105970969",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Needed rebase again.\r\nI didn't squased the fixup commits introduced in the last push though since I was hoping to get some approval on that, but I will do it in the next forced rebased if nobody complains.\r\nAlso if people want me to s/\"main\"/Policy::STANDARD or something similar I'm happy to do so, I should have done it from the beginning. If I get silence about this as well I may do it at any point I feel like it.",
      "created_at" : "2015-06-02T11:36:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-107924068",
      "id" : 107924068,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-02T11:36:50Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/107924068",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514373"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514373"
         }
      },
      "body" : "Nit: Should be a constant reference.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T11:52:16Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514373",
      "id" : 31514373,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 58,
      "path" : "src/policy/policy.cpp",
      "position" : 58,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T11:52:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514373",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514423"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514423"
         }
      },
      "body" : "Nit: I guess this also could be a constant reference.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T11:53:10Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514423",
      "id" : 31514423,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 65,
      "path" : "src/policy/policy.cpp",
      "position" : 65,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T11:53:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514423",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514491"
         }
      },
      "body" : "Nit: I'm sure we use const here, too.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T11:54:20Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr(std::string selectedPolicy)\n+{\n+    CPolicy& policy = standardPolicy;\n+    try {\n+        policy = Policy(selectedPolicy);\n+    } catch(std::exception &e) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514491",
      "id" : 31514491,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 81,
      "path" : "src/policy/policy.cpp",
      "position" : 81,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T11:54:20Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514491",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514629"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514629"
         }
      },
      "body" : "Nit: defaultPolicy could also be ``const std::string&``.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T11:56:58Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr(std::string selectedPolicy)\n+{\n+    CPolicy& policy = standardPolicy;\n+    try {\n+        policy = Policy(selectedPolicy);\n+    } catch(std::exception &e) {\n+        selectedPolicy = \"standard\";\n+    }\n+    std::string strUsage = HelpMessageGroup(strprintf(_(\"Policy options (for policy: %s):\"), selectedPolicy));\n+    strUsage += HelpMessageOpt(\"-policy\", strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\"));\n+    strUsage += HelpMessagesOpt(policy.GetOptionsHelp());\n+    return strUsage;\n+}\n+\n+void InitPolicyFromArgs(const std::map<std::string, std::string>& mapArgs, std::string defaultPolicy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514629",
      "id" : 31514629,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 90,
      "path" : "src/policy/policy.cpp",
      "position" : 90,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T11:56:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514866"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514866"
         }
      },
      "body" : "Nit: ``catch(const std::exception& e)``",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:00:41Z",
      "diff_hunk" : "@@ -787,6 +789,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n+    // Init Policy\n+    try {\n+        InitPolicyFromArgs(mapArgs, \"standard\");\n+    } catch(std::exception &e) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514866",
      "id" : 31514866,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 32,
      "path" : "src/init.cpp",
      "position" : 32,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:00:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514866",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514939"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514939"
         }
      },
      "body" : "Suggestion: The string \"standard\" is used quite often, I guess it could be nice to have some DEFAULT_ constant for it.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:02:01Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr(std::string selectedPolicy)\n+{\n+    CPolicy& policy = standardPolicy;\n+    try {\n+        policy = Policy(selectedPolicy);\n+    } catch(std::exception &e) {\n+        selectedPolicy = \"standard\";\n+    }\n+    std::string strUsage = HelpMessageGroup(strprintf(_(\"Policy options (for policy: %s):\"), selectedPolicy));\n+    strUsage += HelpMessageOpt(\"-policy\", strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\"));\n+    strUsage += HelpMessagesOpt(policy.GetOptionsHelp());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31514939",
      "id" : 31514939,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 86,
      "path" : "src/policy/policy.cpp",
      "position" : 86,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:02:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31514939",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31515138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31515138"
         }
      },
      "body" : "Please, make it const and try to compile.\r\nI'm working on a solution (using a real factory and a container) to make it const, though. But I will propose that for chainparams first.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:05:41Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31515138",
      "id" : 31515138,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 58,
      "path" : "src/policy/policy.cpp",
      "position" : 58,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:05:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31515138",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31515751"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31515751"
         }
      },
      "body" : "This was just a read-only review of the code, what error is shown?",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:14:58Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31515751",
      "id" : 31515751,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 58,
      "path" : "src/policy/policy.cpp",
      "position" : 58,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:14:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31515751",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517170"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31517170"
         }
      },
      "body" : "Nobody is doing it with strings, I believe the compiler can be smart enough by itself in this case but I'm not 100% sure. @sipa ?",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:34:55Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517170",
      "id" : 31517170,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 65,
      "path" : "src/policy/policy.cpp",
      "position" : 65,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:34:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31517170",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517307"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31517307"
         }
      },
      "body" : "This is mentioned in the thread, in the last post actually.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:36:30Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr(std::string selectedPolicy)\n+{\n+    CPolicy& policy = standardPolicy;\n+    try {\n+        policy = Policy(selectedPolicy);\n+    } catch(std::exception &e) {\n+        selectedPolicy = \"standard\";\n+    }\n+    std::string strUsage = HelpMessageGroup(strprintf(_(\"Policy options (for policy: %s):\"), selectedPolicy));\n+    strUsage += HelpMessageOpt(\"-policy\", strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\"));\n+    strUsage += HelpMessagesOpt(policy.GetOptionsHelp());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517307",
      "id" : 31517307,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 86,
      "path" : "src/policy/policy.cpp",
      "position" : 86,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:36:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31517307",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31517922"
         }
      },
      "body" : "Take a look at our codebase or even at https://github.com/bitcoin/bitcoin/pull/6206. IMHO we shouldn't work with copies where not needed.",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:43:58Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31517922",
      "id" : 31517922,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 65,
      "path" : "src/policy/policy.cpp",
      "position" : 65,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:43:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31517922",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31518046"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31518046"
         }
      },
      "body" : "So you are asking for the way to got with this, do I get that right?",
      "commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "created_at" : "2015-06-02T12:45:29Z",
      "diff_hunk" : "@@ -0,0 +1,251 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+// NOTE: This file is intended to be customised by the end user, and includes only local node policy logic\n+\n+#include \"policy/policy.h\"\n+\n+#include \"main.h\"\n+#include \"tinyformat.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+#include <boost/foreach.hpp>\n+\n+/** Declaration of Standard Policy implementing CPolicy */\n+class CStandardPolicy : public CPolicy\n+{\n+    bool fIsBareMultisigStd;\n+public:\n+    CStandardPolicy() :\n+        fIsBareMultisigStd(true)\n+    {};\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>&);\n+    virtual bool ApproveScript(const CScript&, txnouttype&) const;\n+    virtual bool ApproveTx(const CTransaction& tx, std::string& reason) const;\n+    /**\n+     * Check transaction inputs to mitigate two\n+     * potential denial-of-service attacks:\n+     * \n+     * 1. scriptSigs with extra data stuffed into them,\n+     *    not consumed by scriptPubKey (or P2SH script)\n+     * 2. P2SH scripts with a crazy number of expensive\n+     *    CHECKSIG/CHECKMULTISIG operations\n+     *\n+     * Check transaction inputs, and make sure any\n+     * pay-to-script-hash transactions are evaluating IsStandard scripts\n+     * \n+     * Why bother? To avoid denial-of-service attacks; an attacker\n+     * can submit a standard HASH... OP_EQUAL transaction,\n+     * which will get accepted into blocks. The redemption\n+     * script can be anything; an attacker could use a very\n+     * expensive-to-check-upon-redemption script like:\n+     *   DUP CHECKSIG DROP ... repeated 100 times... OP_1\n+     */\n+    virtual bool ApproveTxInputs(const CTransaction& tx, const CCoinsViewCache& mapInputs) const;\n+};\n+\n+/** Global variables and their interfaces */\n+\n+static CStandardPolicy standardPolicy;\n+\n+static CPolicy* pCurrentPolicy = 0;\n+\n+CPolicy& Policy(std::string policy)\n+{\n+    if (policy == \"standard\")\n+        return standardPolicy;\n+    throw std::runtime_error(strprintf(_(\"Unknown policy '%s'\"), policy));\n+}\n+\n+void SelectPolicy(std::string policy)\n+{\n+    pCurrentPolicy = &Policy(policy);\n+}\n+\n+const CPolicy& Policy()\n+{\n+    assert(pCurrentPolicy);\n+    return *pCurrentPolicy;\n+}\n+\n+std::string GetPolicyUsageStr(std::string selectedPolicy)\n+{\n+    CPolicy& policy = standardPolicy;\n+    try {\n+        policy = Policy(selectedPolicy);\n+    } catch(std::exception &e) {\n+        selectedPolicy = \"standard\";\n+    }\n+    std::string strUsage = HelpMessageGroup(strprintf(_(\"Policy options (for policy: %s):\"), selectedPolicy));\n+    strUsage += HelpMessageOpt(\"-policy\", strprintf(_(\"Select a specific type of policy (default: %s)\"), \"standard\"));\n+    strUsage += HelpMessagesOpt(policy.GetOptionsHelp());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#discussion_r31518046",
      "id" : 31518046,
      "original_commit_id" : "d21542c7103b2df23246f9a7cf3244d9d878a788",
      "original_position" : 86,
      "path" : "src/policy/policy.cpp",
      "position" : 86,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/6068",
      "updated_at" : "2015-06-02T12:45:29Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/31518046",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1419649?v=3",
         "events_url" : "https://api.github.com/users/Diapolo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Diapolo/followers",
         "following_url" : "https://api.github.com/users/Diapolo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Diapolo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Diapolo",
         "id" : 1419649,
         "login" : "Diapolo",
         "organizations_url" : "https://api.github.com/users/Diapolo/orgs",
         "received_events_url" : "https://api.github.com/users/Diapolo/received_events",
         "repos_url" : "https://api.github.com/users/Diapolo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Diapolo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Diapolo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Diapolo"
      }
   },
   {
      "body" : "Fixed most nits and squashed.",
      "created_at" : "2015-06-02T16:37:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-108008729",
      "id" : 108008729,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-02T16:37:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/108008729",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Passing a const reference to a string should be slightly more efficient.\nBut std::string implements reference counting I believe, so copying a\nstring does not require copying the entire data blob, only the (iirc) 24 or\n32 byte header structure. Passing a cost reference only needs 8 bytes\nthough.\n",
      "created_at" : "2015-06-02T17:51:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-108029848",
      "id" : 108029848,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-02T17:51:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/108029848",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "body" : "Mhmm, I'm not able to reprduce https://travis-ci.org/bitcoin/bitcoin/jobs/65112154 (no wallet) locally...\r\n@laanwj do you know if that may e related to the travis cache issue or is it unrelated? ",
      "created_at" : "2015-06-03T07:39:02Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-108232542",
      "id" : 108232542,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-03T07:43:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/108232542",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Could you outline the plan for next steps after this goes in? Standard flags/values are still hard-coded in several places, so I'm not sure that exposing the \"-policy\" option makes sense until it's possible to actually run with a different policy.",
      "created_at" : "2015-06-05T23:50:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-109484717",
      "id" : 109484717,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-05T23:50:25Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/109484717",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "body" : "> Could you outline the plan for next steps after this goes in?\r\n\r\nReopened #5180 as one of the things that I consider an important next step (although @luke-jr wasn't very happy with it the first time I proposed it). Other \"next steps\" (like #5114 ) are related to fees.\r\n\r\n> Standard flags/values are still hard-coded in several places, so I'm not sure that exposing the \"-policy\" option makes sense until it's possible to actually run with a different policy.\r\n\r\nWell, it will take some time until all standard flags/values are encapsulated here (specially if we never take a first step), and some things will be harder to discuss than others.\r\nBut I think the option is useful already. Advanced users (say, miners) can trivially implement their own CCustomPolicy and select it with the option (-policy=custom) without breaking any tests or risking consensus.\r\nAs we encapsulate more policy code in CStandardPolicy, the option will become more useful as the custom policy can modify more things.\r\nI could always leave the -policy option for #5180 but as said I think it's already useful to make it easy for the advanced user to implement and select their own policy.\r\n ",
      "created_at" : "2015-06-06T18:58:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-109637834",
      "id" : 109637834,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-06T18:58:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/109637834",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Updated code:\r\n\r\n> But I think the option is useful already. Advanced users (say, miners) can trivially ...\r\n\r\nThinking more about this...if we're assuming advanced users and they want to preserve the standard policy in their build and not simply replace it, they can also trivially add the new option themselves, so there's no reason to expose the new option until it has any use.\r\nSo I starded reducing the scope of this PR.\r\n\r\nSince I was touching the initialization parts, I also realized that @theuni was probably more concerned about was introducing globals in policy.cpp, something we're trying to fix for chainparams.\r\nI previously said to @luke-jr that we shouldn't rely on a policy global, but a global-returning-pseudo-factory function doesn't solve that: only passing CPolicy as parameter to the functions that depend on it will solve that.\r\nMy concern with luke's approach wasn't with the global itself, but with the fact that he was exposing and using a different for CStandardPolicy than for CPolicy. By hidding CStandardPolicy I'm sure I'm respecting advanced users and I'm happy to remove any additions to the \"first step\" (there were previous \"first steps\" before this \"first step\").\r\nActions:\r\n- Remove all globals from policy.cpp and the new -policy option, hopefully pleasing @theuni \r\n- Restore the simple global in main.cpp for the policy, just this time is compatible with CStandardPolicy being hidden by using a Factory. Hopefully this will please @luke-jr .\r\n\r\nI think #5180 is a perfect example for motivating this PR. Even if it's not accepted by itself, it's a simple example of how an advanced user could write his own custom policy (although removing that CChainParams dependecy from AcceptToMemoryPool should even be nicer for an example).\r\n",
      "created_at" : "2015-06-08T03:22:50Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-109849096",
      "id" : 109849096,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-12T09:25:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/109849096",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Rebased",
      "created_at" : "2015-06-18T09:30:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-113089677",
      "id" : 113089677,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-18T09:30:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/113089677",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "#6335 has been separated from this PR. Please let's focus on merging that first.\r\nAn updated version of this is coming soon...",
      "created_at" : "2015-06-24T17:18:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-114945949",
      "id" : 114945949,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-24T17:18:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/114945949",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "The scope has been reduced again.\r\n@faizkhan00 I'm sorry, but now the -policy option is left for #5180.\r\nAlso, no globals are created since they're not needed (yet, although I would happily put them back if nobody opposes).\r\n@theuni to discuss a solution for the globals that could be reused for chainparams, there's a longer branch in https://github.com/jtimon/bitcoin/tree/policy-global-0.11.99 ",
      "created_at" : "2015-06-25T17:00:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-115323905",
      "id" : 115323905,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-25T19:23:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115323905",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Rebased",
      "created_at" : "2015-06-26T16:06:28Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-115742404",
      "id" : 115742404,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-06-26T16:06:28Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/115742404",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Rebased",
      "created_at" : "2015-07-06T22:02:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119009282",
      "id" : 119009282,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-06T22:02:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119009282",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Reduced the scope again to a single commit. This cannot get simpler, so hopefully both @luke-jr and @theuni will be satisfied with this version (we can discuss other things where it seems there's still disagreements better after this has been merged).\r\n",
      "created_at" : "2015-07-07T11:31:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119177190",
      "id" : 119177190,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-07T11:31:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119177190",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Well, I added back the example attribute commit since it was mostly reviewed.",
      "created_at" : "2015-07-07T13:08:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119198667",
      "id" : 119198667,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-07T13:08:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119198667",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "After a talk with @luke-jr on IRC, I think I understand his vision better. The \"having a class named CStandardPolicy is a bug, because there shouldn't be any standard policy\" part is not clear to me yet though. If we want to make it simple for coders to implement and maintain custom policies (why would we have an interface and an implementation class otherwise?), then we need a name for the class implementing the interface. \r\nHe doesn't oppose to a -policy option either: he just wants to use \"-acceptnonstdtxn\" instead of \"-policy=test\". Which is fine. I can always create a PR with \"-policy=example_custom\" or something (although \"-policy=test\" decouples policy/policy from chainparams, but let's leave that for later).\r\n\r\nAbout the prohibition of  \"-acceptnonstdtxn=0 -testnet=0 -regtest=0\", he doesn't cares, but he feared that #6329 would be rejected otherwise. As discussed with @petertodd  in https://github.com/bitcoin/bitcoin/pull/6329#discussion_r33987204 , I really believe that the whole point of exposing policy options is to allow users to select them, and I don't think we want to maintain the ugly initialization complexity burden of knowing which policy options are prohibited for each particular chain.\r\nThat's why I added f2e8fbd1 at the end, but if we can't arrive to a conclusion on this fast I will leave it for later instead of squashing it. 5c9c0bfc may seem bikeshedding but it's just taking the fest opportunity to fix a little mistake in #6329.\r\nI'll wait for review before squashing or discarding the fixup commits.",
      "created_at" : "2015-07-07T21:00:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119338762",
      "id" : 119338762,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-07T21:00:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119338762",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Updated with several minor improvements and squashed \"fixup! RENAME: !fRequireStandard to fAcceptNonStdTxn (for \"-acceptnonstdtxn\")\". So now there's only one fixup commit \"waiting for approval\".\r\n",
      "created_at" : "2015-07-08T11:34:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-119546510",
      "id" : 119546510,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-08T11:34:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/119546510",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Policy::AppendHelpMessages() and CPolicy::InitFromArgs(), the removal of fIsBareMultisigStd and fRequireStandard globals from main.o, the removal of the unnecessary restriction on -acceptnonstdtxn and CStandardPolicy are left for #6423.\r\nIt doesn't seem like anyone is interested in acking or discussing those things here anymore (or for now) so I'm really minimizing the scope of this PR to something that it's so trivial I could not imagine anyone having a nit for it.\r\n",
      "created_at" : "2015-07-11T18:39:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-120651862",
      "id" : 120651862,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-11T18:39:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/120651862",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "Even though I minimized the scope of this PR to make it easily-mergeable, trvially-reviewable/rebasable and nit-unfriendly, @theuni's sharp review found something that forced me to update this:\r\n\r\nIsStandard/CPolicy::ApproveScript only needs to expose the output parameter ```txnouttype& whichType``` internally for CPolicy::ApproveTx, so that can be a private/protected method. This improvement doesn't make the PR less mergeable or reviewable, and since no acks/nacks where received since a minimized the scope I thought it was a no brainer to include it.\r\n\r\nNow I'm 99% that further non-bike-shedding (and I already s/Validate/Approve) nits are possible at all.\r\n\r\nThe biggest subset of what has been moved out is still being kept rebased in #6423 (including CPolicy::GetOptionsHelp() which will supposedly help @luke-jr create qt forms for configuring these options dynamically [when you show me how to do that I will want to do the same for all the options, not just the policy ones]), but it will be closed (for depending on this one) as soon as I know what travis thinks about it and until this is merged.",
      "created_at" : "2015-07-22T23:23:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-123903946",
      "id" : 123903946,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-22T23:23:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/123903946",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1008458?v=3",
         "events_url" : "https://api.github.com/users/jtimon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jtimon/followers",
         "following_url" : "https://api.github.com/users/jtimon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jtimon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jtimon",
         "id" : 1008458,
         "login" : "jtimon",
         "organizations_url" : "https://api.github.com/users/jtimon/orgs",
         "received_events_url" : "https://api.github.com/users/jtimon/received_events",
         "repos_url" : "https://api.github.com/users/jtimon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jtimon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jtimon"
      }
   },
   {
      "body" : "ACK",
      "created_at" : "2015-07-22T23:43:06Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/6068#issuecomment-123908668",
      "id" : 123908668,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/6068",
      "updated_at" : "2015-07-22T23:43:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/123908668",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=3",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   }
]
