[
   {
      "body" : "Please explain how your vision accounts for multi-wallet use. It seems desirable to have different users access different wallets (or perhaps even limited to specific accounts within a wallet), but your plan above does not seem to account for that possibility.",
      "created_at" : "2015-11-17T19:56:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157487642",
      "id" : 157487642,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7044",
      "updated_at" : "2015-11-17T19:56:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/157487642",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/1095675?v=3",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "body" : "@luke-jr That seems orthogonal to me. Presumably if we eventually wanted to layer access controls on top of this in the future (though we've shed away from that in the past), this appears completely compatible with doing so... but this is useful without that, just from an credential management perspective.",
      "created_at" : "2015-11-17T20:13:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157492132",
      "id" : 157492132,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/7044",
      "updated_at" : "2015-11-17T20:13:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/157492132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45115365"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45115365"
         }
      },
      "body" : "I think we really want to avoid adding OpenSSL dependencies. But it shouldn't be hard to add PBKDF2 (we already have a builtin HMAC-SHA256 implementation).",
      "commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "created_at" : "2015-11-17T20:25:17Z",
      "diff_hunk" : "@@ -72,6 +75,58 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 4) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strIterations = vFields[1];\n+            int nIterint = atoi64(strIterations);\n+            std::string strSalt = vFields[2];\n+            std::string strHash = vFields[3];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned int KEY_HEX_SIZE = 64;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            char outhex[KEY_HEX_SIZE];\n+\n+            if (PKCS5_PBKDF2_HMAC(strPass.c_str(), strPass.size(), ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45115365",
      "id" : 45115365,
      "original_commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "original_position" : 48,
      "path" : "src/httprpc.cpp",
      "position" : 48,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044",
      "updated_at" : "2015-11-17T20:25:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45115365",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45116060"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45116060"
         }
      },
      "body" : "Early return will break the timing resistance property. It's probably better to maintain a boleean return variable, and use `|=` to mix in the result.",
      "commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "created_at" : "2015-11-17T20:31:03Z",
      "diff_hunk" : "@@ -72,6 +75,58 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 4) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strIterations = vFields[1];\n+            int nIterint = atoi64(strIterations);\n+            std::string strSalt = vFields[2];\n+            std::string strHash = vFields[3];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned int KEY_HEX_SIZE = 64;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            char outhex[KEY_HEX_SIZE];\n+\n+            if (PKCS5_PBKDF2_HMAC(strPass.c_str(), strPass.size(), \n+                        reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size(),  nIterint,\n+                          EVP_sha256(), KEY_SIZE, out) != 0) {\n+                for (int i=0;i<(int)KEY_SIZE;i++) {\n+                    sprintf(outhex+(i*2), \"%02x\", out[i]);\n+                }\n+                std::string strHashFromPass = std::string(outhex, KEY_HEX_SIZE);\n+\n+                if (TimingResistantEqual(strHashFromPass, strHash)) {\n+                    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45116060",
      "id" : 45116060,
      "original_commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "original_position" : 57,
      "path" : "src/httprpc.cpp",
      "position" : 57,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044",
      "updated_at" : "2015-11-17T20:31:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45116060",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45140295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45140295"
         }
      },
      "body" : "We're in that boat for the wallet encryption already.",
      "commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "created_at" : "2015-11-17T23:44:23Z",
      "diff_hunk" : "@@ -72,6 +75,58 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 4) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strIterations = vFields[1];\n+            int nIterint = atoi64(strIterations);\n+            std::string strSalt = vFields[2];\n+            std::string strHash = vFields[3];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned int KEY_HEX_SIZE = 64;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            char outhex[KEY_HEX_SIZE];\n+\n+            if (PKCS5_PBKDF2_HMAC(strPass.c_str(), strPass.size(), ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45140295",
      "id" : 45140295,
      "original_commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "original_position" : 48,
      "path" : "src/httprpc.cpp",
      "position" : 48,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044",
      "updated_at" : "2015-11-17T23:44:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45140295",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/858454?v=3",
         "events_url" : "https://api.github.com/users/gmaxwell/events{/privacy}",
         "followers_url" : "https://api.github.com/users/gmaxwell/followers",
         "following_url" : "https://api.github.com/users/gmaxwell/following{/other_user}",
         "gists_url" : "https://api.github.com/users/gmaxwell/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/gmaxwell",
         "id" : 858454,
         "login" : "gmaxwell",
         "organizations_url" : "https://api.github.com/users/gmaxwell/orgs",
         "received_events_url" : "https://api.github.com/users/gmaxwell/received_events",
         "repos_url" : "https://api.github.com/users/gmaxwell/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/gmaxwell/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/gmaxwell"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45140434"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45140434"
         }
      },
      "body" : "See #5949.",
      "commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "created_at" : "2015-11-17T23:45:51Z",
      "diff_hunk" : "@@ -72,6 +75,58 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 4) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strIterations = vFields[1];\n+            int nIterint = atoi64(strIterations);\n+            std::string strSalt = vFields[2];\n+            std::string strHash = vFields[3];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned int KEY_HEX_SIZE = 64;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            char outhex[KEY_HEX_SIZE];\n+\n+            if (PKCS5_PBKDF2_HMAC(strPass.c_str(), strPass.size(), ",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45140434",
      "id" : 45140434,
      "original_commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "original_position" : 48,
      "path" : "src/httprpc.cpp",
      "position" : 48,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044",
      "updated_at" : "2015-11-17T23:45:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45140434",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=3",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45141910"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45141910"
         }
      },
      "body" : "Could you elaborate on what sort of timing info will leak? (unless you mean the function should try every single name/pass combination, and not call the continue on line 98 as well)",
      "commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "created_at" : "2015-11-18T00:05:40Z",
      "diff_hunk" : "@@ -72,6 +75,58 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 4) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strIterations = vFields[1];\n+            int nIterint = atoi64(strIterations);\n+            std::string strSalt = vFields[2];\n+            std::string strHash = vFields[3];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned int KEY_HEX_SIZE = 64;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            char outhex[KEY_HEX_SIZE];\n+\n+            if (PKCS5_PBKDF2_HMAC(strPass.c_str(), strPass.size(), \n+                        reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size(),  nIterint,\n+                          EVP_sha256(), KEY_SIZE, out) != 0) {\n+                for (int i=0;i<(int)KEY_SIZE;i++) {\n+                    sprintf(outhex+(i*2), \"%02x\", out[i]);\n+                }\n+                std::string strHashFromPass = std::string(outhex, KEY_HEX_SIZE);\n+\n+                if (TimingResistantEqual(strHashFromPass, strHash)) {\n+                    return true;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45141910",
      "id" : 45141910,
      "original_commit_id" : "24edc3be74cc8467bc715e39692aef61b3e37c05",
      "original_position" : 57,
      "path" : "src/httprpc.cpp",
      "position" : 57,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/7044",
      "updated_at" : "2015-11-18T00:11:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/45141910",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/5767891?v=3",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   }
]
