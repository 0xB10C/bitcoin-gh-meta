[
   {
      "author_association" : "MEMBER",
      "body" : "Super strong concept ACK: very happy to see more people interested in adding fuzzers. Very welcome! :)\r\n\r\nAlso: the habit of after fixing a security bug also implementing a fuzz target that could have found the bug is something I think we should strive for. I think @kcc (known for making C++ reasonably sane by introducing the sanitizers, libFuzzer, OSS-Fuzz, CFI, etc.) first coined the term \"regression fuzzing\" for that :)\r\n\r\nA good example of \"regression fuzzing\" was this OOB read in `libc++` `<random>` which not only was fixed but also got a couple of new fuzz targets added: https://bugs.chromium.org/p/chromium/issues/detail?id=994957",
      "created_at" : "2020-01-03T21:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-570705528",
      "id" : 570705528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDcwNTUyOA==",
      "updated_at" : "2020-01-03T21:36:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570705528",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17777](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17777.html) (tests: Add fuzzing harness for DecodeHexTx(â¦) by practicalswift)\n* [#17771](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17771.html) (tests: Add fuzzing harness for V1TransportDeserializer (P2P transport) by practicalswift)\n* [#17479](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17479.html) (Return BlockValidationState from ProcessNewBlock if CheckBlock/AcceptBlock fails by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-03T23:35:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-570729631",
      "id" : 570729631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDcyOTYzMQ==",
      "updated_at" : "2020-01-03T23:35:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570729631",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363743028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363743028"
         }
      },
      "author_association" : "NONE",
      "body" : "would emplace_back be more efficient / proper here?",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T13:18:56Z",
      "diff_hunk" : "@@ -30,7 +30,7 @@ static void AssembleBlock(benchmark::State& state)\n     std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n     for (size_t b{0}; b < NUM_BLOCKS; ++b) {\n         CMutableTransaction tx;\n-        tx.vin.push_back(MineBlock(g_testing_setup->m_node, SCRIPT_PUB));\n+        tx.vin.push_back(CTxIn{MineBlock(g_testing_setup->m_node, SCRIPT_PUB)});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363743028",
      "id" : 363743028,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc0MzAyOA==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 5,
      "path" : "src/bench/block_assemble.cpp",
      "position" : 5,
      "pull_request_review_id" : 339228830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363743028",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363745281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363745281"
         }
      },
      "author_association" : "NONE",
      "body" : "use .front() instead of .at(0)",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T13:24:52Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};\n+        duplicate_coinbase_script = CScript() << duplicate_coinbase_height << OP_0;\n+        tx.vin.at(0).scriptSig = duplicate_coinbase_script;\n+\n+        // Mine block and create next block template\n+        current_block->vtx.back() = MakeTransactionRef(tx);\n+        current_block->hashMerkleRoot = BlockMerkleRoot(*current_block);\n+        assert(!MineBlock(current_block).IsNull());\n+        circulation += GetBlockSubsidy(ChainActive().Height(), Params().GetConsensus());\n+\n+        assert(ChainActive().Height() == 1);\n+        UpdateUtxoStats();\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+    }\n+\n+    while (fuzzed_data_provider.remaining_bytes()) {\n+        const auto action = static_cast<Action>(fuzzed_data_provider.ConsumeIntegralInRange(0, 2));\n+        switch (action) {\n+        case Action::CREATE_INPUT: {\n+            CMutableTransaction tx{*current_block->vtx.back()};\n+            AppendRandomTxo(tx);\n+            current_block->vtx.back() = MakeTransactionRef(tx);\n+            StoreLastTxo();\n+            break;\n+        }\n+        case Action::CREATE_TX: {\n+            CMutableTransaction tx{};\n+            AppendRandomTxo(tx);\n+            current_block->vtx.push_back(MakeTransactionRef(tx));\n+            StoreLastTxo();\n+            break;\n+        }\n+        case Action::CREATE_BLOCK: {\n+            ReGenerateCommitments(*current_block);\n+            const bool was_valid = !MineBlock(current_block).IsNull();\n+\n+            const auto prev_utxo_stats = utxo_stats;\n+            if (was_valid) {\n+                circulation += GetBlockSubsidy(ChainActive().Height(), Params().GetConsensus());\n+\n+                if (duplicate_coinbase_height == ChainActive().Height()) {\n+                    // we mined the duplicate coinbase\n+                    assert(current_block->vtx.at(0)->vin.at(0).scriptSig == duplicate_coinbase_script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363745281",
      "id" : 363745281,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc0NTI4MQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 139,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : 139,
      "pull_request_review_id" : 339231752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363745281",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363760321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363760321"
         }
      },
      "author_association" : "NONE",
      "body" : "use .front()",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T14:01:15Z",
      "diff_hunk" : "@@ -22,19 +25,62 @@ CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n     return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void ReGenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363760321",
      "id" : 363760321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MDMyMQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 27,
      "path" : "src/test/util/mining.cpp",
      "position" : 27,
      "pull_request_review_id" : 339252135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363760321",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363892945"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363892945"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why?\r\n\r\n.at() asserts that the element exists, which I like",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T18:43:39Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};\n+        duplicate_coinbase_script = CScript() << duplicate_coinbase_height << OP_0;\n+        tx.vin.at(0).scriptSig = duplicate_coinbase_script;\n+\n+        // Mine block and create next block template\n+        current_block->vtx.back() = MakeTransactionRef(tx);\n+        current_block->hashMerkleRoot = BlockMerkleRoot(*current_block);\n+        assert(!MineBlock(current_block).IsNull());\n+        circulation += GetBlockSubsidy(ChainActive().Height(), Params().GetConsensus());\n+\n+        assert(ChainActive().Height() == 1);\n+        UpdateUtxoStats();\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+    }\n+\n+    while (fuzzed_data_provider.remaining_bytes()) {\n+        const auto action = static_cast<Action>(fuzzed_data_provider.ConsumeIntegralInRange(0, 2));\n+        switch (action) {\n+        case Action::CREATE_INPUT: {\n+            CMutableTransaction tx{*current_block->vtx.back()};\n+            AppendRandomTxo(tx);\n+            current_block->vtx.back() = MakeTransactionRef(tx);\n+            StoreLastTxo();\n+            break;\n+        }\n+        case Action::CREATE_TX: {\n+            CMutableTransaction tx{};\n+            AppendRandomTxo(tx);\n+            current_block->vtx.push_back(MakeTransactionRef(tx));\n+            StoreLastTxo();\n+            break;\n+        }\n+        case Action::CREATE_BLOCK: {\n+            ReGenerateCommitments(*current_block);\n+            const bool was_valid = !MineBlock(current_block).IsNull();\n+\n+            const auto prev_utxo_stats = utxo_stats;\n+            if (was_valid) {\n+                circulation += GetBlockSubsidy(ChainActive().Height(), Params().GetConsensus());\n+\n+                if (duplicate_coinbase_height == ChainActive().Height()) {\n+                    // we mined the duplicate coinbase\n+                    assert(current_block->vtx.at(0)->vin.at(0).scriptSig == duplicate_coinbase_script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363892945",
      "id" : 363892945,
      "in_reply_to_id" : 363745281,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5Mjk0NQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 139,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : 139,
      "pull_request_review_id" : 339429676,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363892945",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363893018"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363893018"
         }
      },
      "author_association" : "MEMBER",
      "body" : "why?\r\n\r\n.at() asserts that the element exists, which I like",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T18:43:47Z",
      "diff_hunk" : "@@ -22,19 +25,62 @@ CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n     return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void ReGenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363893018",
      "id" : 363893018,
      "in_reply_to_id" : 363760321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5MzAxOA==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 27,
      "path" : "src/test/util/mining.cpp",
      "position" : 27,
      "pull_request_review_id" : 339429771,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363893018",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363928146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363928146"
         }
      },
      "author_association" : "NONE",
      "body" : "> why?\r\n> \r\n> .at() asserts that the element exists, which I like\r\n\r\nwhat do you mean by this?",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T20:06:51Z",
      "diff_hunk" : "@@ -22,19 +25,62 @@ CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n     return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void ReGenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363928146",
      "id" : 363928146,
      "in_reply_to_id" : 363760321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyODE0Ng==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 27,
      "path" : "src/test/util/mining.cpp",
      "position" : 27,
      "pull_request_review_id" : 339476811,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363928146",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363929147"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363929147"
         }
      },
      "author_association" : "MEMBER",
      "body" : ".at() will throw an exception when the vector is empty; front() will just cause UB.",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T20:09:21Z",
      "diff_hunk" : "@@ -22,19 +25,62 @@ CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n     return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void ReGenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363929147",
      "id" : 363929147,
      "in_reply_to_id" : 363760321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyOTE0Nw==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 27,
      "path" : "src/test/util/mining.cpp",
      "position" : 27,
      "pull_request_review_id" : 339478197,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363929147",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363942583"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363942583"
         }
      },
      "author_association" : "NONE",
      "body" : "> .at() will throw an exception when the vector is empty; front() will just cause UB.\r\n\r\nhuh, did not know that. thanks for clarifying",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-07T20:44:58Z",
      "diff_hunk" : "@@ -22,19 +25,62 @@ CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n     return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void ReGenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363942583",
      "id" : 363942583,
      "in_reply_to_id" : 363760321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MjU4Mw==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 27,
      "path" : "src/test/util/mining.cpp",
      "position" : 27,
      "pull_request_review_id" : 339496094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363942583",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "This is kind of an aside, but thought I'd post here since this harness makes use of the `ConsumeIntegralInRange` function and I'm curious what others think.\r\n\r\nI modified `FuzzedDataProvider.h` to ignore byte 48 so that afl-tmin could minimize better.  `afl-tmin` zeros out redundant data with ascii '0' (http://lcamtuf.coredump.cx/afl/technical_details.txt) - this is done to reduce the number of execs.  Since the harness uses range (0-2) and all 256 possible fuzz bytes are mapped to this range, ignoring byte 48 should allow for better minimization if running `afl-tmin` on a corpus.  However, with and without ignoring byte 48, `afl-tmin` was not able to minimize at all, but logically, it SHOULD have regardless of whether the byte was ignored or not (I can look into this more so that there's more data on this).  This is the only harness that used `ConsumeIntegralInRange`, so I wasn't able to test `afl-tmin` in a meaningful way on any other harnesses. Thoughts on ignoring byte 48?",
      "created_at" : "2020-01-08T01:12:14Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-571846309",
      "id" : 571846309,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MTg0NjMwOQ==",
      "updated_at" : "2020-01-08T01:12:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/571846309",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364965476"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364965476"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`.front()` for clarity that this is a coinbase tx?",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T21:21:39Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364965476",
      "id" : 364965476,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk2NTQ3Ng==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 96,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340822132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364965476",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364970490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364970490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "can  you remind the reader what the OP_0 push is for? I've forgotten as well, or cannot at least find the rule needed for it.",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T21:34:21Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};\n+        duplicate_coinbase_script = CScript() << duplicate_coinbase_height << OP_0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364970490",
      "id" : 364970490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3MDQ5MA==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 97,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340822132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364970490",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364970829"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364970829"
         }
      },
      "author_association" : "MEMBER",
      "body" : "about right... for what? :)",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T21:35:15Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364970829",
      "id" : 364970829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3MDgyOQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 89,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340822132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364970829",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364972613"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364972613"
         }
      },
      "author_association" : "MEMBER",
      "body" : "this section needs a description what it's setting up for",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T21:39:28Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r364972613",
      "id" : 364972613,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3MjYxMw==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 88,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340822132,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/364972613",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365009609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365009609"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thx. Used `front` in both instances in this scope.",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T23:27:12Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365009609",
      "id" : 365009609,
      "in_reply_to_id" : 364965476,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwOTYwOQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 96,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340878458,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365009609",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365009704"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365009704"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Padding to avoid bad-cb-length. Added comment",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T23:27:35Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};\n+        duplicate_coinbase_script = CScript() << duplicate_coinbase_height << OP_0;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365009704",
      "id" : 365009704,
      "in_reply_to_id" : 364970490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAwOTcwNA==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 97,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340878583,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365009704",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365010189"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365010189"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Removed wording and added different doc comment.\r\n\r\nThe fuzzer mines shorter chains more often than longer ones, so it should be small. Though we also want it to be large sometimes, but not too large.",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T23:29:23Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365010189",
      "id" : 365010189,
      "in_reply_to_id" : 364970829,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMDE4OQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 89,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340879187,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365010189",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365010258"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365010258"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Made scope shorter",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-09T23:29:42Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r365010258",
      "id" : 365010258,
      "in_reply_to_id" : 364972613,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAxMDI1OA==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 88,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : null,
      "pull_request_review_id" : 340879293,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-10T15:33:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/365010258",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Very nice fuzzing harness! Thanks for adding!\r\n\r\nTested ACK 5b90f46b0217af88dd3a88b028c2919361bdade5 modulo squash of last commit\r\n\r\nCompared to the other fuzzers this one is very slow (6 executions/second), but I guess that is largely unavoidable given the code being tested :)\r\n\r\nAlso, a slow fuzzing harness is better than no fuzzing harness.",
      "created_at" : "2020-01-10T15:07:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573071927",
      "id" : 573071927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzA3MTkyNw==",
      "updated_at" : "2020-01-10T15:07:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573071927",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Compared to the other fuzzers this one is very slow (6 executions/second), but I guess that is largely unavoidable given the code being tested :)\r\n\r\nGood question. This is actually a question in the review club next week: https://bitcoincore.reviews/17860.html\r\n\r\nYou (and all other reviewers) are invited to join and share your thoughts and ideas.",
      "created_at" : "2020-01-10T15:40:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573085851",
      "id" : 573085851,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzA4NTg1MQ==",
      "updated_at" : "2020-01-10T15:40:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573085851",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "ACK 8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-10T16:12:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573099391",
      "id" : 573099391,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzA5OTM5MQ==",
      "updated_at" : "2020-01-10T16:12:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573099391",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I am trying fuzzing `utxo_total_supply` with AFL and the fuzz is returning crash like this:\r\n`[-] PROGRAM ABORT : Test case 'id:000000,orig:f66a2f2925ab9d377ea5c18ba941e7d1601b7509' results in a crash`\r\n\r\nOne possible cause for crash is memory limit as reported by the fuzzer (52MB), and it suggests doing this:\r\n`( ulimit -Sv $[51 << 10]; /path/to/binary [...] <testcase )`\r\n\r\nWhile setting ulimit at [51<<10] gives a `SYSTEM ERROR : Unable to mmap file 'test/fuzz/utxo_total_supply'`, setting it to [51<<100] (and for higher values) gives the crash back.\r\n\r\nI am new to fuzzing, and am not very sure whats exactly happening here. Seems like its crashing for the very first test case itself. Would appreciate some guidance to navigate this.\r\n\r\nI am at `8b868f174`\r\n",
      "created_at" : "2020-01-11T11:43:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573309381",
      "id" : 573309381,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzMwOTM4MQ==",
      "updated_at" : "2020-01-11T11:43:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573309381",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/codeShark149/events{/privacy}",
         "followers_url" : "https://api.github.com/users/codeShark149/followers",
         "following_url" : "https://api.github.com/users/codeShark149/following{/other_user}",
         "gists_url" : "https://api.github.com/users/codeShark149/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/codeShark149",
         "id" : 36541669,
         "login" : "codeShark149",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/codeShark149/orgs",
         "received_events_url" : "https://api.github.com/users/codeShark149/received_events",
         "repos_url" : "https://api.github.com/users/codeShark149/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/codeShark149/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/codeShark149/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/codeShark149"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@codeShark149 Does it work if you fuzz with `libFuzzer` instead?\r\n\r\nTry this:\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ src/test/fuzz/utxo_total_supply\r\n```",
      "created_at" : "2020-01-13T15:39:58Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573724886",
      "id" : 573724886,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzcyNDg4Ng==",
      "updated_at" : "2020-01-13T15:39:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573724886",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@codeShark149 I fixed that error on macOS by turning AFL's forkserver off `export AFL_NO_FORKSRV=1`.  If AFL continually crashes on the initial input, then it's probably because the binary isn't being instrumented correctly.",
      "created_at" : "2020-01-13T15:43:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573726974",
      "id" : 573726974,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MzcyNjk3NA==",
      "updated_at" : "2020-01-13T15:43:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573726974",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/15145615?v=4",
         "events_url" : "https://api.github.com/users/Crypt-iQ/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Crypt-iQ/followers",
         "following_url" : "https://api.github.com/users/Crypt-iQ/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Crypt-iQ/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Crypt-iQ",
         "id" : 15145615,
         "login" : "Crypt-iQ",
         "node_id" : "MDQ6VXNlcjE1MTQ1NjE1",
         "organizations_url" : "https://api.github.com/users/Crypt-iQ/orgs",
         "received_events_url" : "https://api.github.com/users/Crypt-iQ/received_events",
         "repos_url" : "https://api.github.com/users/Crypt-iQ/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Crypt-iQ/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Crypt-iQ/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Crypt-iQ"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've played a bit more with this harness:\r\n\r\nI'm currently using a seed corpus of 3247 files. I'm fuzzing at a rate of 6 execs/second which means that it takes almost ten minutes just to initialize `libFuzzer` with all seeds in a fuzzing session.\r\n\r\nA lot of the time is spent setting up (and tearing down) the `TestingSetup` object for each input.\r\n\r\nCan we think of ways to speed up this fuzzing harness?\r\n\r\nPerhaps a fully featured `TestingSetup` object is not needed? Would limiting the setup to only the absolute minimum needed speed up things?",
      "created_at" : "2020-01-13T16:29:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573749950",
      "id" : 573749950,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Mzc0OTk1MA==",
      "updated_at" : "2020-01-13T16:29:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573749950",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@practicalswift I suspected as much, that the testing harness is the heavy part of the test. On my non-beefy machine it looks like I'm getting 1 a second?\r\n\r\nAlternative might be to allow it to run longer to build a longer chain?",
      "created_at" : "2020-01-13T16:32:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573751619",
      "id" : 573751619,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Mzc1MTYxOQ==",
      "updated_at" : "2020-01-13T16:32:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573751619",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Another data point:\r\n\r\nAs a crude way to quantify the impact of the test setup I made `TestingSetup` persistent across test inputs (`static TestingSetup`). That obviously invalidates all assertions (and thus makes the fuzzer meaningless), but the speed jumps to 32 exec/second.",
      "created_at" : "2020-01-13T16:43:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573757270",
      "id" : 573757270,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Mzc1NzI3MA==",
      "updated_at" : "2020-01-13T16:43:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573757270",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> I've played a bit more with this harness:\r\n> \r\n> I'm currently using a seed corpus of 3247 files. I'm fuzzing at a rate of 6 execs/second which means that it takes almost ten minutes just to initialize `libFuzzer` with all seeds in a fuzzing session.\r\n> \r\n> A lot of the time is spent setting up (and tearing down) the `TestingSetup` object for each input.\r\n> \r\n> Can we think of ways to speed up this fuzzing harness?\r\n> \r\n> Perhaps a fully featured `TestingSetup` object is not needed? Would limiting the setup to only the absolute minimum needed speed up things?\r\n\r\nYou mind posting a profiler view of this? I'll try to optimize this if I can. (VS has an optimization profiler section).",
      "created_at" : "2020-01-13T17:30:24Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573778424",
      "id" : 573778424,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Mzc3ODQyNA==",
      "updated_at" : "2020-01-13T17:30:24Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573778424",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@sanjaykdragon I don't have any profiler view to post :)  The quoted numbers are from the output you'll get when running `utxo_total_supply` with `libFuzzer` using the following steps\r\n\r\n```\r\n$ make distclean\r\n$ ./autogen.sh\r\n$ CC=clang CXX=clang++ ./configure --enable-fuzz \\\r\n      --with-sanitizers=address,fuzzer,undefined\r\n$ make\r\n$ src/test/fuzz/utxo_total_supply\r\n```",
      "created_at" : "2020-01-13T22:05:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-573894611",
      "id" : 573894611,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3Mzg5NDYxMQ==",
      "updated_at" : "2020-01-13T22:05:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/573894611",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "> @codeShark149 Does it work if you fuzz with `libFuzzer` instead?\r\n\r\n\r\n@practicalswift yes libfuzzer can fuzz it. \r\n\r\n\r\n\r\n> @codeShark149 I fixed that error on macOS by turning AFL's forkserver off `export AFL_NO_FORKSRV=1`.\r\n\r\n@Crypt-iQ thanks for suggesting but for some reason that did'nt work. The problem is simple though. The instrumented binary takes about 103 MB memory to run. So just had to change `-m200` while running the fuzzer. Now its fuzzing with AFL. \r\n\r\nSome note on execution: libfuzzer reported around 5 exec/sec. AFL reported 3.13/sec. Which is natural given the thing being tested. \r\nAny idea on how to make this thing run faster? I will try parallel but i doubt its gonna complete in any reasonable time.   ",
      "created_at" : "2020-01-14T15:18:00Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-574223927",
      "id" : 574223927,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3NDIyMzkyNw==",
      "updated_at" : "2020-01-14T15:18:00Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/574223927",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/36541669?v=4",
         "events_url" : "https://api.github.com/users/codeShark149/events{/privacy}",
         "followers_url" : "https://api.github.com/users/codeShark149/followers",
         "following_url" : "https://api.github.com/users/codeShark149/following{/other_user}",
         "gists_url" : "https://api.github.com/users/codeShark149/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/codeShark149",
         "id" : 36541669,
         "login" : "codeShark149",
         "node_id" : "MDQ6VXNlcjM2NTQxNjY5",
         "organizations_url" : "https://api.github.com/users/codeShark149/orgs",
         "received_events_url" : "https://api.github.com/users/codeShark149/received_events",
         "repos_url" : "https://api.github.com/users/codeShark149/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/codeShark149/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/codeShark149/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/codeShark149"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r367014351"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367014351"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could squash this commit.",
      "commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "created_at" : "2020-01-15T17:41:38Z",
      "diff_hunk" : "@@ -32,8 +32,7 @@ static void ApplyStats(CCoinsStats &stats, CHashWriter& ss, const uint256& hash,\n     ss << VARINT(0u);\n }\n \n-//! Calculate statistics about the unspent transaction output set",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r367014351",
      "id" : 367014351,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxNDM1MQ==",
      "original_commit_id" : "8b868f1741d37d97d09218093bc9434bbe5a749d",
      "original_position" : 4,
      "path" : "src/node/coinstats.cpp",
      "position" : 4,
      "pull_request_review_id" : 343401073,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-15T18:14:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/367014351",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/2415484?v=4",
         "events_url" : "https://api.github.com/users/jonatack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonatack/followers",
         "following_url" : "https://api.github.com/users/jonatack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonatack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonatack",
         "id" : 2415484,
         "login" : "jonatack",
         "node_id" : "MDQ6VXNlcjI0MTU0ODQ=",
         "organizations_url" : "https://api.github.com/users/jonatack/orgs",
         "received_events_url" : "https://api.github.com/users/jonatack/received_events",
         "repos_url" : "https://api.github.com/users/jonatack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonatack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonatack"
      }
   }
]
