[
   {
      "author_association" : "MEMBER",
      "body" : "Super strong concept ACK: very happy to see more people interested in adding fuzzers. Very welcome! :)\r\n\r\nAlso: the habit of after fixing a security bug also implementing a fuzz target that could have found the bug is something I think we should strive for. I think @kcc (known for making C++ reasonably sane by introducing the sanitizers, libFuzzer, OSS-Fuzz, CFI, etc.) first coined the term \"regression fuzzing\" for that :)\r\n\r\nA good example of \"regression fuzzing\" was this OOB read in `libc++` `<random>` which not only was fixed but also got a couple of new fuzz targets added: https://bugs.chromium.org/p/chromium/issues/detail?id=994957",
      "created_at" : "2020-01-03T21:36:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-570705528",
      "id" : 570705528,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDcwNTUyOA==",
      "updated_at" : "2020-01-03T21:36:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570705528",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17777](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17777.html) (tests: Add fuzzing harness for DecodeHexTx(â¦) by practicalswift)\n* [#17771](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17771.html) (tests: Add fuzzing harness for V1TransportDeserializer (P2P transport) by practicalswift)\n* [#17479](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17479.html) (Return BlockValidationState from ProcessNewBlock if CheckBlock/AcceptBlock fails by jnewbery)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-01-03T23:35:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#issuecomment-570729631",
      "id" : 570729631,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/17860",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU3MDcyOTYzMQ==",
      "updated_at" : "2020-01-03T23:35:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/570729631",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363743028"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363743028"
         }
      },
      "author_association" : "NONE",
      "body" : "would emplace_back be more efficient / proper here?",
      "commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "created_at" : "2020-01-07T13:18:56Z",
      "diff_hunk" : "@@ -30,7 +30,7 @@ static void AssembleBlock(benchmark::State& state)\n     std::array<CTransactionRef, NUM_BLOCKS - COINBASE_MATURITY + 1> txs;\n     for (size_t b{0}; b < NUM_BLOCKS; ++b) {\n         CMutableTransaction tx;\n-        tx.vin.push_back(MineBlock(g_testing_setup->m_node, SCRIPT_PUB));\n+        tx.vin.push_back(CTxIn{MineBlock(g_testing_setup->m_node, SCRIPT_PUB)});",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363743028",
      "id" : 363743028,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc0MzAyOA==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 5,
      "path" : "src/bench/block_assemble.cpp",
      "position" : 5,
      "pull_request_review_id" : 339228830,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-07T13:18:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363743028",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363745281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363745281"
         }
      },
      "author_association" : "NONE",
      "body" : "use .front() instead of .at(0)",
      "commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "created_at" : "2020-01-07T13:24:52Z",
      "diff_hunk" : "@@ -0,0 +1,158 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <consensus/merkle.h>\n+#include <node/coinstats.h>\n+#include <script/interpreter.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/util/mining.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+#include <version.h>\n+\n+enum class Action : uint8_t {\n+    CREATE_INPUT, //!< Append an input-output pair to the last tx in the current block\n+    CREATE_TX,    //!< Append a tx to the list of txs in the current block\n+    CREATE_BLOCK, //!< Append the current block to the active chain\n+};\n+\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    /** The testing setup that creates a chainstate and other globals */\n+    TestingSetup test_setup{CBaseChainParams::REGTEST};\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const auto PrepareNextBlock = [&]() {\n+        // Use OP_FALSE to avoid BIP30 check from hitting early\n+        auto block = PrepareBlock(test_setup.m_node, /* coinbase_scriptPubKey */ OP_FALSE);\n+        // Replace OP_FALSE with OP_TRUE\n+        {\n+            CMutableTransaction tx{*block->vtx.back()};\n+            tx.vout.at(0).scriptPubKey = OP_TRUE;\n+            block->vtx.back() = MakeTransactionRef(tx);\n+        }\n+        return block;\n+    };\n+\n+    /** The block template this fuzzer is working on */\n+    auto current_block = PrepareNextBlock();\n+    /** Append-only set of tx outpoints, entries are not removed when spent */\n+    std::vector<std::pair<COutPoint, CTxOut>> txos;\n+    /** The utxo stats at the chain tip */\n+    CCoinsStats utxo_stats;\n+    /** The total amount of coins in the utxo set */\n+    CAmount circulation{0};\n+\n+\n+    // Store the tx out in the txo map\n+    const auto StoreLastTxo = [&]() {\n+        // get last tx\n+        const CTransaction& tx = *current_block->vtx.back();\n+        // get last out\n+        const uint32_t i = tx.vout.size() - 1;\n+        // store it\n+        txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        if (current_block->vtx.size() == 1 && tx.vout.at(i).scriptPubKey[0] == OP_RETURN) {\n+            // also store coinbase\n+            const uint32_t i = tx.vout.size() - 2;\n+            txos.emplace_back(COutPoint{tx.GetHash(), i}, tx.vout.at(i));\n+        }\n+    };\n+    const auto AppendRandomTxo = [&](CMutableTransaction& tx) {\n+        const auto& txo = txos.at(fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, txos.size() - 1));\n+        tx.vin.emplace_back(txo.first);\n+        tx.vout.emplace_back(txo.second.nValue, txo.second.scriptPubKey); // \"Forward\" coin with no fee\n+    };\n+    const auto UpdateUtxoStats = [&]() {\n+        LOCK(cs_main);\n+        ::ChainstateActive().ForceFlushStateToDisk();\n+        assert(GetUTXOStats(&ChainstateActive().CoinsDB(), utxo_stats));\n+        // Check that miner can't print more money than they are allowed to\n+        assert(circulation == utxo_stats.nTotalAmount);\n+    };\n+\n+\n+    // Update internal state to chain tip\n+    StoreLastTxo();\n+    UpdateUtxoStats();\n+    assert(ChainActive().Height() == 0);\n+    // Get at which height we duplicate the coinbase\n+    int64_t duplicate_coinbase_height;\n+    CScript duplicate_coinbase_script;\n+    {\n+        // A chance of 1 in 20 for the duplicate coinbase to be within the first 100 blocks feels about right\n+        duplicate_coinbase_height = fuzzed_data_provider.ConsumeIntegralInRange(0, 20 * COINBASE_MATURITY);\n+        // Mine the first block with this duplicate\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+\n+        // Create duplicate (CScript should match exact format as in CreateNewBlock)\n+        CMutableTransaction tx{*current_block->vtx.back()};\n+        duplicate_coinbase_script = CScript() << duplicate_coinbase_height << OP_0;\n+        tx.vin.at(0).scriptSig = duplicate_coinbase_script;\n+\n+        // Mine block and create next block template\n+        current_block->vtx.back() = MakeTransactionRef(tx);\n+        current_block->hashMerkleRoot = BlockMerkleRoot(*current_block);\n+        assert(!MineBlock(current_block).IsNull());\n+        circulation += GetBlockSubsidy(ChainActive().Height(), Params().GetConsensus());\n+\n+        assert(ChainActive().Height() == 1);\n+        UpdateUtxoStats();\n+        current_block = PrepareNextBlock();\n+        StoreLastTxo();\n+    }\n+\n+    while (fuzzed_data_provider.remaining_bytes()) {\n+        const auto action = static_cast<Action>(fuzzed_data_provider.ConsumeIntegralInRange(0, 2));\n+        switch (action) {\n+        case Action::CREATE_INPUT: {\n+            CMutableTransaction tx{*current_block->vtx.back()};\n+            AppendRandomTxo(tx);\n+            current_block->vtx.back() = MakeTransactionRef(tx);\n+            StoreLastTxo();\n+            break;\n+        }\n+        case Action::CREATE_TX: {\n+            CMutableTransaction tx{};\n+            AppendRandomTxo(tx);\n+            current_block->vtx.push_back(MakeTransactionRef(tx));\n+            StoreLastTxo();\n+            break;\n+        }\n+        case Action::CREATE_BLOCK: {\n+            ReGenerateCommitments(*current_block);\n+            const bool was_valid = !MineBlock(current_block).IsNull();\n+\n+            const auto prev_utxo_stats = utxo_stats;\n+            if (was_valid) {\n+                circulation += GetBlockSubsidy(ChainActive().Height(), Params().GetConsensus());\n+\n+                if (duplicate_coinbase_height == ChainActive().Height()) {\n+                    // we mined the duplicate coinbase\n+                    assert(current_block->vtx.at(0)->vin.at(0).scriptSig == duplicate_coinbase_script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363745281",
      "id" : 363745281,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc0NTI4MQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 139,
      "path" : "src/test/fuzz/utxo_total_supply.cpp",
      "position" : 139,
      "pull_request_review_id" : 339231752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-07T13:24:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363745281",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363760321"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363760321"
         }
      },
      "author_association" : "NONE",
      "body" : "use .front()",
      "commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "created_at" : "2020-01-07T14:01:15Z",
      "diff_hunk" : "@@ -22,19 +25,62 @@ CTxIn generatetoaddress(const NodeContext& node, const std::string& address)\n     return MineBlock(node, coinbase_script);\n }\n \n-CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)\n+void ReGenerateCommitments(CBlock& block)\n+{\n+    CMutableTransaction tx{*block.vtx.at(0)};\n+    tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/17860#discussion_r363760321",
      "id" : 363760321,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2MDMyMQ==",
      "original_commit_id" : "fa3d9b79c15a21d2b39bf246de616c77b1e661c3",
      "original_position" : 27,
      "path" : "src/test/util/mining.cpp",
      "position" : 27,
      "pull_request_review_id" : 339252135,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/17860",
      "updated_at" : "2020-01-07T14:01:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/363760321",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10261698?v=4",
         "events_url" : "https://api.github.com/users/sanjaykdragon/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sanjaykdragon/followers",
         "following_url" : "https://api.github.com/users/sanjaykdragon/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sanjaykdragon",
         "id" : 10261698,
         "login" : "sanjaykdragon",
         "node_id" : "MDQ6VXNlcjEwMjYxNjk4",
         "organizations_url" : "https://api.github.com/users/sanjaykdragon/orgs",
         "received_events_url" : "https://api.github.com/users/sanjaykdragon/received_events",
         "repos_url" : "https://api.github.com/users/sanjaykdragon/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sanjaykdragon/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sanjaykdragon"
      }
   }
]
