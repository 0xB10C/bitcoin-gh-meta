[
   {
      "author_association" : "MEMBER",
      "body" : "I know, this comes up every timeÃ¢ÂÂsee for example https://github.com/bitcoin/bitcoin/pull/14476#issuecomment-430526327 Ã¢ÂÂwasn't the idea to not add more pure-utility RPC calls?\r\nWe really need a clear stance on this.",
      "created_at" : "2018-11-06T14:30:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-436271763",
      "id" : 436271763,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjI3MTc2Mw==",
      "updated_at" : "2018-11-06T14:55:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436271763",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
      "created_at" : "2018-11-06T14:44:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-436276740",
      "id" : 436276740,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjI3Njc0MA==",
      "updated_at" : "2018-12-21T03:07:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436276740",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I created an issue to discuss a tool that could replace pure utility RPC calls: #14671",
      "created_at" : "2018-11-06T15:23:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-436291363",
      "id" : 436291363,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNjI5MTM2Mw==",
      "updated_at" : "2018-11-06T15:23:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/436291363",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r231426065"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231426065"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `request.params.empty()` instead of `request.params.size() < 1` :-)",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-07T09:06:33Z",
      "diff_hunk" : "@@ -138,6 +139,64 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r231426065",
      "id" : 231426065,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTQyNjA2NQ==",
      "original_commit_id" : "4f6fa3172acc8d9a7fd243fa75336e29a7cc3a34",
      "original_position" : 14,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 172392258,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231426065",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r231426262"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231426262"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Remove this unused variable :-)",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-07T09:07:10Z",
      "diff_hunk" : "@@ -138,6 +139,64 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\"\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"\\nResult:\\n\"\n+            \"(string) The derived address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nNative segwit receive address\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\\\"\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    UniValue result(UniValue::VSTR);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r231426262",
      "id" : 231426262,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMTQyNjI2Mg==",
      "original_commit_id" : "4f6fa3172acc8d9a7fd243fa75336e29a7cc3a34",
      "original_position" : 38,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 172392494,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/231426262",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-11-08T19:29:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-437125900",
      "id" : 437125900,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzNzEyNTkwMA==",
      "updated_at" : "2018-11-08T19:29:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/437125900",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232125638"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232125638"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be easy enough to add support for picking a specific index from a ranged descriptor, is there a reason you chose to disallow it? Just add a second parameter which specifies the index.\r\nEDIT: thinking about it, it would be just as easy to not use a ranged descriptor if we're only using a single key, don't worry.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-09T02:20:06Z",
      "diff_hunk" : "@@ -138,6 +139,63 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\"\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"\\nResult:\\n\"\n+            \"(string) The derived address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nNative segwit receive address\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\\\"\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+    if (desc->IsRange()){\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor range not supported\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232125638",
      "id" : 232125638,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjEyNTYzOA==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 46,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 173253304,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232125638",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232440632"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232440632"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It seems a weird anti-feature to me. I don't understand why you're adding extra complexity to the function just to prevent a range. If you only want one, you can still do so.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-10T04:02:47Z",
      "diff_hunk" : "@@ -138,6 +139,63 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\"\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"\\nResult:\\n\"\n+            \"(string) The derived address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nNative segwit receive address\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\\\"\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+    if (desc->IsRange()){\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor range not supported\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232440632",
      "id" : 232440632,
      "in_reply_to_id" : 232125638,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQ0MDYzMg==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 46,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 173649385,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232440632",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232445912"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232445912"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I initially did that to prevent extra complexity, but I've actually encountered a situation where allowing ranges would be very useful. Will change this to return an array.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-10T08:24:29Z",
      "diff_hunk" : "@@ -138,6 +139,63 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\"\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"\\nResult:\\n\"\n+            \"(string) The derived address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nNative segwit receive address\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\\\"\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+    if (desc->IsRange()){\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor range not supported\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232445912",
      "id" : 232445912,
      "in_reply_to_id" : 232125638,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQ0NTkxMg==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 46,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 173654968,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232445912",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232448996"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232448996"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@Sjors I assume that also includes allowing `combo` right? Sounds good Ã°ÂÂÂ ",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-10T10:49:08Z",
      "diff_hunk" : "@@ -138,6 +139,63 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\"\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"\\nResult:\\n\"\n+            \"(string) The derived address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nNative segwit receive address\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\\\"\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+    if (desc->IsRange()){\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor range not supported\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232448996",
      "id" : 232448996,
      "in_reply_to_id" : 232125638,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQ0ODk5Ng==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 46,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 173658049,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232448996",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232457338"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232457338"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@MeshCollider yes, no reason anymore to exclude `combo()`",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-10T16:22:30Z",
      "diff_hunk" : "@@ -138,6 +139,63 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\"\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"\\nResult:\\n\"\n+            \"(string) The derived address\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nNative segwit receive address\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/0)\\\"\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR});\n+\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+    if (desc->IsRange()){\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor range not supported\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232457338",
      "id" : 232457338,
      "in_reply_to_id" : 232125638,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQ1NzMzOA==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 46,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 173666623,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232457338",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232473043"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232473043"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This doesn't seem to belong in this file (the file is specific per PR).",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-11T03:05:05Z",
      "diff_hunk" : "@@ -3,3 +3,4 @@ New RPC methods\n \n - `getnodeaddresses` returns peer addresses known to this node. It may be used to connect to nodes over TCP without using the DNS seeds.\n - `listwalletdir` returns a list of wallets in the wallet directory which is configured with `-walletdir` parameter.\n+- `deriveaddress` returns the address corresponding to an [output descriptor](/doc/descriptors.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232473043",
      "id" : 232473043,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQ3MzA0Mw==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 4,
      "path" : "doc/release-notes-13152.md",
      "position" : null,
      "pull_request_review_id" : 173682907,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232473043",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232487197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232487197"
         }
      },
      "author_association" : "MEMBER",
      "body" : "listwalletdir was already hijacking that file, so I joined, but I can add a new one.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-11T13:04:44Z",
      "diff_hunk" : "@@ -3,3 +3,4 @@ New RPC methods\n \n - `getnodeaddresses` returns peer addresses known to this node. It may be used to connect to nodes over TCP without using the DNS seeds.\n - `listwalletdir` returns a list of wallets in the wallet directory which is configured with `-walletdir` parameter.\n+- `deriveaddress` returns the address corresponding to an [output descriptor](/doc/descriptors.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r232487197",
      "id" : 232487197,
      "in_reply_to_id" : 232473043,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMjQ4NzE5Nw==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 4,
      "path" : "doc/release-notes-13152.md",
      "position" : null,
      "pull_request_review_id" : 173697179,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/232487197",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-11-14T13:32:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-438662700",
      "id" : 438662700,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzODY2MjcwMA==",
      "updated_at" : "2018-11-14T13:32:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/438662700",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r233495555"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233495555"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In which case we could add them to the main file in the first place.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-14T15:32:21Z",
      "diff_hunk" : "@@ -3,3 +3,4 @@ New RPC methods\n \n - `getnodeaddresses` returns peer addresses known to this node. It may be used to connect to nodes over TCP without using the DNS seeds.\n - `listwalletdir` returns a list of wallets in the wallet directory which is configured with `-walletdir` parameter.\n+- `deriveaddress` returns the address corresponding to an [output descriptor](/doc/descriptors.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r233495555",
      "id" : 233495555,
      "in_reply_to_id" : 232473043,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzMzQ5NTU1NQ==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 4,
      "path" : "doc/release-notes-13152.md",
      "position" : null,
      "pull_request_review_id" : 174921432,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/233495555",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234616490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234616490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I thought the point of these extra files was mainly to prevent constant rebasing, which seemed mostly a result of different sections interfering, and less when you're just adding one line an existing entry. Though I'm not sure exactly what trips up git.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-19T13:26:36Z",
      "diff_hunk" : "@@ -3,3 +3,4 @@ New RPC methods\n \n - `getnodeaddresses` returns peer addresses known to this node. It may be used to connect to nodes over TCP without using the DNS seeds.\n - `listwalletdir` returns a list of wallets in the wallet directory which is configured with `-walletdir` parameter.\n+- `deriveaddress` returns the address corresponding to an [output descriptor](/doc/descriptors.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234616490",
      "id" : 234616490,
      "in_reply_to_id" : 232473043,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDYxNjQ5MA==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 4,
      "path" : "doc/release-notes-13152.md",
      "position" : null,
      "pull_request_review_id" : 176293598,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234616490",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234646424"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234646424"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This file was removed in master. Also, if another patch added a line in the meantime, git(hub) would also report a merge conflict.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-19T14:50:27Z",
      "diff_hunk" : "@@ -3,3 +3,4 @@ New RPC methods\n \n - `getnodeaddresses` returns peer addresses known to this node. It may be used to connect to nodes over TCP without using the DNS seeds.\n - `listwalletdir` returns a list of wallets in the wallet directory which is configured with `-walletdir` parameter.\n+- `deriveaddress` returns the address corresponding to an [output descriptor](/doc/descriptors.md).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234646424",
      "id" : 234646424,
      "in_reply_to_id" : 232473043,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDY0NjQyNA==",
      "original_commit_id" : "9a55d5f9e3a92026c25d26a5c2fd531883ab3609",
      "original_position" : 4,
      "path" : "doc/release-notes-13152.md",
      "position" : null,
      "pull_request_review_id" : 176331490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234646424",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased. Result is now an array of addresses, so combo() and ranges can be used. Added range arguments.",
      "created_at" : "2018-11-19T18:58:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440003913",
      "id" : 440003913,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDAwMzkxMw==",
      "updated_at" : "2018-11-19T18:58:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440003913",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234745960"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234745960"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Should be plural now :)",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-19T19:12:21Z",
      "diff_hunk" : "@@ -138,6 +139,80 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\" ( \\\"start\\\" \\\"end\\\" )\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234745960",
      "id" : 234745960,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc0NTk2MA==",
      "original_commit_id" : "f0e881f9312bfa64a0393ff4308e22f09c3b9c9c",
      "original_position" : 17,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 176453634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234745960",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Getting a rather cryptic linter error: @MarcoFalke?\r\n<img width=\"1185\" alt=\"schermafbeelding 2018-11-19 om 20 11 42\" src=\"https://user-images.githubusercontent.com/10217/48729225-66643600-ec37-11e8-8548-f0be7be032c1.png\">\r\n\r\n_Update_: #14718 was merged right before I pushed this. I rebased again and now I'm able to reproduce the linter error. It happens on master too.",
      "created_at" : "2018-11-19T19:15:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440008947",
      "id" : 440008947,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDAwODk0Nw==",
      "updated_at" : "2018-11-19T19:22:58Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440008947",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234746802"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234746802"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I feel like this is unnecessarily complicated, I'd prefer just start and end parameters without the \"n\" parameter",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2018-11-19T19:15:14Z",
      "diff_hunk" : "@@ -138,6 +139,80 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddress(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"deriveaddress \\\"descriptor\\\" ( \\\"start\\\" \\\"end\\\" )\\n\"\n+            \"\\nDerives the address corresponding to an output descriptor.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+            \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"n\\\" / \\\"start\\\"                    (integer, optional) If a ranged descriptor is used, this specifies the number of keys, or start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 3\") +\n+            \"\\nFirst two P2SH-segwit addresses\\n\"\n+            + HelpExampleCli(\"deriveaddress\", \"\\\"sh(wpkh([d34db33f/49h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*))\\\" 0 1\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() >= 3) {\n+            range_start = request.params[1].get_int();\n+            range_end = request.params[2].get_int();\n+        } else {\n+            range_end = request.params[1].get_int() - 1;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r234746802",
      "id" : 234746802,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzNDc0NjgwMg==",
      "original_commit_id" : "f0e881f9312bfa64a0393ff4308e22f09c3b9c9c",
      "original_position" : 51,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 176453634,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/234746802",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased so CI works again. Renamed to plural `deriveaddresses`. Simplified the range arguments (must provide `start` and `end`).",
      "created_at" : "2018-11-20T13:33:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440274685",
      "id" : 440274685,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDI3NDY4NQ==",
      "updated_at" : "2018-11-20T13:33:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440274685",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/14667/commits/82d2a8fc19e6d4c00fcb4af4032ebfdcdd457991\r\n\r\nOne last nit, I would add a comment about the default behavior of 0 for ranged descriptors if start and end aren't provided.\r\n\r\nEDIT: Actually, I think the helptext needs to be switched to RPCHelpMan",
      "created_at" : "2018-11-22T02:22:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-440892946",
      "id" : 440892946,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MDg5Mjk0Ng==",
      "updated_at" : "2018-11-22T02:24:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/440892946",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@MeshCollider alternatively I could make the range argument mandatory for ranged descriptors.\r\n\r\nWhat do you mean with RPCHelpMan? ",
      "created_at" : "2018-11-23T11:53:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-441222506",
      "id" : 441222506,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MTIyMjUwNg==",
      "updated_at" : "2018-11-23T11:53:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/441222506",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@Sjors see #14726",
      "created_at" : "2018-11-24T10:48:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-441358934",
      "id" : 441358934,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MTM1ODkzNA==",
      "updated_at" : "2018-11-24T10:48:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/441358934",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased due to #14726 and using RPCHelpMan now.\r\n\r\nRange argument is now mandatory for ranged descriptors (typing `0` instead of `*` is trivial).",
      "created_at" : "2018-11-27T15:31:52Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-442101472",
      "id" : 442101472,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0MjEwMTQ3Mg==",
      "updated_at" : "2018-11-27T15:31:52Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/442101472",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-01-08T15:58:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452350748",
      "id" : 452350748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjM1MDc0OA==",
      "updated_at" : "2019-01-08T15:58:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452350748",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/126646?v=4",
         "events_url" : "https://api.github.com/users/laanwj/events{/privacy}",
         "followers_url" : "https://api.github.com/users/laanwj/followers",
         "following_url" : "https://api.github.com/users/laanwj/following{/other_user}",
         "gists_url" : "https://api.github.com/users/laanwj/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/laanwj",
         "id" : 126646,
         "login" : "laanwj",
         "node_id" : "MDQ6VXNlcjEyNjY0Ng==",
         "organizations_url" : "https://api.github.com/users/laanwj/orgs",
         "received_events_url" : "https://api.github.com/users/laanwj/received_events",
         "repos_url" : "https://api.github.com/users/laanwj/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/laanwj/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/laanwj"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246053284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246053284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: This condition would appear when the scriptPubKey does not have a corresponding address (I think this is only currently possible through \"raw\" or through bare multisig). Perhaps a better error message is possible?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T16:03:49Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246053284",
      "id" : 246053284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjA1MzI4NA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 83,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190315288,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246053284",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK with a small nit.",
      "created_at" : "2019-01-08T16:04:43Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452353097",
      "id" : 452353097,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjM1MzA5Nw==",
      "updated_at" : "2019-01-08T16:04:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452353097",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246197219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246197219"
         }
      },
      "author_association" : "MEMBER",
      "body" : "bad indentation?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:25:35Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246197219",
      "id" : 246197219,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjE5NzIxOQ==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 17,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246197219",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246198490"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246198490"
         }
      },
      "author_association" : "MEMBER",
      "body" : "indentation.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:27:23Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246198490",
      "id" : 246198490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjE5ODQ5MA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 52,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246198490",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246199058"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246199058"
         }
      },
      "author_association" : "MEMBER",
      "body" : "validate range_start < range_end?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:28:10Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246199058",
      "id" : 246199058,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjE5OTA1OA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 56,
      "path" : "src/rpc/misc.cpp",
      "position" : 54,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246199058",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246199475"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246199475"
         }
      },
      "author_association" : "MEMBER",
      "body" : "micronit, s/start/begin?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:28:44Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246199475",
      "id" : 246199475,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjE5OTQ3NQ==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 28,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246199475",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Needs non conflict rebase to fix the new `RPCHelpMan()` argument section (default and comments).",
      "created_at" : "2019-01-08T23:29:57Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452489748",
      "id" : 452489748,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjQ4OTc0OA==",
      "updated_at" : "2019-01-08T23:29:57Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452489748",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/178464?v=4",
         "events_url" : "https://api.github.com/users/jonasschnelli/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jonasschnelli/followers",
         "following_url" : "https://api.github.com/users/jonasschnelli/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jonasschnelli",
         "id" : 178464,
         "login" : "jonasschnelli",
         "node_id" : "MDQ6VXNlcjE3ODQ2NA==",
         "organizations_url" : "https://api.github.com/users/jonasschnelli/orgs",
         "received_events_url" : "https://api.github.com/users/jonasschnelli/received_events",
         "repos_url" : "https://api.github.com/users/jonasschnelli/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jonasschnelli/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jonasschnelli"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246200765"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246200765"
         }
      },
      "author_association" : "MEMBER",
      "body" : "missing test for this error.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:30:44Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246200765",
      "id" : 246200765,
      "in_reply_to_id" : 246198490,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjIwMDc2NQ==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 52,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246200765",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246201276"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246201276"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could also have a test for this error?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:31:30Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246201276",
      "id" : 246201276,
      "in_reply_to_id" : 246053284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjIwMTI3Ng==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 83,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246201276",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246201874"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246201874"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Is it possible to return empty?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-08T23:32:24Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));\n+            }\n+\n+            addresses.push_back(EncodeDestination(dest));\n+        }\n+    }\n+\n+    return addresses;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246201874",
      "id" : 246201874,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjIwMTg3NA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 90,
      "path" : "src/rpc/misc.cpp",
      "position" : 93,
      "pull_request_review_id" : 190504755,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246201874",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246498068"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246498068"
         }
      },
      "author_association" : "MEMBER",
      "body" : "If anyone has an example (raw) descriptor that triggers this error, I can add it, and think of a better message.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-09T18:51:04Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246498068",
      "id" : 246498068,
      "in_reply_to_id" : 246053284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjQ5ODA2OA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 83,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190875766,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246498068",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246500830"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246500830"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Addresses can be an empty UniValue array in theory: `UniValue addresses(UniValue::VARR);`\r\n\r\nI guess not in practice, do you want an error check?",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-09T18:59:49Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));\n+            }\n+\n+            addresses.push_back(EncodeDestination(dest));\n+        }\n+    }\n+\n+    return addresses;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246500830",
      "id" : 246500830,
      "in_reply_to_id" : 246201874,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjUwMDgzMA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 90,
      "path" : "src/rpc/misc.cpp",
      "position" : 93,
      "pull_request_review_id" : 190879302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246500830",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased for `RPCHelpMan` and addressed some of the nits. Will continue later.",
      "created_at" : "2019-01-09T19:28:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-452825769",
      "id" : 452825769,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1MjgyNTc2OQ==",
      "updated_at" : "2019-01-09T19:28:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/452825769",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246517887"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246517887"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Try \"multi(1,key1,key2)\" for some public keys.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-09T19:55:05Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r246517887",
      "id" : 246517887,
      "in_reply_to_id" : 246053284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NjUxNzg4Nw==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 83,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 190900731,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/246517887",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248002214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248002214"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added the bare multisig example and reworded error to \"Descriptor does not have a corresponding address\".",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-15T18:05:42Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248002214",
      "id" : 248002214,
      "in_reply_to_id" : 246053284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAwMjIxNA==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 83,
      "path" : "src/rpc/misc.cpp",
      "position" : null,
      "pull_request_review_id" : 192786193,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248002214",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248003602"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248003602"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added check and test.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-15T18:09:59Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248003602",
      "id" : 248003602,
      "in_reply_to_id" : 246199058,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAwMzYwMg==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 56,
      "path" : "src/rpc/misc.cpp",
      "position" : 54,
      "pull_request_review_id" : 192787974,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248003602",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248005175"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248005175"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I added an RPC error in case the result is empty. I don't know how to produce that, so there's no test.",
      "commit_id" : "f8f115da64f18e3b81e6cbaa0f26d96156acfc3c",
      "created_at" : "2019-01-15T18:14:22Z",
      "diff_hunk" : "@@ -142,6 +143,87 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue deriveaddresses(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.empty() || request.params.size() > 3)\n+        throw std::runtime_error(\n+            RPCHelpMan{\"deriveaddresses\",\n+              \"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n+              \"Examples of output descriptors are:\\n\"\n+              \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+              \"    wpkh(<pubkey>)                       Native segwit P2PKH outputs for the given pubkey\\n\"\n+              \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+              \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+              \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+              \"or more path elements separated by \\\"/\\\", where \\\"h\\\" represents a hardened child key.\\n\"\n+              \"For more information on output descriptors, see the documentation in the doc/descriptors.md file.\\n\",\n+              {\n+                {\"descriptor\", RPCArg::Type::STR, false},\n+                {\"start\",  RPCArg::Type::NUM, true},\n+                {\"end\",  RPCArg::Type::NUM, true}\n+              }\n+            }.ToString() +\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"descriptor\\\"                     (string, required) The descriptor\\n\"\n+            \"2. \\\"start\\\"                          (integer, optional) If a ranged descriptor is used, this specifies the start of the range to import.\\n\"\n+            \"3. \\\"end\\\"                            (integer, optional) If a ranged descriptor is used, this specifies the end of the range to import.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[ address ] (array) the derived addresses\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nFirst three native segwit receive addresses\\n\"\n+            + HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)\\\" 0 2\") +\n+            \"\"\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VNUM, UniValue::VNUM});\n+    const std::string desc_str = request.params[0].get_str();\n+\n+    int range_start = 0;\n+    int range_end = 0;\n+\n+    if (request.params.size() >= 2) {\n+        if (request.params.size() == 2) {\n+          throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing range end parameter\");\n+        }\n+        range_start = request.params[1].get_int();\n+        range_end = request.params[2].get_int();\n+    }\n+\n+    FlatSigningProvider provider;\n+    auto desc = Parse(desc_str, provider);\n+    if (!desc) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor\"));\n+    }\n+\n+    if (!desc->IsRange() && request.params.size() > 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+    }\n+\n+    if (desc->IsRange() && request.params.size() == 1) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range must be specified for a ranged descriptor\");\n+    }\n+\n+    UniValue addresses(UniValue::VARR);\n+\n+    for (int i = range_start; i <= range_end; ++i) {\n+        std::vector<CScript> scripts;\n+        if (!desc->Expand(i, provider, scripts, provider)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys\"));\n+        }\n+\n+        for (const CScript &script : scripts) {\n+            CTxDestination dest;\n+            if (!ExtractDestination(script, dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Descriptor produced invalid address\"));\n+            }\n+\n+            addresses.push_back(EncodeDestination(dest));\n+        }\n+    }\n+\n+    return addresses;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#discussion_r248005175",
      "id" : 248005175,
      "in_reply_to_id" : 246201874,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0ODAwNTE3NQ==",
      "original_commit_id" : "dfad4164393b28fd25a4057ab7a96473a85517ce",
      "original_position" : 90,
      "path" : "src/rpc/misc.cpp",
      "position" : 93,
      "pull_request_review_id" : 192789900,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14667",
      "updated_at" : "2019-01-15T18:18:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/248005175",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Rebased for no particular reason, all feedback should be addressed now.",
      "created_at" : "2019-01-15T18:18:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14667#issuecomment-454495770",
      "id" : 454495770,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14667",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1NDQ5NTc3MA==",
      "updated_at" : "2019-01-15T18:18:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/454495770",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
