[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16542](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16542.html) (Return more specific errors about invalid descriptors by achow101)\n* [#16539](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16539.html) ([wallet] lower -txmaxfee default from 0.1 to 0.01 BTC by Sjors)\n* [#16535](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16535.html) (test: Explain why -whitelist is used in feature_fee_estimation by MarcoFalke)\n* [#16528](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16528.html) ([WIP] Native Descriptor Wallets (take 2) by achow101)\n* [#16521](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16521.html) (wallet/rpc: Use the default maxfeerate value as BTC/kB by Remagpie)\n* [#16440](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16440.html) (BIP-322: Generic signed message format by kallewoof)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n* [#16378](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16378.html) ([WIP] The ultimate send RPC by Sjors)\n* [#16377](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16377.html) ([rpc] don't automatically append inputs in walletcreatefundedpsbt & fundrawtransaction by Sjors)\n* [#16373](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16373.html) (Add bumpfee option to return PSBT instead of commiting to wallet by instagibbs)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#16341](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16341.html) (Introduce ScriptPubKeyMan interface and use it for key and script management (aka wallet boxes) by achow101)\n* [#16273](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16273.html) (refactor: Remove unused includes by practicalswift)\n* [#16251](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16251.html) (Improve signrawtransaction error reporting by ajtowns)\n* [#16224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16224.html) (gui: Bilingual GUI error messages by hebasto)\n* [#16037](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16037.html) (rpc: Early fail import(wallet,multi) when a required block is pruned by promag)\n* [#15845](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15845.html) (wallet: Fast rescan with BIP157 block filters by MarcoFalke)\n* [#15590](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15590.html) (Descriptor: add GetAddressType() and IsSegWit() by Sjors)\n* [#15529](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15529.html) (Add Qt programs to msvc build (updated, no code changes) by sipsorcery)\n* [#15294](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15294.html) ([moveonly] wallet: Extract RipeMd160 by Empact)\n* [#15129](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15129.html) (rpc: Added ability to remove watch only addresses by benthecarman)\n* [#14942](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14942.html) (wallet: Make scan / abort status private to CWallet by Empact)\n* [#14707](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14707.html) ([RPC] Include coinbase transactions in receivedby RPCs by andrewtoth)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Fire TransactionRemovedFromMempool callbacks from mempool by l2a5b1)\n* [#14144](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14144.html) (Refactoring: Clarify code using encrypted_batch in CWallet by domob1812)\n* [#11413](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/11413.html) ([wallet] [rpc] sendtoaddress/sendmany: Add explicit feerate option by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-08-04T22:16:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-518040668",
      "id" : 518040668,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/16546",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxODA0MDY2OA==",
      "updated_at" : "2019-08-04T22:16:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518040668",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310408302"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310408302"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This list-of-bools thing seems like a terrible idea...",
      "commit_id" : "10b713dc90c396e850f51c5e6b3d026259b92e54",
      "created_at" : "2019-08-04T23:24:13Z",
      "diff_hunk" : "@@ -2653,6 +2673,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n+            {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n+            {\"external_signer\", RPCArg::Type::BOOL, /* default */ \"false\", \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310408302",
      "id" : 310408302,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDQwODMwMg==",
      "original_commit_id" : "10b713dc90c396e850f51c5e6b3d026259b92e54",
      "original_position" : 176,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 176,
      "pull_request_review_id" : 270519353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546",
      "updated_at" : "2019-08-04T23:24:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310408302",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310408356"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310408356"
         }
      },
      "author_association" : "MEMBER",
      "body" : "What if there are multiple wallets, with different signers?\r\n\r\nIMO `-signer` needs to be replaced with either a wallet-stored path, or a path provided when the wallet is loaded...",
      "commit_id" : "10b713dc90c396e850f51c5e6b3d026259b92e54",
      "created_at" : "2019-08-04T23:25:27Z",
      "diff_hunk" : "@@ -4132,6 +4211,181 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue send(const JSONRPCRequest& request)\n+{\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = wallet.get();\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCHelpMan{\"send\",\n+        \"\\nSend a transaction.\\n\",\n+        {\n+            {\"outputs\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"a json array with outputs (key-value pairs), where none of the keys are duplicated.\\n\"\n+                    \"That is, each address can only appear once and there can only be one 'data' object.\\n\"\n+                    \"For convenience, a dictionary, which holds the key-value pairs directly, is also accepted.\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"address\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"A key-value pair. The key (string) is the bitcoin address, the value (float or string) is the amount in \" + CURRENCY_UNIT + \"\"},\n+                            {\"comment\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"A comment to store the name of the person or organization\\n\"\n+                            \"                              to which you're sending the transaction. This is not part of the \\n\"\n+                            \"                              transaction, just kept in your wallet.\"}\n+                        },\n+                    },\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"data\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A key-value pair. The key must be \\\"data\\\", the value is hex-encoded data\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"inputs\", RPCArg::Type::ARR, RPCArg::Optional::OMITTED_NAMED_ARG, \"Leave empty to add inputs automatically. A json array of json objects\",\n+                {\n+                    {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                        {\n+                            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n+                            {\"vout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The output number\"},\n+                            {\"sequence\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The sequence number\"},\n+                        },\n+                    },\n+                },\n+            },\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n+                {\n+                    {\"add_inputs\", RPCArg::Type::BOOL, /* default */ \"false\", \"If inputs are specified, automatically include more if they are not enough.\"},\n+                    {\"add_to_wallet\", RPCArg::Type::BOOL, /* default */ \"true\", \"When false, returns a serialized transaction which will not be added to the wallet or broadcast\"},\n+                    {\"changeAddress\", RPCArg::Type::STR_HEX, /* default */ \"pool address\", \"The bitcoin address to receive the change\"},\n+                    {\"changePosition\", RPCArg::Type::NUM, /* default */ \"random\", \"The index of the change output\"},\n+                    {\"change_type\", RPCArg::Type::STR, /* default */ \"set by -changetype\", \"The output type to use. Only valid if changeAddress is not specified. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n+                    {\"includeWatching\", RPCArg::Type::BOOL, /* default */ \"false\", \"Also select inputs which are watch only\"},\n+                    {\"locktime\", RPCArg::Type::NUM, /* default */ \"0\", \"Raw locktime. Non-0 value also locktime-activates inputs\"},\n+                    {\"lockUnspents\", RPCArg::Type::BOOL, /* default */ \"false\", \"Lock selected unspent outputs\"},\n+                    {\"feeRate\", RPCArg::Type::AMOUNT, /* default */ \"not set: makes wallet determine the fee\", \"Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                    {\"subtractFeeFromOutputs\", RPCArg::Type::ARR, /* default */ \"empty array\", \"A json array of integers.\\n\"\n+                    \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n+                    \"                              Those recipients will receive less bitcoins than you enter in their corresponding amount field.\\n\"\n+                    \"                              If no outputs are specified here, the sender pays the fee.\",\n+                        {\n+                            {\"vout_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The zero-based output index, before a change output is added.\"},\n+                        },\n+                    },\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"false\", \"Marks this transaction as BIP125 replaceable.\\n\"\n+                    \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n+                    \"         \\\"UNSET\\\"\\n\"\n+                    \"         \\\"ECONOMICAL\\\"\\n\"\n+                    \"         \\\"CONSERVATIVE\\\"\"},\n+                },\n+                \"options\"},\n+        },\n+        RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"complete\\\" : true|false, (boolean) If the transaction has a complete set of signatures\\n\"\n+                    \"  \\\"txid\\\" :                 (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n+                    \"                                      the number of addresses.\\n\",\n+                    \"  \\\"hex\\\" : \\\"value\\\",       (string) If add_to_wallet is false, the hex-encoded raw transaction with signature(s)\\n\"\n+                    \"  \\\"psbt\\\" : \\\"value\\\",      (string) If more signatures are needed, or if add_to_wallet is false, the base64-encoded (partially) signed transaction\\n\"\n+                    \"}\\n\"\n+                        },\n+                        RPCExamples{\n+                    \"\\nCreate a transaction with a specific input\\n\"\n+                    + HelpExampleCli(\"send\", \"'{\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\": 0.1}' '[{\\\"txid\\\":\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\", \\\"vout\\\":1}]'\") +\n+                    \"\\nSpecify the order of outputs, set fee rate to 1 satoshi per byte and return result without adding to wallet or broadcasting to the network\\n\"\n+                    + HelpExampleCli(\"send\", \"'[{\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\": 0.1}, {\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\": 0.1}]' [] '{\\\"feeRate\\\": 0.00001, \\\"add_to_wallet\\\": false}'\")\n+                        },\n+                    }.Check(request);\n+\n+    RPCTypeCheck(request.params, {\n+        UniValueType(), // ARR or OBJ, checked later\n+        UniValue::VARR,\n+        UniValue::VOBJ,\n+        }, true\n+    );\n+\n+    CAmount fee;\n+    int change_position;\n+    bool rbf = pwallet->m_signal_rbf;\n+    const UniValue &replaceable_arg = request.params[2][\"replaceable\"];\n+    if (!replaceable_arg.isNull()) {\n+        RPCTypeCheckArgument(replaceable_arg, UniValue::VBOOL);\n+        rbf = replaceable_arg.isTrue();\n+    }\n+    CMutableTransaction rawTx = ConstructTransaction(request.params[1], request.params[0], request.params[2][\"locktime\"], rbf);\n+    CCoinControl coin_control;\n+    // Automatically select coins, unless at least one is manually selected. Can\n+    // be overriden by options.add_inputs.\n+    coin_control.m_add_inputs = rawTx.vin.size() == 0;\n+    FundTransaction(pwallet, rawTx, fee, change_position, request.params[2], coin_control);\n+\n+    bool add_to_wallet = true;\n+    if (request.params[2].exists(\"add_to_wallet\"))\n+        add_to_wallet = request.params[2][\"add_to_wallet\"].get_bool();\n+\n+    // Make a blank psbt\n+    PartiallySignedTransaction psbtx(rawTx);\n+\n+    // Fill transaction with out data and attempt to sign\n+    bool complete = true;\n+    bool bip32derivs = pwallet->IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER);\n+\n+    const TransactionError err = FillPSBT(pwallet, psbtx, complete, 1, true, bip32derivs);\n+    if (err != TransactionError::OK) {\n+        throw JSONRPCTransactionError(err);\n+    }\n+\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n+        const std::string command = gArgs.GetArg(\"-signer\", DEFAULT_EXTERNAL_SIGNER);\n+        if (command == \"\") throw std::runtime_error(std::string(__func__) + \": restart bitcoind with -signer=<cmd>\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310408356",
      "id" : 310408356,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMDQwODM1Ng==",
      "original_commit_id" : "10b713dc90c396e850f51c5e6b3d026259b92e54",
      "original_position" : 693,
      "path" : "src/wallet/rpcwallet.cpp",
      "position" : 693,
      "pull_request_review_id" : 270519418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/16546",
      "updated_at" : "2019-08-04T23:25:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/310408356",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   }
]
