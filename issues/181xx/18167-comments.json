[
   {
      "author_association" : "MEMBER",
      "body" : "Great first-time contribution! Welcome as a contributor! Hope to see more contributions from you.\r\n\r\nThanks for tackling UB issues in the project. The bulk of them should be fixed by now and this is one of the last few UB issues I'm aware of. Don't hesitate to report and/or fix any other UB issues you might find and don't hesitate to ping me if you want your work reviewed.\r\n\r\nConcept ACK\r\n\r\nFWIW:\r\n\r\n1. The C++ Core Guidelines â with editors Bjarne Stroustrup and Herb Sutter â [has this to say](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c183-dont-use-a-union-for-type-punning): \"It is undefined behavior to read a union member with a different type from the one with which it was written.\"\r\n\r\n2. The C++ Core Guidelines [has this to say](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#c183-dont-use-a-union-for-type-punning): \"Unfortunately, unions are commonly used for type punning. We donât consider âsometimes, it works as expectedâ a strong argument.\"\r\n\r\n3. Professor John Regehr [has this to say](https://blog.regehr.org/archives/959): \"Again, although we might expect that adding a function call would make the code harder to optimize, both compilers understand memcpy deeply enough that we get the desired object code [â¦] In my opinion c5 is the easiest code to understand out of this little batch of functions because it doesnât do the messy shifting and also it is totally, completely, obviously free of complications that might arise from the confusing rules for unions and strict aliasing. It became my preferred idiom for type punning a few years ago when I discovered that compilers could see through the memcpy and generate the right code.\"\r\n\r\n4. Video recommendation: Timur Doumler's talk [âType punning in modern C++â](https://www.youtube.com/watch?v=_qzMpk-22cc) from CppCon 2019",
      "created_at" : "2020-02-17T22:08:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18167#issuecomment-587174040",
      "id" : 587174040,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18167",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NzE3NDA0MA==",
      "updated_at" : "2020-02-17T22:08:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/587174040",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   }
]
