[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18202 (refactor: consolidate sendmany and sendtoaddress code by Sjors)\n* #18027 (\"PSBT Operations\" dialog by gwillen)\n* #17953 (refactor: Abstract boost::variant out by elichai)\n* #17938 (Disallow automatic conversion between disparate hash types by Empact)\n* #17809 (rpc: Auto-format RPCResult by MarcoFalke)\n* #17577 (refactor: deduplicate the message sign/verify code by vasild)\n* #17264 (rpc: set default bip32derivs to true for psbt methods by Sjors)\n* #17211 (Allow fundrawtransaction and walletcreatefundedpsbt to take external inputs by achow101)\n* #16910 (wallet: reduce loading time by using unordered maps by achow101)\n* #16549 ([WIP] UI external signer support (e.g. hardware wallet) by Sjors)\n* #16546 ([WIP] External signer support - Wallet Box edition by Sjors)\n* #16528 (Native Descriptor Wallets using DescriptorScriptPubKeyMan by achow101)\n* #16440 (BIP-322: Generic signed message format by kallewoof)\n* #12911 (wallet: Show fee in results for signrawtransaction* for segwit inputs by kallewoof)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2020-02-11T05:47:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-584486503",
      "id" : 584486503,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NDQ4NjUwMw==",
      "updated_at" : "2020-02-24T21:19:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/584486503",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@kallewoof may find this interesting too in light of BIP-322 (Generic signed message format) #16440",
      "created_at" : "2020-02-12T08:57:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585100204",
      "id" : 585100204,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTEwMDIwNA==",
      "updated_at" : "2020-02-12T08:57:51Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585100204",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378125160"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378125160"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 0eb285f7146ae9beec3a19829cc4420ad9f251ae, this trips up AppVeyor:\r\n```\r\n:\\projects\\bitcoin\\src\\rpc\\rawtransaction_util.h(27,132): error C2039: 'string': is not a member of 'std' [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_common\\libbitcoin_common.vcxproj]\r\n63C:\\projects\\bitcoin\\src\\rpc\\rawtransaction_util.h(27,138): error C2065: 'string': undeclared identifier [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_common\\libbitcoin_common.vcxproj]\r\n64C:\\projects\\bitcoin\\src\\rpc\\rawtransaction_util.h(27,118): error C2923: 'std::map': 'string' is not a valid template type argument for parameter '_Ty' [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_common\\libbitcoin_common.vcxproj]\r\n65C:\\projects\\bitcoin\\src\\rpc\\rawtransaction_util.h(27,138): fatal error C1903: unable to recover from previous error(s); stopping compilation [C:\\projects\\bitcoin\\build_msvc\\libbitcoin_common\\libbitcoin_common.vcxproj]\r\n```",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T09:20:28Z",
      "diff_hunk" : "@@ -24,6 +24,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n+void MakeSignTransactionResult(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378125160",
      "id" : 378125160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEyNTE2MA==",
      "original_commit_id" : "0eb285f7146ae9beec3a19829cc4420ad9f251ae",
      "original_position" : 4,
      "path" : "src/rpc/rawtransaction_util.h",
      "position" : null,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378125160",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378133077"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378133077"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Missing `break;`?",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T09:34:26Z",
      "diff_hunk" : "@@ -133,30 +133,31 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n+    std::string message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::string sig;\n+    SigningError err = model->wallet().signMessage(message, *pkhash, sig);\n+\n+    QString error;\n+    switch (err) {\n+        case SigningError::OK:\n+            error = tr(\"No error\");\n+        case SigningError::PRIVATE_KEY_NOT_AVAILABLE:\n+            error = tr(\"Private key for the entered address is not available.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378133077",
      "id" : 378133077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzMzA3Nw==",
      "original_commit_id" : "e4714e05ca9f3000384f9ed8f44e91a485f88bee",
      "original_position" : 19,
      "path" : "src/qt/signverifymessagedialog.cpp",
      "position" : 22,
      "pull_request_review_id" : 357303366,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378133077",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378136589"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378136589"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe rename it to `SignTransactionResultToJSON()`.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T09:40:50Z",
      "diff_hunk" : "@@ -24,6 +24,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n+void MakeSignTransactionResult(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378136589",
      "id" : 378136589,
      "in_reply_to_id" : 378125160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEzNjU4OQ==",
      "original_commit_id" : "0eb285f7146ae9beec3a19829cc4420ad9f251ae",
      "original_position" : 4,
      "path" : "src/rpc/rawtransaction_util.h",
      "position" : null,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378136589",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378140246"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378140246"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 0eb285f7146ae9beec3a19829cc4420ad9f251ae this seems a bit brittle: `input_errors[i] = \"Missing amount\";` (which is then matched by string to throw an exception later). But at least this error message is covered by `rpc_rawtransaction.py`",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T09:47:31Z",
      "diff_hunk" : "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors)\n+{\n+    bool is_sighash_single = ((sighash & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction tx_const(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& spk = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!is_sighash_single || (i < mtx.vout.size())) {\n+            ProduceSignature(*provider, MutableTransactionSignatureCreator(&mtx, i, amount, sighash), spk, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378140246",
      "id" : 378140246,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MDI0Ng==",
      "original_commit_id" : "0eb285f7146ae9beec3a19829cc4420ad9f251ae",
      "original_position" : 33,
      "path" : "src/script/sign.cpp",
      "position" : 33,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378140246",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "https://github.com/achow101/bitcoin/blob/e4714e0/src/rpc/misc.cpp#L340 still calls the old signing code `key.SignCompact();` directly. Maybe that needs to be updated to also use the newly added function `SignMessage()`?",
      "created_at" : "2020-02-12T09:51:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585122576",
      "id" : 585122576,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTEyMjU3Ng==",
      "updated_at" : "2020-02-12T09:51:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585122576",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378142817"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378142817"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This is a good time to add tests for the three error strings used here (`SCRIPT_ERR_INVALID_STACK_OPERATION`, `SCRIPT_ERR_SIG_NULLFAIL`, `else`). Not sure how though.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T09:52:03Z",
      "diff_hunk" : "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors)\n+{\n+    bool is_sighash_single = ((sighash & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction tx_const(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& spk = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!is_sighash_single || (i < mtx.vout.size())) {\n+            ProduceSignature(*provider, MutableTransactionSignatureCreator(&mtx, i, amount, sighash), spk, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";\n+            continue;\n+        }\n+\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, spk, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&tx_const, i, amount), &serror)) {\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378142817",
      "id" : 378142817,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MjgxNw==",
      "original_commit_id" : "0eb285f7146ae9beec3a19829cc4420ad9f251ae",
      "original_position" : 41,
      "path" : "src/script/sign.cpp",
      "position" : 41,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378142817",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378151197"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378151197"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In  e496e2981699ac2938b74297d9b0bce355d26ad8 `Implement CWallet::SignTransaction using ScriptPubKeyMan::SignTransaction` at `// Sign the tx with ScriptPubKeyMans`, check `CanProvide()` first?",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T10:06:35Z",
      "diff_hunk" : "@@ -2403,34 +2403,32 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n-        }\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n-        }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    bool result = false;\n+    for (const auto& spk_man_pair : m_spk_managers) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378151197",
      "id" : 378151197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1MTE5Nw==",
      "original_commit_id" : "e496e2981699ac2938b74297d9b0bce355d26ad8",
      "original_position" : 43,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378151197",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378152215"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378152215"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The way `input_errors` are set, if there are multiple matching `ScriptPubKeyMans`* they would override each-others results. The last commit e4714e05ca9f3000384f9ed8f44e91a485f88bee clears the error for any given input, but only if SPKman SignTransaction() returns true, which requires all input errors to be empty, so that seems useless. At minimum this is confusing.\r\n\r\n`*` = not the case with legacy, and in practice shouldn't happen with descriptor wallets, but that's not enforced",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T10:08:34Z",
      "diff_hunk" : "@@ -2403,34 +2403,32 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n-        }\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n-        }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    bool result = false;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        result |= spk_man_pair.second->SignTransaction(tx, coins, sighash, input_errors);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378152215",
      "id" : 378152215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1MjIxNQ==",
      "original_commit_id" : "e496e2981699ac2938b74297d9b0bce355d26ad8",
      "original_position" : 44,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378152215",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378158565"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378158565"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In a90a98c3aa90ed4dc4f995fac0859e58f177a79a under `// Fill in information from ScriptPubKeyMans`, add `CanProvide()`?",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T10:20:03Z",
      "diff_hunk" : "@@ -2460,44 +2459,20 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n                 input.non_witness_utxo = wtx.tx;\n             }\n         }\n+    }\n \n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            return TransactionError::SIGHASH_MISMATCH;\n-        }\n-\n-        // Get the scriptPubKey to know which SigningProvider to use\n-        CScript script;\n-        if (!input.witness_utxo.IsNull()) {\n-            script = input.witness_utxo.scriptPubKey;\n-        } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n-                return TransactionError::MISSING_INPUTS;\n-            }\n-            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n-        } else {\n-            // There's no UTXO so we can just skip this now\n-            complete = false;\n-            continue;\n-        }\n-        SignatureData sigdata;\n-        input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n-            continue;\n+    // Fill in information from ScriptPubKeyMans\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        TransactionError res = spk_man_pair.second->FillPSBT(psbtx, sighash_type, sign, bip32derivs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378158565",
      "id" : 378158565,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1ODU2NQ==",
      "original_commit_id" : "a90a98c3aa90ed4dc4f995fac0859e58f177a79a",
      "original_position" : 41,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378158565",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378162019"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378162019"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In a90a98c3aa90ed4dc4f995fac0859e58f177a79a: this comment is outdated, because you're no longer calling `GetSigningProvider(script, sigdata)`. Also the `CScript script` below is not used.\r\n",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T10:26:23Z",
      "diff_hunk" : "@@ -503,6 +503,52 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378162019",
      "id" : 378162019,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2MjAxOQ==",
      "original_commit_id" : "a90a98c3aa90ed4dc4f995fac0859e58f177a79a",
      "original_position" : 24,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378162019",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378164973"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378164973"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Also these strings can be obtained from`SigningErrorString` in `error.cpp` (the wording here seems better)",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T10:31:33Z",
      "diff_hunk" : "@@ -133,30 +133,31 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n+    std::string message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::string sig;\n+    SigningError err = model->wallet().signMessage(message, *pkhash, sig);\n+\n+    QString error;\n+    switch (err) {\n+        case SigningError::OK:\n+            error = tr(\"No error\");\n+        case SigningError::PRIVATE_KEY_NOT_AVAILABLE:\n+            error = tr(\"Private key for the entered address is not available.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378164973",
      "id" : 378164973,
      "in_reply_to_id" : 378133077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2NDk3Mw==",
      "original_commit_id" : "e4714e05ca9f3000384f9ed8f44e91a485f88bee",
      "original_position" : 19,
      "path" : "src/qt/signverifymessagedialog.cpp",
      "position" : 22,
      "pull_request_review_id" : 357293657,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378164973",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378166986"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378166986"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "It would be better to return some error from here (like the neighboring methods do). In case somebody forgets to override this method, it would be unexpected to return OK and leave the output `str_sig` unmodified.\r\n\r\nMaybe even use a pure virtual method `...str_sig) const = 0;` to cause a compilation error if somebody forgets to override `SignMessage()`. I checked that:\r\n* it compiles if changed to pure virtual and\r\n* it does not compile if changed to pure virtual and the `LegacyScriptPubKeyMan` child class forgets to override `SignMessage()`.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T10:35:26Z",
      "diff_hunk" : "@@ -203,13 +205,20 @@ class ScriptPubKeyMan\n \n     virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n-    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual std::unique_ptr<SigningProvider> GetPublicSigningProvider(const CScript& script) const { return nullptr; }\n \n-    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n-      * sigdata, can produce a valid signature.\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetPublicSigningProvider) that, combined with\n+      * sigdata, can produce solving data.\n       */\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n+    /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n+    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    /** Sign a message with the given script */\n+    virtual SigningError SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningError::OK; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378166986",
      "id" : 378166986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE2Njk4Ng==",
      "original_commit_id" : "e4714e05ca9f3000384f9ed8f44e91a485f88bee",
      "original_position" : 28,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 357345688,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378166986",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/266751?v=4",
         "events_url" : "https://api.github.com/users/vasild/events{/privacy}",
         "followers_url" : "https://api.github.com/users/vasild/followers",
         "following_url" : "https://api.github.com/users/vasild/following{/other_user}",
         "gists_url" : "https://api.github.com/users/vasild/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/vasild",
         "id" : 266751,
         "login" : "vasild",
         "node_id" : "MDQ6VXNlcjI2Njc1MQ==",
         "organizations_url" : "https://api.github.com/users/vasild/orgs",
         "received_events_url" : "https://api.github.com/users/vasild/received_events",
         "repos_url" : "https://api.github.com/users/vasild/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/vasild/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/vasild/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/vasild"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378389666"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378389666"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It is brittle, and I'm not sure why only that error specifically throws an exception. But keeping it for compatibility.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:07:26Z",
      "diff_hunk" : "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors)\n+{\n+    bool is_sighash_single = ((sighash & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction tx_const(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& spk = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!is_sighash_single || (i < mtx.vout.size())) {\n+            ProduceSignature(*provider, MutableTransactionSignatureCreator(&mtx, i, amount, sighash), spk, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378389666",
      "id" : 378389666,
      "in_reply_to_id" : 378140246,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4OTY2Ng==",
      "original_commit_id" : "0eb285f7146ae9beec3a19829cc4420ad9f251ae",
      "original_position" : 33,
      "path" : "src/script/sign.cpp",
      "position" : 33,
      "pull_request_review_id" : 357630591,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378389666",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378393730"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378393730"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The expectation is that all of the errors will be the same across all failed `ScriptPubKeyMan`s because they don't have the private keys. The `ScriptPubKeyMan` which fully signs an input will clear the error for that input. This clearing is not dependent on `input_errors.empty()`.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:14:33Z",
      "diff_hunk" : "@@ -2403,34 +2403,32 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n-        }\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n-        }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    bool result = false;\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        result |= spk_man_pair.second->SignTransaction(tx, coins, sighash, input_errors);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378393730",
      "id" : 378393730,
      "in_reply_to_id" : 378152215,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5MzczMA==",
      "original_commit_id" : "e496e2981699ac2938b74297d9b0bce355d26ad8",
      "original_position" : 44,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 357635816,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378393730",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378397086"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378397086"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The strings from `SigningErrorString` won't be translated (we don't translate things for RPC), so that logic had to be duplicated here. Also, the strings are different to maintain compatibility.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:20:22Z",
      "diff_hunk" : "@@ -133,30 +133,31 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n+    std::string message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::string sig;\n+    SigningError err = model->wallet().signMessage(message, *pkhash, sig);\n+\n+    QString error;\n+    switch (err) {\n+        case SigningError::OK:\n+            error = tr(\"No error\");\n+        case SigningError::PRIVATE_KEY_NOT_AVAILABLE:\n+            error = tr(\"Private key for the entered address is not available.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378397086",
      "id" : 378397086,
      "in_reply_to_id" : 378133077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5NzA4Ng==",
      "original_commit_id" : "e4714e05ca9f3000384f9ed8f44e91a485f88bee",
      "original_position" : 19,
      "path" : "src/qt/signverifymessagedialog.cpp",
      "position" : 22,
      "pull_request_review_id" : 357640094,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378397086",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405142"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378405142"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added the breaks in.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:34:48Z",
      "diff_hunk" : "@@ -133,30 +133,31 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n+    std::string message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::string sig;\n+    SigningError err = model->wallet().signMessage(message, *pkhash, sig);\n+\n+    QString error;\n+    switch (err) {\n+        case SigningError::OK:\n+            error = tr(\"No error\");\n+        case SigningError::PRIVATE_KEY_NOT_AVAILABLE:\n+            error = tr(\"Private key for the entered address is not available.\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405142",
      "id" : 378405142,
      "in_reply_to_id" : 378133077,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNTE0Mg==",
      "original_commit_id" : "e4714e05ca9f3000384f9ed8f44e91a485f88bee",
      "original_position" : 19,
      "path" : "src/qt/signverifymessagedialog.cpp",
      "position" : 22,
      "pull_request_review_id" : 357650113,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378405142",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405634"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378405634"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Changed it to return `SigningError::SIGNING_FAILED`. I'm avoiding pure virtual functions in `ScriptPubKeyMan` because there is no requirement for every `ScriptPubKeyMan` to implement every function.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:35:41Z",
      "diff_hunk" : "@@ -203,13 +205,20 @@ class ScriptPubKeyMan\n \n     virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n-    virtual std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const { return nullptr; }\n+    virtual std::unique_ptr<SigningProvider> GetPublicSigningProvider(const CScript& script) const { return nullptr; }\n \n-    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetSigningProvider) that, combined with\n-      * sigdata, can produce a valid signature.\n+    /** Whether this ScriptPubKeyMan can provide a SigningProvider (via GetPublicSigningProvider) that, combined with\n+      * sigdata, can produce solving data.\n       */\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n+    /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n+    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    /** Sign a message with the given script */\n+    virtual SigningError SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningError::OK; };",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405634",
      "id" : 378405634,
      "in_reply_to_id" : 378166986,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNTYzNA==",
      "original_commit_id" : "e4714e05ca9f3000384f9ed8f44e91a485f88bee",
      "original_position" : 28,
      "path" : "src/wallet/scriptpubkeyman.h",
      "position" : null,
      "pull_request_review_id" : 357650736,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378405634",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405792"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378405792"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed (I think) and renamed",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:35:58Z",
      "diff_hunk" : "@@ -24,6 +24,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n+void MakeSignTransactionResult(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378405792",
      "id" : 378405792,
      "in_reply_to_id" : 378125160,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNTc5Mg==",
      "original_commit_id" : "0eb285f7146ae9beec3a19829cc4420ad9f251ae",
      "original_position" : 4,
      "path" : "src/rpc/rawtransaction_util.h",
      "position" : null,
      "pull_request_review_id" : 357650954,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378405792",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378406171"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378406171"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed the comment and simplified this block to just check for correct `non_witness_utxo` or `continue` if there is no utxo.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T17:36:42Z",
      "diff_hunk" : "@@ -503,6 +503,52 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378406171",
      "id" : 378406171,
      "in_reply_to_id" : 378162019,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQwNjE3MQ==",
      "original_commit_id" : "a90a98c3aa90ed4dc4f995fac0859e58f177a79a",
      "original_position" : 24,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : null,
      "pull_request_review_id" : 357651418,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378406171",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> [0eb285f](https://github.com/bitcoin/bitcoin/commit/0eb285f7146ae9beec3a19829cc4420ad9f251ae) `Refactor rawtransaction's SignTransaction into generic SignTransaction function` would be easier to review (`--color-moved=dimmed-zebra -w`) if you renamed the variables in separate commit.\r\n\r\nI've undone the renames.\r\n\r\n> It may be better to combine [4595326](https://github.com/bitcoin/bitcoin/commit/4595326628bd4c91c753e923535178fca9ade2fd) with [be7991f](https://github.com/bitcoin/bitcoin/commit/be7991f63de2c0cce7d1e622a6ee12dd8f7204c9) so the signing code is moved, rather than just appear (though it's short enough to compare manually).\r\n\r\nSquashed them together.\r\n\r\n> > Lastly, `GetSigningProvider()` is renamed to `GetPublicSigningProvider()`. It will now only provide pubkeys, key origins, and scripts. `LegacySigningProvider` has it's `GetKey` and `HaveKey` functions changed to only return false. Future implementations should return `HidingSigningProvider`s where private keys are hidden.\r\n> \r\n> This bit is fairly confusing.\r\n\r\nHow so? I'm just saying that `GetPublicSigningProvider()` will just return a `SigningProvider` where `GetKey()` and `HaveKey()` will fail.\r\n\r\n> This PR is fairly large, and only deduplicates a subset of @vasild's #17577 (only what's needed to move forward with the wallet refactor). I didn't study this other PR in detail, but if it's possible to build on top of that, it would split the review burden and remove more duplication.\r\n\r\nI'll take a look at that.\r\n\r\n> https://github.com/achow101/bitcoin/blob/e4714e0/src/rpc/misc.cpp#L340 still calls the old signing code `key.SignCompact();` directly. Maybe that needs to be updated to also use the newly added function `SignMessage()`?\r\n\r\nDone\r\n",
      "created_at" : "2020-02-12T17:53:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585333090",
      "id" : 585333090,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTMzMzA5MA==",
      "updated_at" : "2020-02-12T19:37:02Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585333090",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378448191"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378448191"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated it to use `GetScriptPubKeyMan` which calls `CanProvide`\r\n\r\nThis change is slightly more complex but it does reduce the number of repeated signings.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T18:56:47Z",
      "diff_hunk" : "@@ -2403,34 +2403,32 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n-\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n-        }\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n-        }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    bool result = false;\n+    for (const auto& spk_man_pair : m_spk_managers) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378448191",
      "id" : 378448191,
      "in_reply_to_id" : 378151197,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0ODE5MQ==",
      "original_commit_id" : "e496e2981699ac2938b74297d9b0bce355d26ad8",
      "original_position" : 43,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 357704791,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378448191",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378448264"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378448264"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've updated it to use `GetScriptPubKeyMan` which calls `CanProvide`\r\n\r\nThis change is slightly more complex but it does reduce the number of repeated signings.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-12T18:56:55Z",
      "diff_hunk" : "@@ -2460,44 +2459,20 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n                 input.non_witness_utxo = wtx.tx;\n             }\n         }\n+    }\n \n-        // Get the Sighash type\n-        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n-            return TransactionError::SIGHASH_MISMATCH;\n-        }\n-\n-        // Get the scriptPubKey to know which SigningProvider to use\n-        CScript script;\n-        if (!input.witness_utxo.IsNull()) {\n-            script = input.witness_utxo.scriptPubKey;\n-        } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n-                return TransactionError::MISSING_INPUTS;\n-            }\n-            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n-        } else {\n-            // There's no UTXO so we can just skip this now\n-            complete = false;\n-            continue;\n-        }\n-        SignatureData sigdata;\n-        input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n-            continue;\n+    // Fill in information from ScriptPubKeyMans\n+    for (const auto& spk_man_pair : m_spk_managers) {\n+        TransactionError res = spk_man_pair.second->FillPSBT(psbtx, sighash_type, sign, bip32derivs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378448264",
      "id" : 378448264,
      "in_reply_to_id" : 378158565,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0ODI2NA==",
      "original_commit_id" : "a90a98c3aa90ed4dc4f995fac0859e58f177a79a",
      "original_position" : 41,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 357704878,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378448264",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378787066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378787066"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`SigningResult` seems more friendly, considering this can be OK.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-13T10:52:56Z",
      "diff_hunk" : "@@ -34,6 +34,14 @@ enum class TransactionError {\n \n std::string TransactionErrorString(const TransactionError error);\n \n+enum class SigningError {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r378787066",
      "id" : 378787066,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4NzA2Ng==",
      "original_commit_id" : "01839f3797897bb7d6bc2200e804e52cd3aca191",
      "original_position" : 4,
      "path" : "src/util/error.h",
      "position" : null,
      "pull_request_review_id" : 358122717,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/378787066",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I am trying to merge BIP322 #16440  on top of this, and am running into an issue demonstrated by the below patch:\r\n```diff\r\ndiff --git a/src/wallet/rpcwallet.cpp b/src/wallet/rpcwallet.cpp\r\nindex bde8a6099..dde7819fa 100644\r\n--- a/src/wallet/rpcwallet.cpp\r\n+++ b/src/wallet/rpcwallet.cpp\r\n@@ -559,6 +559,14 @@ static UniValue signmessage(const JSONRPCRequest& request)\r\n     }\r\n\r\n     const PKHash *pkhash = boost::get<PKHash>(&dest);\r\n+\r\n+    auto provider = pwallet->GetPublicSigningProvider(GetScriptForDestination(dest));\r\n+    auto keyid = GetKeyForDestination(*provider, dest);\r\n+    CKey secret;\r\n+    if (!provider->GetKey(keyid, secret)) {\r\n+        assert(0);\r\n+    }\r\n+\r\n     if (!pkhash) {\r\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\r\n     }\r\n```\r\n\r\nThe above code hits the assert. I.e. despite getting a signing provider for the destination, it still fails to get the key. This code (i.e. getting signing provider and then getting privkey from that) in current master.",
      "created_at" : "2020-02-13T13:08:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585745930",
      "id" : 585745930,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTc0NTkzMA==",
      "updated_at" : "2020-02-13T13:08:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585745930",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> The SignMessage for each scriptpubman is a step backwards considering BIP322 will unify these all into a single place. It would be great if you reviewed that PR (if you already have, and still feel this is the right approach, I'd love to know why).\r\n\r\nYou can still have the message signing code unified to a single place, and in fact, this PR does that (it consolidates the `signmessage` RPC and the Sign Message dialog signing implementations). Each `ScriptPubKeyMan` can still call that single unified function from within it's own `SignMessage` function. But each one having it's own `SignMessage` also allows us to implement it differently depending on the `ScriptPubKeyMan`. In particular, for hardware wallets, we can't use the unified `SignMessage` function because that would require producing a `SigningProvider` containing private keys, which is not possible for hardware wallets. In order to sign anything with hardware wallets, we need to pass in the thing to be signed to the device and let it handle the signing rather than signing it ourselves.\r\n\r\nThis change means that a future `HardwareScriptPubKeyMan` can do exactly that: the message is passed into `HardwareScriptPubKeyMan::SignMessage` which then passes it along to the hardware wallet. This way, nothing external to the wallet needs to know that there is a hardware wallet or how to handle it. That can all be done within the `HardwareScriptPubKeyMan`.\r\n\r\n> The above code hits the assert. I.e. despite getting a signing provider for the destination, it still fails to get the key. This code (i.e. getting signing provider and then getting privkey from that) in current master.\r\n\r\nThat's because you are still using the old code and way of signing messages. There is no need for `signmessage` to get a `SigningProvider` anymore. Instead you should be implementing either within the `SignMessage` function that is now in `sign.cpp`. You'll probably need to change the arguments, but you shouldn't need to go to the specific call sites like `signmessage` or the Sign Message dialog.\r\n\r\nSpecifically the reason this hits the assert is that the `SigningProvider` that is returned only returns public keys and scripts. `GetKey` and `HaveKey` have been changed to always fail. Notice that the function named `GetSigningProvider` was renamed to `GetPublicSigningProvider`.",
      "created_at" : "2020-02-13T15:40:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-585821638",
      "id" : 585821638,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NTgyMTYzOA==",
      "updated_at" : "2020-02-13T15:42:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/585821638",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've based this on top of #17577",
      "created_at" : "2020-02-13T23:05:45Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586016050",
      "id" : 586016050,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjAxNjA1MA==",
      "updated_at" : "2020-02-13T23:05:45Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586016050",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r379208846"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379208846"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Renamed to `SigningResult`",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-14T01:23:31Z",
      "diff_hunk" : "@@ -34,6 +34,14 @@ enum class TransactionError {\n \n std::string TransactionErrorString(const TransactionError error);\n \n+enum class SigningError {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r379208846",
      "id" : 379208846,
      "in_reply_to_id" : 378787066,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTIwODg0Ng==",
      "original_commit_id" : "01839f3797897bb7d6bc2200e804e52cd3aca191",
      "original_position" : 4,
      "path" : "src/util/error.h",
      "position" : null,
      "pull_request_review_id" : 358662436,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/379208846",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> That's because you are still using the old code and way of signing messages. There is no need for signmessage to get a SigningProvider anymore. Instead you should be implementing either within the SignMessage function that is now in sign.cpp. You'll probably need to change the arguments, but you shouldn't need to go to the specific call sites like signmessage or the Sign Message dialog.\r\n\r\nAhh. In that case `PublicSigningProvider` is a bad name for it, I think? It's not providing any *signing* at all, after all. I assume this is used to verify signatures? Maybe `GetPublicKeyProvider`.",
      "created_at" : "2020-02-14T04:03:25Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586087508",
      "id" : 586087508,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjA4NzUwOA==",
      "updated_at" : "2020-02-14T04:04:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586087508",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/250224?v=4",
         "events_url" : "https://api.github.com/users/kallewoof/events{/privacy}",
         "followers_url" : "https://api.github.com/users/kallewoof/followers",
         "following_url" : "https://api.github.com/users/kallewoof/following{/other_user}",
         "gists_url" : "https://api.github.com/users/kallewoof/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/kallewoof",
         "id" : 250224,
         "login" : "kallewoof",
         "node_id" : "MDQ6VXNlcjI1MDIyNA==",
         "organizations_url" : "https://api.github.com/users/kallewoof/orgs",
         "received_events_url" : "https://api.github.com/users/kallewoof/received_events",
         "repos_url" : "https://api.github.com/users/kallewoof/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/kallewoof/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/kallewoof"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> Ahh. In that case `PublicSigningProvider` is a bad name for it, I think? It's not providing any _signing_ at all, after all. I assume this is used to verify signatures? Maybe `GetPublicKeyProvider`.\r\n\r\nIt's used primarily for checking solvability. So I've renamed it to `GetSolvingProvider`",
      "created_at" : "2020-02-14T18:07:59Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586404074",
      "id" : 586404074,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjQwNDA3NA==",
      "updated_at" : "2020-02-14T18:07:59Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586404074",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "`GetSolutionProvider`? :-P",
      "created_at" : "2020-02-14T19:50:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-586447261",
      "id" : 586447261,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4NjQ0NzI2MQ==",
      "updated_at" : "2020-02-14T19:50:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/586447261",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "concept ACK",
      "created_at" : "2020-02-19T17:13:01Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-588334247",
      "id" : 588334247,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4ODMzNDI0Nw==",
      "updated_at" : "2020-02-19T17:13:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/588334247",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382106652"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382106652"
         }
      },
      "author_association" : "MEMBER",
      "body" : "double semicolumn",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-20T16:19:20Z",
      "diff_hunk" : "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors)\n+{\n+    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction txConst(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";\n+            continue;\n+        }\n+\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";\n+            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n+                // Verification failed (possibly due to insufficient signatures).\n+                input_errors[i] = \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\";\n+            } else {\n+                input_errors[i] = ScriptErrorString(serror);\n+            }\n+        }\n+    }\n+    return input_errors.empty();;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382106652",
      "id" : 382106652,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEwNjY1Mg==",
      "original_commit_id" : "a9f1c58ccd4a55b026518be691a0eae23e4bf489",
      "original_position" : 50,
      "path" : "src/script/sign.cpp",
      "position" : null,
      "pull_request_review_id" : 362040407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382106652",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382125444"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382125444"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Rather than having this `visited_spk_mans` bookkeeping, maybe just add  `spk_man->SignInput(tx, input, coins, sighash, error)`.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-20T16:48:38Z",
      "diff_hunk" : "@@ -2403,34 +2403,66 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);\n+        if (!spk_man) {\n+            input_errors[i] = \"Unable to sign input, missing keys\";\n+            continue;\n+        }\n+\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n+\n+        // Sign the tx.\n+        // spk_man->SignTransaction will return true if the transaction is complete,\n+        // so we can exit early and return true if that happens.\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+            return true;\n+        }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382125444",
      "id" : 382125444,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyNTQ0NA==",
      "original_commit_id" : "2c6db38744ffb0ade6bf84d0b9caab8d7891642d",
      "original_position" : 75,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 362040407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382125444",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382143470"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382143470"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same suggestion as with regular signing: adding `FillPSBT(PartiallySignedTransaction& psbt, int& index, ...` to `LegacyScriptPubKeyMan()` would avoid this bookkeeping and be easier to reason about than this loop-in-loop behavior.\r\n\r\nSuch per input control could also make its way into the RPC, where e.g. coinjoin software could tell the wallet what to sign while ignoring the other inputs. That might save some (negligible?) time doing `spk_man` lookups on a thousand inputs.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-20T17:20:18Z",
      "diff_hunk" : "@@ -2511,27 +2516,34 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n-            complete = false;\n             continue;\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(script, sigdata);\n+        if (!spk_man) {\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n \n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(out.scriptPubKey);\n-        if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+        // Fill in the information from the spk_man\n+        TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs);\n+        if (res != TransactionError::OK) {\n+            return res;\n         }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382143470",
      "id" : 382143470,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE0MzQ3MA==",
      "original_commit_id" : "886002c66b57529856cc8aab2992c951f4051e4b",
      "original_position" : 69,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 362040407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382143470",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382151649"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382151649"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I tested that BIP32 info is correctly added to watch-only wallets (see also my comment https://github.com/bitcoin/bitcoin/pull/16528#discussion_r381325869 and earlier(?) version of this code).",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-20T17:35:29Z",
      "diff_hunk" : "@@ -503,6 +503,48 @@ bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::\n     return ::SignTransaction(tx, this, coins, sighash, input_errors);\n }\n \n+TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Check non_witness_utxo has specified prevout\n+        if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+        } else if (input.witness_utxo.IsNull()) {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+        SignPSBTInput(HidingSigningProvider(this, !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        UpdatePSBTOutput(HidingSigningProvider(this, true, !bip32derivs), psbtx, i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382151649",
      "id" : 382151649,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1MTY0OQ==",
      "original_commit_id" : "886002c66b57529856cc8aab2992c951f4051e4b",
      "original_position" : 40,
      "path" : "src/wallet/scriptpubkeyman.cpp",
      "position" : 76,
      "pull_request_review_id" : 362040407,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382151649",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382673176"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382673176"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I considered that, but not all `ScriptPubKeyMan` implementations will be able to sign just one input without potentially signing all inputs. E.g. a hardware wallet spkman. With such spkmans, we would end up signing the entire tx multiple times which is both slow and bad UX.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-21T16:18:26Z",
      "diff_hunk" : "@@ -2403,34 +2403,66 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);\n+        if (!spk_man) {\n+            input_errors[i] = \"Unable to sign input, missing keys\";\n+            continue;\n+        }\n+\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n+\n+        // Sign the tx.\n+        // spk_man->SignTransaction will return true if the transaction is complete,\n+        // so we can exit early and return true if that happens.\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+            return true;\n+        }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382673176",
      "id" : 382673176,
      "in_reply_to_id" : 382125444,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3MzE3Ng==",
      "original_commit_id" : "2c6db38744ffb0ade6bf84d0b9caab8d7891642d",
      "original_position" : 75,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 362747089,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382673176",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "note that this PR is built on https://github.com/bitcoin/bitcoin/pull/17577",
      "created_at" : "2020-02-21T16:42:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-589734450",
      "id" : 589734450,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU4OTczNDQ1MA==",
      "updated_at" : "2020-02-21T16:42:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/589734450",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382702786"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382702786"
         }
      },
      "author_association" : "MEMBER",
      "body" : "That makes sense. It's worth emphasizing in the comments that `SignTransaction()` will try to sign all inputs, not just `txin`.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-21T17:13:17Z",
      "diff_hunk" : "@@ -2403,34 +2403,66 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);\n+        if (!spk_man) {\n+            input_errors[i] = \"Unable to sign input, missing keys\";\n+            continue;\n+        }\n+\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n+\n+        // Sign the tx.\n+        // spk_man->SignTransaction will return true if the transaction is complete,\n+        // so we can exit early and return true if that happens.\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+            return true;\n+        }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382702786",
      "id" : 382702786,
      "in_reply_to_id" : 382125444,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMjc4Ng==",
      "original_commit_id" : "2c6db38744ffb0ade6bf84d0b9caab8d7891642d",
      "original_position" : 75,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 362785046,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382702786",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382703031"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382703031"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-21T17:13:48Z",
      "diff_hunk" : "@@ -465,3 +465,51 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     }\n     return false;\n }\n+\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors)\n+{\n+    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n+\n+    // Use CTransaction for the constant parts of the\n+    // transaction to avoid rehashing.\n+    const CTransaction txConst(mtx);\n+    // Sign what we can:\n+    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n+        CTxIn& txin = mtx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n+        }\n+        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n+        const CAmount& amount = coin->second.out.nValue;\n+\n+        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n+        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n+\n+        UpdateInput(txin, sigdata);\n+\n+        // amount must be specified for valid segwit signature\n+        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n+            input_errors[i] = \"Missing amount\";\n+            continue;\n+        }\n+\n+        ScriptError serror = SCRIPT_ERR_OK;\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n+            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n+                // Unable to sign input and verification failed (possible attempt to partially sign).\n+                input_errors[i] = \"Unable to sign input, invalid stack size (possibly missing key)\";\n+            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n+                // Verification failed (possibly due to insufficient signatures).\n+                input_errors[i] = \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\";\n+            } else {\n+                input_errors[i] = ScriptErrorString(serror);\n+            }\n+        }\n+    }\n+    return input_errors.empty();;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382703031",
      "id" : 382703031,
      "in_reply_to_id" : 382106652,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMzAzMQ==",
      "original_commit_id" : "a9f1c58ccd4a55b026518be691a0eae23e4bf489",
      "original_position" : 50,
      "path" : "src/script/sign.cpp",
      "position" : null,
      "pull_request_review_id" : 362785330,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382703031",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382703235"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382703235"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nvm, see https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382673176",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-21T17:14:12Z",
      "diff_hunk" : "@@ -2511,27 +2516,34 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n-            complete = false;\n             continue;\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(script, sigdata);\n+        if (!spk_man) {\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n \n-    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n-    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n-        const CTxOut& out = psbtx.tx->vout.at(i);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(out.scriptPubKey);\n-        if (provider) {\n-            UpdatePSBTOutput(HidingSigningProvider(provider.get(), true, !bip32derivs), psbtx, i);\n+        // Fill in the information from the spk_man\n+        TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs);\n+        if (res != TransactionError::OK) {\n+            return res;\n         }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382703235",
      "id" : 382703235,
      "in_reply_to_id" : 382143470,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMzIzNQ==",
      "original_commit_id" : "886002c66b57529856cc8aab2992c951f4051e4b",
      "original_position" : 69,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 362785567,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382703235",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382705514"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382705514"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've added some comments.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-21T17:19:11Z",
      "diff_hunk" : "@@ -2403,34 +2403,66 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);\n+        if (!spk_man) {\n+            input_errors[i] = \"Unable to sign input, missing keys\";\n+            continue;\n+        }\n+\n+        // If we've already been signed by this spk_man, skip it\n+        if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n+            continue;\n+        }\n+\n+        // Sign the tx.\n+        // spk_man->SignTransaction will return true if the transaction is complete,\n+        // so we can exit early and return true if that happens.\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+            return true;\n+        }\n+\n+        // Add this spk_man to visited_spk_mans so we can skip it later\n+        visited_spk_mans.insert(spk_man->GetID());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r382705514",
      "id" : 382705514,
      "in_reply_to_id" : 382125444,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNTUxNA==",
      "original_commit_id" : "2c6db38744ffb0ade6bf84d0b9caab8d7891642d",
      "original_position" : 75,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 362788443,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/382705514",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383318210"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383318210"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This comment isn't really helpful for future code readers, just reviewers.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:05:28Z",
      "diff_hunk" : "@@ -272,55 +272,27 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n {\n     int nHashType = ParseSighashString(hashType);\n \n-    bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n-\n     // Script verification errors\n-    UniValue vErrors(UniValue::VARR);\n-\n-    // Use CTransaction for the constant parts of the\n-    // transaction to avoid rehashing.\n-    const CTransaction txConst(mtx);\n-    // Sign what we can:\n-    for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n-        CTxIn& txin = mtx.vin[i];\n-        auto coin = coins.find(txin.prevout);\n-        if (coin == coins.end() || coin->second.IsSpent()) {\n-            TxInErrorToJSON(txin, vErrors, \"Input not found or already spent\");\n-            continue;\n-        }\n-        const CScript& prevPubKey = coin->second.out.scriptPubKey;\n-        const CAmount& amount = coin->second.out.nValue;\n-\n-        SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n-        // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n-        }\n-\n-        UpdateInput(txin, sigdata);\n+    std::map<int, std::string> input_errors;\n \n-        // amount must be specified for valid segwit signature\n-        if (amount == MAX_MONEY && !txin.scriptWitness.IsNull()) {\n-            throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing amount for %s\", coin->second.out.ToString()));\n-        }\n+    bool complete = SignTransaction(mtx, keystore, coins, nHashType, input_errors);\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+}\n \n-        ScriptError serror = SCRIPT_ERR_OK;\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, &txin.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, TransactionSignatureChecker(&txConst, i, amount), &serror)) {\n-            if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n-                // Unable to sign input and verification failed (possible attempt to partially sign).\n-                TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n-            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n-                // Verification failed (possibly due to insufficient signatures).\n-                TxInErrorToJSON(txin, vErrors, \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\");\n-            } else {\n-                TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n-            }\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result)\n+{\n+    // Make errors UniValue\n+    UniValue vErrors(UniValue::VARR);\n+    for (const auto& err_pair : input_errors) {\n+        if (err_pair.second == \"Missing amount\") {\n+            // This particular error needs to be an exception for some reason",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383318210",
      "id" : 383318210,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxODIxMA==",
      "original_commit_id" : "5cab890b915fd9f25cada7ddab7cc00eea22c80b",
      "original_position" : 57,
      "path" : "src/rpc/rawtransaction_util.cpp",
      "position" : 57,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383318210",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383321048"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383321048"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please document when these two functions are used.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:10:19Z",
      "diff_hunk" : "@@ -916,7 +916,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383321048",
      "id" : 383321048,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMTA0OA==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : 19,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383321048",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383321143"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383321143"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Please document how this is used.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:10:30Z",
      "diff_hunk" : "@@ -1150,6 +1151,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Get the ScriptPubKeyMan for a script\n     ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script, SignatureData& sigdata) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383321143",
      "id" : 383321143,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyMTE0Mw==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 14,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383321143",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383327654"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383327654"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Will one SPKM always be sufficient for any input even going forward? Seems to me the same SPKM will always be sourced for a particular input?",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:21:03Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383327654",
      "id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNzY1NA==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383327654",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383338101"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383338101"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Will one SPKM always be sufficient for any input even going forward? Seems to me the same SPKM will always be sourced for a particular input?",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:37:03Z",
      "diff_hunk" : "@@ -2513,27 +2520,34 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n-            complete = false;\n             continue;\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(script, sigdata);\n+        if (!spk_man) {\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n+        // If we've already been signed by this spk_man, skip it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383338101",
      "id" : 383338101,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODEwMQ==",
      "original_commit_id" : "c5ae320bc62607b10bd7575b541ca972234f464c",
      "original_position" : 53,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383338101",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383342149"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383342149"
         }
      },
      "author_association" : "MEMBER",
      "body" : "A little confused by this commit. Should `SigningProvider` itself be renamed as well?",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:43:09Z",
      "diff_hunk" : "@@ -1178,8 +1178,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n     //! Get the SigningProvider for a script\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383342149",
      "id" : 383342149,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MjE0OQ==",
      "original_commit_id" : "f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : 53,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383342149",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383343089"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383343089"
         }
      },
      "author_association" : "MEMBER",
      "body" : "5cab890b915fd9f25cada7ddab7cc00eea22c80b suggests no, there may be multiple.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T15:44:39Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383343089",
      "id" : 383343089,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0MzA4OQ==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363456337,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383343089",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383387402"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383387402"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The expectation is that one spkman will be sufficient. But I suppose it is possible that multiple spkmans could sign for a particular input. I don't think we handle that case.\r\n\r\n5cab890 was from a previous iteration where all spkmans signed the transaction. Perhaps it isn't needed anymore.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T16:54:10Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383387402",
      "id" : 383387402,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4NzQwMg==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363544110,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383387402",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383388286"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383388286"
         }
      },
      "author_association" : "MEMBER",
      "body" : "We should probably refactor `SigningProvider` at some point to have a parent `SolvingProvider` that doesn't have private keys. But for now, this just returns a `SigningProvider` without private keys.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T16:55:42Z",
      "diff_hunk" : "@@ -1178,8 +1178,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n     //! Get the SigningProvider for a script\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383388286",
      "id" : 383388286,
      "in_reply_to_id" : 383342149,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4ODI4Ng==",
      "original_commit_id" : "f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : 53,
      "pull_request_review_id" : 363545299,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383388286",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383389521"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383389521"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it makes sense to remove that commit then, and just state the assumption here.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T16:57:51Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383389521",
      "id" : 383389521,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM4OTUyMQ==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363546910,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383389521",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383393853"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383393853"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I have commit for exactly that, see my earlier comment: https://github.com/bitcoin/bitcoin/pull/18115#pullrequestreview-362040407 ",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T17:05:15Z",
      "diff_hunk" : "@@ -1178,8 +1178,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     ScriptPubKeyMan* GetScriptPubKeyMan(const uint256& id) const;\n \n     //! Get the SigningProvider for a script\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script) const;\n-    std::unique_ptr<SigningProvider> GetSigningProvider(const CScript& script, SignatureData& sigdata) const;\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383393853",
      "id" : 383393853,
      "in_reply_to_id" : 383342149,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5Mzg1Mw==",
      "original_commit_id" : "f2bd919cfd65ee79a9a0e2691980580d8e7404c1",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : 53,
      "pull_request_review_id" : 363552273,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383393853",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399066"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383399066"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Dropped the commit. Added a comment about the assumption.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T17:14:46Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399066",
      "id" : 383399066,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5OTA2Ng==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363558789,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383399066",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399138"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383399138"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Documented the assumption.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T17:14:54Z",
      "diff_hunk" : "@@ -2513,27 +2520,34 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n             script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n         } else {\n             // There's no UTXO so we can just skip this now\n-            complete = false;\n             continue;\n         }\n         SignatureData sigdata;\n         input.FillSignatureData(sigdata);\n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(script, sigdata);\n-        if (!provider) {\n-            complete = false;\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(script, sigdata);\n+        if (!spk_man) {\n             continue;\n         }\n \n-        complete &= SignPSBTInput(HidingSigningProvider(provider.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n-    }\n+        // If we've already been signed by this spk_man, skip it",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399138",
      "id" : 383399138,
      "in_reply_to_id" : 383338101,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5OTEzOA==",
      "original_commit_id" : "c5ae320bc62607b10bd7575b541ca972234f464c",
      "original_position" : 53,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 363558877,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383399138",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399252"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383399252"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T17:15:06Z",
      "diff_hunk" : "@@ -916,7 +916,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383399252",
      "id" : 383399252,
      "in_reply_to_id" : 383321048,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5OTI1Mg==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 6,
      "path" : "src/wallet/wallet.h",
      "position" : 19,
      "pull_request_review_id" : 363559025,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383399252",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383401146"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383401146"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Added a comment.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-24T17:18:39Z",
      "diff_hunk" : "@@ -1150,6 +1151,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     //! Get the ScriptPubKeyMan for a script\n     ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script) const;\n+    ScriptPubKeyMan* GetScriptPubKeyMan(const CScript& script, SignatureData& sigdata) const;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r383401146",
      "id" : 383401146,
      "in_reply_to_id" : 383321143,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQwMTE0Ng==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 14,
      "path" : "src/wallet/wallet.h",
      "position" : null,
      "pull_request_review_id" : 363561340,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/383401146",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK https://github.com/bitcoin/bitcoin/pull/18115/commits/2525db8eb1af79f00899cac1bd2ff8a1e85d32f8",
      "created_at" : "2020-02-24T17:19:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-590446829",
      "id" : 590446829,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MDQ0NjgyOQ==",
      "updated_at" : "2020-02-24T17:19:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590446829",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/5767891?v=4",
         "events_url" : "https://api.github.com/users/instagibbs/events{/privacy}",
         "followers_url" : "https://api.github.com/users/instagibbs/followers",
         "following_url" : "https://api.github.com/users/instagibbs/following{/other_user}",
         "gists_url" : "https://api.github.com/users/instagibbs/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/instagibbs",
         "id" : 5767891,
         "login" : "instagibbs",
         "node_id" : "MDQ6VXNlcjU3Njc4OTE=",
         "organizations_url" : "https://api.github.com/users/instagibbs/orgs",
         "received_events_url" : "https://api.github.com/users/instagibbs/received_events",
         "repos_url" : "https://api.github.com/users/instagibbs/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/instagibbs/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/instagibbs"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2020-02-25T11:17:46Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-590817107",
      "id" : 590817107,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MDgxNzEwNw==",
      "updated_at" : "2020-02-25T11:17:46Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/590817107",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384028681"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384028681"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I've had to restore the commit. It actually is needed. It actually doesn't imply that the different `ScriptPubKeyMan`s can successfully sign the same input.\r\n\r\nIt is still needed because each time the wrong `ScriptPubKeyMan` signs an input, it will add an error. Once that input becomes signed by the correct `ScriptPubKeyMan`, we need to clear away those errors otherwise they will incorrectly persist. Thus that commit is still needed.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-25T17:43:58Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384028681",
      "id" : 384028681,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyODY4MQ==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 364326893,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384028681",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384057760"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384057760"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Shouldn't this loop over all matching `GetScriptPubKeyMan`s? Otherwise the comment above should be changed to \"We assume that each input is **matched** (and signed) by only one ScriptPubKeyMan.\".\r\n\r\nRight now:\r\n* if non-matching `ScriptPubKeyMan` tries and fails to sign this input, we'll try with the matching `ScriptPubKeyMan`, but;\r\n* if we match, but can't sign, that error can only be cleared if another input happens to match a `ScriptPubKeyMan` that then happens to be able for the failed input as well.\r\n\r\nIn practice this shouldn't matter because two ScriptPubKeyMans should never overlap, but we don't have a way to enforce that.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-25T18:52:24Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384057760",
      "id" : 384057760,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1Nzc2MA==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 364363211,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:28:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384057760",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384077686"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384077686"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fine. I've changed it to check all `ScriptPubKeyMan`s that `CanProvide`.",
      "commit_id" : "1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-25T19:29:26Z",
      "diff_hunk" : "@@ -2403,34 +2403,68 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx) const\n {\n     AssertLockHeld(cs_wallet);\n \n-    // sign the new tx\n-    int nIn = 0;\n+    // Build coins map\n+    std::map<COutPoint, Coin> coins;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n-        SignatureData sigdata;\n+        const CWalletTx& wtx = mi->second;\n+        coins[input.prevout] = Coin(wtx.tx->vout[input.prevout.n], wtx.m_confirm.block_height, wtx.IsCoinBase());\n+    }\n+    std::map<int, std::string> input_errors;\n+    return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n+}\n \n-        std::unique_ptr<SigningProvider> provider = GetSigningProvider(scriptPubKey);\n-        if (!provider) {\n-            // We don't know about this scriptpbuKey;\n-            return false;\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    // Sign the tx with ScriptPubKeyMans\n+    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n+    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n+    std::set<uint256> visited_spk_mans;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        // Get the prevout\n+        CTxIn& txin = tx.vin[i];\n+        auto coin = coins.find(txin.prevout);\n+        if (coin == coins.end() || coin->second.IsSpent()) {\n+            input_errors[i] = \"Input not found or already spent\";\n+            continue;\n         }\n \n-        if (!ProduceSignature(*provider, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n-            return false;\n+        // Check if this input is complete\n+        SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n+        if (sigdata.complete) {\n+            continue;\n         }\n-        UpdateInput(input, sigdata);\n-        nIn++;\n+\n+        // Input needs to be signed, find the right ScriptPubKeyMan\n+        ScriptPubKeyMan* spk_man = GetScriptPubKeyMan(coin->second.out.scriptPubKey, sigdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#discussion_r384077686",
      "id" : 384077686,
      "in_reply_to_id" : 383327654,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NzY4Ng==",
      "original_commit_id" : "1bb7939d3eb7b0e0c551ba6b7e3cf9158c784e68",
      "original_position" : 58,
      "path" : "src/wallet/wallet.cpp",
      "position" : null,
      "pull_request_review_id" : 364388182,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/18115",
      "updated_at" : "2020-02-25T19:29:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/384077686",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "utACK 1f9a806a0184ebc4fe7b7b99df6341e0a00fef80",
      "created_at" : "2020-02-25T19:41:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/18115#issuecomment-591032633",
      "id" : 591032633,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/18115",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU5MTAzMjYzMw==",
      "updated_at" : "2020-02-25T19:41:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/591032633",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
