[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-06-28T16:01:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27993#issuecomment-1611701560",
      "id" : 1611701560,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27993",
      "node_id" : "IC_kwDOABII585gEJ04",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1611701560/reactions"
      },
      "updated_at" : "2023-06-28T16:01:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1611701560",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1259760752"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259760752"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "magic number elimination nit:\r\n```suggestion\r\n    while (bytes >= POLY1305_BLOCK_SIZE) {\r\n```",
      "commit_id" : "d6a097ca8af996718eb208378baf98a96fe9ba43",
      "created_at" : "2023-07-11T13:43:42Z",
      "diff_hunk" : "@@ -2,140 +2,230 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-// Based on the public domain implementation by Andrew Moon\n-// poly1305-donna-unrolled.c from https://github.com/floodyberry/poly1305-donna\n-\n #include <crypto/common.h>\n #include <crypto/poly1305.h>\n \n #include <string.h>\n \n-#define mul32x32_64(a,b) ((uint64_t)(a) * (b))\n+namespace poly1305_donna {\n \n-void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen, const unsigned char key[POLY1305_KEYLEN]) {\n-    uint32_t t0,t1,t2,t3;\n-    uint32_t h0,h1,h2,h3,h4;\n+// Based on the public domain implementation by Andrew Moon\n+// poly1305-donna-32.h from https://github.com/floodyberry/poly1305-donna\n+\n+void poly1305_init(poly1305_context *st, const unsigned char key[32]) noexcept {\n+    /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */\n+    st->r[0] = (ReadLE32(&key[ 0])     ) & 0x3ffffff;\n+    st->r[1] = (ReadLE32(&key[ 3]) >> 2) & 0x3ffff03;\n+    st->r[2] = (ReadLE32(&key[ 6]) >> 4) & 0x3ffc0ff;\n+    st->r[3] = (ReadLE32(&key[ 9]) >> 6) & 0x3f03fff;\n+    st->r[4] = (ReadLE32(&key[12]) >> 8) & 0x00fffff;\n+\n+    /* h = 0 */\n+    st->h[0] = 0;\n+    st->h[1] = 0;\n+    st->h[2] = 0;\n+    st->h[3] = 0;\n+    st->h[4] = 0;\n+\n+    /* save pad for later */\n+    st->pad[0] = ReadLE32(&key[16]);\n+    st->pad[1] = ReadLE32(&key[20]);\n+    st->pad[2] = ReadLE32(&key[24]);\n+    st->pad[3] = ReadLE32(&key[28]);\n+\n+    st->leftover = 0;\n+    st->final = 0;\n+}\n+\n+static void poly1305_blocks(poly1305_context *st, const unsigned char *m, size_t bytes) noexcept {\n+    const uint32_t hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */\n     uint32_t r0,r1,r2,r3,r4;\n     uint32_t s1,s2,s3,s4;\n-    uint32_t b, nb;\n-    size_t j;\n-    uint64_t t[5];\n-    uint64_t f0,f1,f2,f3;\n-    uint64_t g0,g1,g2,g3,g4;\n-    uint64_t c;\n-    unsigned char mp[16];\n-\n-    /* clamp key */\n-    t0 = ReadLE32(key+0);\n-    t1 = ReadLE32(key+4);\n-    t2 = ReadLE32(key+8);\n-    t3 = ReadLE32(key+12);\n-\n-    /* precompute multipliers */\n-    r0 = t0 & 0x3ffffff; t0 >>= 26; t0 |= t1 << 6;\n-    r1 = t0 & 0x3ffff03; t1 >>= 20; t1 |= t2 << 12;\n-    r2 = t1 & 0x3ffc0ff; t2 >>= 14; t2 |= t3 << 18;\n-    r3 = t2 & 0x3f03fff; t3 >>= 8;\n-    r4 = t3 & 0x00fffff;\n+    uint32_t h0,h1,h2,h3,h4;\n+    uint64_t d0,d1,d2,d3,d4;\n+    uint32_t c;\n+\n+    r0 = st->r[0];\n+    r1 = st->r[1];\n+    r2 = st->r[2];\n+    r3 = st->r[3];\n+    r4 = st->r[4];\n \n     s1 = r1 * 5;\n     s2 = r2 * 5;\n     s3 = r3 * 5;\n     s4 = r4 * 5;\n \n-    /* init state */\n-    h0 = 0;\n-    h1 = 0;\n-    h2 = 0;\n-    h3 = 0;\n-    h4 = 0;\n-\n-    /* full blocks */\n-    if (inlen < 16) goto poly1305_donna_atmost15bytes;\n-poly1305_donna_16bytes:\n-    m += 16;\n-    inlen -= 16;\n-\n-    t0 = ReadLE32(m-16);\n-    t1 = ReadLE32(m-12);\n-    t2 = ReadLE32(m-8);\n-    t3 = ReadLE32(m-4);\n-\n-    h0 += t0 & 0x3ffffff;\n-    h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n-    h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n-    h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n-    h4 += (t3 >> 8) | (1 << 24);\n-\n-\n-poly1305_donna_mul:\n-    t[0]  = mul32x32_64(h0,r0) + mul32x32_64(h1,s4) + mul32x32_64(h2,s3) + mul32x32_64(h3,s2) + mul32x32_64(h4,s1);\n-    t[1]  = mul32x32_64(h0,r1) + mul32x32_64(h1,r0) + mul32x32_64(h2,s4) + mul32x32_64(h3,s3) + mul32x32_64(h4,s2);\n-    t[2]  = mul32x32_64(h0,r2) + mul32x32_64(h1,r1) + mul32x32_64(h2,r0) + mul32x32_64(h3,s4) + mul32x32_64(h4,s3);\n-    t[3]  = mul32x32_64(h0,r3) + mul32x32_64(h1,r2) + mul32x32_64(h2,r1) + mul32x32_64(h3,r0) + mul32x32_64(h4,s4);\n-    t[4]  = mul32x32_64(h0,r4) + mul32x32_64(h1,r3) + mul32x32_64(h2,r2) + mul32x32_64(h3,r1) + mul32x32_64(h4,r0);\n-\n-                    h0 = (uint32_t)t[0] & 0x3ffffff; c =           (t[0] >> 26);\n-    t[1] += c;      h1 = (uint32_t)t[1] & 0x3ffffff; b = (uint32_t)(t[1] >> 26);\n-    t[2] += b;      h2 = (uint32_t)t[2] & 0x3ffffff; b = (uint32_t)(t[2] >> 26);\n-    t[3] += b;      h3 = (uint32_t)t[3] & 0x3ffffff; b = (uint32_t)(t[3] >> 26);\n-    t[4] += b;      h4 = (uint32_t)t[4] & 0x3ffffff; b = (uint32_t)(t[4] >> 26);\n-    h0 += b * 5;\n-\n-    if (inlen >= 16) goto poly1305_donna_16bytes;\n-\n-    /* final bytes */\n-poly1305_donna_atmost15bytes:\n-    if (!inlen) goto poly1305_donna_finish;\n-\n-    for (j = 0; j < inlen; j++) mp[j] = m[j];\n-    mp[j++] = 1;\n-    for (; j < 16; j++) mp[j] = 0;\n-    inlen = 0;\n-\n-    t0 = ReadLE32(mp+0);\n-    t1 = ReadLE32(mp+4);\n-    t2 = ReadLE32(mp+8);\n-    t3 = ReadLE32(mp+12);\n-\n-    h0 += t0 & 0x3ffffff;\n-    h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n-    h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n-    h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n-    h4 += (t3 >> 8);\n-\n-    goto poly1305_donna_mul;\n-\n-poly1305_donna_finish:\n-                 b = h0 >> 26; h0 = h0 & 0x3ffffff;\n-    h1 +=     b; b = h1 >> 26; h1 = h1 & 0x3ffffff;\n-    h2 +=     b; b = h2 >> 26; h2 = h2 & 0x3ffffff;\n-    h3 +=     b; b = h3 >> 26; h3 = h3 & 0x3ffffff;\n-    h4 +=     b; b = h4 >> 26; h4 = h4 & 0x3ffffff;\n-    h0 += b * 5; b = h0 >> 26; h0 = h0 & 0x3ffffff;\n-    h1 +=     b;\n-\n-    g0 = h0 + 5; b = g0 >> 26; g0 &= 0x3ffffff;\n-    g1 = h1 + b; b = g1 >> 26; g1 &= 0x3ffffff;\n-    g2 = h2 + b; b = g2 >> 26; g2 &= 0x3ffffff;\n-    g3 = h3 + b; b = g3 >> 26; g3 &= 0x3ffffff;\n-    g4 = h4 + b - (1 << 26);\n-\n-    b = (g4 >> 31) - 1;\n-    nb = ~b;\n-    h0 = (h0 & nb) | (g0 & b);\n-    h1 = (h1 & nb) | (g1 & b);\n-    h2 = (h2 & nb) | (g2 & b);\n-    h3 = (h3 & nb) | (g3 & b);\n-    h4 = (h4 & nb) | (g4 & b);\n-\n-    f0 = ((h0      ) | (h1 << 26)) + (uint64_t)ReadLE32(&key[16]);\n-    f1 = ((h1 >>  6) | (h2 << 20)) + (uint64_t)ReadLE32(&key[20]);\n-    f2 = ((h2 >> 12) | (h3 << 14)) + (uint64_t)ReadLE32(&key[24]);\n-    f3 = ((h3 >> 18) | (h4 <<  8)) + (uint64_t)ReadLE32(&key[28]);\n-\n-    WriteLE32(&out[ 0], f0); f1 += (f0 >> 32);\n-    WriteLE32(&out[ 4], f1); f2 += (f1 >> 32);\n-    WriteLE32(&out[ 8], f2); f3 += (f2 >> 32);\n-    WriteLE32(&out[12], f3);\n+    h0 = st->h[0];\n+    h1 = st->h[1];\n+    h2 = st->h[2];\n+    h3 = st->h[3];\n+    h4 = st->h[4];\n+\n+    while (bytes >= 16) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1259760752",
      "id" : 1259760752,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LFmxw",
      "original_commit_id" : "4abc8465f74e390e0f887a5a0be9550d3d179791",
      "original_line" : 65,
      "original_position" : 186,
      "original_start_line" : null,
      "path" : "src/crypto/poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1524312375,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259760752/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T14:02:18Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259760752",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1259844908"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259844908"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Fixed. At some point I decided to eliminate the constant entirely, but then went back to trying to match the original implementation as much as possible.",
      "commit_id" : "d6a097ca8af996718eb208378baf98a96fe9ba43",
      "created_at" : "2023-07-11T14:42:01Z",
      "diff_hunk" : "@@ -2,140 +2,230 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-// Based on the public domain implementation by Andrew Moon\n-// poly1305-donna-unrolled.c from https://github.com/floodyberry/poly1305-donna\n-\n #include <crypto/common.h>\n #include <crypto/poly1305.h>\n \n #include <string.h>\n \n-#define mul32x32_64(a,b) ((uint64_t)(a) * (b))\n+namespace poly1305_donna {\n \n-void poly1305_auth(unsigned char out[POLY1305_TAGLEN], const unsigned char *m, size_t inlen, const unsigned char key[POLY1305_KEYLEN]) {\n-    uint32_t t0,t1,t2,t3;\n-    uint32_t h0,h1,h2,h3,h4;\n+// Based on the public domain implementation by Andrew Moon\n+// poly1305-donna-32.h from https://github.com/floodyberry/poly1305-donna\n+\n+void poly1305_init(poly1305_context *st, const unsigned char key[32]) noexcept {\n+    /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */\n+    st->r[0] = (ReadLE32(&key[ 0])     ) & 0x3ffffff;\n+    st->r[1] = (ReadLE32(&key[ 3]) >> 2) & 0x3ffff03;\n+    st->r[2] = (ReadLE32(&key[ 6]) >> 4) & 0x3ffc0ff;\n+    st->r[3] = (ReadLE32(&key[ 9]) >> 6) & 0x3f03fff;\n+    st->r[4] = (ReadLE32(&key[12]) >> 8) & 0x00fffff;\n+\n+    /* h = 0 */\n+    st->h[0] = 0;\n+    st->h[1] = 0;\n+    st->h[2] = 0;\n+    st->h[3] = 0;\n+    st->h[4] = 0;\n+\n+    /* save pad for later */\n+    st->pad[0] = ReadLE32(&key[16]);\n+    st->pad[1] = ReadLE32(&key[20]);\n+    st->pad[2] = ReadLE32(&key[24]);\n+    st->pad[3] = ReadLE32(&key[28]);\n+\n+    st->leftover = 0;\n+    st->final = 0;\n+}\n+\n+static void poly1305_blocks(poly1305_context *st, const unsigned char *m, size_t bytes) noexcept {\n+    const uint32_t hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */\n     uint32_t r0,r1,r2,r3,r4;\n     uint32_t s1,s2,s3,s4;\n-    uint32_t b, nb;\n-    size_t j;\n-    uint64_t t[5];\n-    uint64_t f0,f1,f2,f3;\n-    uint64_t g0,g1,g2,g3,g4;\n-    uint64_t c;\n-    unsigned char mp[16];\n-\n-    /* clamp key */\n-    t0 = ReadLE32(key+0);\n-    t1 = ReadLE32(key+4);\n-    t2 = ReadLE32(key+8);\n-    t3 = ReadLE32(key+12);\n-\n-    /* precompute multipliers */\n-    r0 = t0 & 0x3ffffff; t0 >>= 26; t0 |= t1 << 6;\n-    r1 = t0 & 0x3ffff03; t1 >>= 20; t1 |= t2 << 12;\n-    r2 = t1 & 0x3ffc0ff; t2 >>= 14; t2 |= t3 << 18;\n-    r3 = t2 & 0x3f03fff; t3 >>= 8;\n-    r4 = t3 & 0x00fffff;\n+    uint32_t h0,h1,h2,h3,h4;\n+    uint64_t d0,d1,d2,d3,d4;\n+    uint32_t c;\n+\n+    r0 = st->r[0];\n+    r1 = st->r[1];\n+    r2 = st->r[2];\n+    r3 = st->r[3];\n+    r4 = st->r[4];\n \n     s1 = r1 * 5;\n     s2 = r2 * 5;\n     s3 = r3 * 5;\n     s4 = r4 * 5;\n \n-    /* init state */\n-    h0 = 0;\n-    h1 = 0;\n-    h2 = 0;\n-    h3 = 0;\n-    h4 = 0;\n-\n-    /* full blocks */\n-    if (inlen < 16) goto poly1305_donna_atmost15bytes;\n-poly1305_donna_16bytes:\n-    m += 16;\n-    inlen -= 16;\n-\n-    t0 = ReadLE32(m-16);\n-    t1 = ReadLE32(m-12);\n-    t2 = ReadLE32(m-8);\n-    t3 = ReadLE32(m-4);\n-\n-    h0 += t0 & 0x3ffffff;\n-    h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n-    h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n-    h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n-    h4 += (t3 >> 8) | (1 << 24);\n-\n-\n-poly1305_donna_mul:\n-    t[0]  = mul32x32_64(h0,r0) + mul32x32_64(h1,s4) + mul32x32_64(h2,s3) + mul32x32_64(h3,s2) + mul32x32_64(h4,s1);\n-    t[1]  = mul32x32_64(h0,r1) + mul32x32_64(h1,r0) + mul32x32_64(h2,s4) + mul32x32_64(h3,s3) + mul32x32_64(h4,s2);\n-    t[2]  = mul32x32_64(h0,r2) + mul32x32_64(h1,r1) + mul32x32_64(h2,r0) + mul32x32_64(h3,s4) + mul32x32_64(h4,s3);\n-    t[3]  = mul32x32_64(h0,r3) + mul32x32_64(h1,r2) + mul32x32_64(h2,r1) + mul32x32_64(h3,r0) + mul32x32_64(h4,s4);\n-    t[4]  = mul32x32_64(h0,r4) + mul32x32_64(h1,r3) + mul32x32_64(h2,r2) + mul32x32_64(h3,r1) + mul32x32_64(h4,r0);\n-\n-                    h0 = (uint32_t)t[0] & 0x3ffffff; c =           (t[0] >> 26);\n-    t[1] += c;      h1 = (uint32_t)t[1] & 0x3ffffff; b = (uint32_t)(t[1] >> 26);\n-    t[2] += b;      h2 = (uint32_t)t[2] & 0x3ffffff; b = (uint32_t)(t[2] >> 26);\n-    t[3] += b;      h3 = (uint32_t)t[3] & 0x3ffffff; b = (uint32_t)(t[3] >> 26);\n-    t[4] += b;      h4 = (uint32_t)t[4] & 0x3ffffff; b = (uint32_t)(t[4] >> 26);\n-    h0 += b * 5;\n-\n-    if (inlen >= 16) goto poly1305_donna_16bytes;\n-\n-    /* final bytes */\n-poly1305_donna_atmost15bytes:\n-    if (!inlen) goto poly1305_donna_finish;\n-\n-    for (j = 0; j < inlen; j++) mp[j] = m[j];\n-    mp[j++] = 1;\n-    for (; j < 16; j++) mp[j] = 0;\n-    inlen = 0;\n-\n-    t0 = ReadLE32(mp+0);\n-    t1 = ReadLE32(mp+4);\n-    t2 = ReadLE32(mp+8);\n-    t3 = ReadLE32(mp+12);\n-\n-    h0 += t0 & 0x3ffffff;\n-    h1 += ((((uint64_t)t1 << 32) | t0) >> 26) & 0x3ffffff;\n-    h2 += ((((uint64_t)t2 << 32) | t1) >> 20) & 0x3ffffff;\n-    h3 += ((((uint64_t)t3 << 32) | t2) >> 14) & 0x3ffffff;\n-    h4 += (t3 >> 8);\n-\n-    goto poly1305_donna_mul;\n-\n-poly1305_donna_finish:\n-                 b = h0 >> 26; h0 = h0 & 0x3ffffff;\n-    h1 +=     b; b = h1 >> 26; h1 = h1 & 0x3ffffff;\n-    h2 +=     b; b = h2 >> 26; h2 = h2 & 0x3ffffff;\n-    h3 +=     b; b = h3 >> 26; h3 = h3 & 0x3ffffff;\n-    h4 +=     b; b = h4 >> 26; h4 = h4 & 0x3ffffff;\n-    h0 += b * 5; b = h0 >> 26; h0 = h0 & 0x3ffffff;\n-    h1 +=     b;\n-\n-    g0 = h0 + 5; b = g0 >> 26; g0 &= 0x3ffffff;\n-    g1 = h1 + b; b = g1 >> 26; g1 &= 0x3ffffff;\n-    g2 = h2 + b; b = g2 >> 26; g2 &= 0x3ffffff;\n-    g3 = h3 + b; b = g3 >> 26; g3 &= 0x3ffffff;\n-    g4 = h4 + b - (1 << 26);\n-\n-    b = (g4 >> 31) - 1;\n-    nb = ~b;\n-    h0 = (h0 & nb) | (g0 & b);\n-    h1 = (h1 & nb) | (g1 & b);\n-    h2 = (h2 & nb) | (g2 & b);\n-    h3 = (h3 & nb) | (g3 & b);\n-    h4 = (h4 & nb) | (g4 & b);\n-\n-    f0 = ((h0      ) | (h1 << 26)) + (uint64_t)ReadLE32(&key[16]);\n-    f1 = ((h1 >>  6) | (h2 << 20)) + (uint64_t)ReadLE32(&key[20]);\n-    f2 = ((h2 >> 12) | (h3 << 14)) + (uint64_t)ReadLE32(&key[24]);\n-    f3 = ((h3 >> 18) | (h4 <<  8)) + (uint64_t)ReadLE32(&key[28]);\n-\n-    WriteLE32(&out[ 0], f0); f1 += (f0 >> 32);\n-    WriteLE32(&out[ 4], f1); f2 += (f1 >> 32);\n-    WriteLE32(&out[ 8], f2); f3 += (f2 >> 32);\n-    WriteLE32(&out[12], f3);\n+    h0 = st->h[0];\n+    h1 = st->h[1];\n+    h2 = st->h[2];\n+    h3 = st->h[3];\n+    h4 = st->h[4];\n+\n+    while (bytes >= 16) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1259844908",
      "id" : 1259844908,
      "in_reply_to_id" : 1259760752,
      "line" : null,
      "node_id" : "PRRC_kwDOABII585LF7Us",
      "original_commit_id" : "4abc8465f74e390e0f887a5a0be9550d3d179791",
      "original_line" : 65,
      "original_position" : 186,
      "original_start_line" : null,
      "path" : "src/crypto/poly1305.cpp",
      "position" : null,
      "pull_request_review_id" : 1524446865,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259844908/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-11T14:42:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1259844908",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1261786736"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786736"
         }
      },
      "author_association" : "MEMBER",
      "body" : "In 7601a60cddc4405f58f71879f996322329509dfe \"crypto: add Poly1305 class with std::byte Span interface\"\r\n\r\nUse `UCharCast` cast here (and below)?",
      "commit_id" : "d6a097ca8af996718eb208378baf98a96fe9ba43",
      "created_at" : "2023-07-12T22:32:26Z",
      "diff_hunk" : "@@ -32,6 +35,40 @@ void poly1305_finish(poly1305_context *st, unsigned char mac[16]) noexcept;\n \n }  // namespace poly1305_donna\n \n+/** C++ wrapper with std::byte Span interface around poly1305_donna code. */\n+class Poly1305\n+{\n+    poly1305_donna::poly1305_context m_ctx;\n+\n+public:\n+    /** Length of the output produced by Finalize(). */\n+    static constexpr unsigned TAGLEN = POLY1305_TAGLEN;\n+\n+    /** Length of the keys expected by the constructor. */\n+    static constexpr unsigned KEYLEN = POLY1305_KEYLEN;\n+\n+    /** Construct a Poly1305 object with a given 32-byte key. */\n+    Poly1305(Span<const std::byte> key) noexcept\n+    {\n+        assert(key.size() == KEYLEN);\n+        poly1305_donna::poly1305_init(&m_ctx, reinterpret_cast<const unsigned char*>(key.data()));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1261786736",
      "id" : 1261786736,
      "line" : 52,
      "node_id" : "PRRC_kwDOABII585LNVZw",
      "original_commit_id" : "7601a60cddc4405f58f71879f996322329509dfe",
      "original_line" : 54,
      "original_position" : 30,
      "original_start_line" : null,
      "path" : "src/crypto/poly1305.h",
      "position" : 50,
      "pull_request_review_id" : 1527321888,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786736/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T22:32:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261786736",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/3782274?v=4",
         "events_url" : "https://api.github.com/users/achow101/events{/privacy}",
         "followers_url" : "https://api.github.com/users/achow101/followers",
         "following_url" : "https://api.github.com/users/achow101/following{/other_user}",
         "gists_url" : "https://api.github.com/users/achow101/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/achow101",
         "id" : 3782274,
         "login" : "achow101",
         "node_id" : "MDQ6VXNlcjM3ODIyNzQ=",
         "organizations_url" : "https://api.github.com/users/achow101/orgs",
         "received_events_url" : "https://api.github.com/users/achow101/received_events",
         "repos_url" : "https://api.github.com/users/achow101/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/achow101/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/achow101/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/achow101"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1261809644"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261809644"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "could let `ParseHex` return a `std::vector<std::byte>` here and below (for the `final_tag` comparison) to avoid `MakeByteSpan` calls later\r\n```suggestion\r\n        auto total_key = ParseHex<std::byte>(\"01020304050607fffefdfcfbfaf9ffffffffffffffffffffffffffff00000000\");\r\n```\r\n(maybe at some point in the future we can change `ParseHex` to return a vector of `std::byte` rather than `unsigned char` by default)",
      "commit_id" : "d6a097ca8af996718eb208378baf98a96fe9ba43",
      "created_at" : "2023-07-12T23:14:40Z",
      "diff_hunk" : "@@ -767,6 +767,57 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n     TestPoly1305(\"e33594d7505e43b900000000000000003394d7505e4379cd010000000000000000000000000000000000000000000000\",\n                  \"0100000000000000040000000000000000000000000000000000000000000000\",\n                  \"13000000000000000000000000000000\");\n+\n+    // Tests from https://github.com/floodyberry/poly1305-donna/blob/master/poly1305-donna.c\n+    TestPoly1305(\"8e993b9f48681273c29650ba32fc76ce48332ea7164d96a4476fb8c531a1186a\"\n+                 \"c0dfc17c98dce87b4da7f011ec48c97271d2c20f9b928fe2270d6fb863d51738\"\n+                 \"b48eeee314a7cc8ab932164548e526ae90224368517acfeabd6bb3732bc0e9da\"\n+                 \"99832b61ca01b6de56244a9e88d5f9b37973f622a43d14a6599b1f654cb45a74\"\n+                 \"e355a5\",\n+                 \"eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880\",\n+                 \"f3ffc7703f9400e52a7dfb4b3d3305d9\");\n+    {\n+        // mac of the macs of messages of length 0 to 256, where the key and messages have all\n+        // their values set to the length.\n+        auto total_key = ParseHex(\"01020304050607fffefdfcfbfaf9ffffffffffffffffffffffffffff00000000\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1261809644",
      "id" : 1261809644,
      "line" : 781,
      "node_id" : "PRRC_kwDOABII585LNa_s",
      "original_commit_id" : "40de8ce39a65cb37a74bebcbf7b34ed8e70b7096",
      "original_line" : 782,
      "original_position" : 16,
      "original_start_line" : null,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 45,
      "pull_request_review_id" : 1527358127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261809644/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-07-12T23:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261809644",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1261813389"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261813389"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "```suggestion\r\n            std::vector<std::byte> key(32, std::byte{(unsigned char)i});\r\n            std::vector<std::byte> msg(i, std::byte{(unsigned char)i});\r\n```\r\nWith the same idea as above. I think all `Make{Writable}ByteSpan` calls can be avoided in this commit, which improves readability IMHO quite a bit.",
      "commit_id" : "d6a097ca8af996718eb208378baf98a96fe9ba43",
      "created_at" : "2023-07-12T23:21:28Z",
      "diff_hunk" : "@@ -767,6 +767,57 @@ BOOST_AUTO_TEST_CASE(poly1305_testvector)\n     TestPoly1305(\"e33594d7505e43b900000000000000003394d7505e4379cd010000000000000000000000000000000000000000000000\",\n                  \"0100000000000000040000000000000000000000000000000000000000000000\",\n                  \"13000000000000000000000000000000\");\n+\n+    // Tests from https://github.com/floodyberry/poly1305-donna/blob/master/poly1305-donna.c\n+    TestPoly1305(\"8e993b9f48681273c29650ba32fc76ce48332ea7164d96a4476fb8c531a1186a\"\n+                 \"c0dfc17c98dce87b4da7f011ec48c97271d2c20f9b928fe2270d6fb863d51738\"\n+                 \"b48eeee314a7cc8ab932164548e526ae90224368517acfeabd6bb3732bc0e9da\"\n+                 \"99832b61ca01b6de56244a9e88d5f9b37973f622a43d14a6599b1f654cb45a74\"\n+                 \"e355a5\",\n+                 \"eea6a7251c1e72916d11c2cb214d3c252539121d8e234e652d651fa4c8cff880\",\n+                 \"f3ffc7703f9400e52a7dfb4b3d3305d9\");\n+    {\n+        // mac of the macs of messages of length 0 to 256, where the key and messages have all\n+        // their values set to the length.\n+        auto total_key = ParseHex(\"01020304050607fffefdfcfbfaf9ffffffffffffffffffffffffffff00000000\");\n+        Poly1305 total_ctx(MakeByteSpan(total_key));\n+        for (unsigned i = 0; i < 256; ++i) {\n+            std::vector<unsigned char> key(32, (unsigned char)i);\n+            std::vector<unsigned char> msg(i, (unsigned char)i);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27993#discussion_r1261813389",
      "id" : 1261813389,
      "line" : 785,
      "node_id" : "PRRC_kwDOABII585LNb6N",
      "original_commit_id" : "40de8ce39a65cb37a74bebcbf7b34ed8e70b7096",
      "original_line" : 786,
      "original_position" : 20,
      "original_start_line" : 785,
      "path" : "src/test/crypto_tests.cpp",
      "position" : 49,
      "pull_request_review_id" : 1527358127,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27993",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261813389/reactions"
      },
      "side" : "RIGHT",
      "start_line" : 784,
      "start_side" : "RIGHT",
      "subject_type" : "line",
      "updated_at" : "2023-07-12T23:29:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1261813389",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/91535?v=4",
         "events_url" : "https://api.github.com/users/theStack/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theStack/followers",
         "following_url" : "https://api.github.com/users/theStack/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theStack/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theStack",
         "id" : 91535,
         "login" : "theStack",
         "node_id" : "MDQ6VXNlcjkxNTM1",
         "organizations_url" : "https://api.github.com/users/theStack/orgs",
         "received_events_url" : "https://api.github.com/users/theStack/received_events",
         "repos_url" : "https://api.github.com/users/theStack/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theStack/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theStack/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theStack"
      }
   }
]
