[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-06-19T10:26:54Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#issuecomment-1596928845",
      "id" : 1596928845,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27912",
      "node_id" : "IC_kwDOABII585fLzNN",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1596928845/reactions"
      },
      "updated_at" : "2023-06-19T10:26:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1596928845",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1233973528"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233973528"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think `m_disconnect_mutex` already prevents this from happening",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T12:15:21Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1233973528",
      "id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585JjPEY",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486091302,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233973528/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T12:15:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1233973528",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234060495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234060495"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmm you may be right, I might have gone too far with that. What I was trying to protect against was checking the number of references in one instruction, and permitting another thread to increase the `refCount` in the meantime before we remove the node in the subsequent lines. But, it looks like we don't have any functions which would increase the `refCount` during normal operation (only incremented on new connections), so probably unnecessary here.\r\n\r\nIf I'm honest, I kind of prefer this belt-and-suspenders way myself, but would be easily persuaded that it's superfluous or worse than current behaviour (useless extra locking).\r\n\r\nI felt a bit nevous about nesting `m_disconnect_mutex` inside of `m_nodes_mutex`, but it seemed like it was slightly preferable to just locking `m_nodes_mutex` for the whole of `DisconnectNodes()` as that's used in many other operations. I don't think there is any way `StopNodes()` and `DisconnectNodes()` can lock each other here though. Would you agree?",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T13:22:43Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234060495",
      "id" : 1234060495,
      "in_reply_to_id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585JjkTP",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486230879,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234060495/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T13:22:43Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234060495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6606587?v=4",
         "events_url" : "https://api.github.com/users/willcl-ark/events{/privacy}",
         "followers_url" : "https://api.github.com/users/willcl-ark/followers",
         "following_url" : "https://api.github.com/users/willcl-ark/following{/other_user}",
         "gists_url" : "https://api.github.com/users/willcl-ark/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/willcl-ark",
         "id" : 6606587,
         "login" : "willcl-ark",
         "node_id" : "MDQ6VXNlcjY2MDY1ODc=",
         "organizations_url" : "https://api.github.com/users/willcl-ark/orgs",
         "received_events_url" : "https://api.github.com/users/willcl-ark/received_events",
         "repos_url" : "https://api.github.com/users/willcl-ark/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/willcl-ark/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/willcl-ark/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/willcl-ark"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234096330"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234096330"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The CNode reference counting is a total nightmare and we should (and have in the past: https://github.com/bitcoin/bitcoin/pull/10738/) try to get rid of it at some point.\r\n\r\n> permitting another thread to increase the refCount in the meantime before we remove the node in the subsequent lines.\r\n\r\nThis is actually possible with and without your patch and the way we protect against this is by not calling `CNode::AddRef` after nodes where moved to the disconnection queue.\r\n\r\n```c++\r\nif (pnode->nRefCount.compare_exchange_strong(expectedRefCount, -1)) {\r\n    // Theoretically, nothing stops a different thread from calling `AddRef()` while we are here\r\n    m_nodes_disconnected.remove(pnode);\r\n    DeleteNode(pnode);\r\n}\r\n```\r\n\r\n>  But, it looks like we don't have any functions which would increase the refCount during normal operation (only incremented on new connections), so probably unnecessary here.\r\n\r\nOur RAII helper [`NodesSnapshot`](https://github.com/bitcoin/bitcoin/blob/7f0b79ea132d22ad5212c1d3ff4325715ca5ac12/src/net.h#L1189) does call `AddRef` during normal operation (e.g. before processing messages) but `NodesSnapshot` doesn't take a snapshot of `m_nodes_disconnected` so it's fine.\r\n\r\n> I don't think there is any way StopNodes() and DisconnectNodes() can lock each other here though. \r\n\r\nAgreed, as long as you always lock in the same order (which afaict you do).",
      "commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "created_at" : "2023-06-19T13:50:14Z",
      "diff_hunk" : "@@ -1122,32 +1122,36 @@ void CConnman::DisconnectNodes()\n \n         // Disconnect unused nodes\n         std::vector<CNode*> nodes_copy = m_nodes;\n-        for (CNode* pnode : nodes_copy)\n         {\n-            if (pnode->fDisconnect)\n-            {\n-                // remove from m_nodes\n-                m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n+            LOCK(m_disconnect_mutex);\n+            for (CNode* pnode : nodes_copy) {\n+                if (pnode->fDisconnect) {\n+                    // remove from m_nodes\n+                    m_nodes.erase(remove(m_nodes.begin(), m_nodes.end(), pnode), m_nodes.end());\n \n-                // release outbound grant (if any)\n-                pnode->grantOutbound.Release();\n+                    // release outbound grant (if any)\n+                    pnode->grantOutbound.Release();\n \n-                // close socket and cleanup\n-                pnode->CloseSocketDisconnect();\n+                    // close socket and cleanup\n+                    pnode->CloseSocketDisconnect();\n \n-                // hold in disconnected pool until all refs are released\n-                pnode->Release();\n-                m_nodes_disconnected.push_back(pnode);\n+                    // hold in disconnected pool until all refs are released\n+                    pnode->Release();\n+                    m_nodes_disconnected.push_back(pnode);\n+                }\n             }\n         }\n     }\n     {\n+        LOCK(m_disconnect_mutex);\n         // Delete disconnected nodes\n         std::list<CNode*> nodes_disconnected_copy = m_nodes_disconnected;\n         for (CNode* pnode : nodes_disconnected_copy)\n         {\n             // Destroy the object only after other threads have stopped using it.\n-            if (pnode->GetRefCount() <= 0) {\n+            // Prevent two threads trying to delete the same node: set nRefCount to -1 first",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27912#discussion_r1234096330",
      "id" : 1234096330,
      "in_reply_to_id" : 1233973528,
      "line" : 1152,
      "node_id" : "PRRC_kwDOABII585JjtDK",
      "original_commit_id" : "1d28dfb751c882d2e1c6474a817cd686310d83f8",
      "original_line" : 1152,
      "original_position" : 44,
      "original_start_line" : null,
      "path" : "src/net.cpp",
      "position" : 44,
      "pull_request_review_id" : 1486285896,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27912",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234096330/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-19T13:50:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1234096330",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/8077169?v=4",
         "events_url" : "https://api.github.com/users/dergoegge/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dergoegge/followers",
         "following_url" : "https://api.github.com/users/dergoegge/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dergoegge/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dergoegge",
         "id" : 8077169,
         "login" : "dergoegge",
         "node_id" : "MDQ6VXNlcjgwNzcxNjk=",
         "organizations_url" : "https://api.github.com/users/dergoegge/orgs",
         "received_events_url" : "https://api.github.com/users/dergoegge/received_events",
         "repos_url" : "https://api.github.com/users/dergoegge/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dergoegge/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dergoegge"
      }
   }
]
