[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27479](https://github.com/bitcoin/bitcoin/pull/27479) (BIP324: ElligatorSwift integrations by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-26T08:40:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1606983980",
      "id" : 1606983980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585fyKEs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1606983980/reactions"
      },
      "updated_at" : "2023-06-26T12:11:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1606983980",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "fad126dae2bc654a28b0a77e35aa43cae42d1e0c seems like a nice improvement. It makes existing MakeByteSpan function safer by only allowing it to be called on arrays of characters, and not array of other things like `uint16_t` that could have platform specific representations. Some thoughts though:\r\n\r\n- `MakeByteSpan` probably deserves to have some documentation since it is one of the more useful function in that file and is called a lot of places.\r\n- I don't like introducing the `ByteSpanCast` function. It doesn't seem useful except as an implementation detail, and I think it'd be nicer if we got rid of some confusing sounding functions instead of adding another one.\r\n- I don't like adding another use of the `AsBytePtr` function. As mentioned in #27927 I think `AsBytePtr` is unsafe, and less clear than `reinterpret_cast`.\r\n\r\nWould suggest tweaking the PR as follows:\r\n\r\n```diff\r\n--- a/src/span.h\r\n+++ b/src/span.h\r\n@@ -270,25 +270,28 @@ inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_c\r\n \r\n // Helper function to safely convert a Span to a Span<[const] unsigned char>.\r\n template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }\r\n-// Helper function to safely convert a Span to a Span<[const] std::byte>.\r\n-template <typename B>\r\n-auto ByteSpanCast(Span<B> s)\r\n-{\r\n-    return Span{AsBytePtr(UCharCast(s.data())), s.size_bytes()}; // Use UCharCast to enforce B is a byte-like type.\r\n-}\r\n \r\n /** Like the Span constructor, but for (const) unsigned char member types only. Only works for (un)signed char containers. */\r\n template <typename V> constexpr auto MakeUCharSpan(V&& v) -> decltype(UCharSpanCast(Span{std::forward<V>(v)})) { return UCharSpanCast(Span{std::forward<V>(v)}); }\r\n \r\n+// Helper functions to turn arrays of characters into std::byte spans. Usable on\r\n+// C++ std::string, std::string_view, and std::vector<char> objects, as well as\r\n+// on C string literals and C fixed-size char[] arrays.\r\n+//\r\n+// Note that when constructing a span directly from a C string literal, the span\r\n+// will include the \\0 null byte. This can be avoided by constructing the span\r\n+// indirectly through std::string_view.\r\n template <typename V>\r\n Span<const std::byte> MakeByteSpan(V&& v) noexcept\r\n {\r\n-    return ByteSpanCast(Span{std::forward<V>(v)});\r\n+    Span data{std::forward<V>(v)};\r\n+    return AsBytes(Span{UCharCast(data.data()), data.size_bytes()});\r\n }\r\n template <typename V>\r\n Span<std::byte> MakeWritableByteSpan(V&& v) noexcept\r\n {\r\n-    return ByteSpanCast(Span{std::forward<V>(v)});\r\n+    Span data{std::forward<V>(v)};\r\n+    return AsWritableBytes(Span{UCharCast(data.data()), data.size_bytes()});\r\n }\r\n \r\n #endif // BITCOIN_SPAN_H\r\n```",
      "created_at" : "2023-06-26T16:05:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1607791383",
      "id" : 1607791383,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f1PMX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607791383/reactions"
      },
      "updated_at" : "2023-06-26T16:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607791383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
