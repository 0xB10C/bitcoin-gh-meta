[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#27479](https://github.com/bitcoin/bitcoin/pull/27479) (BIP324: ElligatorSwift integrations by sipa)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.\n",
      "created_at" : "2023-06-26T08:40:19Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1606983980",
      "id" : 1606983980,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585fyKEs",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1606983980/reactions"
      },
      "updated_at" : "2023-06-26T12:11:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1606983980",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "fad126dae2bc654a28b0a77e35aa43cae42d1e0c seems like a nice improvement. It makes existing MakeByteSpan function safer by only allowing it to be called on arrays of characters, and not array of other things like `uint16_t` that could have platform specific representations. Some thoughts though:\r\n\r\n- `MakeByteSpan` probably deserves to have some documentation since it is one of the more useful function in that file and is called a lot of places.\r\n- I don't like introducing the `ByteSpanCast` function. It doesn't seem useful except as an implementation detail, and I think it'd be nicer if we got rid of some confusing sounding functions instead of adding another one.\r\n- I don't like adding another use of the `AsBytePtr` function. As mentioned in #27927 I think `AsBytePtr` is unsafe, and less clear than `reinterpret_cast`.\r\n\r\nWould suggest tweaking the PR as follows:\r\n\r\n```diff\r\n--- a/src/span.h\r\n+++ b/src/span.h\r\n@@ -270,25 +270,28 @@ inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_c\r\n \r\n // Helper function to safely convert a Span to a Span<[const] unsigned char>.\r\n template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }\r\n-// Helper function to safely convert a Span to a Span<[const] std::byte>.\r\n-template <typename B>\r\n-auto ByteSpanCast(Span<B> s)\r\n-{\r\n-    return Span{AsBytePtr(UCharCast(s.data())), s.size_bytes()}; // Use UCharCast to enforce B is a byte-like type.\r\n-}\r\n \r\n /** Like the Span constructor, but for (const) unsigned char member types only. Only works for (un)signed char containers. */\r\n template <typename V> constexpr auto MakeUCharSpan(V&& v) -> decltype(UCharSpanCast(Span{std::forward<V>(v)})) { return UCharSpanCast(Span{std::forward<V>(v)}); }\r\n \r\n+// Helper functions to turn arrays of characters into std::byte spans. Usable on\r\n+// C++ std::string, std::string_view, and std::vector<char> objects, as well as\r\n+// on C string literals and C fixed-size char[] arrays.\r\n+//\r\n+// Note that when constructing a span directly from a C string literal, the span\r\n+// will include the \\0 null byte. This can be avoided by constructing the span\r\n+// indirectly through std::string_view.\r\n template <typename V>\r\n Span<const std::byte> MakeByteSpan(V&& v) noexcept\r\n {\r\n-    return ByteSpanCast(Span{std::forward<V>(v)});\r\n+    Span data{std::forward<V>(v)};\r\n+    return AsBytes(Span{UCharCast(data.data()), data.size_bytes()});\r\n }\r\n template <typename V>\r\n Span<std::byte> MakeWritableByteSpan(V&& v) noexcept\r\n {\r\n-    return ByteSpanCast(Span{std::forward<V>(v)});\r\n+    Span data{std::forward<V>(v)};\r\n+    return AsWritableBytes(Span{UCharCast(data.data()), data.size_bytes()});\r\n }\r\n \r\n #endif // BITCOIN_SPAN_H\r\n```",
      "created_at" : "2023-06-26T16:05:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1607791383",
      "id" : 1607791383,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f1PMX",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607791383/reactions"
      },
      "updated_at" : "2023-06-26T16:05:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1607791383",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->\nð This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n",
      "created_at" : "2023-06-26T22:58:26Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1608428783",
      "id" : 1608428783,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f3qzv",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608428783/reactions"
      },
      "updated_at" : "2023-06-26T22:58:26Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608428783",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Maybe MakeByteSpan should just be removed?\r\n\r\n* Currently it (as well as `Span`) accepts a range that is not borrowed (see https://en.cppreference.com/w/cpp/ranges/borrowed_range), leading to potential lifetime issues. Someone should check if making the `Span` deduction guidelines safer will automatically make the `MakeByteSpan` function safer.\r\n* Given that `std::as_bytes` is in the standard library and we can't prevent devs from using it (or `AsBytes`) at compile time, it seems pointless trying to offer a safe MakeByteSpan wrapper with only a docstring suggesting to use it. It may be better to just write a clang-tidy plugin to review the code to disallow calling `AsBytes` on a span of `uint16_t` (or similar)?",
      "created_at" : "2023-06-27T07:36:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1608957974",
      "id" : 1608957974,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f5sAW",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608957974/reactions"
      },
      "updated_at" : "2023-06-27T07:36:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1608957974",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> Maybe MakeByteSpan should just be removed?\r\n\r\nI don't think I agree. `MakeByteSpan(x)` is just equivalent to `AsBytes(Span{x})` currently, so right now it is pointless. But if we go ahead with this PR and restrict it to only work on character arrays, that will make it safer and actually useful.\r\n\r\n> it seems pointless trying to offer a safe MakeByteSpan wrapper with only a docstring suggesting to use it.\r\n\r\nI don't think it's pointless to have a safe function even though a dangerous alternative exists. If I'm writing or reviewing code that uses a safe implementation of `MakeByteSpan` I can be more confident it is doing the right thing than if I see code using `AsBytes`. Just like if I'm reviewing code that is using `UCharCast` I can be more confident in it than code using an `(unsigned char)` cast.\r\n\r\nI think it would be a good thing to discourage use of `AsBytes` and provide some safer alternative where possible. That alternative doesn't have to be `MakeByteSpan`, but if we have a `MakeByteSpan` function already and can document it and make it safer, I think it'd be good to do that.",
      "created_at" : "2023-06-27T15:03:35Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1609691827",
      "id" : 1609691827,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f8fKz",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609691827/reactions"
      },
      "updated_at" : "2023-06-27T15:04:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609691827",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "> If I'm writing or reviewing code that uses a safe implementation of MakeByteSpan I can be more confident it is doing the right thing than if I see code using AsBytes.\r\n\r\nWould you be less confident if there was a clang-tidy plugin doing the check? For example, instead of having two functions that do a similar thing, but it is unclear which one is safer/preferred from just looking at the name, we could have an additional `UnsafeAsBytes` (or similar), where it is clear that using it without looking up what it does is unsafe.",
      "created_at" : "2023-06-27T15:12:39Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1609710867",
      "id" : 1609710867,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f8j0T",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609710867/reactions"
      },
      "updated_at" : "2023-06-27T15:12:39Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609710867",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> > If I'm writing or reviewing code that uses a safe implementation of MakeByteSpan I can be more confident it is doing the right thing than if I see code using AsBytes.\r\n> \r\n> Would you be less confident if there was a clang-tidy plugin doing the check? For example, instead of having two functions that do a similar thing, but it is unclear which one is safer/preferred from just looking at the name, we could have an additional `UnsafeAsBytes` (or similar), where it is clear that using it without looking up what it does is unsafe.\r\n\r\nI think that sounds fine, though I'm not sure what the clang plugin adds exactly. If the goal is just to forbid `AsBytes` from being called on non-char arrays, we could change the definition of `AsBytes` to do that (probably using UCharCast internally), and provide an additional `UnsafeAsBytes` escape hatch for the cases where that doesn't work. But maybe a clang plugin could be useful to prevent `std::as_bytes` calls?.\r\n\r\nI just think as long as we have a `MakeByteSpan` function and can make it safer, it seems good to do that. Or at least that doing that would be better than getting rid of `MakeByteSpan` and replacing it with calls to `AsBytes` when `AsBytes` is not very safe right now. But if there's something that can we can do to make `AsBytes` safer, I'd agree there be little use for a safer `MakeByteSpan`",
      "created_at" : "2023-06-27T15:40:23Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1609772977",
      "id" : 1609772977,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f8y-x",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609772977/reactions"
      },
      "updated_at" : "2023-06-27T15:40:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609772977",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "FWIW, I don't believe `AsBytes` (or `std::as_bytes`) are ever undefined behavior; every object has a memory representation, which you're allowed to observe. It is of course always implementation-defined behavior when anything but byte and byte-like arrays are involved, but the point of these functions is allowing access to that.",
      "created_at" : "2023-06-27T15:51:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1609794629",
      "id" : 1609794629,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f84RF",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609794629/reactions"
      },
      "updated_at" : "2023-06-27T15:51:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609794629",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "> FWIW, I don't believe `AsBytes` (or `std::as_bytes`) are ever undefined behavior\r\n\r\nYes that should be true as long as span is pointing to live memory. I should replace \"platform specific or undefined\" with \"implementation specific\" in the #27978 change description",
      "created_at" : "2023-06-27T16:06:30Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27973#issuecomment-1609823534",
      "id" : 1609823534,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27973",
      "node_id" : "IC_kwDOABII585f8_Uu",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609823534/reactions"
      },
      "updated_at" : "2023-06-27T16:06:30Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1609823534",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
