{
   "active_lock_reason" : null,
   "assignee" : null,
   "assignees" : [],
   "author_association" : "MEMBER",
   "body" : "The current fee estimation algorithm suffers from a number of issues that make it hard to use in the real world:\r\n* Because it's solely based on historical data (looking at how long mempool transactions take to confirm), it cannot react quickly to changing conditions.\r\n* Because it's aiming to match seen behavior rather than requirement, if some non-negligible fraction of users keeps paying a certain high feerate, it may try to match that, even if unnecessary for confirmation.\r\n\r\nThere exist alternative sources of information which could mitigate some of these issues, but they are not used for various reasons:\r\n* We could look at the feerate histogram of the current mempool, which can react much faster, though lacks information about the rate/feerate of transactions being added. It is not used, because in the presence of diverging network policy, it may give permanently and wildly wrong results. For example, a pre-taproot node won't see taproot transactions entirely, and thus miss any feerate pressure they provide. In the other direction, If local policy is more lax than the network's, our mempool may contain unconfirmable high-fee things that incorrectly are accounted for.\r\n* We could look at the rate and feerate of transactions entering the mempool currently, rather than only account for them when they confirm. This gives better predictive value, but suffers from the same problems as the previous point when policies differ.\r\n* We could look at the feerate of transactions in blocks, but this is trivially gameable by miners.\r\n\r\nI wonder if it wouldn't be possible to take the mempool-based approaches into account, but subjecting them to a sanity checks based on confirmation. More concretely:\r\n* We can look at what percentage of high-feerate mempool transactions confirm within a reasonable period of time. If that percentage is high, it's unlikely we have a significantly diverging policy from the network's aggregate policy. If it is too low, we may want to disable mempool-based fee estimation entirely.\r\n* We can keep a counter on transactions in the mempool that tracks how often we'd have expected it to be seen in a block, but didn't. If that counter goes too high for a certain transaction, we could exclude it from feerate calculations. This can reduce issues with too lax local policy, but not the other way around.\r\n\r\nEven with these safeguards, I don't think it's reasonable to use as a default feerate estimate (at least not for automatic feerate decisions without human intervention, like `sendtoaddress` and friends), but it could be a separately selectable estimation mode.\r\n\r\nThis issue is the result of a discussion with @Xekyo, @achow101, @adamjonas, and @mzumsande.\r\n",
   "closed_at" : null,
   "closed_by" : null,
   "comments" : 1,
   "comments_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995/comments",
   "created_at" : "2023-06-28T17:36:12Z",
   "events_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995/events",
   "html_url" : "https://github.com/bitcoin/bitcoin/issues/27995",
   "id" : 1779407019,
   "labels" : [],
   "labels_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995/labels{/name}",
   "locked" : false,
   "milestone" : null,
   "node_id" : "I_kwDOABII585qD5ir",
   "number" : 27995,
   "performed_via_github_app" : null,
   "reactions" : {
      "+1" : 1,
      "-1" : 0,
      "confused" : 0,
      "eyes" : 1,
      "heart" : 1,
      "hooray" : 0,
      "laugh" : 0,
      "rocket" : 2,
      "total_count" : 5,
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995/reactions"
   },
   "repository_url" : "https://api.github.com/repos/bitcoin/bitcoin",
   "state" : "open",
   "state_reason" : null,
   "timeline_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995/timeline",
   "title" : "Improving fee estimation accuracy",
   "updated_at" : "2023-06-28T19:31:41Z",
   "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27995",
   "user" : {
      "avatar_url" : "https://avatars.githubusercontent.com/u/548488?v=4",
      "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
      "followers_url" : "https://api.github.com/users/sipa/followers",
      "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
      "gravatar_id" : "",
      "html_url" : "https://github.com/sipa",
      "id" : 548488,
      "login" : "sipa",
      "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
      "organizations_url" : "https://api.github.com/users/sipa/orgs",
      "received_events_url" : "https://api.github.com/users/sipa/received_events",
      "repos_url" : "https://api.github.com/users/sipa/repos",
      "site_admin" : false,
      "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
      "type" : "User",
      "url" : "https://api.github.com/users/sipa"
   }
}
