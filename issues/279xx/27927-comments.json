[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--021abf342d371248e50ceaed478a90ca-->\n### Reviews\nSee [the guideline](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#code-review) for information on the review process.\nA summary of reviews will appear here.\n",
      "created_at" : "2023-06-21T14:30:10Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#issuecomment-1600948132",
      "id" : 1600948132,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/27927",
      "node_id" : "IC_kwDOABII585fbIek",
      "performed_via_github_app" : null,
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600948132/reactions"
      },
      "updated_at" : "2023-06-21T14:30:10Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1600948132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237381343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237381343"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Use `static_assert` or `enable_if` to make this more obvious to the caller?",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T17:55:48Z",
      "diff_hunk" : "@@ -274,12 +274,20 @@ Span<std::byte> MakeWritableByteSpan(V&& v) noexcept\n // Helper functions to safely cast to unsigned char pointers.\n inline unsigned char* UCharCast(char* c) { return (unsigned char*)c; }\n inline unsigned char* UCharCast(unsigned char* c) { return c; }\n+inline unsigned char* UCharCast(std::byte* c) { return reinterpret_cast<unsigned char*>(c); }\n inline const unsigned char* UCharCast(const char* c) { return (unsigned char*)c; }\n inline const unsigned char* UCharCast(const unsigned char* c) { return c; }\n inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_cast<const unsigned char*>(c); }\n \n // Helper function to safely convert a Span to a Span<[const] unsigned char>.\n template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }\n+// Helper function to safely convert a Span to a Span<[const] std::byte>.\n+template <typename B>\n+auto ByteSpanCast(Span<B> s)\n+{\n+    // Use UCharCast to enforce B is a byte-like type.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237381343",
      "id" : 1237381343,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII585JwPDf",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 288,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 1491377490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237381343/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T18:00:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237381343",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237382754"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237382754"
         }
      },
      "author_association" : "MEMBER",
      "body" : "These seem too greedy I think. I guess you're counting on `ByteSpanCast` to enforce that it's byte-like?",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T17:57:16Z",
      "diff_hunk" : "@@ -201,8 +202,7 @@ template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(MakeByteSpan(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(MakeByteSpan(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(AsBytes(span)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(AsBytes(span)); }\n+template <typename Stream, typename B> void Serialize(Stream& s, Span<B> span) { s.write(ByteSpanCast(span)); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237382754",
      "id" : 1237382754,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585JwPZi",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 205,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 14,
      "pull_request_review_id" : 1491377490,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237382754/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T18:00:23Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237382754",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237418132"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237418132"
         }
      },
      "author_association" : "MEMBER",
      "body" : "> I guess you're counting on ByteSpanCast to enforce that it's byte-like?\r\n\r\nYes, if `ByteSpanCast` accepts non-byte spans, there are likely bugs in other places as well, which should be fixed.\r\n\r\n> These seem too greedy I think.\r\n\r\nI think it is fine, because non-byte spans can not be serialized without a formatter for the elements. Happy to add a comment here as well, if you think it helps?",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T18:29:01Z",
      "diff_hunk" : "@@ -201,8 +202,7 @@ template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(MakeByteSpan(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(MakeByteSpan(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(AsBytes(span)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(AsBytes(span)); }\n+template <typename Stream, typename B> void Serialize(Stream& s, Span<B> span) { s.write(ByteSpanCast(span)); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237418132",
      "id" : 1237418132,
      "in_reply_to_id" : 1237382754,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585JwYCU",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 205,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 14,
      "pull_request_review_id" : 1491437943,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237418132/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T18:29:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237418132",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237418169"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237418169"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I think it should already be obvious to the developer? `static_assert` or `enable_if` in this context can only turn one compile failure error message into another compile failure error message, because there are no other overloads for `ByteSpanCast` and I don't expect there to ever be ones. As this is not (standard) library code, any error message should be fine.\r\n\r\nCurrently I get:\r\n\r\n```\r\n./span.h:289:27: error: no matching function for call to 'UCharCast'\r\n    return Span{AsBytePtr(UCharCast(s.data())), s.size_bytes()};\r\n                          ^~~~~~~~~\r\nnote: in instantiation of function template specialization 'ByteSpanCast<const unsigned long>'...\r\n```\r\n\r\nHappy to move the code comment you commented on the same line as the return to include it in the error message if you think it helps?",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T18:29:03Z",
      "diff_hunk" : "@@ -274,12 +274,20 @@ Span<std::byte> MakeWritableByteSpan(V&& v) noexcept\n // Helper functions to safely cast to unsigned char pointers.\n inline unsigned char* UCharCast(char* c) { return (unsigned char*)c; }\n inline unsigned char* UCharCast(unsigned char* c) { return c; }\n+inline unsigned char* UCharCast(std::byte* c) { return reinterpret_cast<unsigned char*>(c); }\n inline const unsigned char* UCharCast(const char* c) { return (unsigned char*)c; }\n inline const unsigned char* UCharCast(const unsigned char* c) { return c; }\n inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_cast<const unsigned char*>(c); }\n \n // Helper function to safely convert a Span to a Span<[const] unsigned char>.\n template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }\n+// Helper function to safely convert a Span to a Span<[const] std::byte>.\n+template <typename B>\n+auto ByteSpanCast(Span<B> s)\n+{\n+    // Use UCharCast to enforce B is a byte-like type.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237418169",
      "id" : 1237418169,
      "in_reply_to_id" : 1237381343,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII585JwYC5",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 288,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 1491437986,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237418169/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T18:30:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237418169",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237425344"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237425344"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's only obvious because the implementation happens to be just below the definition :)\r\n\r\nBut sure, I guess that's good enough.",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T18:34:35Z",
      "diff_hunk" : "@@ -274,12 +274,20 @@ Span<std::byte> MakeWritableByteSpan(V&& v) noexcept\n // Helper functions to safely cast to unsigned char pointers.\n inline unsigned char* UCharCast(char* c) { return (unsigned char*)c; }\n inline unsigned char* UCharCast(unsigned char* c) { return c; }\n+inline unsigned char* UCharCast(std::byte* c) { return reinterpret_cast<unsigned char*>(c); }\n inline const unsigned char* UCharCast(const char* c) { return (unsigned char*)c; }\n inline const unsigned char* UCharCast(const unsigned char* c) { return c; }\n inline const unsigned char* UCharCast(const std::byte* c) { return reinterpret_cast<const unsigned char*>(c); }\n \n // Helper function to safely convert a Span to a Span<[const] unsigned char>.\n template <typename T> constexpr auto UCharSpanCast(Span<T> s) -> Span<typename std::remove_pointer<decltype(UCharCast(s.data()))>::type> { return {UCharCast(s.data()), s.size()}; }\n+// Helper function to safely convert a Span to a Span<[const] std::byte>.\n+template <typename B>\n+auto ByteSpanCast(Span<B> s)\n+{\n+    // Use UCharCast to enforce B is a byte-like type.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237425344",
      "id" : 1237425344,
      "in_reply_to_id" : 1237381343,
      "line" : 288,
      "node_id" : "PRRC_kwDOABII585JwZzA",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 288,
      "original_position" : 24,
      "original_start_line" : null,
      "path" : "src/span.h",
      "position" : 24,
      "pull_request_review_id" : 1491450108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237425344/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T18:34:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237425344",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237441495"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237441495"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Just a difference of opinion/style I guess. I'd rather not consider the function in the first place, but I suppose anything that causes a compile failure wfm.",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T18:48:09Z",
      "diff_hunk" : "@@ -201,8 +202,7 @@ template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(MakeByteSpan(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(MakeByteSpan(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(AsBytes(span)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(AsBytes(span)); }\n+template <typename Stream, typename B> void Serialize(Stream& s, Span<B> span) { s.write(ByteSpanCast(span)); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237441495",
      "id" : 1237441495,
      "in_reply_to_id" : 1237382754,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585JwdvX",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 205,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 14,
      "pull_request_review_id" : 1491475605,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237441495/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T18:48:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237441495",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/417043?v=4",
         "events_url" : "https://api.github.com/users/theuni/events{/privacy}",
         "followers_url" : "https://api.github.com/users/theuni/followers",
         "following_url" : "https://api.github.com/users/theuni/following{/other_user}",
         "gists_url" : "https://api.github.com/users/theuni/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/theuni",
         "id" : 417043,
         "login" : "theuni",
         "node_id" : "MDQ6VXNlcjQxNzA0Mw==",
         "organizations_url" : "https://api.github.com/users/theuni/orgs",
         "received_events_url" : "https://api.github.com/users/theuni/received_events",
         "repos_url" : "https://api.github.com/users/theuni/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/theuni/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/theuni/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/theuni"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237503001"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237503001"
         }
      },
      "author_association" : "MEMBER",
      "body" : "C++20 Constraints and Concepts is probably going to fix the compiler errors in the long run. May even be less than 5 years until we can switch to that.",
      "commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "created_at" : "2023-06-21T19:06:06Z",
      "diff_hunk" : "@@ -201,8 +202,7 @@ template<typename Stream> inline void Serialize(Stream& s, int64_t a ) { ser_wri\n template<typename Stream> inline void Serialize(Stream& s, uint64_t a) { ser_writedata64(s, a); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const char (&a)[N]) { s.write(MakeByteSpan(a)); }\n template<typename Stream, int N> inline void Serialize(Stream& s, const unsigned char (&a)[N]) { s.write(MakeByteSpan(a)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<const unsigned char>& span) { s.write(AsBytes(span)); }\n-template<typename Stream> inline void Serialize(Stream& s, const Span<unsigned char>& span) { s.write(AsBytes(span)); }\n+template <typename Stream, typename B> void Serialize(Stream& s, Span<B> span) { s.write(ByteSpanCast(span)); }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/27927#discussion_r1237503001",
      "id" : 1237503001,
      "in_reply_to_id" : 1237382754,
      "line" : 205,
      "node_id" : "PRRC_kwDOABII585JwswZ",
      "original_commit_id" : "faa17da7ef42c5a67a6660c71ca2c5a418c45136",
      "original_line" : 205,
      "original_position" : 14,
      "original_start_line" : null,
      "path" : "src/serialize.h",
      "position" : 14,
      "pull_request_review_id" : 1491560314,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/27927",
      "reactions" : {
         "+1" : 0,
         "-1" : 0,
         "confused" : 0,
         "eyes" : 0,
         "heart" : 0,
         "hooray" : 0,
         "laugh" : 0,
         "rocket" : 0,
         "total_count" : 0,
         "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237503001/reactions"
      },
      "side" : "RIGHT",
      "start_line" : null,
      "start_side" : null,
      "subject_type" : "line",
      "updated_at" : "2023-06-21T19:06:06Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/1237503001",
      "user" : {
         "avatar_url" : "https://avatars.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   }
]
