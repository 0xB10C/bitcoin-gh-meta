[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16688](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16688.html) (log: Add validation interface logging by jkczyz)\n* [#16365](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16365.html) (Log RPC parameters (arguments) if -debug=rpcparams by LarryRuane)\n* [#15606](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15606.html) ([experimental] UTXO snapshots by jamesob)\n* [#14384](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14384.html) (Fire TransactionRemovedFromMempool callbacks from mempool by l2a5b1)\n* [#10102](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/10102.html) ([experimental] Multiprocess bitcoin by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-08-24T19:23:51Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-415858539",
      "id" : 415858539,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNTg1ODUzOQ==",
      "updated_at" : "2019-09-23T21:17:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/415858539",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213754112"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213754112"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nNote: this class is moved from `src/index/txindex.cpp` with no changes (except whitespace)",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T16:47:20Z",
      "diff_hunk" : "@@ -93,6 +96,33 @@ class BaseIndex : public CValidationInterface\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();\n+\n+    bool IsInSyncWithMainChain() const;\n+};\n+\n+struct CDiskTxPos : public CDiskBlockPos",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213754112",
      "id" : 213754112,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc1NDExMg==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 25,
      "path" : "src/index/base.h",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213754112",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213756026"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213756026"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nNote: new `index/addrindex.cpp`, `index/addrindex.h`, and `test/addrindex_tests.cpp` files in this commit mirror existing `index/txindex.cpp` and `index/txindex.h`, `test/txindex_tests.cpp` files and have some code and comments in common. It can help to diff the `addr` files against the `tx` files when reviewing this PR.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T16:53:38Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213756026",
      "id" : 213756026,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc1NjAyNg==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 23,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213756026",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213770206"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213770206"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nI think this code could benefit from some typedefs and more consistent use of types internally to improve readability. Maybe:\r\n\r\n```\r\nusing AddressId = uint64_t;\r\nusing BlockId = uint64;\r\nusing DbKey = std::pair<std::pair<char, AddressID>, CDiskTxPos>;\r\nusing DbValue = BlockId;\r\n```\r\n\r\nI also wonder if `std::tuple<char, AddressId, CDiskTxPos>` might be a more natural key format than the nested pair.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T17:37:39Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213770206",
      "id" : 213770206,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc3MDIwNg==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 43,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213770206",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773597"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773597"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nCould just make this a return value instead of an output parameter. Existing return value seems redundant.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T17:47:55Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773597",
      "id" : 213773597,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc3MzU5Nw==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 55,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773597",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773659"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773659"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nCould consolidate last two parameters into single `boost::optional<AddressId> filter_value` param.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T17:48:07Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213773659",
      "id" : 213773659,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc3MzY1OQ==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 57,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213773659",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213782329"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213782329"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nThis sleep + BlockUntilSyncedToCurrentChain call is pretty hacky but probably ok in principle. I think @jimpo could easily tell you how to improve it. I would move this code out of the `AddrIndex` class and into a `g_txindex->WaitForSync()` or similar method, and probably replace the sleep with a condition variable wait.\r\n\r\nOr maybe this code will be unnecessary with #14035 undo data?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T18:14:05Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213782329",
      "id" : 213782329,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc4MjMyOQ==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 124,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213782329",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213785140"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213785140"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Introduce address index\" (3c7cc3c705b08828dc8dc919e53343df78568ebd)\r\n\r\nShould probably reorder this condition. It seems pointless to retrieve the value when the key is wrong, and maybe dangerous if the value is a different format and deserializing could throw an exception.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T18:22:29Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213785140",
      "id" : 213785140,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc4NTE0MA==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 66,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213785140",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213788343"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213788343"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "In commit \"Add searchrawtransactions RPC\" (226eeea9736127269058fbbf7816c7100f90974d)\r\n\r\nShould add a basic python functional test for the new RPC method.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-29T18:32:17Z",
      "diff_hunk" : "@@ -203,6 +204,123 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r213788343",
      "id" : 213788343,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxMzc4ODM0Mw==",
      "original_commit_id" : "226eeea9736127269058fbbf7816c7100f90974d",
      "original_position" : 12,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 12,
      "pull_request_review_id" : 150655713,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/213788343",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013007"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013007"
         }
      },
      "author_association" : "MEMBER",
      "body" : "There is no such thing as a \"spend from address\"",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T12:37:52Z",
      "diff_hunk" : "@@ -1611,6 +1625,13 @@ bool AppInitMain()\n         g_txindex->Start();\n     }\n \n+    if (gArgs.GetBoolArg(\"-addrindex\", DEFAULT_ADDRINDEX)) {\n+        if (!g_txindex)\n+            InitWarning(_(\"-txindex must be enabled for -addrindex to index spends from addresses.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013007",
      "id" : 214013007,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxMzAwNw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 76,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 150972075,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013007",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013753"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013753"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`skip` and `count` probably make sense on an options object instead.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T12:40:10Z",
      "diff_hunk" : "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013753",
      "id" : 214013753,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxMzc1Mw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 21,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 150972977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013753",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013906"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013906"
         }
      },
      "author_association" : "MEMBER",
      "body" : "(this would be number 4, but n/a once on an options object)",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T12:40:32Z",
      "diff_hunk" : "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214013906",
      "id" : 214013906,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxMzkwNg==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 22,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 150972977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214013906",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015214"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015214"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This basically shouldn't be here. The address used to receive a coin has zero relationship with the transaction spending that coin.\r\n\r\nIf someone really cares about getting it anyway, there should be a separate input txid/index -> spend txid index.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T12:45:05Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015214",
      "id" : 214015214,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxNTIxNA==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 114,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150972977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015214",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015281"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015281"
         }
      },
      "author_association" : "MEMBER",
      "body" : "This looks like a very fragile assumption.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T12:45:18Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015281",
      "id" : 214015281,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxNTI4MQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 132,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150972977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015281",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015451"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015451"
         }
      },
      "author_association" : "MEMBER",
      "body" : "With this, why is the loop waiting for IsInSyncWithMainChain needed?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T12:45:50Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214015451",
      "id" : 214015451,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDAxNTQ1MQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 129,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 150972977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214015451",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1095675?v=4",
         "events_url" : "https://api.github.com/users/luke-jr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/luke-jr/followers",
         "following_url" : "https://api.github.com/users/luke-jr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/luke-jr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/luke-jr",
         "id" : 1095675,
         "login" : "luke-jr",
         "node_id" : "MDQ6VXNlcjEwOTU2NzU=",
         "organizations_url" : "https://api.github.com/users/luke-jr/orgs",
         "received_events_url" : "https://api.github.com/users/luke-jr/received_events",
         "repos_url" : "https://api.github.com/users/luke-jr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/luke-jr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/luke-jr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214093388"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214093388"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "`BlockUntilSyncedToCurrentChain` returns false immediately if `m_synced` is false.\r\n\r\nThe loop waiting for `IsInSyncWithMainChain` waits for txindex to finish in `ThreadSync`. Once txindex finishes in `ThreadSync` it will be updated by ValiditionInterface callbacks from that point on.\r\n\r\nThis line (since txindex must have `m_synced` =  true now) will actually block now until txindex syncs with the ValidationInterface queue.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T16:16:00Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214093388",
      "id" : 214093388,
      "in_reply_to_id" : 214015451,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDA5MzM4OA==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 129,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151073881,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214093388",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214136359"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214136359"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "commit: Introduce address index\r\n\r\nCan you move this comment to `BaseIndex::DB` and delete from `TxIndex::DB` as well? No need to copy it to every new index file, especially since it's handled at the base layer.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T18:31:21Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214136359",
      "id" : 214136359,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDEzNjM1OQ==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 25,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214136359",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214149325"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214149325"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This needs an `if (!m_synced) return;`",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T19:14:05Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214149325",
      "id" : 214149325,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDE0OTMyNQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 158,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151142587,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214149325",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203100"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203100"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Spends from an address should at least get indexed under a separate key prefix even if it's done by the same indexer.\r\n\r\nUsing the undo files is a much better way to get this information than the txindex.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:45:49Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203100",
      "id" : 214203100,
      "in_reply_to_id" : 214015214,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwMzEwMA==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 114,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203100",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203436"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203436"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "There should be a way of differentiating between txs where the script is the output and ones that spend from the address. Perhaps two methods or two output vector parameters.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:47:56Z",
      "diff_hunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    BaseIndex::DB& GetDB() const override;\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;\n+\n+    const char* GetName() const override { return \"addrindex\"; }\n+\n+public:\n+    /// Constructs the index, which becomes available to be queried.\n+    explicit AddrIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n+    virtual ~AddrIndex() override;\n+\n+    /// Lookup transaction(s) by scriptPubKey. Fills txs vector with (block_hash, tx) pairs.\n+    bool FindTxsByScript(const CScript& dest, std::vector<std::pair<uint256, CTransactionRef>> &txs);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203436",
      "id" : 214203436,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwMzQzNg==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 47,
      "path" : "src/index/addrindex.h",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203436",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203723"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "A better way to do it is to loop until `BlockUntilSyncedToCurrentChain` becomes true.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:49:33Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214203723",
      "id" : 214203723,
      "in_reply_to_id" : 214015451,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwMzcyMw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 129,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214203723",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204067"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Use the undo files instead of CCoinsViewCache.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:51:37Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {\n+    const uint64_t block_hash_bits = block->GetHash().GetUint64(0);\n+    std::unordered_set<uint64_t> addr_ids_to_remove;\n+\n+    {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204067",
      "id" : 214204067,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDA2Nw==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 162,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204067",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204133"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204133"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "This shouldn't be necessary.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:52:00Z",
      "diff_hunk" : "@@ -276,3 +278,8 @@ void BaseIndex::Stop()\n         m_thread_sync.join();\n     }\n }\n+\n+\n+bool BaseIndex::IsInSyncWithMainChain() const {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204133",
      "id" : 214204133,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDEzMw==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 15,
      "path" : "src/index/base.cpp",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204133",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204265"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204265"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why? The implementation is empty.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:52:49Z",
      "diff_hunk" : "@@ -61,6 +62,8 @@ class BaseIndex : public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                         const std::vector<CTransactionRef>& txn_conflicted) override;\n \n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204265",
      "id" : 214204265,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDI2NQ==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 12,
      "path" : "src/index/base.h",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204265",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204406"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204406"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "I'd vote to move it to it's own file, like `src/index/disktxpos.{h,cpp}`.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:53:47Z",
      "diff_hunk" : "@@ -93,6 +96,33 @@ class BaseIndex : public CValidationInterface\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();\n+\n+    bool IsInSyncWithMainChain() const;\n+};\n+\n+struct CDiskTxPos : public CDiskBlockPos",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204406",
      "id" : 214204406,
      "in_reply_to_id" : 213754112,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDQwNg==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 25,
      "path" : "src/index/base.h",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204406",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204889"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204889"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Why is this exposed? It seems internal.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T22:56:35Z",
      "diff_hunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    BaseIndex::DB& GetDB() const override;\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;\n+\n+    const char* GetName() const override { return \"addrindex\"; }\n+\n+public:\n+    /// Constructs the index, which becomes available to be queried.\n+    explicit AddrIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n+    virtual ~AddrIndex() override;\n+\n+    /// Lookup transaction(s) by scriptPubKey. Fills txs vector with (block_hash, tx) pairs.\n+    bool FindTxsByScript(const CScript& dest, std::vector<std::pair<uint256, CTransactionRef>> &txs);\n+\n+    // Returns part of key used to store information in db.\n+    static uint64_t GetAddrID(const CScript& script);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214204889",
      "id" : 214204889,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNDg4OQ==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 50,
      "path" : "src/index/addrindex.h",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214204889",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214205452"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214205452"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Seems that `filter_by_value` functionality isn't used? Also, I'd rename to something like `filter_by_block` because it's not clear what value means and is tightly coupled to the database layout chosen.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-08-30T23:00:15Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r214205452",
      "id" : 214205452,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNDIwNTQ1Mg==",
      "original_commit_id" : "3c7cc3c705b08828dc8dc919e53343df78568ebd",
      "original_position" : 56,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 151126290,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/214205452",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/881253?v=4",
         "events_url" : "https://api.github.com/users/jimpo/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jimpo/followers",
         "following_url" : "https://api.github.com/users/jimpo/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jimpo/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jimpo",
         "id" : 881253,
         "login" : "jimpo",
         "node_id" : "MDQ6VXNlcjg4MTI1Mw==",
         "organizations_url" : "https://api.github.com/users/jimpo/orgs",
         "received_events_url" : "https://api.github.com/users/jimpo/received_events",
         "repos_url" : "https://api.github.com/users/jimpo/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jimpo/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jimpo"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Thanks for all the reviews. \r\n\r\nTo answer some of @jimpo's questions:\r\n2 & 4. I included part of the block hash so that in BlockDisconnected we ae sure to remove the entries in the index from this block only (that's where  `filter_by_value` is used). The reason I chose to remove entries from the database is to prevent reading into a block file using an old `CDiskTxPos`  that may no longer be a valid position. Otherwise in `FindTxsByScript` you could run into errors. You're right that this problem would be better handled by higher level methods.\r\n\r\nI think that returning just the outpoint is a better idea than the current choice so I'll switch to that and try to incorporate all the other feedback here.",
      "created_at" : "2018-08-31T15:19:08Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-417697510",
      "id" : 417697510,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQxNzY5NzUxMA==",
      "updated_at" : "2018-08-31T15:19:08Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/417697510",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161819"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161819"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Redundant condition `filter_by_value`: what about `!filter_by_value || value == value_wanted` instead?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:30:12Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161819",
      "id" : 215161819,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MTgxOQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 68,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 152365361,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161819",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161936"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161936"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`block_hash` should be passed by const reference?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:30:41Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161936",
      "id" : 215161936,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MTkzNg==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 146,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 152365501,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161936",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161992"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161992"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`prev_hash` should be passed by const reference?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:30:58Z",
      "diff_hunk" : "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215161992",
      "id" : 215161992,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MTk5Mg==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 29,
      "path" : "src/test/test_bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 152365584,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215161992",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162067"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162067"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`prev_hash` should be passed by const reference?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:31:15Z",
      "diff_hunk" : "@@ -89,6 +89,15 @@ struct TestChain100Setup : public TestingSetup {\n     CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n                                  const CScript& scriptPubKey);\n \n+    void BuildChain(const uint256 prev_hash,",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162067",
      "id" : 215162067,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjA2Nw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 4,
      "path" : "src/test/test_bitcoin.h",
      "position" : null,
      "pull_request_review_id" : 152365666,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162067",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162287"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162287"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`coinbase_script_pub_key` should be passed by const reference?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:32:04Z",
      "diff_hunk" : "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {\n+    if (height <= 0) return;\n+\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus some of the passed-in txns:\n+    block.vtx.resize(1);\n+\n+    // If this is the last block, add all remaining transactions.\n+    // Otherwise add with some randomness.\n+    for (auto it = txns.begin(); it != txns.end();) {\n+        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());\n+\n+        if (add_tx) {\n+            CMutableTransaction tx = *it;\n+            block.vtx.push_back(MakeTransactionRef(tx));\n+            it = txns.erase(it);\n+        } else {\n+            it++;\n+        }\n+    }\n+\n+    block.hashPrevBlock = prev_hash;\n+    block.nTime = prev_time + 1;\n+\n+    // This is the body of IncrementExtraNonce, modified specifically for this function.\n+    // (IncrementExtraNonce creates a valid coinbase and merkleRoot)\n+    // Height first in coinbase required for block.version=2\n+    unsigned int extraNonce = 1;\n+    unsigned int nHeight = chainActive.Tip()->nHeight+1+blocks.size();\n+    CMutableTransaction txCoinbase(*block.vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(extraNonce)) + COINBASE_FLAGS;\n+    assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n+\n+    block.vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n+    block.hashMerkleRoot = BlockMerkleRoot(block);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n+    blocks.push_back(shared_pblock);\n+\n+    BuildChain(blocks.back()->GetHash(), blocks.back()->nTime, height - 1, txns, scriptPubKey, blocks);\n+}\n+\n+void TestChain100Setup::CreateSpendingTxs(int coinbase_spent_offset, std::vector<CScript>& script_pub_keys, std::vector<CMutableTransaction> &spends, CScript coinbase_script_pub_key) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162287",
      "id" : 215162287,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjI4Nw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 76,
      "path" : "src/test/test_bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 152365920,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162287",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162430"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162430"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `++it`",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:32:35Z",
      "diff_hunk" : "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \"   {\\n\"\n+            \"      \\\"hex\\\" : \\\"data\\\",             (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      \\\"txid\\\" : \\\"id\\\",              (string) The transaction id (same as provided)\\n\"\n+            \"      \\\"hash\\\" : \\\"id\\\",              (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"      \\\"size\\\" : n,                   (numeric) The serialized transaction size\\n\"\n+            \"      \\\"vsize\\\" : n,                  (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n+            \"      \\\"weight\\\" : n,                 (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n+            \"      \\\"version\\\" : n,                (numeric) The version\\n\"\n+            \"      \\\"locktime\\\" : ttt,             (numeric) The lock time\\n\"\n+            \"      \\\"vin\\\" : [                     (array of json objects)\\n\"\n+            \"        {\\n\"\n+            \"          \\\"txid\\\": \\\"id\\\",           (string) The transaction id\\n\"\n+            \"          \\\"vout\\\": n,                (numeric) \\n\"\n+            \"          \\\"scriptSig\\\": {            (json object) The script\\n\"\n+            \"            \\\"asm\\\": \\\"asm\\\",         (string) asm\\n\"\n+            \"            \\\"hex\\\": \\\"hex\\\"          (string) hex\\n\"\n+            \"        },\\n\"\n+            \"      \\\"sequence\\\": n                 (numeric) The script sequence number\\n\"\n+            \"      \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"    \\\"vout\\\" : [                       (array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"         \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"         \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"           \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"           \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"             \\\"address\\\"               (string) bitcoin address\\n\"\n+            \"             ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",         (string) the block hash\\n\"\n+            \"  }\\n\"\n+            \" ]\\n\"\n+            );\n+\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int skip = 0;\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        skip = request.params[2].get_int();\n+    }\n+    if (request.params.size() > 3) {\n+        if (!request.params[3].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 4 must be an integer\");\n+        }\n+        count = request.params[3].get_int();\n+    }\n+\n+    if (!g_addrindex) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addrindex->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+    std::vector<std::pair<uint256, CTransactionRef>> result;\n+    if (!g_addrindex->FindTxsByScript(scriptPubKey, result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");\n+        }\n+        return ret;\n+    }\n+\n+    std::vector<std::pair<uint256, CTransactionRef>>::const_iterator it = result.begin();\n+    while (it != result.end() && skip--) it++; // Skip first set of results as needed.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162430",
      "id" : 215162430,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjQzMA==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 117,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 152366108,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162430",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162543"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162543"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Nit: `++it`",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-05T07:32:59Z",
      "diff_hunk" : "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \"   {\\n\"\n+            \"      \\\"hex\\\" : \\\"data\\\",             (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      \\\"txid\\\" : \\\"id\\\",              (string) The transaction id (same as provided)\\n\"\n+            \"      \\\"hash\\\" : \\\"id\\\",              (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"      \\\"size\\\" : n,                   (numeric) The serialized transaction size\\n\"\n+            \"      \\\"vsize\\\" : n,                  (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n+            \"      \\\"weight\\\" : n,                 (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n+            \"      \\\"version\\\" : n,                (numeric) The version\\n\"\n+            \"      \\\"locktime\\\" : ttt,             (numeric) The lock time\\n\"\n+            \"      \\\"vin\\\" : [                     (array of json objects)\\n\"\n+            \"        {\\n\"\n+            \"          \\\"txid\\\": \\\"id\\\",           (string) The transaction id\\n\"\n+            \"          \\\"vout\\\": n,                (numeric) \\n\"\n+            \"          \\\"scriptSig\\\": {            (json object) The script\\n\"\n+            \"            \\\"asm\\\": \\\"asm\\\",         (string) asm\\n\"\n+            \"            \\\"hex\\\": \\\"hex\\\"          (string) hex\\n\"\n+            \"        },\\n\"\n+            \"      \\\"sequence\\\": n                 (numeric) The script sequence number\\n\"\n+            \"      \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"    \\\"vout\\\" : [                       (array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"         \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"         \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"           \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"           \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"             \\\"address\\\"               (string) bitcoin address\\n\"\n+            \"             ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",         (string) the block hash\\n\"\n+            \"  }\\n\"\n+            \" ]\\n\"\n+            );\n+\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int skip = 0;\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        skip = request.params[2].get_int();\n+    }\n+    if (request.params.size() > 3) {\n+        if (!request.params[3].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 4 must be an integer\");\n+        }\n+        count = request.params[3].get_int();\n+    }\n+\n+    if (!g_addrindex) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addrindex->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+    std::vector<std::pair<uint256, CTransactionRef>> result;\n+    if (!g_addrindex->FindTxsByScript(scriptPubKey, result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");\n+        }\n+        return ret;\n+    }\n+\n+    std::vector<std::pair<uint256, CTransactionRef>>::const_iterator it = result.begin();\n+    while (it != result.end() && skip--) it++; // Skip first set of results as needed.\n+    while (it != result.end() && count--) {\n+        const auto& tuple = *it;\n+        UniValue tx_val(UniValue::VOBJ);\n+        if (verbose) {\n+            TxToJSON(*(tuple.second), tuple.first, tx_val);\n+        } else {\n+            std::string hex_tx = EncodeHexTx(*(tuple.second), RPCSerializationFlags());\n+            tx_val.pushKV(\"hex\", hex_tx);\n+            tx_val.pushKV(\"blockhash\", tuple.first.GetHex());\n+        }\n+        ret.push_back(tx_val);\n+        it++;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215162543",
      "id" : 215162543,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTE2MjU0Mw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 129,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : null,
      "pull_request_review_id" : 152366243,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215162543",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215762841"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215762841"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\ntest/test_bitcoin.cpp:194:60: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [-Wsign-compare]\r\n        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());\r\n                                        ~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\r\n```",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-06T20:16:34Z",
      "diff_hunk" : "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {\n+    if (height <= 0) return;\n+\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus some of the passed-in txns:\n+    block.vtx.resize(1);\n+\n+    // If this is the last block, add all remaining transactions.\n+    // Otherwise add with some randomness.\n+    for (auto it = txns.begin(); it != txns.end();) {\n+        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215762841",
      "id" : 215762841,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2Mjg0MQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 42,
      "path" : "src/test/test_bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 153102413,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215762841",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763081"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763081"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\nindex/addrindex.cpp:110:25: warning: loop variable 'tx_out' of type 'const CTxOut' creates a copy from type 'const CTxOut' [-Wrange-loop-analysis]\r\n        for (const auto tx_out : tx->vout){\r\n                        ^\r\nindex/addrindex.cpp:110:14: note: use reference type 'const CTxOut &' to prevent copying\r\n        for (const auto tx_out : tx->vout){\r\n             ^~~~~~~~~~~~~~~~~~~\r\n```",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-06T20:17:28Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763081",
      "id" : 215763081,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzA4MQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 110,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 153102721,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763081",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763177"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763177"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here - see above.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-06T20:17:47Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763177",
      "id" : 215763177,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzE3Nw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 115,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 153102835,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763177",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763264"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763264"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here - see above.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-06T20:18:04Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {\n+    const uint64_t block_hash_bits = block->GetHash().GetUint64(0);\n+    std::unordered_set<uint64_t> addr_ids_to_remove;\n+\n+    {\n+        LOCK(cs_main);\n+        CCoinsViewCache view(pcoinsTip.get());\n+\n+        // Collect all addr_ids from txs in this block.\n+        for (const auto& tx : block->vtx) {\n+            for (const auto tx_out : tx->vout){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763264",
      "id" : 215763264,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzI2NA==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 168,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 153102932,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763264",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763353"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763353"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here - see above.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-06T20:18:20Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.\n+                    }\n+\n+                    // It's also possible we can't find the tx in txindex because it fell behind in\n+                    // the ValidationInterface queue. In this case we also let it finish before continuing.\n+                    g_txindex->BlockUntilSyncedToCurrentChain();\n+\n+                    // If we still can't find the tx then a re-org may have happened.\n+                    if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) return false;\n+                }\n+\n+                CScript script_pub_key = tx->vout[tx_in.prevout.n].scriptPubKey;\n+                positions.emplace_back(GetAddrID(script_pub_key), pos);\n+            }\n+        }\n+\n+        pos.nTxOffset += ::GetSerializeSize(*tx, SER_DISK, CLIENT_VERSION);\n+    }\n+\n+    return m_db->WriteToIndex(positions, block.GetHash());\n+}\n+\n+bool AddrIndex::DB::WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>>& positions, const uint256 block_hash)\n+{\n+    CDBBatch batch(*this);\n+    for (const auto& pos : positions) {\n+        // Insert (address, position) pair with a part of the block hash.\n+        // Different transactions for the same address will be differentiated\n+        // in leveldb by their CDiskTxPos suffix.\n+        batch.Write(std::make_pair(std::make_pair(DB_ADDRINDEX, pos.first), pos.second), block_hash.GetUint64(0));\n+    }\n+    return WriteBatch(batch);\n+}\n+\n+void AddrIndex::BlockDisconnected(const std::shared_ptr<const CBlock> &block) {\n+    const uint64_t block_hash_bits = block->GetHash().GetUint64(0);\n+    std::unordered_set<uint64_t> addr_ids_to_remove;\n+\n+    {\n+        LOCK(cs_main);\n+        CCoinsViewCache view(pcoinsTip.get());\n+\n+        // Collect all addr_ids from txs in this block.\n+        for (const auto& tx : block->vtx) {\n+            for (const auto tx_out : tx->vout){\n+                addr_ids_to_remove.emplace(GetAddrID(tx_out.scriptPubKey));\n+            }\n+\n+            if (!tx->IsCoinBase()) {\n+                for (const auto tx_in : tx->vin){",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763353",
      "id" : 215763353,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzM1Mw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 173,
      "path" : "src/index/addrindex.cpp",
      "position" : null,
      "pull_request_review_id" : 153103042,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763353",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763499"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763499"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\ntest/addrindex_tests.cpp:112:23: warning: unused variable 'block' [-Wunused-variable]\r\n        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\r\n                      ^\r\n```",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-06T20:18:50Z",
      "diff_hunk" : "@@ -0,0 +1,418 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <util.h>\n+#include <utiltime.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(addrindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_initial_sync, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+\n+    CTransactionRef tx_disk;\n+    uint256 block_hash;\n+\n+    // Transactions should not be found in the index before it is started.\n+    for (const auto& txn : m_coinbase_txns) {\n+        for (const auto& out : txn->vout) {\n+            std::vector<std::pair<uint256, CTransactionRef>> txs;\n+            BOOST_CHECK(!addr_index.FindTxsByScript(out.scriptPubKey, txs));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before addrindex is started.\n+    BOOST_CHECK(!addr_index.BlockUntilSyncedToCurrentChain());\n+    addr_index.Start();\n+\n+    // Allow addrindex to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!addr_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that addrindex has all addresses sent to that were in the chain before it started.\n+    for (const auto& txn : m_coinbase_txns) {\n+        uint256 tx_hash = txn->GetHash();\n+        for (const auto& out : txn->vout) {\n+            std::vector<std::pair<uint256, CTransactionRef>> txs;\n+            if (!addr_index.FindTxsByScript(out.scriptPubKey, txs)) {\n+                    BOOST_ERROR(\"FindTxsByScript failed\");\n+            }\n+\n+            // Confirm that the transaction's destination is in the index.\n+            bool found_tx = false;\n+            for (const auto& tuple : txs) {\n+                if (tuple.second->GetHash() == tx_hash) {\n+                    found_tx = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!found_tx) {\n+                BOOST_ERROR(\"Transaction not found by destination\");\n+            }\n+        }\n+    }\n+\n+    // Check that new transactions in new blocks make it into the index.\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    for (int i = 0; i < 10; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CTransaction& txn = *block.vtx[0];\n+\n+        BOOST_CHECK(addr_index.BlockUntilSyncedToCurrentChain());\n+\n+        uint256 tx_hash = txn.GetHash();\n+        std::vector<std::pair<uint256, CTransactionRef>> txs;\n+        if (!addr_index.FindTxsByScript(coinbase_script_pub_key, txs)) {\n+            BOOST_ERROR(\"FindTransactionsByDestionation failed\");\n+        }\n+\n+        // Every coinbase tx sends to the same address so we should expect the number of txs\n+        // for this address to increase with each tx we add.\n+        BOOST_CHECK_EQUAL(txs.size(), i + 1);\n+\n+        // Confirm that the transaction's destination is in the index.\n+        bool found_tx = false;\n+        for (const auto& tuple : txs) {\n+            if (tuple.second->GetHash() == tx_hash) {\n+                found_tx = true;\n+                break;\n+            }\n+        }\n+\n+        if (!found_tx) {\n+            BOOST_ERROR(\"Transaction not found by destination\");\n+        }\n+    }\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_many_spends, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+    addr_index.Start();\n+\n+    // Mine blocks for coinbase maturity, so we can spend some coinbase outputs in the test.\n+    CScript coinbase_script_pub_key = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < 20; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r215763499",
      "id" : 215763499,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNTc2MzQ5OQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 112,
      "path" : "src/test/addrindex_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 153103233,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/215763499",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216033759"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216033759"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Suggest dropping \"to index spends from addresses\"; if someone configures `addrindex=` I assume they know why. Also prevents a long debate :-)",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-07T17:35:14Z",
      "diff_hunk" : "@@ -1611,6 +1625,13 @@ bool AppInitMain()\n         g_txindex->Start();\n     }\n \n+    if (gArgs.GetBoolArg(\"-addrindex\", DEFAULT_ADDRINDEX)) {\n+        if (!g_txindex)\n+            InitWarning(_(\"-txindex must be enabled for -addrindex to index spends from addresses.\"));",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216033759",
      "id" : 216033759,
      "in_reply_to_id" : 214013007,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAzMzc1OQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 76,
      "path" : "src/init.cpp",
      "position" : null,
      "pull_request_review_id" : 153436851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216033759",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216034219"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216034219"
         }
      },
      "author_association" : "MEMBER",
      "body" : "@MarcoFalke why is it again that Travis doesn't fail on warnings?",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-07T17:37:02Z",
      "diff_hunk" : "@@ -173,6 +175,76 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     return result;\n }\n \n+// Based off of BuildChain in validation_block_tests.cpp\n+\n+// Build a chain of blocks that contains all of the transactions in txns.\n+void TestChain100Setup::BuildChain(const uint256 prev_hash, const uint32_t prev_time, int height, std::vector<CMutableTransaction> &txns, const CScript& scriptPubKey, std::vector<std::shared_ptr<const CBlock>>& blocks) {\n+    if (height <= 0) return;\n+\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus some of the passed-in txns:\n+    block.vtx.resize(1);\n+\n+    // If this is the last block, add all remaining transactions.\n+    // Otherwise add with some randomness.\n+    for (auto it = txns.begin(); it != txns.end();) {\n+        bool add_tx = (height == 1) || (GetRandInt(height) < txns.size());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216034219",
      "id" : 216034219,
      "in_reply_to_id" : 215762841,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAzNDIxOQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 42,
      "path" : "src/test/test_bitcoin.cpp",
      "position" : null,
      "pull_request_review_id" : 153436851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216034219",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216037366"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216037366"
         }
      },
      "author_association" : "MEMBER",
      "body" : "The `Blockchain transactions are still in the process of being indexed` warning should always be shown, because there might be missing transactions while indexing is in progress (`txindex` doesn't have that problem).",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-07T17:47:50Z",
      "diff_hunk" : "@@ -203,6 +204,129 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue searchrawtransactions(const JSONRPCRequest& request) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"searchrawtransactions <address> [verbose=true] [skip=0] [count=100]\\n\"\n+            \"\\nReturns raw transactions that contain the given address and the hash of the block(s) they were found in.\\n\"\n+            \"\\nRequires -addrindex to be enabled.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"    (string, required) The address to search for\\n\"\n+            \"2. \\\"verbose\\\"    (bool, optional, default = false) If set to false, only returns data for hex-encoded `txid`s. \\n\"\n+            \"3. \\\"skip\\\"       (numeric, optional, default = 0) If set, the result skips this number of initial values. \\n\"\n+            \"3. \\\"count\\\"      (numeric, optional, default = 100) If set, the result will only contain this amount of values. \\n\"\n+            \"\\nResult:\\n\"\n+            \" [                                    (array of json objects)\\n\"\n+            \"   {\\n\"\n+            \"      \\\"hex\\\" : \\\"data\\\",             (string) The serialized, hex-encoded data for 'txid'\\n\"\n+            \"      \\\"txid\\\" : \\\"id\\\",              (string) The transaction id (same as provided)\\n\"\n+            \"      \\\"hash\\\" : \\\"id\\\",              (string) The transaction hash (differs from txid for witness transactions)\\n\"\n+            \"      \\\"size\\\" : n,                   (numeric) The serialized transaction size\\n\"\n+            \"      \\\"vsize\\\" : n,                  (numeric) The virtual transaction size (differs from size for witness transactions)\\n\"\n+            \"      \\\"weight\\\" : n,                 (numeric) The transaction's weight (between vsize*4-3 and vsize*4)\\n\"\n+            \"      \\\"version\\\" : n,                (numeric) The version\\n\"\n+            \"      \\\"locktime\\\" : ttt,             (numeric) The lock time\\n\"\n+            \"      \\\"vin\\\" : [                     (array of json objects)\\n\"\n+            \"        {\\n\"\n+            \"          \\\"txid\\\": \\\"id\\\",           (string) The transaction id\\n\"\n+            \"          \\\"vout\\\": n,                (numeric) \\n\"\n+            \"          \\\"scriptSig\\\": {            (json object) The script\\n\"\n+            \"            \\\"asm\\\": \\\"asm\\\",         (string) asm\\n\"\n+            \"            \\\"hex\\\": \\\"hex\\\"          (string) hex\\n\"\n+            \"        },\\n\"\n+            \"      \\\"sequence\\\": n                 (numeric) The script sequence number\\n\"\n+            \"      \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"    \\\"vout\\\" : [                       (array of json objects)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"value\\\" : x.xxx,            (numeric) The value in \" + CURRENCY_UNIT + \"\\n\"\n+            \"         \\\"n\\\" : n,                    (numeric) index\\n\"\n+            \"         \\\"scriptPubKey\\\" : {          (json object)\\n\"\n+            \"           \\\"asm\\\" : \\\"asm\\\",          (string) the asm\\n\"\n+            \"           \\\"hex\\\" : \\\"hex\\\",          (string) the hex\\n\"\n+            \"           \\\"reqSigs\\\" : n,            (numeric) The required sigs\\n\"\n+            \"           \\\"type\\\" : \\\"pubkeyhash\\\",  (string) The type, eg 'pubkeyhash'\\n\"\n+            \"           \\\"addresses\\\" : [           (json array of string)\\n\"\n+            \"             \\\"address\\\"               (string) bitcoin address\\n\"\n+            \"             ,...\\n\"\n+            \"           ]\\n\"\n+            \"         }\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"blockhash\\\" : \\\"hash\\\",         (string) the block hash\\n\"\n+            \"  }\\n\"\n+            \" ]\\n\"\n+            );\n+\n+\n+    CScript scriptPubKey;\n+    const CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if(IsValidDestination(dest)) {\n+        scriptPubKey = GetScriptForDestination(dest);\n+    } else if(IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+        scriptPubKey = CScript(data.begin(), data.end());\n+    } else {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n+    }\n+\n+    // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n+    bool verbose = false;\n+    if (!request.params[1].isNull()) {\n+        verbose = request.params[1].isNum() ? (request.params[1].get_int() != 0) : request.params[1].get_bool();\n+    }\n+\n+    int skip = 0;\n+    int count = 100;\n+    if (request.params.size() > 2) {\n+        if (!request.params[2].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 3 must be an integer\");\n+        }\n+        skip = request.params[2].get_int();\n+    }\n+    if (request.params.size() > 3) {\n+        if (!request.params[3].isNum()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, argument 4 must be an integer\");\n+        }\n+        count = request.params[3].get_int();\n+    }\n+\n+    if (!g_addrindex) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"This RPC requires -addrindex to be enabled.\");\n+    }\n+\n+    bool addrindex_ready = g_addrindex->BlockUntilSyncedToCurrentChain();\n+\n+    UniValue ret(UniValue::VARR);\n+    std::vector<std::pair<uint256, CTransactionRef>> result;\n+    if (!g_addrindex->FindTxsByScript(scriptPubKey, result)) {\n+        if (!addrindex_ready) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY,\"Transactions with given address not found. Blockchain transactions are still in the process of being indexed\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r216037366",
      "id" : 216037366,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjAzNzM2Ng==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 111,
      "path" : "src/rpc/rawtransaction.cpp",
      "position" : 95,
      "pull_request_review_id" : 153436851,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/216037366",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691269"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691269"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:20:09 cpplint(pr=14053): src/index/addrindex.cpp:124:  Should have a space between // and comment  [whitespace/comments] [4]\r\n```",
      "commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "created_at" : "2018-09-23T07:59:31Z",
      "diff_hunk" : "@@ -0,0 +1,225 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <hash.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <shutdown.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <ui_interface.h>\n+#include <util.h>\n+#include <validation.h>\n+#include <vector>\n+#include <uint256.h>\n+\n+#include <boost/thread.hpp>\n+\n+constexpr char DB_ADDRINDEX = 'a';\n+std::unique_ptr<AddrIndex> g_addrindex;\n+\n+/**\n+ * Access to the addrindex database (indexes/addrindex/)\n+ *\n+ * The database stores a block locator of the chain the database is synced to\n+ * so that the AddrIndex can efficiently determine the point it last stopped at.\n+ * A locator is used instead of a simple hash of the chain tip because blocks\n+ * and block index entries may not be flushed to disk until after this database\n+ * is updated.\n+ */\n+class AddrIndex::DB : public BaseIndex::DB\n+{\n+public:\n+    explicit DB(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Find all entries in the index for addr_id.\n+    // If filter_by_value is true, only returns keys with values equal to value_wanted.\n+    bool ReadAddrIndex(const uint64_t addr_id,\n+                       std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                       const bool filter_by_value = false,\n+                       const uint64_t value_wanted = 0);\n+\n+    bool WriteToIndex(const std::vector<std::pair<uint64_t, CDiskTxPos>> &positions, const uint256 block_hash);\n+\n+    void RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove);\n+};\n+\n+AddrIndex::DB::DB(size_t n_cache_size, bool f_memory, bool f_wipe) :\n+    BaseIndex::DB(GetDataDir() / \"indexes\" / \"addrindex\", n_cache_size, f_memory, f_wipe)\n+{}\n+\n+BaseIndex::DB& AddrIndex::GetDB() const { return *m_db; }\n+\n+bool AddrIndex::DB::ReadAddrIndex(const uint64_t addr_id,\n+                                  std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_found,\n+                                  const bool filter_by_value,\n+                                  const uint64_t value_wanted){\n+    bool found_tx = false; // return true only if at least one transaction was found\n+    const std::pair<char, uint64_t> key_prefix = std::make_pair(DB_ADDRINDEX, addr_id);\n+    std::unique_ptr<CDBIterator> iter(NewIterator());\n+\n+    iter->Seek(key_prefix);\n+    while (iter->Valid()) {\n+        std::pair<std::pair<char, uint64_t>, CDiskTxPos> key;\n+        uint64_t value;\n+        if (!iter->GetKey(key) || !iter->GetValue(value) || key.first != key_prefix) break;\n+\n+        if  (!filter_by_value || (filter_by_value && value == value_wanted)) {\n+            found_tx = true;\n+            keys_found.emplace_back(key);\n+        }\n+\n+        iter->Next();\n+    }\n+\n+    return found_tx;\n+}\n+\n+void AddrIndex::DB::RemoveKeys(const std::vector<std::pair<std::pair<char, uint64_t>, CDiskTxPos>> &keys_to_remove) {\n+    CDBBatch batch(*this);\n+    for (const auto& key : keys_to_remove) {\n+        batch.Erase(key);\n+    }\n+    WriteBatch(batch);\n+}\n+\n+AddrIndex::AddrIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_db(MakeUnique<AddrIndex::DB>(n_cache_size, f_memory, f_wipe)){}\n+\n+AddrIndex::~AddrIndex() {}\n+\n+uint64_t AddrIndex::GetAddrID(const CScript& script) {\n+    uint256 hashed_script;\n+\n+    CSHA256 hasher;\n+    hasher.Write((unsigned char*)&(*script.begin()), script.end() - script.begin());\n+    hasher.Finalize(hashed_script.begin());\n+\n+    return hashed_script.GetUint64(0);\n+}\n+\n+bool AddrIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n+    std::vector<std::pair<uint64_t, CDiskTxPos>> positions;\n+    positions.reserve(2 * block.vtx.size());  // Most transactions have at least 1 input and 1 output.\n+\n+    // Index addresses of spent outputs if txindex is enabled,\n+    for (const auto& tx : block.vtx) {\n+        for (const auto tx_out : tx->vout){\n+            positions.emplace_back(GetAddrID(tx_out.scriptPubKey), pos);\n+        }\n+\n+        if (g_txindex && !tx->IsCoinBase()) {\n+            for (const auto tx_in : tx->vin) {\n+                CTransactionRef tx;\n+                uint256 block_hash;\n+\n+                if (!g_txindex->FindTx(tx_in.prevout.hash, block_hash, tx)) {\n+                    // Both addrindex and txindex may be syncing in parallel, and addrindex might\n+                    // be ahead of txindex. We let txindex sync first so that addrindex can continue\n+                    // after it.\n+                    while (!g_txindex->IsInSyncWithMainChain()) {\n+                        MilliSleep(1000); //TODO: find a less arbitrary sleep time.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691269",
      "id" : 219691269,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTI2OQ==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 124,
      "path" : "src/index/addrindex.cpp",
      "position" : 124,
      "pull_request_review_id" : 157931834,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2018-09-23T07:59:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691269",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691273"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691273"
         }
      },
      "author_association" : "MEMBER",
      "body" : "```\r\n2018-09-22 21:20:09 cpplint(pr=14053): src/index/addrindex.h:44:  \"virtual\" is redundant since function is already declared as \"override\"  [readability/inheritance] [4]\r\n```",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2018-09-23T07:59:48Z",
      "diff_hunk" : "@@ -0,0 +1,56 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_ADDRINDEX_H\n+#define BITCOIN_INDEX_ADDRINDEX_H\n+\n+#include <chain.h>\n+#include <index/base.h>\n+#include <vector>\n+#include <txdb.h>\n+#include <uint256.h>\n+#include <primitives/transaction.h>\n+#include <script/standard.h>\n+#include <script/script.h>\n+\n+/**\n+ * AddrIndex is used to look up transactions included in the blockchain by script.\n+ * The index is written to a LevelDB database and records the filesystem\n+ * location of transactions by script.\n+ */\n+class AddrIndex final : public BaseIndex\n+{\n+protected:\n+    class DB;\n+\n+private:\n+    const std::unique_ptr<DB> m_db;\n+\n+protected:\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    BaseIndex::DB& GetDB() const override;\n+\n+    void BlockDisconnected(const std::shared_ptr<const CBlock> &block) override;\n+\n+    const char* GetName() const override { return \"addrindex\"; }\n+\n+public:\n+    /// Constructs the index, which becomes available to be queried.\n+    explicit AddrIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Destructor is declared because this class contains a unique_ptr to an incomplete type.\n+    virtual ~AddrIndex() override;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r219691273",
      "id" : 219691273,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxOTY5MTI3Mw==",
      "original_commit_id" : "4865275573a56abb9e079d8a4ff5957c3694c583",
      "original_position" : 44,
      "path" : "src/index/addrindex.h",
      "position" : 51,
      "pull_request_review_id" : 157931838,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/219691273",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2018-09-24T22:23:27Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-424145334",
      "id" : 424145334,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNDE0NTMzNA==",
      "updated_at" : "2018-09-24T22:23:27Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/424145334",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Comments to the concept\r\n\r\nSome time ago I have rebased bitpay's bitcore patches (from their insight block explorer) to bitcoin core here (without much work on my own)\r\n\r\nhttps://github.com/bitcoin/bitcoin/pull/10370\r\n\r\nThe consensus back then seemed to be that more indexes in the core is not a good thing, and work should be instead done on external indexes. However I am no sure how this PR differs, I just quickly skimmed it.",
      "created_at" : "2018-10-05T06:40:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-427261876",
      "id" : 427261876,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzI2MTg3Ng==",
      "updated_at" : "2018-10-05T07:09:01Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427261876",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/104945?v=4",
         "events_url" : "https://api.github.com/users/karel-3d/events{/privacy}",
         "followers_url" : "https://api.github.com/users/karel-3d/followers",
         "following_url" : "https://api.github.com/users/karel-3d/following{/other_user}",
         "gists_url" : "https://api.github.com/users/karel-3d/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/karel-3d",
         "id" : 104945,
         "login" : "karel-3d",
         "node_id" : "MDQ6VXNlcjEwNDk0NQ==",
         "organizations_url" : "https://api.github.com/users/karel-3d/orgs",
         "received_events_url" : "https://api.github.com/users/karel-3d/received_events",
         "repos_url" : "https://api.github.com/users/karel-3d/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/karel-3d/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/karel-3d/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/karel-3d"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "@karel-3d I think this one is based on  #13033, so at least the performance impact should be less pronounced. Other than that it should be rather similar.",
      "created_at" : "2018-10-05T08:02:32Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-427280137",
      "id" : 427280137,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQyNzI4MDEzNw==",
      "updated_at" : "2018-10-05T08:02:32Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/427280137",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "We talked about (address) indexes during the previous [IRC meeting](http://www.erisian.com.au/meetbot/bitcoin-core-dev/2018/bitcoin-core-dev.2018-12-13-19.00.html). ",
      "created_at" : "2018-12-15T10:14:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-447556680",
      "id" : 447556680,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ0NzU1NjY4MA==",
      "updated_at" : "2018-12-15T10:14:36Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/447556680",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509440"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509440"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`spends` shadows a variable existing in the outer scope.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2019-01-24T08:48:21Z",
      "diff_hunk" : "@@ -0,0 +1,154 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(addrindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_initial_sync_and_spends, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+    CScript coinbase_script_pub_key = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Transactions should not be found in the index before it is started.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations;\n+    BOOST_CHECK(!addr_index.FindTxsByScript(coinbase_script_pub_key, spends, creations));\n+\n+    // BlockUntilSyncedToCurrentChain should return false before addrindex is started.\n+    BOOST_CHECK(!addr_index.BlockUntilSyncedToCurrentChain());\n+    addr_index.Start();\n+\n+    // Mine blocks for coinbase maturity, so we can spend some coinbase outputs in the test.\n+    for (int i = 0; i < 20; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    }\n+\n+    // Allow addrindex to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!addr_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that addrindex has all coinbase outputs indexed.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends2;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations2;\n+    if (!addr_index.FindTxsByScript(coinbase_script_pub_key, spends2, creations2)) {\n+            BOOST_ERROR(\"FindTxsByScript failed\");\n+    }\n+    // The coinbase transactions have the same scriptPubKey in their output.\n+    BOOST_CHECK_EQUAL(spends2.size(), 0);\n+    BOOST_CHECK_EQUAL(creations2.size(), 120);\n+\n+    // Create several new key pairs to test sending to many different addresses in the same block.\n+    std::vector<CKey> priv_keys(10);\n+    std::vector<CScript> script_pub_keys(10);\n+    for (int i = 0; i < 10; i++) {\n+        priv_keys[i].MakeNewKey(true);\n+        script_pub_keys[i] = CScript() <<  ToByteVector(priv_keys[i].GetPubKey()) << OP_CHECKSIG;\n+    }\n+\n+    // Create a transaction sending to each of the new addresses.\n+    std::vector<CMutableTransaction> spend_txns(10);\n+    CreateSpendingTxs(0, script_pub_keys, spend_txns, coinbase_script_pub_key);\n+\n+    const CBlock& block = CreateAndProcessBlock(spend_txns, coinbase_script_pub_key);\n+    const uint256 block_hash = block.GetHash();\n+    BOOST_CHECK(addr_index.BlockUntilSyncedToCurrentChain()); // Let the address index catch up.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block_hash); // Sanity check to make sure this block is actually being used.\n+\n+    // Now check that all the addresses we sent to are present in the index.\n+    for (int i = 0; i < 10; i++) {\n+        std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509440",
      "id" : 250509440,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDUwOTQ0MA==",
      "original_commit_id" : "fc075a0d94bcc5b8453da5da3ac78614c76470df",
      "original_position" : 73,
      "path" : "src/test/addrindex_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 195908542,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509440",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509491"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509491"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Same here but for `creations`.",
      "commit_id" : "9a4b53e1b486d511f85415b743d29c5527c2567f",
      "created_at" : "2019-01-24T08:48:33Z",
      "diff_hunk" : "@@ -0,0 +1,154 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <index/addrindex.h>\n+#include <index/txindex.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(addrindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(addrindex_initial_sync_and_spends, TestChain100Setup)\n+{\n+    AddrIndex addr_index(1 << 20, true);\n+    CScript coinbase_script_pub_key = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Transactions should not be found in the index before it is started.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations;\n+    BOOST_CHECK(!addr_index.FindTxsByScript(coinbase_script_pub_key, spends, creations));\n+\n+    // BlockUntilSyncedToCurrentChain should return false before addrindex is started.\n+    BOOST_CHECK(!addr_index.BlockUntilSyncedToCurrentChain());\n+    addr_index.Start();\n+\n+    // Mine blocks for coinbase maturity, so we can spend some coinbase outputs in the test.\n+    for (int i = 0; i < 20; i++) {\n+        std::vector<CMutableTransaction> no_txns;\n+        CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    }\n+\n+    // Allow addrindex to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!addr_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that addrindex has all coinbase outputs indexed.\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends2;\n+    std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations2;\n+    if (!addr_index.FindTxsByScript(coinbase_script_pub_key, spends2, creations2)) {\n+            BOOST_ERROR(\"FindTxsByScript failed\");\n+    }\n+    // The coinbase transactions have the same scriptPubKey in their output.\n+    BOOST_CHECK_EQUAL(spends2.size(), 0);\n+    BOOST_CHECK_EQUAL(creations2.size(), 120);\n+\n+    // Create several new key pairs to test sending to many different addresses in the same block.\n+    std::vector<CKey> priv_keys(10);\n+    std::vector<CScript> script_pub_keys(10);\n+    for (int i = 0; i < 10; i++) {\n+        priv_keys[i].MakeNewKey(true);\n+        script_pub_keys[i] = CScript() <<  ToByteVector(priv_keys[i].GetPubKey()) << OP_CHECKSIG;\n+    }\n+\n+    // Create a transaction sending to each of the new addresses.\n+    std::vector<CMutableTransaction> spend_txns(10);\n+    CreateSpendingTxs(0, script_pub_keys, spend_txns, coinbase_script_pub_key);\n+\n+    const CBlock& block = CreateAndProcessBlock(spend_txns, coinbase_script_pub_key);\n+    const uint256 block_hash = block.GetHash();\n+    BOOST_CHECK(addr_index.BlockUntilSyncedToCurrentChain()); // Let the address index catch up.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block_hash); // Sanity check to make sure this block is actually being used.\n+\n+    // Now check that all the addresses we sent to are present in the index.\n+    for (int i = 0; i < 10; i++) {\n+        std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> spends;\n+        std::vector<std::pair<COutPoint, std::pair<CTransactionRef, uint256>>> creations;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#discussion_r250509491",
      "id" : 250509491,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI1MDUwOTQ5MQ==",
      "original_commit_id" : "fc075a0d94bcc5b8453da5da3ac78614c76470df",
      "original_position" : 74,
      "path" : "src/test/addrindex_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 195908614,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14053",
      "updated_at" : "2019-03-20T23:58:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/250509491",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/7826565?v=4",
         "events_url" : "https://api.github.com/users/practicalswift/events{/privacy}",
         "followers_url" : "https://api.github.com/users/practicalswift/followers",
         "following_url" : "https://api.github.com/users/practicalswift/following{/other_user}",
         "gists_url" : "https://api.github.com/users/practicalswift/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/practicalswift",
         "id" : 7826565,
         "login" : "practicalswift",
         "node_id" : "MDQ6VXNlcjc4MjY1NjU=",
         "organizations_url" : "https://api.github.com/users/practicalswift/orgs",
         "received_events_url" : "https://api.github.com/users/practicalswift/received_events",
         "repos_url" : "https://api.github.com/users/practicalswift/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/practicalswift/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/practicalswift"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "@Sjors \r\n> Lightly tested on macOS. It doesn't find the coinbase transaction to `mtnNvZY7iQCfzJCVon13tfJSVYDn9iiUWD` in [block 120](https://testnet.blockchain.info/en/block/0000000058dbb5e3fce9be42ae79beb564be666866c6b85c9791863219ec36db), `mg4bQva8w7Cjs8KaKHeEbyXUaCzoQAcXyH` in [block 10001](https://testnet.blockchain.info/nl/block/0000000000629d100db387f37d0f37c51118f250fb0946310a8c37316cbc4028) and several others.\r\n\r\nI'm confused at what you're referring to by`mtn...` and `mg4...`. The outputs for those two coinbase transactions are P2PK, so the only way to search for them is by scriptPubKey.  I used the hex value of the scriptPubKey from [here](https://blockstream.info/block/00000000000080b66c911bd5ba14a74260057311eaeb1982802f7010f1a9f090) and was able to find it.",
      "created_at" : "2019-01-30T22:19:56Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-459132969",
      "id" : 459132969,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ1OTEzMjk2OQ==",
      "updated_at" : "2019-01-30T22:19:56Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/459132969",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/12243734?v=4",
         "events_url" : "https://api.github.com/users/marcinja/events{/privacy}",
         "followers_url" : "https://api.github.com/users/marcinja/followers",
         "following_url" : "https://api.github.com/users/marcinja/following{/other_user}",
         "gists_url" : "https://api.github.com/users/marcinja/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/marcinja",
         "id" : 12243734,
         "login" : "marcinja",
         "node_id" : "MDQ6VXNlcjEyMjQzNzM0",
         "organizations_url" : "https://api.github.com/users/marcinja/orgs",
         "received_events_url" : "https://api.github.com/users/marcinja/received_events",
         "repos_url" : "https://api.github.com/users/marcinja/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/marcinja/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/marcinja/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/marcinja"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-03-18T18:09:11Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-474037115",
      "id" : 474037115,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NDAzNzExNQ==",
      "updated_at" : "2019-03-18T18:09:11Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/474037115",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-03-20T16:39:22Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-474920795",
      "id" : 474920795,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NDkyMDc5NQ==",
      "updated_at" : "2019-03-20T16:39:22Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/474920795",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-03-21T08:26:44Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-475145006",
      "id" : 475145006,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ3NTE0NTAwNg==",
      "updated_at" : "2019-03-21T08:26:44Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/475145006",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Maybe tag this [needing concept ack](https://github.com/bitcoin/bitcoin/labels/Needs%20Conceptual%20Review).\r\n\r\nThis would probably be pretty easy to rebase, and has a previous concept ack from jimpo, but it's not clear if other people want this change or might object to it.",
      "created_at" : "2019-07-17T21:36:31Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-512578228",
      "id" : 512578228,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxMjU3ODIyOA==",
      "updated_at" : "2019-07-17T21:36:31Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/512578228",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "I for one would be very happy to see an optional addr index + api finally available in bitcoin-core, and not as a separate patch or hacky thing.\r\n\r\n@marcinja is there an API in your PR that accepts multiple addresses as input and returns total received/spent for each?  Some block explorers have this functionality and it is great because much more efficient than calling API for each addr individually.  \r\n\r\nAlso I think it should be caller's option (via param) whether to return list of tx or not.  Sometimes only addr summary info is needed eg total received/spent and tx info just adds bloat and slows things down in such cases.",
      "created_at" : "2019-08-07T06:50:40Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-518964997",
      "id" : 518964997,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxODk2NDk5Nw==",
      "updated_at" : "2019-08-07T06:50:40Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518964997",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/5110592?v=4",
         "events_url" : "https://api.github.com/users/dan-da/events{/privacy}",
         "followers_url" : "https://api.github.com/users/dan-da/followers",
         "following_url" : "https://api.github.com/users/dan-da/following{/other_user}",
         "gists_url" : "https://api.github.com/users/dan-da/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/dan-da",
         "id" : 5110592,
         "login" : "dan-da",
         "node_id" : "MDQ6VXNlcjUxMTA1OTI=",
         "organizations_url" : "https://api.github.com/users/dan-da/orgs",
         "received_events_url" : "https://api.github.com/users/dan-da/received_events",
         "repos_url" : "https://api.github.com/users/dan-da/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/dan-da/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/dan-da/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/dan-da"
      }
   },
   {
      "author_association" : "NONE",
      "body" : "@marcinja you're so close. Thanks for all your hard work on this! Does anyone know if this is getting merged anytime soon?",
      "created_at" : "2019-10-01T14:33:55Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14053#issuecomment-537065474",
      "id" : 537065474,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14053",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUzNzA2NTQ3NA==",
      "updated_at" : "2019-10-01T14:33:55Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537065474",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/93429?v=4",
         "events_url" : "https://api.github.com/users/abunsen/events{/privacy}",
         "followers_url" : "https://api.github.com/users/abunsen/followers",
         "following_url" : "https://api.github.com/users/abunsen/following{/other_user}",
         "gists_url" : "https://api.github.com/users/abunsen/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/abunsen",
         "id" : 93429,
         "login" : "abunsen",
         "node_id" : "MDQ6VXNlcjkzNDI5",
         "organizations_url" : "https://api.github.com/users/abunsen/orgs",
         "received_events_url" : "https://api.github.com/users/abunsen/received_events",
         "repos_url" : "https://api.github.com/users/abunsen/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/abunsen/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/abunsen/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/abunsen"
      }
   }
]
