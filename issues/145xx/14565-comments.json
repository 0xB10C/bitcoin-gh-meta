[
   {
      "author_association" : "MEMBER",
      "body" : "Travis is sad about trailing whitespace:\r\n```\r\nThis diff appears to have added new lines with trailing whitespace.\r\nThe following changes were suspected:\r\ndiff --git a/src/wallet/rpcdump.cpp b/src/wallet/rpcdump.cpp\r\n@@ -915,0 +969,10 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\r\n+\r\n^---- failure generated from test/lint/lint-whitespace.sh\r\n```",
      "created_at" : "2018-10-25T01:48:38Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432885176",
      "id" : 432885176,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14565",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjg4NTE3Ng==",
      "updated_at" : "2018-10-25T01:48:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432885176",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2018-10-25T03:28:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432901906",
      "id" : 432901906,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14565",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjkwMTkwNg==",
      "updated_at" : "2018-10-25T03:28:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432901906",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/3211283?v=4",
         "events_url" : "https://api.github.com/users/MeshCollider/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MeshCollider/followers",
         "following_url" : "https://api.github.com/users/MeshCollider/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MeshCollider/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MeshCollider",
         "id" : 3211283,
         "login" : "MeshCollider",
         "node_id" : "MDQ6VXNlcjMyMTEyODM=",
         "organizations_url" : "https://api.github.com/users/MeshCollider/orgs",
         "received_events_url" : "https://api.github.com/users/MeshCollider/received_events",
         "repos_url" : "https://api.github.com/users/MeshCollider/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MeshCollider/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MeshCollider/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MeshCollider"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "I've also discovered when writing this that `importmulti` does not actually require that `watchonly` is set when no solvability is desired. I've kept the existing behavior for now, as it seems pretty invasive to people who may be relying on that, though I've added a TODO.",
      "created_at" : "2018-10-25T03:49:16Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432905054",
      "id" : 432905054,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14565",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjkwNTA1NA==",
      "updated_at" : "2018-10-25T03:49:16Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432905054",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/548488?v=4",
         "events_url" : "https://api.github.com/users/sipa/events{/privacy}",
         "followers_url" : "https://api.github.com/users/sipa/followers",
         "following_url" : "https://api.github.com/users/sipa/following{/other_user}",
         "gists_url" : "https://api.github.com/users/sipa/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/sipa",
         "id" : 548488,
         "login" : "sipa",
         "node_id" : "MDQ6VXNlcjU0ODQ4OA==",
         "organizations_url" : "https://api.github.com/users/sipa/orgs",
         "received_events_url" : "https://api.github.com/users/sipa/received_events",
         "repos_url" : "https://api.github.com/users/sipa/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/sipa/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/sipa/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/sipa"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14558 (rpc: Require solvability in importmulti if importing more than the scriptPubKey by achow101)\n* #14303 (rpc: Early call once CWallet::MarkDirty in import calls by promag)\n* #14075 (Import watch only pubkeys to the keypool if private keys are disabled by achow101)\n* #14021 (Import key origin data through importmulti by achow101)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2018-10-25T04:38:21Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#issuecomment-432912078",
      "id" : 432912078,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/14565",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQzMjkxMjA3OA==",
      "updated_at" : "2018-10-25T04:38:21Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/432912078",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228040392"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228040392"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It's not immediately obvious what this is doing, until you read `txnouttype Solver` documentation in `standard.h`.\r\n\r\nSuggested comment: \r\n```\r\n// Use Solver to obtain script type and parsed pubkeys or hashes:\r\n```",
      "commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "created_at" : "2018-10-25T05:44:51Z",
      "diff_hunk" : "@@ -805,6 +805,87 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n+struct ImportData\n+{\n+    // Input data\n+    std::unique_ptr<CScript> redeemscript;\n+    std::unique_ptr<CScript> witnessscript;\n+    std::map<CKeyID, CPubKey> pubkeys;\n+    std::map<CKeyID, CKey> privkeys;\n+\n+    // Output data\n+    std::set<CScript> import_scripts;\n+    std::set<CKeyID> used_keys; // Import these private keys if available\n+    std::set<CKeyID> require_keys; // Fail if these public keys are not available\n+};\n+\n+enum class SolverContext\n+{\n+    TOP,\n+    P2SH,\n+    WITNESS_V0,\n+};\n+\n+static void ProcessSolvingImportStep(const CScript& script, ImportData& data, SolverContext ctx)\n+{",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228040392",
      "id" : 228040392,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODA0MDM5Mg==",
      "original_commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "original_position" : 26,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 26,
      "pull_request_review_id" : 168215750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565",
      "updated_at" : "2018-10-25T07:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228040392",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228040464"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228040464"
         }
      },
      "author_association" : "MEMBER",
      "body" : "`script_type` would be clearer",
      "commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "created_at" : "2018-10-25T05:45:22Z",
      "diff_hunk" : "@@ -805,6 +805,87 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n+struct ImportData\n+{\n+    // Input data\n+    std::unique_ptr<CScript> redeemscript;\n+    std::unique_ptr<CScript> witnessscript;\n+    std::map<CKeyID, CPubKey> pubkeys;\n+    std::map<CKeyID, CKey> privkeys;\n+\n+    // Output data\n+    std::set<CScript> import_scripts;\n+    std::set<CKeyID> used_keys; // Import these private keys if available\n+    std::set<CKeyID> require_keys; // Fail if these public keys are not available\n+};\n+\n+enum class SolverContext\n+{\n+    TOP,\n+    P2SH,\n+    WITNESS_V0,\n+};\n+\n+static void ProcessSolvingImportStep(const CScript& script, ImportData& data, SolverContext ctx)\n+{\n+    std::vector<std::vector<unsigned char>> solverdata;\n+    txnouttype typ = Solver(script, solverdata);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228040464",
      "id" : 228040464,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODA0MDQ2NA==",
      "original_commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "original_position" : 28,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 28,
      "pull_request_review_id" : 168215750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565",
      "updated_at" : "2018-10-25T07:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228040464",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228051747"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228051747"
         }
      },
      "author_association" : "MEMBER",
      "body" : "It would be nice if the call to `ExtractDestination(s)` and various parsing happening below was also a `ProcessSolvingImportStep` (`SolverContext::TOP` or a new context?), but I suppose the different types make that difficult?",
      "commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "created_at" : "2018-10-25T06:51:03Z",
      "diff_hunk" : "@@ -840,195 +920,144 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!IsHex(output)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n             }\n-\n             std::vector<unsigned char> vData(ParseHex(output));\n             script = CScript(vData.begin(), vData.end());\n             if (!ExtractDestination(script, dest) && !internal) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228051747",
      "id" : 228051747,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODA1MTc0Nw==",
      "original_commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "original_position" : 110,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 134,
      "pull_request_review_id" : 168215750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565",
      "updated_at" : "2018-10-25T07:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228051747",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228052708"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228052708"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Add a warning to the result output?",
      "commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "created_at" : "2018-10-25T06:55:39Z",
      "diff_hunk" : "@@ -840,195 +920,144 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!IsHex(output)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n             }\n-\n             std::vector<unsigned char> vData(ParseHex(output));\n             script = CScript(vData.begin(), vData.end());\n             if (!ExtractDestination(script, dest) && !internal) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n             }\n         }\n \n-        // Watchonly and private keys\n-        if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n-        }\n-\n-        // Internal addresses should not have a label\n-        if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n-        }\n-\n-        // Force users to provide the witness script in its field rather than redeemscript\n-        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n-        }\n-\n-        CScript scriptpubkey_script = script;\n-        CTxDestination scriptpubkey_dest = dest;\n-        bool allow_p2wpkh = true;\n-\n-        // P2SH\n-        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n-            // Check the redeemScript is valid\n+        // Parse all arguments\n+        ImportData import_data;\n+        if (strRedeemScript.size()) {\n             if (!IsHex(strRedeemScript)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n             }\n-\n-            // Import redeem script.\n-            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n-            CScript redeemScript = CScript(vData.begin(), vData.end());\n-            CScriptID redeem_id(redeemScript);\n-\n-            // Check that the redeemScript and scriptPubKey match\n-            if (GetScriptForDestination(redeem_id) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n+            auto parsed_redeemscript = ParseHex(strRedeemScript);\n+            import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+        }\n+        if (witness_script_hex.size()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            auto parsed_witnessscript = ParseHex(witness_script_hex);\n+            import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+        }\n+        for (size_t i = 0; i < pubKeys.size(); ++i) {\n+            const auto& str = pubKeys[i].get_str();\n+            if (!IsHex(str)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n             }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+            auto parsed_pubkey = ParseHex(str);\n+            CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+            if (!pubkey.IsFullyValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n             }\n-\n-            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n-            script = redeemScript;\n-            ExtractDestination(script, dest);\n+            import_data.pubkeys.emplace(pubkey.GetID(), pubkey);\n         }\n-\n-        // (P2SH-)P2WSH\n-        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n+        for (size_t i = 0; i < keys.size(); ++i) {\n+            const auto& str = keys[i].get_str();\n+            CKey key = DecodeSecret(str);\n+            if (!key.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n             }\n-\n-            // Generate the scripts\n-            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n-\n-            // Check that the witnessScript and scriptPubKey match\n-            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n+            CPubKey pubkey = key.GetPubKey();\n+            CKeyID id = pubkey.GetID();\n+            if (import_data.pubkeys.count(id)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Both public and private key specified for \" + HexStr(pubkey.begin(), pubkey.end()));\n             }\n+            import_data.privkeys.emplace(id, key);\n+        }\n \n-            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+        // Watchonly and private keys\n+        if (watchOnly && import_data.privkeys.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n+        }\n+        if (watchOnly && (import_data.pubkeys.size() || import_data.redeemscript || import_data.witnessscript)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include any keys or scripts\");\n+        }\n \n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n-            }\n+        // TODO: it seems we're not actually requiring watchonly to be set for non-solvable inputs, fix this",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228052708",
      "id" : 228052708,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODA1MjcwOA==",
      "original_commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "original_position" : 229,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 263,
      "pull_request_review_id" : 168215750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565",
      "updated_at" : "2018-10-25T07:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228052708",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228053700"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228053700"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Why check this here, rather than passing `watchOnly` into `ProcessSolvingImportStep` and check there?",
      "commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "created_at" : "2018-10-25T07:00:12Z",
      "diff_hunk" : "@@ -840,195 +920,144 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!IsHex(output)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n             }\n-\n             std::vector<unsigned char> vData(ParseHex(output));\n             script = CScript(vData.begin(), vData.end());\n             if (!ExtractDestination(script, dest) && !internal) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set to true for nonstandard scriptPubKey imports.\");\n             }\n         }\n \n-        // Watchonly and private keys\n-        if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n-        }\n-\n-        // Internal addresses should not have a label\n-        if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n-        }\n-\n-        // Force users to provide the witness script in its field rather than redeemscript\n-        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n-        }\n-\n-        CScript scriptpubkey_script = script;\n-        CTxDestination scriptpubkey_dest = dest;\n-        bool allow_p2wpkh = true;\n-\n-        // P2SH\n-        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n-            // Check the redeemScript is valid\n+        // Parse all arguments\n+        ImportData import_data;\n+        if (strRedeemScript.size()) {\n             if (!IsHex(strRedeemScript)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n             }\n-\n-            // Import redeem script.\n-            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n-            CScript redeemScript = CScript(vData.begin(), vData.end());\n-            CScriptID redeem_id(redeemScript);\n-\n-            // Check that the redeemScript and scriptPubKey match\n-            if (GetScriptForDestination(redeem_id) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n+            auto parsed_redeemscript = ParseHex(strRedeemScript);\n+            import_data.redeemscript = MakeUnique<CScript>(parsed_redeemscript.begin(), parsed_redeemscript.end());\n+        }\n+        if (witness_script_hex.size()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n-\n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            auto parsed_witnessscript = ParseHex(witness_script_hex);\n+            import_data.witnessscript = MakeUnique<CScript>(parsed_witnessscript.begin(), parsed_witnessscript.end());\n+        }\n+        for (size_t i = 0; i < pubKeys.size(); ++i) {\n+            const auto& str = pubKeys[i].get_str();\n+            if (!IsHex(str)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n             }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+            auto parsed_pubkey = ParseHex(str);\n+            CPubKey pubkey(parsed_pubkey.begin(), parsed_pubkey.end());\n+            if (!pubkey.IsFullyValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n             }\n-\n-            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n-            script = redeemScript;\n-            ExtractDestination(script, dest);\n+            import_data.pubkeys.emplace(pubkey.GetID(), pubkey);\n         }\n-\n-        // (P2SH-)P2WSH\n-        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n-            if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n+        for (size_t i = 0; i < keys.size(); ++i) {\n+            const auto& str = keys[i].get_str();\n+            CKey key = DecodeSecret(str);\n+            if (!key.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n             }\n-\n-            // Generate the scripts\n-            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n-\n-            // Check that the witnessScript and scriptPubKey match\n-            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n+            CPubKey pubkey = key.GetPubKey();\n+            CKeyID id = pubkey.GetID();\n+            if (import_data.pubkeys.count(id)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Both public and private key specified for \" + HexStr(pubkey.begin(), pubkey.end()));\n             }\n+            import_data.privkeys.emplace(id, key);\n+        }\n \n-            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+        // Watchonly and private keys\n+        if (watchOnly && import_data.privkeys.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n+        }\n+        if (watchOnly && (import_data.pubkeys.size() || import_data.redeemscript || import_data.witnessscript)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include any keys or scripts\");\n+        }\n \n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n-            }\n+        // TODO: it seems we're not actually requiring watchonly to be set for non-solvable inputs, fix this\n+        watchOnly = !(import_data.redeemscript || import_data.witnessscript || import_data.pubkeys.size() || import_data.privkeys.size());\n \n-            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n-            script = witness_script;\n-            ExtractDestination(script, dest);\n-            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n+        // Internal addresses should not have a label\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n         }\n \n-        // (P2SH-)P2PK/P2PKH/P2WPKH\n-        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n-            if (!allow_p2wpkh && dest.type() == typeid(WitnessV0KeyHash)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WPKH cannot be embedded in P2WSH\");\n-            }\n-            if (keys.size() > 1 || pubKeys.size() > 1) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n-            }\n-            CPubKey pubkey;\n-            if (keys.size()) {\n-                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n-            }\n-            if (pubKeys.size()) {\n-                const std::string& strPubKey = pubKeys[0].get_str();\n-                if (!IsHex(strPubKey)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-                }\n-                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n-                CPubKey pubkey_temp(vData.begin(), vData.end());\n-                if (pubkey.size() && pubkey_temp != pubkey) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n-                }\n-                pubkey = pubkey_temp;\n-            }\n-            if (pubkey.size() > 0) {\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n-                }\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n+        }\n \n-                // Check the key corresponds to the destination given\n-                std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n-                if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n+        // Verify and process input data\n+        bool spendable = !watchOnly;\n+        if (!watchOnly) {\n+            ProcessSolvingImportStep(script, import_data, SolverContext::TOP);\n+            if (import_data.redeemscript) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Redeemscript provided for a non-P2SH script\");",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/14565#discussion_r228053700",
      "id" : 228053700,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIyODA1MzcwMA==",
      "original_commit_id" : "f96edc357f0499f581d3baf66871c8b43b245d89",
      "original_position" : 281,
      "path" : "src/wallet/rpcdump.cpp",
      "position" : 285,
      "pull_request_review_id" : 168215750,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/14565",
      "updated_at" : "2018-10-25T07:04:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/228053700",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/10217?v=4",
         "events_url" : "https://api.github.com/users/Sjors/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Sjors/followers",
         "following_url" : "https://api.github.com/users/Sjors/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Sjors/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Sjors",
         "id" : 10217,
         "login" : "Sjors",
         "node_id" : "MDQ6VXNlcjEwMjE3",
         "organizations_url" : "https://api.github.com/users/Sjors/orgs",
         "received_events_url" : "https://api.github.com/users/Sjors/received_events",
         "repos_url" : "https://api.github.com/users/Sjors/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Sjors/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Sjors"
      }
   }
]
