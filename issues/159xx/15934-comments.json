[
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16545](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16545.html) (Implement missing error checking for ArgsManager flags by ryanofsky)\n* [#16411](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16411.html) (Signet support by kallewoof)\n* [#15454](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15454.html) (Remove the automatic creation and loading of the default wallet by achow101)\n* [#14866](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14866.html) (Improve property evaluation way in bitcoin.conf by AkioNak)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
      "created_at" : "2019-05-02T00:43:36Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-488521831",
      "id" : 488521831,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ4ODUyMTgzMQ==",
      "updated_at" : "2019-10-21T19:44:38Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/488521831",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280411609"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280411609"
         }
      },
      "author_association" : "MEMBER",
      "body" : "nit, `IsValidArgStr`?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-02T13:13:56Z",
      "diff_hunk" : "@@ -163,103 +164,34 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static bool ValidArgStr(const std::string& arg)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280411609",
      "id" : 280411609,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDQxMTYwOQ==",
      "original_commit_id" : "7fcb87bcc76a62770a73685314babd32631e173e",
      "original_position" : 12,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 232997353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280411609",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280412183"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280412183"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Maybe `arg.size() > 1 && arg[0] == '-'` or do we need `-`?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-02T13:15:33Z",
      "diff_hunk" : "@@ -163,103 +164,34 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static bool ValidArgStr(const std::string& arg)\n+{\n+    return !arg.empty() && arg[0] == '-';",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r280412183",
      "id" : 280412183,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4MDQxMjE4Mw==",
      "original_commit_id" : "7fcb87bcc76a62770a73685314babd32631e173e",
      "original_position" : 14,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 232997353,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/280412183",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/3534524?v=4",
         "events_url" : "https://api.github.com/users/promag/events{/privacy}",
         "followers_url" : "https://api.github.com/users/promag/followers",
         "following_url" : "https://api.github.com/users/promag/following{/other_user}",
         "gists_url" : "https://api.github.com/users/promag/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/promag",
         "id" : 3534524,
         "login" : "promag",
         "node_id" : "MDQ6VXNlcjM1MzQ1MjQ=",
         "organizations_url" : "https://api.github.com/users/promag/orgs",
         "received_events_url" : "https://api.github.com/users/promag/received_events",
         "repos_url" : "https://api.github.com/users/promag/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/promag/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/promag/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/promag"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#pullrequestreview-232997353 from promag\r\n\r\n> I had a refactor (which I did't submit) that supported chaining ArgsManager. The idea was to support changing some args when calling some RPC, so a ArgsManager is created with the \"overridden\" args and passed thru. Is this something you are considering supporting or do you see a different approach?\r\n\r\nThis change does make it easier to add new settings sources (with consistent handling of negated args and things), so it should be compatible with your idea and maybe helpful.\r\n\r\nDepending on the situation, I think having chained or scoped settings could be a good idea or not. I do think that in wallet code and application code generally it's good to get away from using key-value storage classes like `ArgsManager` or `UniValue` as quickly as possible, and switch to more direct representations like `CCoinControl` that are type safe and can be accessed more simply.",
      "created_at" : "2019-05-08T20:45:53Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-490644550",
      "id" : 490644550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5MDY0NDU1MA==",
      "updated_at" : "2019-05-08T20:45:53Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/490644550",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK",
      "created_at" : "2019-05-24T13:58:49Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-495641177",
      "id" : 495641177,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NTY0MTE3Nw==",
      "updated_at" : "2019-05-24T13:58:49Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/495641177",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/863730?v=4",
         "events_url" : "https://api.github.com/users/fanquake/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fanquake/followers",
         "following_url" : "https://api.github.com/users/fanquake/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fanquake/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fanquake",
         "id" : 863730,
         "login" : "fanquake",
         "node_id" : "MDQ6VXNlcjg2MzczMA==",
         "organizations_url" : "https://api.github.com/users/fanquake/orgs",
         "received_events_url" : "https://api.github.com/users/fanquake/received_events",
         "repos_url" : "https://api.github.com/users/fanquake/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fanquake/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fanquake"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288149094"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Digging this chainable `return *this;` interface.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T14:55:53Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094",
      "id" : 288149094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE0OTA5NA==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 20,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288149094",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288155825"
         }
      },
      "author_association" : "MEMBER",
      "body" : "I'm slightly confused about why `source.forced` will cause a negation to have occurred, but I guess the rationale here is that if we've forced a value, we effectively want to ignore prev/subsequent values in favor of the forced one.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T15:09:09Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());\n+    }\n+    if (auto* value = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*value)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* value = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*value)).SetConfigFile(false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* value = FindKey(*map, name)) {\n+            span = SettingsSpan(*value);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool skip_negated_command_line)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed.\n+        const bool reverse_precedence = source.config_file;\n+\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        //! Stick with highest priority value, if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetListSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool prev_negated = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        if (!source.span.empty()) {\n+            // Weird behavior preserved for backwards compatibility: Apply\n+            // config file settings even if negated on command line. Negating a\n+            // setting on command line will discard earlier settings on the\n+            // command line and settings in the config file, unless the negated\n+            // command line value is followed by non-negated value, in which\n+            // case config file settings will be brought back from the dead (but\n+            // earlier command line settings will still be discarded).\n+            const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+            if (!prev_negated || add_zombie_config_values) {\n+                for (const auto& value : source.span) {\n+                    if (value.isArray()) {\n+                        result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                    } else {\n+                        result.push_back(value);\n+                    }\n+                }\n+            }\n+        }\n+\n+        prev_negated |= source.span.negated() > 0 || source.forced;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825",
      "id" : 288155825,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE1NTgyNQ==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 120,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288155825",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288166922"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Long lines like this are hard to review. Consider breaking to 100col?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T15:30:55Z",
      "diff_hunk" : "@@ -163,103 +164,33 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.empty() || arg[0] != '-' ? arg : arg.substr(1);\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg, bool no_network = false)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n \n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = no_network;\n \n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, no_network ? \"\" : am.m_network, SettingName(arg), !UseDefaultSection(am, arg), skip_negated_command_line);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922",
      "id" : 288166922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE2NjkyMg==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 121,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288166922",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288173284"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Thanks for the nice comment. Potentially out of scope: could we log warnings for this instead of silently ignoring?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T15:44:35Z",
      "diff_hunk" : "@@ -405,116 +320,91 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key.erase(0, 1);\n \n         // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n+        key.erase(0, 1);\n+        std::string section;\n+        bool negated = InterpretNegatedOption(section, key, val);\n+        // Weird behavior preserved for backwards compatibility: command line\n+        // options with section prefixes are allowed but ignored. It would be\n+        // better if these options triggered the IsArgKnown error below, or were\n+        // actually used instead of silently ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284",
      "id" : 288173284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODE3MzI4NA==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 202,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288173284",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288244735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288244735"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Cool test! The formatted output is really helpful. Encourage other reviewers to run and inspect with\r\n```sh\r\nSETTINGS_MERGE_TEST_OUT=results.txt ./src/test/test_bitcoin --run_test=settings_tests/Merge\r\n```",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T18:32:51Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}\n+\n+// Test different ways settings can be merged, and verify results. This test can\n+// be used to confirm that updates to settings code don't change behavior\n+// unintentionally.\n+struct MergeTestingSetup : public BasicTestingSetup {\n+    //! Max number of actions to sequence together. Can decrease this when\n+    //! debugging to make test results easier to understand.\n+    static constexpr int MAX_ACTIONS = 3;\n+\n+    enum Action { END, SET, NEGATE, SECTION_SET, SECTION_NEGATE };\n+    using ActionList = Action[MAX_ACTIONS];\n+\n+    //! Enumerate all possible test configurations.\n+    template <typename Fn>\n+    void ForEachMergeSetup(Fn&& fn)\n+    {\n+        ActionList arg_actions = {};\n+        ForEachNoDup(arg_actions, SET, NEGATE, [&]{\n+            ActionList conf_actions = {};\n+            ForEachNoDup(conf_actions, SET, SECTION_NEGATE, [&]{\n+                for (bool force_set : {false, true}) {\n+                    for (bool ignore_default_section_config : {false, true}) {\n+                        fn(arg_actions, conf_actions, force_set, ignore_default_section_config);\n+                    }\n+                }\n+            });\n+        });\n+    }\n+};\n+\n+// Regression test covering different ways config settings can be merged. The\n+// test parses and merges settings, representing the results as strings that get\n+// compared against an expected hash. To debug, the result strings can be dumped\n+// to a file (see comments below).\n+BOOST_FIXTURE_TEST_CASE(Merge, MergeTestingSetup)",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288244735",
      "id" : 288244735,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI0NDczNQ==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 64,
      "path" : "src/test/settings_tests.cpp",
      "position" : 79,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288244735",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288245372"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Note to other reviewers: the code in this file is already in master (as of 1d543adae593bdbfd954e80ed61ac907db0c5a7b) and its appearance here is only due to this branch not being based on a more recent version of master.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T18:34:26Z",
      "diff_hunk" : "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372",
      "id" : 288245372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI0NTM3Mg==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 35,
      "path" : "src/test/util.h",
      "position" : null,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288245372",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288250769"
         }
      },
      "author_association" : "MEMBER",
      "body" : "Could test precedence difference between commandline and config file with the following diff (if you end up needing to rebase for some other reason):\r\n```diff\r\ndiff --git a/src/test/settings_tests.cpp b/src/test/settings_tests.cpp\r\nindex 36188f8471..c82ecaea8c 100644\r\n--- a/src/test/settings_tests.cpp\r\n+++ b/src/test/settings_tests.cpp\r\n@@ -18,14 +18,28 @@ BOOST_AUTO_TEST_CASE(Simple)\r\n {\r\n     util::Settings settings;\r\n     settings.command_line_options[\"name\"].push_back(\"val1\");\r\n+    settings.command_line_options[\"name\"].push_back(\"val2\");\r\n     settings.ro_config[\"section\"][\"name\"].push_back(2);\r\n-    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\r\n-    util::SettingsValue list_value(util::SettingsValue::VARR);\r\n-    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\r\n-        list_value.push_back(item);\r\n-    }\r\n-    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\r\n-    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\r\n+\r\n+    auto check_values = [&](util::Settings s, std::string single_val, std::string list_val) {\r\n+        util::SettingsValue single_value = GetSetting(s, \"section\", \"name\", false, false);\r\n+        util::SettingsValue list_value(util::SettingsValue::VARR);\r\n+        for (const auto& item : GetListSetting(s, \"section\", \"name\", false)) {\r\n+            list_value.push_back(item);\r\n+        }\r\n+        BOOST_CHECK_EQUAL(single_value.write().c_str(), single_val);\r\n+        BOOST_CHECK_EQUAL(list_value.write().c_str(), list_val);\r\n+    };\r\n+\r\n+    // The last given arg takes precedence when specified via commandline.\r\n+    check_values(settings, R\"(\"val2\")\", R\"([\"val1\",\"val2\",2])\");\r\n+\r\n+    util::Settings settings2;\r\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val2\");\r\n+    settings2.ro_config[\"section\"][\"name\"].push_back(\"val3\");\r\n+\r\n+    // The first given arg takes precedence when specified via config file.\r\n+    check_values(settings2, R\"(\"val2\")\", R\"([\"val2\",\"val3\"])\");\r\n }\r\n \r\n // Test different ways settings can be merged, and verify results. This test can\r\n```",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T18:48:13Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769",
      "id" : 288250769,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI1MDc2OQ==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 29,
      "path" : "src/test/settings_tests.cpp",
      "position" : 44,
      "pull_request_review_id" : 242727281,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288250769",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288262559"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288262559"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288250769\r\n\r\nThanks! Added test.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T19:19:46Z",
      "diff_hunk" : "@@ -0,0 +1,144 @@\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <test/setup_common.h>\n+#include <test/util.h>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <univalue.h>\n+#include <vector>\n+\n+BOOST_FIXTURE_TEST_SUITE(settings_tests, BasicTestingSetup)\n+\n+// Simple settings merge test case.\n+BOOST_AUTO_TEST_CASE(Simple)\n+{\n+    util::Settings settings;\n+    settings.command_line_options[\"name\"].push_back(\"val1\");\n+    settings.ro_config[\"section\"][\"name\"].push_back(2);\n+    util::SettingsValue single_value = GetSetting(settings, \"section\", \"name\", false, false);\n+    util::SettingsValue list_value(util::SettingsValue::VARR);\n+    for (const auto& item : GetListSetting(settings, \"section\", \"name\", false)) {\n+        list_value.push_back(item);\n+    }\n+    BOOST_CHECK_EQUAL(single_value.write().c_str(), R\"(\"val1\")\");\n+    BOOST_CHECK_EQUAL(list_value.write().c_str(), R\"([\"val1\",2])\");\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288262559",
      "id" : 288262559,
      "in_reply_to_id" : 288250769,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2MjU1OQ==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 29,
      "path" : "src/test/settings_tests.cpp",
      "position" : 44,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288262559",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288264332"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288264332"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288149094\r\n\r\nThese can be nice sometimes. They are also called fluent interfaces (https://en.wikipedia.org/wiki/Fluent_interface)",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T19:24:37Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288264332",
      "id" : 288264332,
      "in_reply_to_id" : 288149094,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2NDMzMg==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 20,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288264332",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288266961"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288266961"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288155825\r\n\r\nI guess it doesn't cause a real negation, more of an effective negation like you described. I renamed the variable `result_complete` to avoid mentioning negation.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T19:31:50Z",
      "diff_hunk" : "@@ -0,0 +1,150 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());\n+    }\n+    if (auto* value = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*value)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* value = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*value)).SetConfigFile(false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* value = FindKey(*map, name)) {\n+            span = SettingsSpan(*value);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool skip_negated_command_line)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed.\n+        const bool reverse_precedence = source.config_file;\n+\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        //! Stick with highest priority value, if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetListSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool prev_negated = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Skip settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        if (!source.span.empty()) {\n+            // Weird behavior preserved for backwards compatibility: Apply\n+            // config file settings even if negated on command line. Negating a\n+            // setting on command line will discard earlier settings on the\n+            // command line and settings in the config file, unless the negated\n+            // command line value is followed by non-negated value, in which\n+            // case config file settings will be brought back from the dead (but\n+            // earlier command line settings will still be discarded).\n+            const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+            if (!prev_negated || add_zombie_config_values) {\n+                for (const auto& value : source.span) {\n+                    if (value.isArray()) {\n+                        result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                    } else {\n+                        result.push_back(value);\n+                    }\n+                }\n+            }\n+        }\n+\n+        prev_negated |= source.span.negated() > 0 || source.forced;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288266961",
      "id" : 288266961,
      "in_reply_to_id" : 288155825,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODI2Njk2MQ==",
      "original_commit_id" : "05820024fe6821849d0c659e16ef328c8f08415a",
      "original_position" : 120,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288266961",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288307354"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288307354"
         }
      },
      "author_association" : "MEMBER",
      "body" : "So it should be rebased, imo. Otherwise `git blame` will return different results for the same lines depending on what commit is currently checked out.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-28T21:20:37Z",
      "diff_hunk" : "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288307354",
      "id" : 288307354,
      "in_reply_to_id" : 288245372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODMwNzM1NA==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 35,
      "path" : "src/test/util.h",
      "position" : null,
      "pull_request_review_id" : 242928533,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288307354",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/6399679?v=4",
         "events_url" : "https://api.github.com/users/MarcoFalke/events{/privacy}",
         "followers_url" : "https://api.github.com/users/MarcoFalke/followers",
         "following_url" : "https://api.github.com/users/MarcoFalke/following{/other_user}",
         "gists_url" : "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/MarcoFalke",
         "id" : 6399679,
         "login" : "MarcoFalke",
         "node_id" : "MDQ6VXNlcjYzOTk2Nzk=",
         "organizations_url" : "https://api.github.com/users/MarcoFalke/orgs",
         "received_events_url" : "https://api.github.com/users/MarcoFalke/received_events",
         "repos_url" : "https://api.github.com/users/MarcoFalke/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/MarcoFalke/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/MarcoFalke"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288628719"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288628719"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288166922\r\n\r\nLooks like github diffs are 120 columns wide. I wrapped this line and put `ColumnLimit: 119` in my clang-format",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-29T15:28:40Z",
      "diff_hunk" : "@@ -163,103 +164,33 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+static std::string SettingName(const std::string& arg)\n+{\n+    return arg.empty() || arg[0] != '-' ? arg : arg.substr(1);\n+}\n+\n /** Internal helper functions for ArgsManager */\n class ArgsManagerHelper {\n public:\n-    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n-\n     /** Determine whether to use config settings in the default section,\n      *  See also comments around ArgsManager::ArgsManager() below. */\n     static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n     {\n         return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n     }\n \n-    /** Convert regular argument into the network-specific setting */\n-    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n-    {\n-        assert(arg.length() > 1 && arg[0] == '-');\n-        return \"-\" + am.m_network + \".\" + arg.substr(1);\n-    }\n-\n-    /** Find arguments in a map and add them to a vector */\n-    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n-    {\n-        auto it = map_args.find(arg);\n-        if (it != map_args.end()) {\n-            res.insert(res.end(), it->second.begin(), it->second.end());\n-        }\n-    }\n-\n-    /** Return true/false if an argument is set in a map, and also\n-     *  return the first (or last) of the possibly multiple values it has\n-     */\n-    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n-    {\n-        auto it = map_args.find(arg);\n-\n-        if (it == map_args.end() || it->second.empty()) {\n-            return std::make_pair(false, std::string());\n-        }\n-\n-        if (getLast) {\n-            return std::make_pair(true, it->second.back());\n-        } else {\n-            return std::make_pair(true, it->second.front());\n-        }\n-    }\n-\n-    /* Get the string value of an argument, returning a pair of a boolean\n-     * indicating the argument was found, and the value for the argument\n-     * if it was found (or the empty string if not found).\n-     */\n-    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    static util::SettingsValue Get(const ArgsManager& am, const std::string& arg, bool no_network = false)\n     {\n         LOCK(am.cs_args);\n-        std::pair<bool,std::string> found_result(false, std::string());\n-\n-        // We pass \"true\" to GetArgHelper in order to return the last\n-        // argument value seen from the command line (so \"bitcoind -foo=bar\n-        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n-        found_result = GetArgHelper(am.m_override_args, arg, true);\n-        if (found_result.first) {\n-            return found_result;\n-        }\n \n-        // But in contrast we return the first argument seen in a config file,\n-        // so \"foo=bar \\n foo=baz\" in the config file gives\n-        // GetArg(am,\"foo\")={true,\"bar\"}\n-        if (!am.m_network.empty()) {\n-            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = no_network;\n \n-        if (UseDefaultSection(am, arg)) {\n-            found_result = GetArgHelper(am.m_config_args, arg);\n-            if (found_result.first) {\n-                return found_result;\n-            }\n-        }\n-\n-        return found_result;\n-    }\n-\n-    /* Special test for -testnet and -regtest args, because we\n-     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n-     */\n-    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg) EXCLUSIVE_LOCKS_REQUIRED(am.cs_args)\n-    {\n-        std::pair<bool,std::string> found_result(false,std::string());\n-        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n-        if (!found_result.first) {\n-            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n-            if (!found_result.first) {\n-                return false; // not set\n-            }\n-        }\n-        return InterpretBool(found_result.second); // is set, so evaluate\n+        return GetSetting(am.m_settings, no_network ? \"\" : am.m_network, SettingName(arg), !UseDefaultSection(am, arg), skip_negated_command_line);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288628719",
      "id" : 288628719,
      "in_reply_to_id" : 288166922,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYyODcxOQ==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 121,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288628719",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639295"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639295"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288173284\r\n\r\n> Potentially out of scope: could we log warnings for this instead of silently ignoring?\r\n\r\nI'm planning on making followup PRs that simplify and clean up all these \"Weird behavior preserved for backwards compatibility\" instances. I'd rather not add warnings in this PR partly because I'm disinclined to mix up behavior changes and refactoring changes in the same PR, but also because having some invalid options result in warnings and other invalid options result in errors seems even more strange and complicated than what the code does now.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-29T15:49:15Z",
      "diff_hunk" : "@@ -405,116 +320,91 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n             key.erase(0, 1);\n \n         // Check for -nofoo\n-        if (InterpretNegatedOption(key, val)) {\n-            m_override_args[key].clear();\n-        } else {\n-            m_override_args[key].push_back(val);\n+        key.erase(0, 1);\n+        std::string section;\n+        bool negated = InterpretNegatedOption(section, key, val);\n+        // Weird behavior preserved for backwards compatibility: command line\n+        // options with section prefixes are allowed but ignored. It would be\n+        // better if these options triggered the IsArgKnown error below, or were\n+        // actually used instead of silently ignored.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639295",
      "id" : 288639295,
      "in_reply_to_id" : 288173284,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYzOTI5NQ==",
      "original_commit_id" : "63ce023ebab7edc7683d2f2a7a79ba2283d78bfb",
      "original_position" : 202,
      "path" : "src/util/system.cpp",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639295",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639762"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639762"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288245372\r\n\r\nRebased!",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-05-29T15:50:08Z",
      "diff_hunk" : "@@ -34,5 +34,37 @@ std::string getnewaddress(CWallet& w);\n /** Returns the generated coin */\n CTxIn generatetoaddress(const std::string& address);\n \n+/**\n+ * Increment a string. Useful to enumerate all fixed length strings with\n+ * characters in [min_char, max_char].\n+ */\n+template <typename CharType, size_t StringLength>\n+bool NextString(CharType (&string)[StringLength], CharType min_char, CharType max_char)\n+{\n+    for (CharType& elem : string) {\n+        bool has_next = elem != max_char;\n+        elem = elem < min_char || elem >= max_char ? min_char : CharType(elem + 1);\n+        if (has_next) return true;\n+    }\n+    return false;\n+}\n+\n+/**\n+ * Iterate over string values and call function for each string without\n+ * successive duplicate characters.\n+ */\n+template <typename CharType, size_t StringLength, typename Fn>\n+void ForEachNoDup(CharType (&string)[StringLength], CharType min_char, CharType max_char, Fn&& fn) {\n+    for (bool has_next = true; has_next; has_next = NextString(string, min_char, max_char)) {\n+        int prev = -1;\n+        bool skip_string = false;\n+        for (CharType c : string) {\n+            if (c == prev) skip_string = true;\n+            if (skip_string || c < min_char || c > max_char) break;\n+            prev = c;\n+        }\n+        if (!skip_string) fn();\n+    }\n+}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r288639762",
      "id" : 288639762,
      "in_reply_to_id" : 288245372,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI4ODYzOTc2Mg==",
      "original_commit_id" : "1d543adae593bdbfd954e80ed61ac907db0c5a7b",
      "original_position" : 35,
      "path" : "src/test/util.h",
      "position" : null,
      "pull_request_review_id" : 242871746,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/288639762",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "re-tACK https://github.com/bitcoin/bitcoin/pull/15934/commits/955c782eb776669576a798122da6557fcca8ee39 based on [the interdiff]( https://gist.github.com/jamesob/d8a458334386ab67082956e404fb704d) and running an abbreviated version of the testing above.",
      "created_at" : "2019-05-29T18:25:42Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-497054493",
      "id" : 497054493,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDQ5NzA1NDQ5Mw==",
      "updated_at" : "2019-05-29T18:25:42Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/497054493",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 955c782eb776669576a798122da6557fcca8ee39 -> 14a6dfcb929d2313577788765f7dc47dd98afbe9 ([pr/mergeset.8](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.8) -> [pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9)) due to conflict with #16278\r\n",
      "created_at" : "2019-06-27T20:49:15Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506505636",
      "id" : 506505636,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjUwNTYzNg==",
      "updated_at" : "2019-06-27T20:49:15Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506505636",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reACK https://github.com/bitcoin/bitcoin/pull/15934/commits/14a6dfcb929d2313577788765f7dc47dd98afbe9 based on [interdiff](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901). Only change since `pr/mergeset.8` is a [trivial `LogPrintf` fix](https://gist.github.com/jamesob/0b4adf37c627e6171c2599dfa95f0901#file-8-to-9-diff-L72-L73). ",
      "created_at" : "2019-06-27T21:29:17Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506518739",
      "id" : 506518739,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjUxODczOQ==",
      "updated_at" : "2019-06-27T21:29:17Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506518739",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Rebased 14a6dfcb929d2313577788765f7dc47dd98afbe9 -> d074e431b76f156e94eb7ed2601d5af4fb65c6cb ([pr/mergeset.9](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.9) -> [pr/mergeset.10](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.10)) due to conflict with #16300\r\n",
      "created_at" : "2019-06-28T16:34:41Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506797780",
      "id" : 506797780,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjc5Nzc4MA==",
      "updated_at" : "2019-06-28T16:34:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506797780",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "reACK d074e431b76f156e94eb7ed2601d5af4fb65c6cb based on [an empty interdiff](https://gist.github.com/jamesob/fea5597b189e899154e1e9a9bdca0d94).",
      "created_at" : "2019-06-28T17:34:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-506816948",
      "id" : 506816948,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUwNjgxNjk0OA==",
      "updated_at" : "2019-06-28T17:34:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/506816948",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/73197?v=4",
         "events_url" : "https://api.github.com/users/jamesob/events{/privacy}",
         "followers_url" : "https://api.github.com/users/jamesob/followers",
         "following_url" : "https://api.github.com/users/jamesob/following{/other_user}",
         "gists_url" : "https://api.github.com/users/jamesob/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/jamesob",
         "id" : 73197,
         "login" : "jamesob",
         "node_id" : "MDQ6VXNlcjczMTk3",
         "organizations_url" : "https://api.github.com/users/jamesob/orgs",
         "received_events_url" : "https://api.github.com/users/jamesob/received_events",
         "repos_url" : "https://api.github.com/users/jamesob/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/jamesob/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/jamesob"
      }
   },
   {
      "author_association" : "MEMBER",
      "body" : "Concept ACK.",
      "created_at" : "2019-07-31T10:28:09Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-516792401",
      "id" : 516792401,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNjc5MjQwMQ==",
      "updated_at" : "2019-07-31T10:28:09Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/516792401",
      "user" : {
         "avatar_url" : "https://avatars1.githubusercontent.com/u/32963518?v=4",
         "events_url" : "https://api.github.com/users/hebasto/events{/privacy}",
         "followers_url" : "https://api.github.com/users/hebasto/followers",
         "following_url" : "https://api.github.com/users/hebasto/following{/other_user}",
         "gists_url" : "https://api.github.com/users/hebasto/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/hebasto",
         "id" : 32963518,
         "login" : "hebasto",
         "node_id" : "MDQ6VXNlcjMyOTYzNTE4",
         "organizations_url" : "https://api.github.com/users/hebasto/orgs",
         "received_events_url" : "https://api.github.com/users/hebasto/received_events",
         "repos_url" : "https://api.github.com/users/hebasto/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/hebasto/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/hebasto"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-02T16:26:03Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-517763550",
      "id" : 517763550,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUxNzc2MzU1MA==",
      "updated_at" : "2019-08-02T16:26:03Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517763550",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-08-22T14:09:05Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-523922734",
      "id" : 523922734,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyMzkyMjczNA==",
      "updated_at" : "2019-08-22T14:09:05Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/523922734",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-09-10T11:33:47Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-529893884",
      "id" : 529893884,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDUyOTg5Mzg4NA==",
      "updated_at" : "2019-09-10T11:33:47Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529893884",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
      "created_at" : "2019-10-16T22:38:34Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-542920094",
      "id" : 542920094,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MjkyMDA5NA==",
      "updated_at" : "2019-10-16T22:38:34Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/542920094",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/39886733?v=4",
         "events_url" : "https://api.github.com/users/DrahtBot/events{/privacy}",
         "followers_url" : "https://api.github.com/users/DrahtBot/followers",
         "following_url" : "https://api.github.com/users/DrahtBot/following{/other_user}",
         "gists_url" : "https://api.github.com/users/DrahtBot/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/DrahtBot",
         "id" : 39886733,
         "login" : "DrahtBot",
         "node_id" : "MDQ6VXNlcjM5ODg2NzMz",
         "organizations_url" : "https://api.github.com/users/DrahtBot/orgs",
         "received_events_url" : "https://api.github.com/users/DrahtBot/received_events",
         "repos_url" : "https://api.github.com/users/DrahtBot/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/DrahtBot/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/DrahtBot"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335797249"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335797249"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Also key-value or array as requirements ? I suppose any other variant type should be easy to use with basic types..",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T03:36:29Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335797249",
      "id" : 335797249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5NzI0OQ==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 16,
      "path" : "src/util/settings.h",
      "position" : 16,
      "pull_request_review_id" : 302987362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335797249",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798172"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798172"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "what's top-level section of the config file ? The non-network one?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T03:42:08Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798172",
      "id" : 335798172,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5ODE3Mg==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 34,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 302987362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798172",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798710"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T03:45:37Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710",
      "id" : 335798710,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5ODcxMA==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 42,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 302987362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335798710",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335799539"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335799539"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: find \"value is not set\" better than \"has ignored config value\"",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T03:50:28Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if has ignored config value in the default section.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335799539",
      "id" : 335799539,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTc5OTUzOQ==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 44,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 302987362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335799539",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335802270"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335802270"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: any reason why you don't dereference compare to others?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T04:08:17Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335802270",
      "id" : 335802270,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTgwMjI3MA==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 27,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 302987362,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335802270",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335948647"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335948647"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time\r\n\r\nSure, will rename.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T11:23:02Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335948647",
      "id" : 335948647,
      "in_reply_to_id" : 335798710,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk0ODY0Nw==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 42,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 303182364,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335948647",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335949720"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335949720"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "These definitely aren't not requirements of the type right now. There is no syntax for these things. Maybe this would be useful in the future for something like per-wallet settings (different preferences, RPC authentication setting), and I guess this is a little easier now, but otherwise the PR is neutral on this.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T11:25:54Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335949720",
      "id" : 335949720,
      "in_reply_to_id" : 335797249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk0OTcyMA==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 16,
      "path" : "src/util/settings.h",
      "position" : 16,
      "pull_request_review_id" : 303182364,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335949720",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335950228"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335950228"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> nit: any reason why you don't dereference compare to others?\r\n\r\nAll three settings sources (forced_settings, command_line_options, ro_config) are different types, so there's not much reason to expect SettingsSpan construction to be the same for all of them:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f/src/util/settings.h#L25-L29\r\n\r\nBut I think the only reason for passing a pointer was to save a line of code and not add a fourth SettingsSpan constructor. I think I will go back and add this, though, since I think it's generally better to pass by reference not pointer when the argument can't be null.\r\n",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T11:27:22Z",
      "diff_hunk" : "@@ -0,0 +1,157 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(value)).SetForced());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335950228",
      "id" : 335950228,
      "in_reply_to_id" : 335802270,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk1MDIyOA==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 27,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 303184636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335950228",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951015"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951015"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> what's top-level section of the config file ? The non-network one?\r\n\r\nYes, literally the top of the config file before a `[section]` delimiter. I don't really like the term non-network settings because the section can contain network related settings that will be used on mainnet.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T11:29:28Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951015",
      "id" : 335951015,
      "in_reply_to_id" : 335798172,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk1MTAxNQ==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 34,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 303184636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951015",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951722"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951722"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> nit: find \"value is not set\" better than \"has ignored config value\"\r\n\r\nI'm not sure \"value is not set\" is better. A value is set by the user, it's just not applied due to the current network. Will expand command though.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-17T11:31:31Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if has ignored config value in the default section.",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335951722",
      "id" : 335951722,
      "in_reply_to_id" : 335799539,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNTk1MTcyMg==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 44,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 303184636,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/335951722",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 61e034f1f6b3beeeed51ef8aaf7762f9244a7c8f -> 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f ([pr/mergeset.15](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.15) -> [pr/mergeset.16](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.15..pr/mergeset.16)) just updating some comments discussed above and passing by reference instead of pointer to a span constructor\r\n",
      "created_at" : "2019-10-18T16:02:04Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-543811060",
      "id" : 543811060,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0MzgxMTA2MA==",
      "updated_at" : "2019-10-18T16:02:04Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/543811060",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337691812"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337691812"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> I suppose any other variant type should be easy to use with basic types..\r\n\r\nI think `boost::variant` would be an inferior choice, but just as an experiment I tried dropping it in here with some helper methods to make it work without changes to other code:\r\n\r\n```c++\r\nstruct SettingsValue : public boost::variant<std::nullptr_t, bool, int64_t, std::string>\r\n{\r\n    using variant::variant;\r\n    template<typename T> const T* ptr() const { return boost::get<T>(this); }\r\n    bool isNull() const { return ptr<std::nullptr_t>(); }\r\n    bool isBool() const { return ptr<bool>(); }\r\n    bool isNum() const { return ptr<int64_t>(); }\r\n    bool isFalse() const { return ptr<bool>() && !*ptr<bool>(); }\r\n    bool isTrue() const { return ptr<bool>() && *ptr<bool>(); }\r\n    const std::string& get_str() const { return *ptr<std::string>(); }\r\n    const bool& get_bool() const { return *ptr<bool>(); }\r\n    const int64_t& get_int64() const { return *ptr<int64_t>(); }\r\n};\r\n```\r\n\r\nThis was sufficient for everything except `settings_test.cpp` (which uses serialization), so it confirms `SettingsValue` only requires storing ints, bools, strings and nulls, and the choice of type isn't very important.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-22T18:52:46Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337691812",
      "id" : 337691812,
      "in_reply_to_id" : 335797249,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzY5MTgxMg==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 16,
      "path" : "src/util/settings.h",
      "position" : 16,
      "pull_request_review_id" : 305433006,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337691812",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337809469"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Just to be sure the `IsArgNegated` is preserved here in `GetListSetting` via `source.span.negated() > 0` ?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T00:49:50Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469",
      "id" : 337809469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzgwOTQ2OQ==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 308,
      "path" : "src/util/system.cpp",
      "position" : 308,
      "pull_request_review_id" : 305582886,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337809469",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337810134"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "Hmmm I can't get from where this behavior is extracted ?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T00:53:56Z",
      "diff_hunk" : "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134",
      "id" : 337810134,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzgxMDEzNA==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 251,
      "path" : "src/util/system.cpp",
      "position" : 251,
      "pull_request_review_id" : 305582886,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337810134",
      "user" : {
         "avatar_url" : "https://avatars3.githubusercontent.com/u/23310655?v=4",
         "events_url" : "https://api.github.com/users/ariard/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ariard/followers",
         "following_url" : "https://api.github.com/users/ariard/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ariard/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ariard",
         "id" : 23310655,
         "login" : "ariard",
         "node_id" : "MDQ6VXNlcjIzMzEwNjU1",
         "organizations_url" : "https://api.github.com/users/ariard/orgs",
         "received_events_url" : "https://api.github.com/users/ariard/received_events",
         "repos_url" : "https://api.github.com/users/ariard/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ariard/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ariard/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ariard"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927662"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927662"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337810134\r\n\r\n> Hmmm I can't get from where this behavior is extracted ?\r\n\r\nThis behavior makes no sense and was never intended, so it's buried away in current code. It happens because of the following code in `ArgsManager::ParseParameters`:\r\n\r\nhttps://github.com/bitcoin/bitcoin/blob/9dd6bbba613d7462afdb6276c4002bc183478528/src/util/system.cpp#L411-L420\r\n\r\nA section `section.name` command line setting here will fail to trigger the \"Invalid parameter\" error because `FlagsOfKnownArg` strips out the `section.` prefix and finds that `name` is a known setting. But `InterpretOption` fails to strip out the `section.` prefix and stores the setting in the `m_override_args` map under `section.name` instead of `name`, where it is ignored and never has any effect.\r\n\r\nThe new code improves this by documenting the behavior and making it easy to change in the future. It also avoids bugs like this by splitting the `section.name` string exactly once in `InterpretOption` instead of many different places and times.\r\n\r\n",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T09:00:19Z",
      "diff_hunk" : "@@ -399,49 +312,43 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n+        key.erase(0, 1);\n+        std::string section;\n+        util::SettingsValue value = InterpretOption(section, key, val);\n         const unsigned int flags = FlagsOfKnownArg(key);\n         if (flags) {\n-            if (!InterpretOption(key, val, flags, m_override_args, error)) {\n+            if (!CheckValid(key, value, flags, error)) {\n                 return false;\n             }\n+            // Weird behavior preserved for backwards compatibility: command\n+            // line options with section prefixes are allowed but ignored. It\n+            // would be better if these options triggered the Invalid parameter\n+            // error below.\n+            if (section.empty()) {",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927662",
      "id" : 337927662,
      "in_reply_to_id" : 337810134,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzkyNzY2Mg==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 251,
      "path" : "src/util/system.cpp",
      "position" : 251,
      "pull_request_review_id" : 305733423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927662",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927735"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927735"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337809469\r\n\r\n> Just to be sure the `IsArgNegated` is preserved here in `GetListSetting` via `source.span.negated() > 0` ?\r\n\r\nIt's handled implicitly by `for (const auto& value : source.span)` in `GetListSetting`, because the `SettingsSpan` iterator skips negated values in its `begin()` method.\r\n\r\nThe `source.span.negated() > 0` check you're referring is used after that to set the `result_complete` variable, which is used to apply settings precedence\r\n`command_line_options` > `rw_settings` > `ro_config`, and make sure for example that a negation on the command line will clear out any lower priority settings in `ro_config` and `rw_settings`. I'll add a comment to say this explicitly on the result_complete line.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T09:00:29Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927735",
      "id" : 337927735,
      "in_reply_to_id" : 337809469,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzkyNzczNQ==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 308,
      "path" : "src/util/system.cpp",
      "position" : 308,
      "pull_request_review_id" : 305733423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927735",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927946"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927946"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r335798710\r\n\r\n> > nit: `GetSettingAllOccurence`?, given name was expecting to query multiple settings at same time\r\n> \r\n> Sure, will rename.\r\n\r\nForgot to do this last time. I think I'll use `GetSetting` for single valued settings and `GetSettingsList` for many valued settings. I'd like to keep using the word \"list\" here to be consistent with #16545 which also uses it with `TYPE_STRING_LIST` as one of the settings types.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T09:00:59Z",
      "diff_hunk" : "@@ -0,0 +1,72 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    std::map<std::string, SettingsValue> forced_settings;\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top-level\n+//!                                        section of the config file.\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetListSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r337927946",
      "id" : 337927946,
      "in_reply_to_id" : 335798710,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNzkyNzk0Ng==",
      "original_commit_id" : "a058191db3c897a6bc45325e8ee5025d9a704b53",
      "original_position" : 42,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 305733423,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/337927946",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338113304"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338113304"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: I find this a bit hard to read, would rather add a few more lines than have a nested ternary statement",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T15:17:19Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338113304",
      "id" : 338113304,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExMzMwNA==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 319,
      "path" : "src/util/system.cpp",
      "position" : 319,
      "pull_request_review_id" : 305976230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338113304",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114628"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114628"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: would not use nested ternary for readability",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T15:19:39Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114628",
      "id" : 338114628,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExNDYyOA==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 362,
      "path" : "src/util/system.cpp",
      "position" : 362,
      "pull_request_review_id" : 305976230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114628",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114696"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114696"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: would not use nested ternary for readability",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T15:19:47Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114696",
      "id" : 338114696,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExNDY5Ng==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 372,
      "path" : "src/util/system.cpp",
      "position" : 372,
      "pull_request_review_id" : 305976230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114696",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114787"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114787"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "nit: would not use nested ternary for readability",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T15:19:57Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n     }\n-\n-    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n-    }\n-\n     return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    if (IsArgNegated(strArg)) return true; // special case\n-    return ArgsManagerHelper::GetArg(*this, strArg).first;\n+    return !ArgsManagerHelper::Get(*this, strArg).isNull();\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-\n-    const auto& ov = m_override_args.find(strArg);\n-    if (ov != m_override_args.end()) return ov->second.empty();\n-\n-    if (!m_network.empty()) {\n-        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n-        if (cfs != m_config_args.end()) return cfs->second.empty();\n-    }\n-\n-    const auto& cf = m_config_args.find(strArg);\n-    if (cf != m_config_args.end()) return cf->second.empty();\n-\n-    return false;\n+    return ArgsManagerHelper::Get(*this, strArg).isFalse();\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    if (IsArgNegated(strArg)) return \"0\";\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return found_res.second;\n-    return strDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? strDefault : value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str();\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    if (IsArgNegated(strArg)) return 0;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return atoi64(found_res.second);\n-    return nDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? nDefault : value.isFalse() ? 0 : value.isTrue() ? 1 : value.isNum() ? value.get_int64() : atoi64(value.get_str());\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    if (IsArgNegated(strArg)) return false;\n-    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n-    if (found_res.first) return InterpretBool(found_res.second);\n-    return fDefault;\n+    util::SettingsValue value = ArgsManagerHelper::Get(*this, strArg);\n+    return value.isNull() ? fDefault : value.isBool() ? value.get_bool() : InterpretBool(value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338114787",
      "id" : 338114787,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODExNDc4Nw==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 382,
      "path" : "src/util/system.cpp",
      "position" : 382,
      "pull_request_review_id" : 305976230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338114787",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338157029"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338157029"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "On second thought: since these nested ternary one-liners are repeated multiple times, I would suggest a helper method that converts `value` to whatever gets pushed into `result`",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T16:39:01Z",
      "diff_hunk" : "@@ -451,69 +358,42 @@ unsigned int ArgsManager::FlagsOfKnownArg(const std::string& key) const\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n-    std::vector<std::string> result = {};\n-    if (IsArgNegated(strArg)) return result; // special case\n-\n     LOCK(cs_args);\n-\n-    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n-    if (!m_network.empty()) {\n-        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    bool ignore_default_section_config = !ArgsManagerHelper::UseDefaultSection(*this, strArg);\n+    std::vector<std::string> result;\n+    for (const util::SettingsValue& value :\n+        util::GetListSetting(m_settings, m_network, SettingName(strArg), ignore_default_section_config)) {\n+        result.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338157029",
      "id" : 338157029,
      "in_reply_to_id" : 338113304,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE1NzAyOQ==",
      "original_commit_id" : "7514eba3bfb8a932b5eedc551648793aec3f41b4",
      "original_position" : 319,
      "path" : "src/util/system.cpp",
      "position" : 319,
      "pull_request_review_id" : 305976230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338157029",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338179393"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338179393"
         }
      },
      "author_association" : "NONE",
      "body" : "**const** bool would help here, it actually too a wile to see that it is not changed throughout this function.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:26:36Z",
      "diff_hunk" : "@@ -156,19 +157,58 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n \n struct TestArgsManager : public ArgsManager\n {\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+\n     TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error) {\n+        bool result = ArgsManager::ParseParameters(argc, argv, error);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338179393",
      "id" : 338179393,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE3OTM5Mw==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 19,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 306061520,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338179393",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338180105"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338180105"
         }
      },
      "author_association" : "NONE",
      "body" : "could be `const std::string`",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:28:06Z",
      "diff_hunk" : "@@ -156,19 +157,58 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n \n struct TestArgsManager : public ArgsManager\n {\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n+\n     TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n+    bool ParseParameters(int argc, const char* const argv[], std::string& error) {\n+        bool result = ArgsManager::ParseParameters(argc, argv, error);\n+        LOCK(cs_args);\n+        m_override_args.clear();\n+        for (const auto& option : m_settings.command_line_options) {\n+            auto& args = m_override_args[\"-\" + option.first];\n+            for (const auto& value : util::SettingsSpan(option.second)) {\n+                args.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+            }\n+        }\n+        return result;\n+    }\n     void ReadConfigString(const std::string str_config)\n     {\n         std::istringstream streamConfig(str_config);\n         {\n             LOCK(cs_args);\n-            m_config_args.clear();\n+            m_settings.ro_config.clear();\n             m_config_sections.clear();\n         }\n         std::string error;\n         BOOST_REQUIRE(ReadConfigStream(streamConfig, \"\", error));\n+        LOCK(cs_args);\n+        m_config_args.clear();\n+        for (const auto& section : m_settings.ro_config) {\n+            for (const auto& setting : section.second) {\n+                auto& args = m_config_args[\"-\" + (section.first.empty() ? \"\" : section.first + \".\") + setting.first];\n+                for (const auto& value : util::SettingsSpan(setting.second)) {\n+                    args.push_back(value.isFalse() ? \"0\" : value.isTrue() ? \"1\" : value.get_str());\n+                }\n+            }\n+        }\n+    }\n+    void UpdateSettings()\n+    {\n+        LOCK(cs_args);\n+        for (const auto* args : {&m_override_args, &m_config_args}) {\n+            for (const auto& arg : *args) {\n+                std::string name = arg.first[0] == '-' ? arg.first.substr(1) : arg.first;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338180105",
      "id" : 338180105,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MDEwNQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 57,
      "path" : "src/test/util_tests.cpp",
      "position" : null,
      "pull_request_review_id" : 306062447,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338180105",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181221"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181221"
         }
      },
      "author_association" : "NONE",
      "body" : "`noexcept`?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:30:24Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181221",
      "id" : 338181221,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MTIyMQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 19,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 306063858,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181221",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181466"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181466"
         }
      },
      "author_association" : "NONE",
      "body" : "could be `noexcept`",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:30:54Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338181466",
      "id" : 338181466,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MTQ2Ng==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 20,
      "path" : "src/util/settings.cpp",
      "position" : null,
      "pull_request_review_id" : 306064180,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338181466",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "Updated 40593ecc0bc48b22054da73eb4bdf1b3aeaedd4f -> 8ca6338e994000c82c813721c85ebafd61250641 ([pr/mergeset.16](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.16) -> [pr/mergeset.17](https://github.com/ryanofsky/bitcoin/commits/pr/mergeset.17), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.16..pr/mergeset.17)) with minor cleanups\r\n\r\nSorry for the churn. Only changes were the comments and cleanups I promised Antoine this morning",
      "created_at" : "2019-10-23T17:32:07Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545553236",
      "id" : 545553236,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTU1MzIzNg==",
      "updated_at" : "2019-10-23T17:32:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545553236",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338183326"
         }
      },
      "author_association" : "NONE",
      "body" : "Consider marking as `const` and applying [ES.28: Use lambdas for complex initialization, especially of const variables](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es28-use-lambdas-for-complex-initialization-especially-of-const-variables). That re-assignment `span = SettingsSpan(*values);` is rather \"hidden\".",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:35:02Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326",
      "id" : 338183326,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4MzMyNg==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 39,
      "path" : "src/util/settings.cpp",
      "position" : 39,
      "pull_request_review_id" : 306066691,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338183326",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338185316"
         }
      },
      "author_association" : "NONE",
      "body" : "This looks redundant. `result` is always null here, I don't see where it can be changed above. ~~All this could be rewritten as a `return <something>` instead of changing via lambda capturer reference...~~",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:39:23Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316",
      "id" : 338185316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4NTMxNg==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 83,
      "path" : "src/util/settings.cpp",
      "position" : 83,
      "pull_request_review_id" : 306069334,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338185316",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338187185"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338187185"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338185316\r\n\r\n> This looks redundant. `result` is always null here, I don't see where it can be changed above. All this could be rewritten as a `return <something>` instead of changing via lambda capturer reference...\r\n\r\nI can maybe change the comment above to clarify, but `return` here is what keeps lower priority values from overwriting higher priority values. Bear in mind this is a lambda called repeatedly, one time for each setting source.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:43:07Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338187185",
      "id" : 338187185,
      "in_reply_to_id" : 338185316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4NzE4NQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 83,
      "path" : "src/util/settings.cpp",
      "position" : 83,
      "pull_request_review_id" : 306071748,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T20:14:41Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338187185",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338189741"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338189741"
         }
      },
      "author_association" : "NONE",
      "body" : "`end()` could be `noexcept`, not sure about all these other trivial functions (with regards to `isFalse()` via `negated()`).",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:48:04Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;\n+\n+        if (!source.span.empty()) {\n+            result = reverse_precedence ? source.span.begin()[0] : source.span.end()[-1];\n+        } else if (source.span.last_negated()) {\n+            result = false;\n+        }\n+    });\n+    return result;\n+}\n+\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config)\n+{\n+    std::vector<SettingsValue> result;\n+    bool result_complete = false;\n+    bool prev_negated_empty = false;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply config\n+        // file settings even if negated on command line. Negating a setting on\n+        // command line will discard earlier settings on the command line and\n+        // settings in the config file, unless the negated command line value is\n+        // followed by non-negated value, in which case config file settings\n+        // will be brought back from the dead (but earlier command line settings\n+        // will still be discarded).\n+        const bool add_zombie_config_values = source.config_file && !prev_negated_empty;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level) return;\n+\n+        // Add new settings to the result if isn't already complete, or if the\n+        // values are zombies.\n+        if (!result_complete || add_zombie_config_values) {\n+            for (const auto& value : source.span) {\n+                if (value.isArray()) {\n+                    result.insert(result.end(), value.getValues().begin(), value.getValues().end());\n+                } else {\n+                    result.push_back(value);\n+                }\n+            }\n+        }\n+\n+        // If a setting was negated, or if a setting was forced, set\n+        // result_complete to true to ignore any later lower priority settings.\n+        result_complete |= source.span.negated() > 0 || source.forced;\n+\n+        // Update the negated and empty state used for the zombie values check.\n+        prev_negated_empty |= source.span.last_negated() && result.empty();\n+    });\n+    return result;\n+}\n+\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name)\n+{\n+    bool has_ignored = true;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // If top-level config value is unset, or any other value is set,\n+        // then no top-level setting is being ignored.\n+        has_ignored &= source.config_file_top_level ? !source.span.empty() : source.span.empty();\n+    });\n+    return has_ignored;\n+}\n+\n+SettingsSpan::SettingsSpan(const std::vector<SettingsValue>& vec) : SettingsSpan(vec.data(), vec.size()) {}\n+const SettingsValue* SettingsSpan::begin() const { return data + negated(); }\n+const SettingsValue* SettingsSpan::end() const { return data + size; }",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338189741",
      "id" : 338189741,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE4OTc0MQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 150,
      "path" : "src/util/settings.cpp",
      "position" : 150,
      "pull_request_review_id" : 306074977,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338189741",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338190405"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338190405"
         }
      },
      "author_association" : "NONE",
      "body" : "`noexcept`",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:49:19Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338190405",
      "id" : 338190405,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MDQwNQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 58,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306075861,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338190405",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191106"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191106"
         }
      },
      "author_association" : "NONE",
      "body" : "explcit? noexcept?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:50:37Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);\n+    SettingsSpan(const SettingsValue& value) : SettingsSpan(&value, 1) {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191106",
      "id" : 338191106,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MTEwNg==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 60,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306076715,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191106",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191129"
         }
      },
      "author_association" : "NONE",
      "body" : "Missing `exclicit`? Do we really need to support `SettigsSpan s = std::vec...` ?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:50:39Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129",
      "id" : 338191129,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MTEyOQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 59,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306076741,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191129",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191554"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191554"
         }
      },
      "author_association" : "NONE",
      "body" : "maybe just `= default` ?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:51:25Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);\n+    SettingsSpan(const SettingsValue& value) : SettingsSpan(&value, 1) {}\n+    SettingsSpan() {}",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191554",
      "id" : 338191554,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5MTU1NA==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 61,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306077230,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338191554",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338194723"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338194723"
         }
      },
      "author_association" : "NONE",
      "body" : "`const auto it` as `it` is not changed later. \r\n\r\nP.S. really sorry for not using \"Review Changes\" feature. I've been informed that these \"add single comment\" spams the notification channel... Will do better next time.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T17:57:30Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);\n+    SettingsSpan(const SettingsValue& value) : SettingsSpan(&value, 1) {}\n+    SettingsSpan() {}\n+    const SettingsValue* begin() const; //<! Pointer to first non-negated value.\n+    const SettingsValue* end() const;   //<! Pointer to end of values.\n+    bool empty() const;                 //<! True if there are any non-negated values.\n+    bool last_negated() const;          //<! True if the last value is negated.\n+    size_t negated() const;             //<! Number of negated values.\n+\n+    const SettingsValue* data = nullptr;\n+    size_t size = 0;\n+};\n+\n+//! Map lookup helper.\n+template <typename Map, typename Key>\n+auto FindKey(Map&& map, Key&& key) -> decltype(&map.at(key))\n+{\n+    auto it = map.find(key);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338194723",
      "id" : 338194723,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODE5NDcyMw==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 76,
      "path" : "src/util/settings.h",
      "position" : 76,
      "pull_request_review_id" : 306081209,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T19:35:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338194723",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338210952"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338210952"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338183326\r\n\r\n> Consider marking as `const` and applying [ES.28: Use lambdas for complex initialization, especially of const variables](https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es28-use-lambdas-for-complex-initialization-especially-of-const-variables). That re-assignment `span = SettingsSpan(*values);` is rather \"hidden\".\r\n\r\nIt can definitely be confusing when a non-const variable has a long lifetime and its value changes over a complicated function. But the `span` variable here is constructed, assigned, used, and destroyed all in about 5 lines of code, so using an initialization lambda would seem make overall flow more complicated instead of less.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T18:31:09Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338210952",
      "id" : 338210952,
      "in_reply_to_id" : 338183326,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIxMDk1Mg==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 39,
      "path" : "src/util/settings.cpp",
      "position" : 39,
      "pull_request_review_id" : 306102327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T20:14:19Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338210952",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338217848"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338217848"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "> Do we really need to support `SettigsSpan s = std::vec...` ?\r\n\r\nWe don't really need it because the data / size constructor could be called instead but having this makes code in system.cpp less verbose and I'm not sure what the preferred alternative would be: Calling .data() and .size() manually? Helper function to call .data() and .size()? Template constructor that calls .data() and .size() without referencing std::vector?",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-23T18:45:44Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338217848",
      "id" : 338217848,
      "in_reply_to_id" : 338191129,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODIxNzg0OA==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 59,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306102327,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-23T20:12:07Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338217848",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   },
   {
      "author_association" : "CONTRIBUTOR",
      "body" : "ACK 86aff9bda31c9d60cc477700da4600ad5930bcda\r\n\r\nConfirmed that diff is only fixing nits as discussed in reviews. Re-ran tests. Some manual testing.",
      "created_at" : "2019-10-23T23:17:13Z",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#issuecomment-545675250",
      "id" : 545675250,
      "issue_url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/15934",
      "node_id" : "MDEyOklzc3VlQ29tbWVudDU0NTY3NTI1MA==",
      "updated_at" : "2019-10-23T23:17:13Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545675250",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/1322187?v=4",
         "events_url" : "https://api.github.com/users/fjahr/events{/privacy}",
         "followers_url" : "https://api.github.com/users/fjahr/followers",
         "following_url" : "https://api.github.com/users/fjahr/following{/other_user}",
         "gists_url" : "https://api.github.com/users/fjahr/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/fjahr",
         "id" : 1322187,
         "login" : "fjahr",
         "node_id" : "MDQ6VXNlcjEzMjIxODc=",
         "organizations_url" : "https://api.github.com/users/fjahr/orgs",
         "received_events_url" : "https://api.github.com/users/fjahr/received_events",
         "repos_url" : "https://api.github.com/users/fjahr/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/fjahr/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/fjahr"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338388982"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338388982"
         }
      },
      "author_association" : "NONE",
      "body" : "Oh no, I do not suggest to remove this helper constructor, maybe just adding `explicit` for that constructor. Currently it implicilty-converts from std::vecotor:\r\n```\r\n//...\r\nDoSomething(const SettingsSpan& span);\r\n//...\r\nstd::vector<SettingsValue>& vec;\r\nDoSomething(vec); // implicilty conerts to SettingsSpan, kinda \"sneaky\".\r\n```\r\nWith `explicit` constructor:\r\n```\r\nDoSomething(SettingsValue{vec}); // we see that we pass SettngsValue, not \"just\" a vector\r\n```\r\n\r\nAlthough looking at `std::span` implementations, these constructors are also implicit there, so I guess you can ignore this comment.\r\n\r\n",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-24T05:40:14Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338388982",
      "id" : 338388982,
      "in_reply_to_id" : 338191129,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODM4ODk4Mg==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 59,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306329017,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-24T05:40:14Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338388982",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338389531"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338389531"
         }
      },
      "author_association" : "NONE",
      "body" : "Yep, I've missed that fact that lambda is called multiple times, thanks for clarification. So this comment is moot.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-24T05:42:54Z",
      "diff_hunk" : "@@ -0,0 +1,161 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/settings.h>\n+\n+#include <univalue.h>\n+\n+namespace util {\n+namespace {\n+\n+struct Source {\n+    SettingsSpan span;\n+    bool forced = false;\n+    bool config_file = false;\n+    bool config_file_top_level = false;\n+\n+    Source(SettingsSpan span) : span(span) {}\n+    Source& SetForced() { forced = true; return *this; }\n+    Source& SetConfigFile(bool top_level) { config_file = true; config_file_top_level = top_level; return *this; }\n+};\n+\n+template <typename Fn>\n+static void MergeSettings(const Settings& settings, const std::string& section, const std::string& name, Fn&& fn)\n+{\n+    if (auto* value = FindKey(settings.forced_settings, name)) {\n+        fn(Source(SettingsSpan(*value)).SetForced());\n+    }\n+    if (auto* values = FindKey(settings.command_line_options, name)) {\n+        fn(Source(SettingsSpan(*values)));\n+    }\n+    if (!section.empty()) {\n+        if (auto* map = FindKey(settings.ro_config, section)) {\n+            if (auto* values = FindKey(*map, name)) {\n+                fn(Source(SettingsSpan(*values)).SetConfigFile(/* top_level= */ false));\n+            }\n+        }\n+    }\n+    SettingsSpan span;\n+    if (auto* map = FindKey(settings.ro_config, \"\")) {\n+        if (auto* values = FindKey(*map, name)) {\n+            span = SettingsSpan(*values);\n+        }\n+    }\n+    fn(Source(span).SetConfigFile(/* top_level= */ true));\n+}\n+} // namespace\n+\n+SettingsValue GetSetting(const Settings& settings,\n+    const std::string& section,\n+    const std::string& name,\n+    bool ignore_default_section_config,\n+    bool get_chain_name)\n+{\n+    SettingsValue result;\n+    MergeSettings(settings, section, name, [&](Source source) {\n+        // Weird behavior preserved for backwards compatibility: Apply negated\n+        // setting in otherwise ignored sections. A negated value in the top\n+        // level section is applied to network specific options, even though\n+        // non-negated values there would be ignored.\n+        const bool never_ignore_negated_setting = source.span.last_negated();\n+\n+        // Weird behavior preserved for backwards compatibility: Take first\n+        // assigned value instead of last. In general, later settings take\n+        // precedence over early settings, but for backwards compatibility in\n+        // the config file the precedence is reversed for most settings.\n+        const bool reverse_precedence = source.config_file && !get_chain_name;\n+\n+        // Weird behavior preserved for backwards compatibility: Negated\n+        // -regtest and -testnet arguments which you would expect to override\n+        // values set in the configuration file are currently accepted but\n+        // silently ignored. It would be better to apply these just like other\n+        // negated values, or at least warn they are ignored.\n+        const bool skip_negated_command_line = get_chain_name;\n+\n+        // Ignore settings in top-level config section if requested.\n+        if (ignore_default_section_config && source.config_file_top_level && !never_ignore_negated_setting) return;\n+\n+        // Skip negated command line settings.\n+        if (skip_negated_command_line && source.span.last_negated()) return;\n+\n+        // Stick with highest priority value, keeping result if already set.\n+        if (!result.isNull()) return;",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338389531",
      "id" : 338389531,
      "in_reply_to_id" : 338185316,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODM4OTUzMQ==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 83,
      "path" : "src/util/settings.cpp",
      "position" : 83,
      "pull_request_review_id" : 306329661,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-24T05:42:54Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338389531",
      "user" : {
         "avatar_url" : "https://avatars0.githubusercontent.com/u/292191?v=4",
         "events_url" : "https://api.github.com/users/Talkless/events{/privacy}",
         "followers_url" : "https://api.github.com/users/Talkless/followers",
         "following_url" : "https://api.github.com/users/Talkless/following{/other_user}",
         "gists_url" : "https://api.github.com/users/Talkless/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/Talkless",
         "id" : 292191,
         "login" : "Talkless",
         "node_id" : "MDQ6VXNlcjI5MjE5MQ==",
         "organizations_url" : "https://api.github.com/users/Talkless/orgs",
         "received_events_url" : "https://api.github.com/users/Talkless/received_events",
         "repos_url" : "https://api.github.com/users/Talkless/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/Talkless/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/Talkless/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/Talkless"
      }
   },
   {
      "_links" : {
         "html" : {
            "href" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338460044"
         },
         "pull_request" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934"
         },
         "self" : {
            "href" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338460044"
         }
      },
      "author_association" : "CONTRIBUTOR",
      "body" : "re: https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338191129\r\n\r\n> Although looking at `std::span` implementations, these constructors are also implicit there, so I guess you can ignore this comment.\r\n\r\nYes, it's a perfectly safe conversion that doesn't create ownership or performance issues, and in case of `std::span` reduces noise and boilerplate in code. But in any case I updated this PR to use explicit here the other day based on your feedback (https://github.com/ryanofsky/bitcoin/compare/pr/mergeset.17..pr/mergeset.18) and I think it's an improvement.",
      "commit_id" : "86aff9bda31c9d60cc477700da4600ad5930bcda",
      "created_at" : "2019-10-24T09:02:34Z",
      "diff_hunk" : "@@ -0,0 +1,82 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_SETTINGS_H\n+#define BITCOIN_UTIL_SETTINGS_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+class UniValue;\n+\n+namespace util {\n+\n+//! Settings value type (string/integer/boolean/null variant).\n+//!\n+//! @note UniValue is used here for convenience and because it can be easily\n+//!       serialized in a readable format. But any other variant type could be\n+//!       substituted if there's a need to move away from UniValue.\n+using SettingsValue = UniValue;\n+\n+//! Stored bitcoin settings. This struct combines settings from the command line\n+//! and a read-only configuration file.\n+struct Settings {\n+    //! Map of setting name to forced setting value.\n+    std::map<std::string, SettingsValue> forced_settings;\n+    //! Map of setting name to list of command line values.\n+    std::map<std::string, std::vector<SettingsValue>> command_line_options;\n+    //! Map of config section name and setting name to list of config file values.\n+    std::map<std::string, std::map<std::string, std::vector<SettingsValue>>> ro_config;\n+};\n+\n+//! Get settings value from combined sources: forced settings, command line\n+//! arguments and the read-only config file.\n+//!\n+//! @param ignore_default_section_config - ignore values set in the top section\n+//!                                        of the config file (default section\n+//!                                        before any [section] keywords)\n+//! @param get_chain_name - enable special backwards compatible behavior\n+//!                         for GetChainName\n+SettingsValue GetSetting(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config, bool get_chain_name);\n+\n+//! Get combined setting value similar to GetSetting(), except if setting was\n+//! specified multiple times, return a list of all the values specified.\n+std::vector<SettingsValue> GetSettingsList(const Settings& settings, const std::string& section, const std::string& name, bool ignore_default_section_config);\n+\n+//! Return true if there is a config value in the default section that would be\n+//! ignored when the `ignore_default_section_config` is true, and is not\n+//! overridden by a more specific command-line or network specific value.\n+//!\n+//! This is used to provide user warnings about values that might be getting\n+//! ignored unintentionally.\n+bool HasIgnoredDefaultSectionConfigValue(const Settings& settings, const std::string& section, const std::string& name);\n+\n+//! Iterable list of settings that skips negated values.\n+struct SettingsSpan {\n+    SettingsSpan(const SettingsValue* data, size_t size) : data(data), size(size) {}\n+    SettingsSpan(const std::vector<SettingsValue>& vec);",
      "html_url" : "https://github.com/bitcoin/bitcoin/pull/15934#discussion_r338460044",
      "id" : 338460044,
      "in_reply_to_id" : 338191129,
      "node_id" : "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzODQ2MDA0NA==",
      "original_commit_id" : "8ca6338e994000c82c813721c85ebafd61250641",
      "original_position" : 59,
      "path" : "src/util/settings.h",
      "position" : null,
      "pull_request_review_id" : 306420752,
      "pull_request_url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/15934",
      "updated_at" : "2019-10-24T09:02:35Z",
      "url" : "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/338460044",
      "user" : {
         "avatar_url" : "https://avatars2.githubusercontent.com/u/7133040?v=4",
         "events_url" : "https://api.github.com/users/ryanofsky/events{/privacy}",
         "followers_url" : "https://api.github.com/users/ryanofsky/followers",
         "following_url" : "https://api.github.com/users/ryanofsky/following{/other_user}",
         "gists_url" : "https://api.github.com/users/ryanofsky/gists{/gist_id}",
         "gravatar_id" : "",
         "html_url" : "https://github.com/ryanofsky",
         "id" : 7133040,
         "login" : "ryanofsky",
         "node_id" : "MDQ6VXNlcjcxMzMwNDA=",
         "organizations_url" : "https://api.github.com/users/ryanofsky/orgs",
         "received_events_url" : "https://api.github.com/users/ryanofsky/received_events",
         "repos_url" : "https://api.github.com/users/ryanofsky/repos",
         "site_admin" : false,
         "starred_url" : "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
         "subscriptions_url" : "https://api.github.com/users/ryanofsky/subscriptions",
         "type" : "User",
         "url" : "https://api.github.com/users/ryanofsky"
      }
   }
]
